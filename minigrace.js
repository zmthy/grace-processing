function gracecode_ast() {
  lineNumber = 2
  lineNumber = 1
  var var_kwyj1 = new GraceNum(1);
var func0 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  return var_kwyj1
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["kwyj1"] = func0;
var func1 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_kwyj1 = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["kwyj1:="] = func1;
  lineNumber = 3
  lineNumber = 2
  var var_kwyj2 = new GraceNum(2);
  lineNumber = 1
var func2 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 2
  return var_kwyj2
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["kwyj2"] = func2;
  lineNumber = 1
var func3 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_kwyj2 = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["kwyj2:="] = func3;
  lineNumber = 22
// Import of util
  var var_util = do_import("util", gracecode_util);
  lineNumber = 1
var func4 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 22
  return var_forNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["forNode"] = func4;
  lineNumber = 1
  var obj5 = Grace_allocObject();
  obj5.outer = this;
    var reader_ast_outer6 = function() {
    return this.outer;
  }
  obj5.methods["outer"] = reader_ast_outer6;
function obj_init_5() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func7 = function(argcv) {
  var curarg = 1;
  var var_over = arguments[curarg];
  curarg++;
  var var_body__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj8 = Grace_allocObject();
  obj8.outer = this;
    var reader_ast_outer9 = function() {
    return this.outer;
  }
  obj8.methods["outer"] = reader_ast_outer9;
function obj_init_8() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 23
  var string10 = new GraceString("for");
  obj8.data["kind"] = string10;
    var reader_ast_kind11 = function() {
    return this.data["kind"];
  }
  reader_ast_kind11.def = true;
  obj8.methods["kind"] = reader_ast_kind11;
  lineNumber = 24
  obj8.data["value"] = var_over;
    var reader_ast_value12 = function() {
    return this.data["value"];
  }
  reader_ast_value12.def = true;
  obj8.methods["value"] = reader_ast_value12;
  lineNumber = 25
  obj8.data["body"] = var_body__39__;
    var reader_ast_body13 = function() {
    return this.data["body"];
  }
  reader_ast_body13.def = true;
  obj8.methods["body"] = reader_ast_body13;
  lineNumber = 26
  var string14 = new GraceString("");
  obj8.data["register"] = string14;
    var reader_ast_register15 = function() {
    return this.data["register"];
  }
  obj8.methods["register"] = reader_ast_register15;
  obj8.data["register"] = string14;
  var writer_ast_register15 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj8.methods["register:="] = writer_ast_register15;
obj8.mutable = true;
  lineNumber = 28
  lineNumber = 1
  lineNumber = 27
  var call16 = callmethod(var_util,"linenum", [0]);
  obj8.data["line"] = call16;
    var reader_ast_line17 = function() {
    return this.data["line"];
  }
  reader_ast_line17.def = true;
  obj8.methods["line"] = reader_ast_line17;
var func18 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 30
  lineNumber = 29
  var string19 = new GraceString("");
  var var_spc = string19;
  lineNumber = 32
  lineNumber = 30
  var opresult21 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 32
  var block22 = Grace_allocObject();
  block22.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block22.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block22.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block22.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block22.receiver = this;
  block22.className = 'block<ast:32>';
  block22.real = function(
var_i
) {
  lineNumber = 31
  var string23 = new GraceString("  ");
  var opresult25 = callmethod(var_spc, "++", [1], string23);
  var_spc = opresult25;
  return opresult25;
};
  var call26 = callmethod(Grace_prelude,"for()do", [1, 1], opresult21, block22);
  lineNumber = 34
  lineNumber = 33
  var string27 = new GraceString("For\n");
  var var_s = string27;
  lineNumber = 34
  lineNumber = 35
  lineNumber = 34
  var opresult29 = callmethod(var_s, "++", [1], var_spc);
  var opresult31 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 35
  lineNumber = 1
  lineNumber = 34
  var call32 = callmethod(this,"value", [0]);
  var call33 = callmethod(call32,"pretty", [1], opresult31);
  var opresult35 = callmethod(opresult29, "++", [1], call33);
  var_s = opresult35;
  lineNumber = 36
  lineNumber = 35
  var string36 = new GraceString("\n");
  var opresult38 = callmethod(var_s, "++", [1], string36);
  var_s = opresult38;
  lineNumber = 37
  lineNumber = 36
  var opresult40 = callmethod(var_s, "++", [1], var_spc);
  var string41 = new GraceString("Do:");
  var opresult43 = callmethod(opresult40, "++", [1], string41);
  var_s = opresult43;
  lineNumber = 37
  lineNumber = 38
  lineNumber = 37
  var string44 = new GraceString("\n");
  var opresult46 = callmethod(var_s, "++", [1], string44);
  var opresult48 = callmethod(opresult46, "++", [1], var_spc);
  var string49 = new GraceString("  ");
  var opresult51 = callmethod(opresult48, "++", [1], string49);
  var opresult53 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 38
  lineNumber = 1
  lineNumber = 37
  var call54 = callmethod(this,"body", [0]);
  var call55 = callmethod(call54,"pretty", [1], opresult53);
  var opresult57 = callmethod(opresult51, "++", [1], call55);
  var_s = opresult57;
  lineNumber = 38
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj8.methods["pretty"] = func18;
  superDepth = origSuperDepth;
}
obj_init_8.apply(obj8, []);
  return obj8
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj5.methods["new"] = func7;
  superDepth = origSuperDepth;
}
obj_init_5.apply(obj5, []);
  var var_forNode = obj5;
  lineNumber = 41
  lineNumber = 1
var func58 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 41
  return var_whileNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["whileNode"] = func58;
  lineNumber = 1
  var obj59 = Grace_allocObject();
  obj59.outer = this;
    var reader_ast_outer60 = function() {
    return this.outer;
  }
  obj59.methods["outer"] = reader_ast_outer60;
function obj_init_59() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func61 = function(argcv) {
  var curarg = 1;
  var var_cond = arguments[curarg];
  curarg++;
  var var_body__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj62 = Grace_allocObject();
  obj62.outer = this;
    var reader_ast_outer63 = function() {
    return this.outer;
  }
  obj62.methods["outer"] = reader_ast_outer63;
function obj_init_62() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 42
  var string64 = new GraceString("while");
  obj62.data["kind"] = string64;
    var reader_ast_kind65 = function() {
    return this.data["kind"];
  }
  reader_ast_kind65.def = true;
  obj62.methods["kind"] = reader_ast_kind65;
  lineNumber = 43
  obj62.data["value"] = var_cond;
    var reader_ast_value66 = function() {
    return this.data["value"];
  }
  reader_ast_value66.def = true;
  obj62.methods["value"] = reader_ast_value66;
  lineNumber = 44
  obj62.data["body"] = var_body__39__;
    var reader_ast_body67 = function() {
    return this.data["body"];
  }
  reader_ast_body67.def = true;
  obj62.methods["body"] = reader_ast_body67;
  lineNumber = 45
  var string68 = new GraceString("");
  obj62.data["register"] = string68;
    var reader_ast_register69 = function() {
    return this.data["register"];
  }
  obj62.methods["register"] = reader_ast_register69;
  obj62.data["register"] = string68;
  var writer_ast_register69 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj62.methods["register:="] = writer_ast_register69;
obj62.mutable = true;
  lineNumber = 47
  lineNumber = 1
  lineNumber = 46
  var call70 = callmethod(var_util,"linenum", [0]);
  obj62.data["line"] = call70;
    var reader_ast_line71 = function() {
    return this.data["line"];
  }
  reader_ast_line71.def = true;
  obj62.methods["line"] = reader_ast_line71;
var func72 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 49
  lineNumber = 48
  var string73 = new GraceString("");
  var var_spc = string73;
  lineNumber = 51
  lineNumber = 49
  var opresult75 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 51
  var block76 = Grace_allocObject();
  block76.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block76.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block76.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block76.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block76.receiver = this;
  block76.className = 'block<ast:51>';
  block76.real = function(
var_i
) {
  lineNumber = 50
  var string77 = new GraceString("  ");
  var opresult79 = callmethod(var_spc, "++", [1], string77);
  var_spc = opresult79;
  return opresult79;
};
  var call80 = callmethod(Grace_prelude,"for()do", [1, 1], opresult75, block76);
  lineNumber = 53
  lineNumber = 52
  var string81 = new GraceString("While\n");
  var var_s = string81;
  lineNumber = 53
  lineNumber = 54
  lineNumber = 53
  var opresult83 = callmethod(var_s, "++", [1], var_spc);
  var opresult85 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 54
  lineNumber = 1
  lineNumber = 53
  var call86 = callmethod(this,"value", [0]);
  var call87 = callmethod(call86,"pretty", [1], opresult85);
  var opresult89 = callmethod(opresult83, "++", [1], call87);
  var_s = opresult89;
  lineNumber = 55
  lineNumber = 54
  var string90 = new GraceString("\n");
  var opresult92 = callmethod(var_s, "++", [1], string90);
  var_s = opresult92;
  lineNumber = 56
  lineNumber = 55
  var opresult94 = callmethod(var_s, "++", [1], var_spc);
  var string95 = new GraceString("Do:");
  var opresult97 = callmethod(opresult94, "++", [1], string95);
  var_s = opresult97;
  lineNumber = 57
  lineNumber = 56
  lineNumber = 1
  lineNumber = 56
  var call98 = callmethod(this,"body", [0]);
  lineNumber = 57
  var block99 = Grace_allocObject();
  block99.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block99.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block99.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block99.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block99.receiver = this;
  block99.className = 'block<ast:57>';
  block99.real = function(
var_x
) {
  lineNumber = 58
  lineNumber = 57
  var string100 = new GraceString("\n  ");
  var opresult102 = callmethod(var_s, "++", [1], string100);
  var opresult104 = callmethod(opresult102, "++", [1], var_spc);
  var opresult106 = callmethod(var_depth, "+", [1], new GraceNum(2));
  var call107 = callmethod(var_x,"pretty", [1], opresult106);
  var opresult109 = callmethod(opresult104, "++", [1], call107);
  var_s = opresult109;
  return opresult109;
};
  var call110 = callmethod(Grace_prelude,"for()do", [1, 1], call98, block99);
  lineNumber = 59
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj62.methods["pretty"] = func72;
  superDepth = origSuperDepth;
}
obj_init_62.apply(obj62, []);
  return obj62
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj59.methods["new"] = func61;
  superDepth = origSuperDepth;
}
obj_init_59.apply(obj59, []);
  var var_whileNode = obj59;
  lineNumber = 62
  lineNumber = 1
var func111 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 62
  return var_ifNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["ifNode"] = func111;
  lineNumber = 1
  var obj112 = Grace_allocObject();
  obj112.outer = this;
    var reader_ast_outer113 = function() {
    return this.outer;
  }
  obj112.methods["outer"] = reader_ast_outer113;
function obj_init_112() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func114 = function(argcv) {
  var curarg = 1;
  var var_cond = arguments[curarg];
  curarg++;
  var var_thenblock__39__ = arguments[curarg];
  curarg++;
  var var_elseblock__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj115 = Grace_allocObject();
  obj115.outer = this;
    var reader_ast_outer116 = function() {
    return this.outer;
  }
  obj115.methods["outer"] = reader_ast_outer116;
function obj_init_115() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 63
  var string117 = new GraceString("if");
  obj115.data["kind"] = string117;
    var reader_ast_kind118 = function() {
    return this.data["kind"];
  }
  reader_ast_kind118.def = true;
  obj115.methods["kind"] = reader_ast_kind118;
  lineNumber = 64
  obj115.data["value"] = var_cond;
    var reader_ast_value119 = function() {
    return this.data["value"];
  }
  reader_ast_value119.def = true;
  obj115.methods["value"] = reader_ast_value119;
  lineNumber = 65
  obj115.data["thenblock"] = var_thenblock__39__;
    var reader_ast_thenblock120 = function() {
    return this.data["thenblock"];
  }
  reader_ast_thenblock120.def = true;
  obj115.methods["thenblock"] = reader_ast_thenblock120;
  lineNumber = 66
  obj115.data["elseblock"] = var_elseblock__39__;
    var reader_ast_elseblock121 = function() {
    return this.data["elseblock"];
  }
  reader_ast_elseblock121.def = true;
  obj115.methods["elseblock"] = reader_ast_elseblock121;
  lineNumber = 67
  var string122 = new GraceString("");
  obj115.data["register"] = string122;
    var reader_ast_register123 = function() {
    return this.data["register"];
  }
  obj115.methods["register"] = reader_ast_register123;
  obj115.data["register"] = string122;
  var writer_ast_register123 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj115.methods["register:="] = writer_ast_register123;
obj115.mutable = true;
  lineNumber = 69
  lineNumber = 1
  lineNumber = 68
  var call124 = callmethod(var_util,"linenum", [0]);
  obj115.data["line"] = call124;
    var reader_ast_line125 = function() {
    return this.data["line"];
  }
  reader_ast_line125.def = true;
  obj115.methods["line"] = reader_ast_line125;
  lineNumber = 69
  var bool126 = new GraceBoolean(false)
  obj115.data["handledIdentifiers"] = bool126;
    var reader_ast_handledIdentifiers127 = function() {
    return this.data["handledIdentifiers"];
  }
  obj115.methods["handledIdentifiers"] = reader_ast_handledIdentifiers127;
  obj115.data["handledIdentifiers"] = bool126;
  var writer_ast_handledIdentifiers127 = function(argcv, o) {
    this.data["handledIdentifiers"] = o;
  }
  obj115.methods["handledIdentifiers:="] = writer_ast_handledIdentifiers127;
obj115.mutable = true;
var func128 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 72
  lineNumber = 71
  var string129 = new GraceString("");
  var var_spc = string129;
  lineNumber = 74
  lineNumber = 72
  var opresult131 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 74
  var block132 = Grace_allocObject();
  block132.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block132.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block132.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block132.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block132.receiver = this;
  block132.className = 'block<ast:74>';
  block132.real = function(
var_i
) {
  lineNumber = 73
  var string133 = new GraceString("  ");
  var opresult135 = callmethod(var_spc, "++", [1], string133);
  var_spc = opresult135;
  return opresult135;
};
  var call136 = callmethod(Grace_prelude,"for()do", [1, 1], opresult131, block132);
  lineNumber = 76
  lineNumber = 75
  var string137 = new GraceString("If\n");
  var var_s = string137;
  lineNumber = 76
  lineNumber = 77
  lineNumber = 76
  var opresult139 = callmethod(var_s, "++", [1], var_spc);
  var opresult141 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 77
  lineNumber = 1
  lineNumber = 76
  var call142 = callmethod(this,"value", [0]);
  var call143 = callmethod(call142,"pretty", [1], opresult141);
  var opresult145 = callmethod(opresult139, "++", [1], call143);
  var_s = opresult145;
  lineNumber = 78
  lineNumber = 77
  var string146 = new GraceString("\n");
  var opresult148 = callmethod(var_s, "++", [1], string146);
  var_s = opresult148;
  lineNumber = 79
  lineNumber = 78
  var opresult150 = callmethod(var_s, "++", [1], var_spc);
  var string151 = new GraceString("Then:");
  var opresult153 = callmethod(opresult150, "++", [1], string151);
  var_s = opresult153;
  lineNumber = 80
  lineNumber = 79
  lineNumber = 1
  lineNumber = 79
  var call154 = callmethod(this,"thenblock", [0]);
  lineNumber = 80
  var block155 = Grace_allocObject();
  block155.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block155.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block155.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block155.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block155.receiver = this;
  block155.className = 'block<ast:80>';
  block155.real = function(
var_ix
) {
  lineNumber = 81
  lineNumber = 80
  var string156 = new GraceString("\n  ");
  var opresult158 = callmethod(var_s, "++", [1], string156);
  var opresult160 = callmethod(opresult158, "++", [1], var_spc);
  var opresult162 = callmethod(var_depth, "+", [1], new GraceNum(2));
  var call163 = callmethod(var_ix,"pretty", [1], opresult162);
  var opresult165 = callmethod(opresult160, "++", [1], call163);
  var_s = opresult165;
  return opresult165;
};
  var call166 = callmethod(Grace_prelude,"for()do", [1, 1], call154, block155);
  lineNumber = 83
  lineNumber = 82
  var string167 = new GraceString("\n");
  var opresult169 = callmethod(var_s, "++", [1], string167);
  var_s = opresult169;
  lineNumber = 84
  lineNumber = 83
  var opresult171 = callmethod(var_s, "++", [1], var_spc);
  var string172 = new GraceString("Else:");
  var opresult174 = callmethod(opresult171, "++", [1], string172);
  var_s = opresult174;
  lineNumber = 85
  lineNumber = 84
  lineNumber = 1
  lineNumber = 84
  var call175 = callmethod(this,"elseblock", [0]);
  lineNumber = 85
  var block176 = Grace_allocObject();
  block176.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block176.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block176.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block176.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block176.receiver = this;
  block176.className = 'block<ast:85>';
  block176.real = function(
var_ix
) {
  lineNumber = 86
  lineNumber = 85
  var string177 = new GraceString("\n  ");
  var opresult179 = callmethod(var_s, "++", [1], string177);
  var opresult181 = callmethod(opresult179, "++", [1], var_spc);
  var opresult183 = callmethod(var_depth, "+", [1], new GraceNum(2));
  var call184 = callmethod(var_ix,"pretty", [1], opresult183);
  var opresult186 = callmethod(opresult181, "++", [1], call184);
  var_s = opresult186;
  return opresult186;
};
  var call187 = callmethod(Grace_prelude,"for()do", [1, 1], call175, block176);
  lineNumber = 87
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj115.methods["pretty"] = func128;
  superDepth = origSuperDepth;
}
obj_init_115.apply(obj115, []);
  return obj115
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj112.methods["new"] = func114;
  superDepth = origSuperDepth;
}
obj_init_112.apply(obj112, []);
  var var_ifNode = obj112;
  lineNumber = 90
  lineNumber = 1
var func188 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 90
  return var_blockNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["blockNode"] = func188;
  lineNumber = 1
  var obj189 = Grace_allocObject();
  obj189.outer = this;
    var reader_ast_outer190 = function() {
    return this.outer;
  }
  obj189.methods["outer"] = reader_ast_outer190;
function obj_init_189() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func191 = function(argcv) {
  var curarg = 1;
  var var_params__39__ = arguments[curarg];
  curarg++;
  var var_body__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj192 = Grace_allocObject();
  obj192.outer = this;
    var reader_ast_outer193 = function() {
    return this.outer;
  }
  obj192.methods["outer"] = reader_ast_outer193;
function obj_init_192() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 91
  var string194 = new GraceString("block");
  obj192.data["kind"] = string194;
    var reader_ast_kind195 = function() {
    return this.data["kind"];
  }
  reader_ast_kind195.def = true;
  obj192.methods["kind"] = reader_ast_kind195;
  lineNumber = 92
  var string196 = new GraceString("block");
  obj192.data["value"] = string196;
    var reader_ast_value197 = function() {
    return this.data["value"];
  }
  reader_ast_value197.def = true;
  obj192.methods["value"] = reader_ast_value197;
  lineNumber = 93
  obj192.data["params"] = var_params__39__;
    var reader_ast_params198 = function() {
    return this.data["params"];
  }
  reader_ast_params198.def = true;
  obj192.methods["params"] = reader_ast_params198;
  lineNumber = 94
  obj192.data["body"] = var_body__39__;
    var reader_ast_body199 = function() {
    return this.data["body"];
  }
  reader_ast_body199.def = true;
  obj192.methods["body"] = reader_ast_body199;
  lineNumber = 95
  var bool200 = new GraceBoolean(true)
  obj192.data["selfclosure"] = bool200;
    var reader_ast_selfclosure201 = function() {
    return this.data["selfclosure"];
  }
  reader_ast_selfclosure201.def = true;
  obj192.methods["selfclosure"] = reader_ast_selfclosure201;
  lineNumber = 96
  var string202 = new GraceString("");
  obj192.data["register"] = string202;
    var reader_ast_register203 = function() {
    return this.data["register"];
  }
  obj192.methods["register"] = reader_ast_register203;
  obj192.data["register"] = string202;
  var writer_ast_register203 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj192.methods["register:="] = writer_ast_register203;
obj192.mutable = true;
  lineNumber = 97
  var bool204 = new GraceBoolean(false)
  obj192.data["matchingPattern"] = bool204;
    var reader_ast_matchingPattern205 = function() {
    return this.data["matchingPattern"];
  }
  obj192.methods["matchingPattern"] = reader_ast_matchingPattern205;
  obj192.data["matchingPattern"] = bool204;
  var writer_ast_matchingPattern205 = function(argcv, o) {
    this.data["matchingPattern"] = o;
  }
  obj192.methods["matchingPattern:="] = writer_ast_matchingPattern205;
obj192.mutable = true;
  lineNumber = 99
  lineNumber = 1
  lineNumber = 98
  var call206 = callmethod(var_util,"linenum", [0]);
  obj192.data["line"] = call206;
    var reader_ast_line207 = function() {
    return this.data["line"];
  }
  reader_ast_line207.def = true;
  obj192.methods["line"] = reader_ast_line207;
var func208 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 101
  lineNumber = 100
  var string209 = new GraceString("");
  var var_spc = string209;
  lineNumber = 103
  lineNumber = 101
  var opresult211 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 103
  var block212 = Grace_allocObject();
  block212.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block212.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block212.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block212.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block212.receiver = this;
  block212.className = 'block<ast:103>';
  block212.real = function(
var_i
) {
  lineNumber = 102
  var string213 = new GraceString("  ");
  var opresult215 = callmethod(var_spc, "++", [1], string213);
  var_spc = opresult215;
  return opresult215;
};
  var call216 = callmethod(Grace_prelude,"for()do", [1, 1], opresult211, block212);
  lineNumber = 105
  lineNumber = 104
  var string217 = new GraceString("Block\n");
  var var_s = string217;
  lineNumber = 106
  lineNumber = 105
  var opresult219 = callmethod(var_s, "++", [1], var_spc);
  var string220 = new GraceString("Parameters:");
  var opresult222 = callmethod(opresult219, "++", [1], string220);
  var_s = opresult222;
  lineNumber = 107
  lineNumber = 106
  lineNumber = 1
  lineNumber = 106
  var call223 = callmethod(this,"params", [0]);
  lineNumber = 107
  var block224 = Grace_allocObject();
  block224.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block224.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block224.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block224.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block224.receiver = this;
  block224.className = 'block<ast:107>';
  block224.real = function(
var_mx
) {
  lineNumber = 108
  lineNumber = 107
  var string225 = new GraceString("\n  ");
  var opresult227 = callmethod(var_s, "++", [1], string225);
  var opresult229 = callmethod(opresult227, "++", [1], var_spc);
  var opresult231 = callmethod(var_depth, "+", [1], new GraceNum(2));
  var call232 = callmethod(var_mx,"pretty", [1], opresult231);
  var opresult234 = callmethod(opresult229, "++", [1], call232);
  var_s = opresult234;
  return opresult234;
};
  var call235 = callmethod(Grace_prelude,"for()do", [1, 1], call223, block224);
  lineNumber = 110
  lineNumber = 109
  var string236 = new GraceString("\n");
  var opresult238 = callmethod(var_s, "++", [1], string236);
  var_s = opresult238;
  lineNumber = 111
  lineNumber = 110
  var opresult240 = callmethod(var_s, "++", [1], var_spc);
  var string241 = new GraceString("Body:");
  var opresult243 = callmethod(opresult240, "++", [1], string241);
  var_s = opresult243;
  lineNumber = 112
  lineNumber = 111
  lineNumber = 1
  lineNumber = 111
  var call244 = callmethod(this,"body", [0]);
  lineNumber = 112
  var block245 = Grace_allocObject();
  block245.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block245.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block245.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block245.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block245.receiver = this;
  block245.className = 'block<ast:112>';
  block245.real = function(
var_mx
) {
  lineNumber = 113
  lineNumber = 112
  var string246 = new GraceString("\n  ");
  var opresult248 = callmethod(var_s, "++", [1], string246);
  var opresult250 = callmethod(opresult248, "++", [1], var_spc);
  var opresult252 = callmethod(var_depth, "+", [1], new GraceNum(2));
  var call253 = callmethod(var_mx,"pretty", [1], opresult252);
  var opresult255 = callmethod(opresult250, "++", [1], call253);
  var_s = opresult255;
  return opresult255;
};
  var call256 = callmethod(Grace_prelude,"for()do", [1, 1], call244, block245);
  lineNumber = 117
  lineNumber = 119
  var call258 = callmethod(this,"matchingPattern", [0]);
  lineNumber = 114
  var bool259 = new GraceBoolean(false)
  var opresult261 = callmethod(call258, "!=", [1], bool259);
  if (Grace_isTrue(opresult261)) {
  lineNumber = 116
  lineNumber = 115
  var string262 = new GraceString("\n");
  var opresult264 = callmethod(var_s, "++", [1], string262);
  var_s = opresult264;
  lineNumber = 117
  lineNumber = 116
  var opresult266 = callmethod(var_s, "++", [1], var_spc);
  var string267 = new GraceString("Pattern:");
  var opresult269 = callmethod(opresult266, "++", [1], string267);
  var_s = opresult269;
  lineNumber = 117
  lineNumber = 118
  lineNumber = 117
  var string270 = new GraceString("\n  ");
  var opresult272 = callmethod(var_s, "++", [1], string270);
  var opresult274 = callmethod(opresult272, "++", [1], var_spc);
  var opresult276 = callmethod(var_depth, "+", [1], new GraceNum(2));
  lineNumber = 118
  var call277 = callmethod(this,"matchingPattern", [0]);
  var call278 = callmethod(call277,"pretty", [1], opresult276);
  var opresult280 = callmethod(opresult274, "++", [1], call278);
  var_s = opresult280;
  var if257 = opresult280;
}
  lineNumber = 119
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj192.methods["pretty"] = func208;
  superDepth = origSuperDepth;
}
obj_init_192.apply(obj192, []);
  return obj192
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj189.methods["new"] = func191;
  superDepth = origSuperDepth;
}
obj_init_189.apply(obj189, []);
  var var_blockNode = obj189;
  lineNumber = 122
  lineNumber = 1
var func281 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 122
  return var_matchCaseNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["matchCaseNode"] = func281;
  lineNumber = 1
  var obj282 = Grace_allocObject();
  obj282.outer = this;
    var reader_ast_outer283 = function() {
    return this.outer;
  }
  obj282.methods["outer"] = reader_ast_outer283;
function obj_init_282() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func284 = function(argcv) {
  var curarg = 1;
  var var_matchee = arguments[curarg];
  curarg++;
  var var_cases__39__ = arguments[curarg];
  curarg++;
  var var_elsecase__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj285 = Grace_allocObject();
  obj285.outer = this;
    var reader_ast_outer286 = function() {
    return this.outer;
  }
  obj285.methods["outer"] = reader_ast_outer286;
function obj_init_285() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 123
  var string287 = new GraceString("matchcase");
  obj285.data["kind"] = string287;
    var reader_ast_kind288 = function() {
    return this.data["kind"];
  }
  reader_ast_kind288.def = true;
  obj285.methods["kind"] = reader_ast_kind288;
  lineNumber = 124
  obj285.data["value"] = var_matchee;
    var reader_ast_value289 = function() {
    return this.data["value"];
  }
  reader_ast_value289.def = true;
  obj285.methods["value"] = reader_ast_value289;
  lineNumber = 125
  obj285.data["cases"] = var_cases__39__;
    var reader_ast_cases290 = function() {
    return this.data["cases"];
  }
  reader_ast_cases290.def = true;
  obj285.methods["cases"] = reader_ast_cases290;
  lineNumber = 126
  obj285.data["elsecase"] = var_elsecase__39__;
    var reader_ast_elsecase291 = function() {
    return this.data["elsecase"];
  }
  reader_ast_elsecase291.def = true;
  obj285.methods["elsecase"] = reader_ast_elsecase291;
  lineNumber = 127
  var string292 = new GraceString("");
  obj285.data["register"] = string292;
    var reader_ast_register293 = function() {
    return this.data["register"];
  }
  obj285.methods["register"] = reader_ast_register293;
  obj285.data["register"] = string292;
  var writer_ast_register293 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj285.methods["register:="] = writer_ast_register293;
obj285.mutable = true;
  lineNumber = 129
  lineNumber = 1
  lineNumber = 128
  var call294 = callmethod(var_util,"linenum", [0]);
  obj285.data["line"] = call294;
    var reader_ast_line295 = function() {
    return this.data["line"];
  }
  reader_ast_line295.def = true;
  obj285.methods["line"] = reader_ast_line295;
var func296 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 131
  lineNumber = 130
  var string297 = new GraceString("");
  var var_spc = string297;
  lineNumber = 133
  lineNumber = 131
  var opresult299 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 133
  var block300 = Grace_allocObject();
  block300.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block300.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block300.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block300.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block300.receiver = this;
  block300.className = 'block<ast:133>';
  block300.real = function(
var_i
) {
  lineNumber = 132
  var string301 = new GraceString("  ");
  var opresult303 = callmethod(var_spc, "++", [1], string301);
  var_spc = opresult303;
  return opresult303;
};
  var call304 = callmethod(Grace_prelude,"for()do", [1, 1], opresult299, block300);
  lineNumber = 135
  lineNumber = 134
  var string305 = new GraceString("Match\n");
  var var_s = string305;
  lineNumber = 135
  lineNumber = 136
  lineNumber = 135
  var opresult307 = callmethod(var_s, "++", [1], var_spc);
  var opresult309 = callmethod(var_depth, "+", [1], new GraceNum(2));
  var call310 = callmethod(var_matchee,"pretty", [1], opresult309);
  var opresult312 = callmethod(opresult307, "++", [1], call310);
  var_s = opresult312;
  lineNumber = 137
  lineNumber = 136
  lineNumber = 1
  lineNumber = 136
  var call313 = callmethod(this,"cases", [0]);
  lineNumber = 137
  var block314 = Grace_allocObject();
  block314.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block314.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block314.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block314.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block314.receiver = this;
  block314.className = 'block<ast:137>';
  block314.real = function(
var_mx
) {
  lineNumber = 138
  lineNumber = 137
  var string315 = new GraceString("\n");
  var opresult317 = callmethod(string315, "++", [1], var_spc);
  var string318 = new GraceString("Case:\n");
  var opresult320 = callmethod(opresult317, "++", [1], string318);
  var opresult322 = callmethod(opresult320, "++", [1], var_spc);
  var string323 = new GraceString("  ");
  var opresult325 = callmethod(opresult322, "++", [1], string323);
  var opresult327 = callmethod(var_depth, "+", [1], new GraceNum(2));
  var call328 = callmethod(var_mx,"pretty", [1], opresult327);
  var opresult330 = callmethod(opresult325, "++", [1], call328);
  var string331 = new GraceString("");
  var opresult333 = callmethod(opresult330, "++", [1], string331);
  var opresult335 = callmethod(var_s, "++", [1], opresult333);
  var_s = opresult335;
  return opresult335;
};
  var call336 = callmethod(Grace_prelude,"for()do", [1, 1], call313, block314);
  lineNumber = 140
  lineNumber = 142
  lineNumber = 139
  var bool338 = new GraceBoolean(false)
  lineNumber = 142
  var call339 = callmethod(this,"elsecase", [0]);
  var opresult341 = callmethod(bool338, "!=", [1], call339);
  if (Grace_isTrue(opresult341)) {
  lineNumber = 140
  lineNumber = 141
  lineNumber = 140
  var string342 = new GraceString("\n");
  var opresult344 = callmethod(string342, "++", [1], var_spc);
  var string345 = new GraceString("Else:\n");
  var opresult347 = callmethod(opresult344, "++", [1], string345);
  var opresult349 = callmethod(opresult347, "++", [1], var_spc);
  var string350 = new GraceString("  ");
  var opresult352 = callmethod(opresult349, "++", [1], string350);
  var opresult354 = callmethod(var_depth, "+", [1], new GraceNum(2));
  lineNumber = 141
  var call355 = callmethod(this,"elsecase", [0]);
  var call356 = callmethod(call355,"pretty", [1], opresult354);
  var opresult358 = callmethod(opresult352, "++", [1], call356);
  lineNumber = 140
  var string359 = new GraceString("");
  var opresult361 = callmethod(opresult358, "++", [1], string359);
  var opresult363 = callmethod(var_s, "++", [1], opresult361);
  var_s = opresult363;
  var if337 = opresult363;
}
  lineNumber = 142
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj285.methods["pretty"] = func296;
  superDepth = origSuperDepth;
}
obj_init_285.apply(obj285, []);
  return obj285
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj282.methods["new"] = func284;
  superDepth = origSuperDepth;
}
obj_init_282.apply(obj282, []);
  var var_matchCaseNode = obj282;
  lineNumber = 145
  lineNumber = 1
var func364 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 145
  return var_methodTypeNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["methodTypeNode"] = func364;
  lineNumber = 1
  var obj365 = Grace_allocObject();
  obj365.outer = this;
    var reader_ast_outer366 = function() {
    return this.outer;
  }
  obj365.methods["outer"] = reader_ast_outer366;
function obj_init_365() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func367 = function(argcv) {
  var curarg = 1;
  var var_name__39__ = arguments[curarg];
  curarg++;
  var var_signature__39__ = arguments[curarg];
  curarg++;
  var var_rtype__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj368 = Grace_allocObject();
  obj368.outer = this;
    var reader_ast_outer369 = function() {
    return this.outer;
  }
  obj368.methods["outer"] = reader_ast_outer369;
function obj_init_368() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 161
  var string370 = new GraceString("methodtype");
  obj368.data["kind"] = string370;
    var reader_ast_kind371 = function() {
    return this.data["kind"];
  }
  reader_ast_kind371.def = true;
  obj368.methods["kind"] = reader_ast_kind371;
  lineNumber = 162
  obj368.data["value"] = var_name__39__;
    var reader_ast_value372 = function() {
    return this.data["value"];
  }
  reader_ast_value372.def = true;
  obj368.methods["value"] = reader_ast_value372;
  lineNumber = 163
  obj368.data["signature"] = var_signature__39__;
    var reader_ast_signature373 = function() {
    return this.data["signature"];
  }
  reader_ast_signature373.def = true;
  obj368.methods["signature"] = reader_ast_signature373;
  lineNumber = 164
  obj368.data["rtype"] = var_rtype__39__;
    var reader_ast_rtype374 = function() {
    return this.data["rtype"];
  }
  reader_ast_rtype374.def = true;
  obj368.methods["rtype"] = reader_ast_rtype374;
  lineNumber = 166
  lineNumber = 1
  lineNumber = 165
  var call375 = callmethod(var_util,"linenum", [0]);
  obj368.data["line"] = call375;
    var reader_ast_line376 = function() {
    return this.data["line"];
  }
  reader_ast_line376.def = true;
  obj368.methods["line"] = reader_ast_line376;
  lineNumber = 166
  var string377 = new GraceString("");
  obj368.data["register"] = string377;
    var reader_ast_register378 = function() {
    return this.data["register"];
  }
  obj368.methods["register"] = reader_ast_register378;
  obj368.data["register"] = string377;
  var writer_ast_register378 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj368.methods["register:="] = writer_ast_register378;
obj368.mutable = true;
var func379 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 169
  lineNumber = 168
  var string380 = new GraceString("");
  var var_spc = string380;
  lineNumber = 171
  lineNumber = 169
  var opresult382 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 171
  var block383 = Grace_allocObject();
  block383.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block383.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block383.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block383.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block383.receiver = this;
  block383.className = 'block<ast:171>';
  block383.real = function(
var_i
) {
  lineNumber = 170
  var string384 = new GraceString("  ");
  var opresult386 = callmethod(var_spc, "++", [1], string384);
  var_spc = opresult386;
  return opresult386;
};
  var call387 = callmethod(Grace_prelude,"for()do", [1, 1], opresult382, block383);
  lineNumber = 173
  lineNumber = 172
  var string388 = new GraceString("MethodType\n");
  var var_s = string388;
  lineNumber = 174
  lineNumber = 173
  var string389 = new GraceString("");
  var opresult391 = callmethod(string389, "++", [1], var_s);
  var string392 = new GraceString("");
  var opresult394 = callmethod(opresult391, "++", [1], string392);
  var opresult396 = callmethod(opresult394, "++", [1], var_spc);
  var string397 = new GraceString("Name: ");
  var opresult399 = callmethod(opresult396, "++", [1], string397);
  lineNumber = 174
  var call400 = callmethod(this,"value", [0]);
  var opresult402 = callmethod(opresult399, "++", [1], call400);
  lineNumber = 173
  var string403 = new GraceString("\n");
  var opresult405 = callmethod(opresult402, "++", [1], string403);
  var_s = opresult405;
  lineNumber = 176
  lineNumber = 177
  var call407 = callmethod(this,"rtype", [0]);
  lineNumber = 174
  var bool408 = new GraceBoolean(false)
  var opresult410 = callmethod(call407, "/=", [1], bool408);
  if (Grace_isTrue(opresult410)) {
  lineNumber = 176
  lineNumber = 175
  var string411 = new GraceString("");
  var opresult413 = callmethod(string411, "++", [1], var_s);
  var string414 = new GraceString("");
  var opresult416 = callmethod(opresult413, "++", [1], string414);
  var opresult418 = callmethod(opresult416, "++", [1], var_spc);
  var string419 = new GraceString("Returns:\n  ");
  var opresult421 = callmethod(opresult418, "++", [1], string419);
  var opresult423 = callmethod(opresult421, "++", [1], var_spc);
  var string424 = new GraceString("");
  var opresult426 = callmethod(opresult423, "++", [1], string424);
  lineNumber = 176
  lineNumber = 1
  lineNumber = 176
  var call427 = callmethod(this,"rtype", [0]);
  var call428 = callmethod(call427,"value", [0]);
  var opresult430 = callmethod(opresult426, "++", [1], call428);
  lineNumber = 175
  var string431 = new GraceString("\n");
  var opresult433 = callmethod(opresult430, "++", [1], string431);
  var_s = opresult433;
  var if406 = opresult433;
}
  lineNumber = 178
  lineNumber = 177
  var string434 = new GraceString("");
  var opresult436 = callmethod(string434, "++", [1], var_s);
  var string437 = new GraceString("");
  var opresult439 = callmethod(opresult436, "++", [1], string437);
  var opresult441 = callmethod(opresult439, "++", [1], var_spc);
  var string442 = new GraceString("Signature:");
  var opresult444 = callmethod(opresult441, "++", [1], string442);
  var_s = opresult444;
  lineNumber = 188
  lineNumber = 178
  var call445 = callmethod(this,"signature", [0]);
  lineNumber = 188
  var block446 = Grace_allocObject();
  block446.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block446.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block446.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block446.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block446.receiver = this;
  block446.className = 'block<ast:188>';
  block446.real = function(
var_part
) {
  lineNumber = 180
  lineNumber = 179
  var string447 = new GraceString("");
  var opresult449 = callmethod(string447, "++", [1], var_s);
  var string450 = new GraceString("\n  ");
  var opresult452 = callmethod(opresult449, "++", [1], string450);
  var opresult454 = callmethod(opresult452, "++", [1], var_spc);
  var string455 = new GraceString("Part: ");
  var opresult457 = callmethod(opresult454, "++", [1], string455);
  lineNumber = 180
  lineNumber = 1
  lineNumber = 179
  var call458 = callmethod(var_part,"name", [0]);
  var opresult460 = callmethod(opresult457, "++", [1], call458);
  var string461 = new GraceString("");
  var opresult463 = callmethod(opresult460, "++", [1], string461);
  var_s = opresult463;
  lineNumber = 181
  lineNumber = 180
  var string464 = new GraceString("");
  var opresult466 = callmethod(string464, "++", [1], var_s);
  var string467 = new GraceString("\n    ");
  var opresult469 = callmethod(opresult466, "++", [1], string467);
  var opresult471 = callmethod(opresult469, "++", [1], var_spc);
  var string472 = new GraceString("Parameters:");
  var opresult474 = callmethod(opresult471, "++", [1], string472);
  var_s = opresult474;
  lineNumber = 185
  lineNumber = 181
  lineNumber = 1
  lineNumber = 181
  var call475 = callmethod(var_part,"params", [0]);
  lineNumber = 185
  var block476 = Grace_allocObject();
  block476.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block476.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block476.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block476.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block476.receiver = this;
  block476.className = 'block<ast:185>';
  block476.real = function(
var_p
) {
  lineNumber = 182
  lineNumber = 183
  lineNumber = 182
  var string477 = new GraceString("");
  var opresult479 = callmethod(string477, "++", [1], var_s);
  var string480 = new GraceString("\n      ");
  var opresult482 = callmethod(opresult479, "++", [1], string480);
  var opresult484 = callmethod(opresult482, "++", [1], var_spc);
  var string485 = new GraceString("");
  var opresult487 = callmethod(opresult484, "++", [1], string485);
  var opresult489 = callmethod(var_depth, "+", [1], new GraceNum(4));
  var call490 = callmethod(var_p,"pretty", [1], opresult489);
  var opresult492 = callmethod(opresult487, "++", [1], call490);
  var string493 = new GraceString("");
  var opresult495 = callmethod(opresult492, "++", [1], string493);
  var_s = opresult495;
  lineNumber = 185
  lineNumber = 186
  lineNumber = 1
  lineNumber = 183
  var call497 = callmethod(var_p,"dtype", [0]);
  var bool498 = new GraceBoolean(false)
  var opresult500 = callmethod(call497, "!=", [1], bool498);
  if (Grace_isTrue(opresult500)) {
  lineNumber = 185
  lineNumber = 184
  var string501 = new GraceString("");
  var opresult503 = callmethod(string501, "++", [1], var_s);
  var string504 = new GraceString(" : ");
  var opresult506 = callmethod(opresult503, "++", [1], string504);
  lineNumber = 185
  lineNumber = 1
  lineNumber = 185
  lineNumber = 1
  lineNumber = 184
  var call507 = callmethod(var_p,"dtype", [0]);
  var call508 = callmethod(call507,"value", [0]);
  var opresult510 = callmethod(opresult506, "++", [1], call508);
  var string511 = new GraceString("");
  var opresult513 = callmethod(opresult510, "++", [1], string511);
  var_s = opresult513;
  var if496 = opresult513;
}
  return if496;
};
  var call514 = callmethod(Grace_prelude,"for()do", [1, 1], call475, block476);
  lineNumber = 188
  lineNumber = 190
  lineNumber = 1
  lineNumber = 187
  var call516 = callmethod(var_part,"vararg", [0]);
  var bool517 = new GraceBoolean(false)
  var opresult519 = callmethod(call516, "!=", [1], bool517);
  if (Grace_isTrue(opresult519)) {
  lineNumber = 188
  lineNumber = 189
  lineNumber = 188
  var string520 = new GraceString("");
  var opresult522 = callmethod(string520, "++", [1], var_s);
  var string523 = new GraceString("\n    ");
  var opresult525 = callmethod(opresult522, "++", [1], string523);
  var opresult527 = callmethod(opresult525, "++", [1], var_spc);
  var string528 = new GraceString("Vararg: ");
  var opresult530 = callmethod(opresult527, "++", [1], string528);
  var opresult532 = callmethod(var_depth, "+", [1], new GraceNum(3));
  lineNumber = 189
  lineNumber = 1
  lineNumber = 188
  var call533 = callmethod(var_part,"vararg", [0]);
  var call534 = callmethod(call533,"pretty", [1], opresult532);
  var opresult536 = callmethod(opresult530, "++", [1], call534);
  var string537 = new GraceString("");
  var opresult539 = callmethod(opresult536, "++", [1], string537);
  var_s = opresult539;
  var if515 = opresult539;
}
  return if515;
};
  var call540 = callmethod(Grace_prelude,"for()do", [1, 1], call445, block446);
  lineNumber = 191
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj368.methods["pretty"] = func379;
  superDepth = origSuperDepth;
}
obj_init_368.apply(obj368, []);
  return obj368
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj365.methods["new"] = func367;
  superDepth = origSuperDepth;
}
obj_init_365.apply(obj365, []);
  var var_methodTypeNode = obj365;
  lineNumber = 194
  lineNumber = 1
var func541 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 194
  return var_typeNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["typeNode"] = func541;
  lineNumber = 1
  var obj542 = Grace_allocObject();
  obj542.outer = this;
    var reader_ast_outer543 = function() {
    return this.outer;
  }
  obj542.methods["outer"] = reader_ast_outer543;
function obj_init_542() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func544 = function(argcv) {
  var curarg = 1;
  var var_name__39__ = arguments[curarg];
  curarg++;
  var var_methods__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj545 = Grace_allocObject();
  obj545.outer = this;
    var reader_ast_outer546 = function() {
    return this.outer;
  }
  obj545.methods["outer"] = reader_ast_outer546;
function obj_init_545() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 195
  var string547 = new GraceString("type");
  obj545.data["kind"] = string547;
    var reader_ast_kind548 = function() {
    return this.data["kind"];
  }
  reader_ast_kind548.def = true;
  obj545.methods["kind"] = reader_ast_kind548;
  lineNumber = 196
  obj545.data["value"] = var_name__39__;
    var reader_ast_value549 = function() {
    return this.data["value"];
  }
  reader_ast_value549.def = true;
  obj545.methods["value"] = reader_ast_value549;
  lineNumber = 197
  obj545.data["methods"] = var_methods__39__;
    var reader_ast_methods550 = function() {
    return this.data["methods"];
  }
  reader_ast_methods550.def = true;
  obj545.methods["methods"] = reader_ast_methods550;
  lineNumber = 199
  var array551 = new GraceList([
]);

  obj545.data["unionTypes"] = array551;
    var reader_ast_unionTypes552 = function() {
    return this.data["unionTypes"];
  }
  reader_ast_unionTypes552.def = true;
  obj545.methods["unionTypes"] = reader_ast_unionTypes552;
  lineNumber = 200
  var array553 = new GraceList([
]);

  obj545.data["intersectionTypes"] = array553;
    var reader_ast_intersectionTypes554 = function() {
    return this.data["intersectionTypes"];
  }
  reader_ast_intersectionTypes554.def = true;
  obj545.methods["intersectionTypes"] = reader_ast_intersectionTypes554;
  lineNumber = 201
  lineNumber = 1
  lineNumber = 200
  var call555 = callmethod(var_util,"linenum", [0]);
  obj545.data["line"] = call555;
    var reader_ast_line556 = function() {
    return this.data["line"];
  }
  reader_ast_line556.def = true;
  obj545.methods["line"] = reader_ast_line556;
  lineNumber = 202
  var array557 = new GraceList([
]);

  obj545.data["generics"] = array557;
    var reader_ast_generics558 = function() {
    return this.data["generics"];
  }
  obj545.methods["generics"] = reader_ast_generics558;
  obj545.data["generics"] = array557;
  var writer_ast_generics558 = function(argcv, o) {
    this.data["generics"] = o;
  }
  obj545.methods["generics:="] = writer_ast_generics558;
obj545.mutable = true;
  var bool559 = new GraceBoolean(false)
  obj545.data["nominal"] = bool559;
    var reader_ast_nominal560 = function() {
    return this.data["nominal"];
  }
  obj545.methods["nominal"] = reader_ast_nominal560;
  obj545.data["nominal"] = bool559;
  var writer_ast_nominal560 = function(argcv, o) {
    this.data["nominal"] = o;
  }
  obj545.methods["nominal:="] = writer_ast_nominal560;
obj545.mutable = true;
  lineNumber = 203
  var string561 = new GraceString("");
  obj545.data["register"] = string561;
    var reader_ast_register562 = function() {
    return this.data["register"];
  }
  obj545.methods["register"] = reader_ast_register562;
  obj545.data["register"] = string561;
  var writer_ast_register562 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj545.methods["register:="] = writer_ast_register562;
obj545.mutable = true;
var func563 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 206
  lineNumber = 205
  var string564 = new GraceString("");
  var var_spc = string564;
  lineNumber = 208
  lineNumber = 206
  var opresult566 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 208
  var block567 = Grace_allocObject();
  block567.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block567.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block567.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block567.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block567.receiver = this;
  block567.className = 'block<ast:208>';
  block567.real = function(
var_i
) {
  lineNumber = 207
  var string568 = new GraceString("  ");
  var opresult570 = callmethod(var_spc, "++", [1], string568);
  var_spc = opresult570;
  return opresult570;
};
  var call571 = callmethod(Grace_prelude,"for()do", [1, 1], opresult566, block567);
  lineNumber = 210
  lineNumber = 209
  var string572 = new GraceString("Type\n");
  var var_s = string572;
  lineNumber = 211
  lineNumber = 210
  var string573 = new GraceString("");
  var opresult575 = callmethod(string573, "++", [1], var_s);
  var string576 = new GraceString("");
  var opresult578 = callmethod(opresult575, "++", [1], string576);
  var opresult580 = callmethod(opresult578, "++", [1], var_spc);
  var string581 = new GraceString("Name: ");
  var opresult583 = callmethod(opresult580, "++", [1], string581);
  lineNumber = 211
  var call584 = callmethod(this,"value", [0]);
  var opresult586 = callmethod(opresult583, "++", [1], call584);
  lineNumber = 210
  var string587 = new GraceString("\n");
  var opresult589 = callmethod(opresult586, "++", [1], string587);
  var_s = opresult589;
  lineNumber = 215
  lineNumber = 217
  lineNumber = 1
  lineNumber = 217
  var call591 = callmethod(this,"unionTypes", [0]);
  var call592 = callmethod(call591,"size", [0]);
  lineNumber = 211
  var opresult594 = callmethod(call592, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult594)) {
  lineNumber = 213
  lineNumber = 212
  var string595 = new GraceString("");
  var opresult597 = callmethod(string595, "++", [1], var_s);
  var string598 = new GraceString("");
  var opresult600 = callmethod(opresult597, "++", [1], string598);
  var opresult602 = callmethod(opresult600, "++", [1], var_spc);
  var string603 = new GraceString("Union of:\n");
  var opresult605 = callmethod(opresult602, "++", [1], string603);
  var_s = opresult605;
  lineNumber = 215
  lineNumber = 213
  var call606 = callmethod(this,"unionTypes", [0]);
  lineNumber = 215
  var block607 = Grace_allocObject();
  block607.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block607.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block607.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block607.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block607.receiver = this;
  block607.className = 'block<ast:215>';
  block607.real = function(
var_ut
) {
  lineNumber = 214
  var string608 = new GraceString("");
  var opresult610 = callmethod(string608, "++", [1], var_s);
  var string611 = new GraceString("");
  var opresult613 = callmethod(opresult610, "++", [1], string611);
  var opresult615 = callmethod(opresult613, "++", [1], var_spc);
  var string616 = new GraceString("  ");
  var opresult618 = callmethod(opresult615, "++", [1], string616);
  lineNumber = 215
  lineNumber = 1
  lineNumber = 214
  var call619 = callmethod(var_ut,"value", [0]);
  var opresult621 = callmethod(opresult618, "++", [1], call619);
  var string622 = new GraceString("\n");
  var opresult624 = callmethod(opresult621, "++", [1], string622);
  var_s = opresult624;
  return opresult624;
};
  var call625 = callmethod(Grace_prelude,"for()do", [1, 1], call606, block607);
  var if590 = call625;
}
  lineNumber = 221
  lineNumber = 223
  lineNumber = 1
  lineNumber = 223
  var call627 = callmethod(this,"intersectionTypes", [0]);
  var call628 = callmethod(call627,"size", [0]);
  lineNumber = 217
  var opresult630 = callmethod(call628, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult630)) {
  lineNumber = 219
  lineNumber = 218
  var string631 = new GraceString("");
  var opresult633 = callmethod(string631, "++", [1], var_s);
  var string634 = new GraceString("");
  var opresult636 = callmethod(opresult633, "++", [1], string634);
  var opresult638 = callmethod(opresult636, "++", [1], var_spc);
  var string639 = new GraceString("Intersection of:\n");
  var opresult641 = callmethod(opresult638, "++", [1], string639);
  var_s = opresult641;
  lineNumber = 221
  lineNumber = 219
  var call642 = callmethod(this,"intersectionTypes", [0]);
  lineNumber = 221
  var block643 = Grace_allocObject();
  block643.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block643.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block643.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block643.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block643.receiver = this;
  block643.className = 'block<ast:221>';
  block643.real = function(
var_it
) {
  lineNumber = 220
  var string644 = new GraceString("");
  var opresult646 = callmethod(string644, "++", [1], var_s);
  var string647 = new GraceString("");
  var opresult649 = callmethod(opresult646, "++", [1], string647);
  var opresult651 = callmethod(opresult649, "++", [1], var_spc);
  var string652 = new GraceString("  ");
  var opresult654 = callmethod(opresult651, "++", [1], string652);
  lineNumber = 221
  lineNumber = 1
  lineNumber = 220
  var call655 = callmethod(var_it,"value", [0]);
  var opresult657 = callmethod(opresult654, "++", [1], call655);
  var string658 = new GraceString("\n");
  var opresult660 = callmethod(opresult657, "++", [1], string658);
  var_s = opresult660;
  return opresult660;
};
  var call661 = callmethod(Grace_prelude,"for()do", [1, 1], call642, block643);
  var if626 = call661;
}
  lineNumber = 224
  lineNumber = 223
  var opresult663 = callmethod(var_s, "++", [1], var_spc);
  var string664 = new GraceString("Methods:");
  var opresult666 = callmethod(opresult663, "++", [1], string664);
  var_s = opresult666;
  lineNumber = 225
  lineNumber = 224
  var call667 = callmethod(this,"methods", [0]);
  lineNumber = 225
  var block668 = Grace_allocObject();
  block668.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block668.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block668.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block668.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block668.receiver = this;
  block668.className = 'block<ast:225>';
  block668.real = function(
var_mx
) {
  lineNumber = 226
  lineNumber = 225
  var string669 = new GraceString("\n  ");
  var opresult671 = callmethod(var_s, "++", [1], string669);
  var opresult673 = callmethod(opresult671, "++", [1], var_spc);
  var opresult675 = callmethod(var_depth, "+", [1], new GraceNum(2));
  var call676 = callmethod(var_mx,"pretty", [1], opresult675);
  var opresult678 = callmethod(opresult673, "++", [1], call676);
  var_s = opresult678;
  return opresult678;
};
  var call679 = callmethod(Grace_prelude,"for()do", [1, 1], call667, block668);
  lineNumber = 228
  lineNumber = 227
  var string680 = new GraceString("\n");
  var opresult682 = callmethod(var_s, "++", [1], string680);
  var_s = opresult682;
  lineNumber = 228
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj545.methods["pretty"] = func563;
  superDepth = origSuperDepth;
}
obj_init_545.apply(obj545, []);
  return obj545
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj542.methods["new"] = func544;
  superDepth = origSuperDepth;
}
obj_init_542.apply(obj542, []);
  var var_typeNode = obj542;
  lineNumber = 231
  lineNumber = 1
var func683 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 231
  return var_methodNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["methodNode"] = func683;
  lineNumber = 1
  var obj684 = Grace_allocObject();
  obj684.outer = this;
    var reader_ast_outer685 = function() {
    return this.outer;
  }
  obj684.methods["outer"] = reader_ast_outer685;
function obj_init_684() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func686 = function(argcv) {
  var curarg = 1;
  var var_name__39__ = arguments[curarg];
  curarg++;
  var var_signature__39__ = arguments[curarg];
  curarg++;
  var var_body__39__ = arguments[curarg];
  curarg++;
  var var_dtype__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj687 = Grace_allocObject();
  obj687.outer = this;
    var reader_ast_outer688 = function() {
    return this.outer;
  }
  obj687.methods["outer"] = reader_ast_outer688;
function obj_init_687() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 247
  var string689 = new GraceString("method");
  obj687.data["kind"] = string689;
    var reader_ast_kind690 = function() {
    return this.data["kind"];
  }
  reader_ast_kind690.def = true;
  obj687.methods["kind"] = reader_ast_kind690;
  lineNumber = 248
  obj687.data["value"] = var_name__39__;
    var reader_ast_value691 = function() {
    return this.data["value"];
  }
  reader_ast_value691.def = true;
  obj687.methods["value"] = reader_ast_value691;
  lineNumber = 249
  obj687.data["signature"] = var_signature__39__;
    var reader_ast_signature692 = function() {
    return this.data["signature"];
  }
  reader_ast_signature692.def = true;
  obj687.methods["signature"] = reader_ast_signature692;
  lineNumber = 250
  obj687.data["body"] = var_body__39__;
    var reader_ast_body693 = function() {
    return this.data["body"];
  }
  reader_ast_body693.def = true;
  obj687.methods["body"] = reader_ast_body693;
  lineNumber = 251
  obj687.data["dtype"] = var_dtype__39__;
    var reader_ast_dtype694 = function() {
    return this.data["dtype"];
  }
  obj687.methods["dtype"] = reader_ast_dtype694;
  obj687.data["dtype"] = var_dtype__39__;
  var writer_ast_dtype694 = function(argcv, o) {
    this.data["dtype"] = o;
  }
  obj687.methods["dtype:="] = writer_ast_dtype694;
obj687.mutable = true;
  lineNumber = 252
  var bool695 = new GraceBoolean(false)
  obj687.data["varargs"] = bool695;
    var reader_ast_varargs696 = function() {
    return this.data["varargs"];
  }
  obj687.methods["varargs"] = reader_ast_varargs696;
  obj687.data["varargs"] = bool695;
  var writer_ast_varargs696 = function(argcv, o) {
    this.data["varargs"] = o;
  }
  obj687.methods["varargs:="] = writer_ast_varargs696;
obj687.mutable = true;
  lineNumber = 253
  var bool697 = new GraceBoolean(false)
  obj687.data["selfclosure"] = bool697;
    var reader_ast_selfclosure698 = function() {
    return this.data["selfclosure"];
  }
  obj687.methods["selfclosure"] = reader_ast_selfclosure698;
  obj687.data["selfclosure"] = bool697;
  var writer_ast_selfclosure698 = function(argcv, o) {
    this.data["selfclosure"] = o;
  }
  obj687.methods["selfclosure:="] = writer_ast_selfclosure698;
obj687.mutable = true;
  lineNumber = 254
  var string699 = new GraceString("");
  obj687.data["register"] = string699;
    var reader_ast_register700 = function() {
    return this.data["register"];
  }
  obj687.methods["register"] = reader_ast_register700;
  obj687.data["register"] = string699;
  var writer_ast_register700 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj687.methods["register:="] = writer_ast_register700;
obj687.mutable = true;
  lineNumber = 256
  lineNumber = 1
  lineNumber = 255
  var call701 = callmethod(var_util,"linenum", [0]);
  obj687.data["line"] = call701;
    var reader_ast_line702 = function() {
    return this.data["line"];
  }
  reader_ast_line702.def = true;
  obj687.methods["line"] = reader_ast_line702;
var func703 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 258
  lineNumber = 257
  var string704 = new GraceString("");
  var var_spc = string704;
  lineNumber = 260
  lineNumber = 258
  var opresult706 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 260
  var block707 = Grace_allocObject();
  block707.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block707.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block707.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block707.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block707.receiver = this;
  block707.className = 'block<ast:260>';
  block707.real = function(
var_i
) {
  lineNumber = 259
  var string708 = new GraceString("  ");
  var opresult710 = callmethod(var_spc, "++", [1], string708);
  var_spc = opresult710;
  return opresult710;
};
  var call711 = callmethod(Grace_prelude,"for()do", [1, 1], opresult706, block707);
  lineNumber = 262
  lineNumber = 261
  var string712 = new GraceString("Method\n");
  var var_s = string712;
  lineNumber = 262
  lineNumber = 263
  lineNumber = 262
  var opresult714 = callmethod(var_s, "++", [1], var_spc);
  var string715 = new GraceString("Name: ");
  var opresult717 = callmethod(opresult714, "++", [1], string715);
  var opresult719 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 263
  lineNumber = 1
  lineNumber = 262
  var call720 = callmethod(this,"value", [0]);
  var call721 = callmethod(call720,"pretty", [1], opresult719);
  var opresult723 = callmethod(opresult717, "++", [1], call721);
  var_s = opresult723;
  lineNumber = 264
  lineNumber = 263
  var string724 = new GraceString("\n");
  var opresult726 = callmethod(var_s, "++", [1], string724);
  var_s = opresult726;
  lineNumber = 265
  lineNumber = 264
  var string727 = new GraceString("");
  var opresult729 = callmethod(string727, "++", [1], var_s);
  var string730 = new GraceString("");
  var opresult732 = callmethod(opresult729, "++", [1], string730);
  var opresult734 = callmethod(opresult732, "++", [1], var_spc);
  var string735 = new GraceString("Signature:");
  var opresult737 = callmethod(opresult734, "++", [1], string735);
  var_s = opresult737;
  lineNumber = 275
  lineNumber = 265
  var call738 = callmethod(this,"signature", [0]);
  lineNumber = 275
  var block739 = Grace_allocObject();
  block739.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block739.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block739.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block739.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block739.receiver = this;
  block739.className = 'block<ast:275>';
  block739.real = function(
var_part
) {
  lineNumber = 267
  lineNumber = 266
  var string740 = new GraceString("");
  var opresult742 = callmethod(string740, "++", [1], var_s);
  var string743 = new GraceString("\n  ");
  var opresult745 = callmethod(opresult742, "++", [1], string743);
  var opresult747 = callmethod(opresult745, "++", [1], var_spc);
  var string748 = new GraceString("Part: ");
  var opresult750 = callmethod(opresult747, "++", [1], string748);
  lineNumber = 267
  lineNumber = 1
  lineNumber = 266
  var call751 = callmethod(var_part,"name", [0]);
  var opresult753 = callmethod(opresult750, "++", [1], call751);
  var string754 = new GraceString("");
  var opresult756 = callmethod(opresult753, "++", [1], string754);
  var_s = opresult756;
  lineNumber = 268
  lineNumber = 267
  var string757 = new GraceString("");
  var opresult759 = callmethod(string757, "++", [1], var_s);
  var string760 = new GraceString("\n    ");
  var opresult762 = callmethod(opresult759, "++", [1], string760);
  var opresult764 = callmethod(opresult762, "++", [1], var_spc);
  var string765 = new GraceString("Parameters:");
  var opresult767 = callmethod(opresult764, "++", [1], string765);
  var_s = opresult767;
  lineNumber = 272
  lineNumber = 268
  lineNumber = 1
  lineNumber = 268
  var call768 = callmethod(var_part,"params", [0]);
  lineNumber = 272
  var block769 = Grace_allocObject();
  block769.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block769.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block769.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block769.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block769.receiver = this;
  block769.className = 'block<ast:272>';
  block769.real = function(
var_p
) {
  lineNumber = 269
  lineNumber = 270
  lineNumber = 269
  var string770 = new GraceString("");
  var opresult772 = callmethod(string770, "++", [1], var_s);
  var string773 = new GraceString("\n      ");
  var opresult775 = callmethod(opresult772, "++", [1], string773);
  var opresult777 = callmethod(opresult775, "++", [1], var_spc);
  var string778 = new GraceString("");
  var opresult780 = callmethod(opresult777, "++", [1], string778);
  var opresult782 = callmethod(var_depth, "+", [1], new GraceNum(4));
  var call783 = callmethod(var_p,"pretty", [1], opresult782);
  var opresult785 = callmethod(opresult780, "++", [1], call783);
  var string786 = new GraceString("");
  var opresult788 = callmethod(opresult785, "++", [1], string786);
  var_s = opresult788;
  lineNumber = 272
  lineNumber = 273
  lineNumber = 1
  lineNumber = 270
  var call790 = callmethod(var_p,"dtype", [0]);
  var bool791 = new GraceBoolean(false)
  var opresult793 = callmethod(call790, "!=", [1], bool791);
  if (Grace_isTrue(opresult793)) {
  lineNumber = 272
  lineNumber = 271
  var string794 = new GraceString("");
  var opresult796 = callmethod(string794, "++", [1], var_s);
  var string797 = new GraceString(" : ");
  var opresult799 = callmethod(opresult796, "++", [1], string797);
  lineNumber = 272
  lineNumber = 1
  lineNumber = 272
  lineNumber = 1
  lineNumber = 271
  var call800 = callmethod(var_p,"dtype", [0]);
  var call801 = callmethod(call800,"value", [0]);
  var opresult803 = callmethod(opresult799, "++", [1], call801);
  var string804 = new GraceString("");
  var opresult806 = callmethod(opresult803, "++", [1], string804);
  var_s = opresult806;
  var if789 = opresult806;
}
  return if789;
};
  var call807 = callmethod(Grace_prelude,"for()do", [1, 1], call768, block769);
  lineNumber = 275
  lineNumber = 277
  lineNumber = 1
  lineNumber = 274
  var call809 = callmethod(var_part,"vararg", [0]);
  var bool810 = new GraceBoolean(false)
  var opresult812 = callmethod(call809, "!=", [1], bool810);
  if (Grace_isTrue(opresult812)) {
  lineNumber = 275
  lineNumber = 276
  lineNumber = 275
  var string813 = new GraceString("");
  var opresult815 = callmethod(string813, "++", [1], var_s);
  var string816 = new GraceString("\n    ");
  var opresult818 = callmethod(opresult815, "++", [1], string816);
  var opresult820 = callmethod(opresult818, "++", [1], var_spc);
  var string821 = new GraceString("Vararg: ");
  var opresult823 = callmethod(opresult820, "++", [1], string821);
  var opresult825 = callmethod(var_depth, "+", [1], new GraceNum(3));
  lineNumber = 276
  lineNumber = 1
  lineNumber = 275
  var call826 = callmethod(var_part,"vararg", [0]);
  var call827 = callmethod(call826,"pretty", [1], opresult825);
  var opresult829 = callmethod(opresult823, "++", [1], call827);
  var string830 = new GraceString("");
  var opresult832 = callmethod(opresult829, "++", [1], string830);
  var_s = opresult832;
  var if808 = opresult832;
}
  return if808;
};
  var call833 = callmethod(Grace_prelude,"for()do", [1, 1], call738, block739);
  lineNumber = 279
  lineNumber = 278
  var string834 = new GraceString("\n");
  var opresult836 = callmethod(var_s, "++", [1], string834);
  var_s = opresult836;
  lineNumber = 280
  lineNumber = 279
  var opresult838 = callmethod(var_s, "++", [1], var_spc);
  var string839 = new GraceString("Body:");
  var opresult841 = callmethod(opresult838, "++", [1], string839);
  var_s = opresult841;
  lineNumber = 281
  lineNumber = 280
  lineNumber = 1
  lineNumber = 280
  var call842 = callmethod(this,"body", [0]);
  lineNumber = 281
  var block843 = Grace_allocObject();
  block843.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block843.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block843.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block843.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block843.receiver = this;
  block843.className = 'block<ast:281>';
  block843.real = function(
var_mx
) {
  lineNumber = 282
  lineNumber = 281
  var string844 = new GraceString("\n  ");
  var opresult846 = callmethod(var_s, "++", [1], string844);
  var opresult848 = callmethod(opresult846, "++", [1], var_spc);
  var opresult850 = callmethod(var_depth, "+", [1], new GraceNum(2));
  var call851 = callmethod(var_mx,"pretty", [1], opresult850);
  var opresult853 = callmethod(opresult848, "++", [1], call851);
  var_s = opresult853;
  return opresult853;
};
  var call854 = callmethod(Grace_prelude,"for()do", [1, 1], call842, block843);
  lineNumber = 283
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj687.methods["pretty"] = func703;
  superDepth = origSuperDepth;
}
obj_init_687.apply(obj687, []);
  return obj687
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj684.methods["new"] = func686;
  superDepth = origSuperDepth;
}
obj_init_684.apply(obj684, []);
  var var_methodNode = obj684;
  lineNumber = 286
  lineNumber = 1
var func855 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 286
  return var_callNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["callNode"] = func855;
  lineNumber = 1
  var obj856 = Grace_allocObject();
  obj856.outer = this;
    var reader_ast_outer857 = function() {
    return this.outer;
  }
  obj856.methods["outer"] = reader_ast_outer857;
function obj_init_856() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func858 = function(argcv) {
  var curarg = 1;
  var var_what = arguments[curarg];
  curarg++;
  var var_with__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj859 = Grace_allocObject();
  obj859.outer = this;
    var reader_ast_outer860 = function() {
    return this.outer;
  }
  obj859.methods["outer"] = reader_ast_outer860;
function obj_init_859() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 300
  var string861 = new GraceString("call");
  obj859.data["kind"] = string861;
    var reader_ast_kind862 = function() {
    return this.data["kind"];
  }
  reader_ast_kind862.def = true;
  obj859.methods["kind"] = reader_ast_kind862;
  lineNumber = 301
  obj859.data["value"] = var_what;
    var reader_ast_value863 = function() {
    return this.data["value"];
  }
  reader_ast_value863.def = true;
  obj859.methods["value"] = reader_ast_value863;
  lineNumber = 302
  obj859.data["with"] = var_with__39__;
    var reader_ast_with864 = function() {
    return this.data["with"];
  }
  reader_ast_with864.def = true;
  obj859.methods["with"] = reader_ast_with864;
  lineNumber = 304
  lineNumber = 303
  lineNumber = 304
  lineNumber = 1
  lineNumber = 303
  var call865 = callmethod(var_util,"linenum", [0]);
  var opresult867 = callmethod(new GraceNum(0), "+", [1], call865);
  obj859.data["line"] = opresult867;
    var reader_ast_line868 = function() {
    return this.data["line"];
  }
  reader_ast_line868.def = true;
  obj859.methods["line"] = reader_ast_line868;
  lineNumber = 304
  var string869 = new GraceString("");
  obj859.data["register"] = string869;
    var reader_ast_register870 = function() {
    return this.data["register"];
  }
  obj859.methods["register"] = reader_ast_register870;
  obj859.data["register"] = string869;
  var writer_ast_register870 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj859.methods["register:="] = writer_ast_register870;
obj859.mutable = true;
var func871 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 307
  lineNumber = 306
  var string872 = new GraceString("");
  var var_spc = string872;
  lineNumber = 309
  lineNumber = 307
  var opresult874 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 309
  var block875 = Grace_allocObject();
  block875.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block875.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block875.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block875.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block875.receiver = this;
  block875.className = 'block<ast:309>';
  block875.real = function(
var_i
) {
  lineNumber = 308
  var string876 = new GraceString("  ");
  var opresult878 = callmethod(var_spc, "++", [1], string876);
  var_spc = opresult878;
  return opresult878;
};
  var call879 = callmethod(Grace_prelude,"for()do", [1, 1], opresult874, block875);
  lineNumber = 311
  lineNumber = 310
  var string880 = new GraceString("Call\n");
  var var_s = string880;
  lineNumber = 311
  lineNumber = 312
  lineNumber = 311
  var opresult882 = callmethod(var_s, "++", [1], var_spc);
  var string883 = new GraceString("Method: ");
  var opresult885 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 312
  lineNumber = 1
  lineNumber = 311
  var call886 = callmethod(this,"value", [0]);
  var call887 = callmethod(call886,"pretty", [1], opresult885);
  var opresult889 = callmethod(string883, "++", [1], call887);
  var string890 = new GraceString("");
  var opresult892 = callmethod(opresult889, "++", [1], string890);
  var opresult894 = callmethod(opresult882, "++", [1], opresult892);
  var_s = opresult894;
  lineNumber = 313
  lineNumber = 312
  var string895 = new GraceString("\n");
  var opresult897 = callmethod(var_s, "++", [1], string895);
  var_s = opresult897;
  lineNumber = 314
  lineNumber = 313
  var opresult899 = callmethod(var_s, "++", [1], var_spc);
  var string900 = new GraceString("Arguments:");
  var opresult902 = callmethod(opresult899, "++", [1], string900);
  var_s = opresult902;
  lineNumber = 317
  lineNumber = 314
  lineNumber = 1
  lineNumber = 314
  var call903 = callmethod(this,"with", [0]);
  lineNumber = 317
  var block904 = Grace_allocObject();
  block904.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block904.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block904.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block904.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block904.receiver = this;
  block904.className = 'block<ast:317>';
  block904.real = function(
var_part
) {
  lineNumber = 316
  lineNumber = 315
  var string905 = new GraceString("\n  ");
  var opresult907 = callmethod(var_s, "++", [1], string905);
  var opresult909 = callmethod(opresult907, "++", [1], var_spc);
  var string910 = new GraceString("Part: ");
  var opresult912 = callmethod(opresult909, "++", [1], string910);
  lineNumber = 316
  lineNumber = 1
  lineNumber = 315
  var call913 = callmethod(var_part,"name", [0]);
  var opresult915 = callmethod(opresult912, "++", [1], call913);
  var_s = opresult915;
  lineNumber = 317
  lineNumber = 316
  lineNumber = 1
  lineNumber = 316
  var call916 = callmethod(var_part,"args", [0]);
  lineNumber = 317
  var block917 = Grace_allocObject();
  block917.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block917.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block917.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block917.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block917.receiver = this;
  block917.className = 'block<ast:317>';
  block917.real = function(
var_arg
) {
  lineNumber = 318
  lineNumber = 317
  var string918 = new GraceString("\n    ");
  var opresult920 = callmethod(var_s, "++", [1], string918);
  var opresult922 = callmethod(opresult920, "++", [1], var_spc);
  var opresult924 = callmethod(var_depth, "+", [1], new GraceNum(3));
  var call925 = callmethod(var_arg,"pretty", [1], opresult924);
  var opresult927 = callmethod(opresult922, "++", [1], call925);
  var_s = opresult927;
  return opresult927;
};
  var call928 = callmethod(Grace_prelude,"for()do", [1, 1], call916, block917);
  return call928;
};
  var call929 = callmethod(Grace_prelude,"for()do", [1, 1], call903, block904);
  lineNumber = 320
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj859.methods["pretty"] = func871;
  superDepth = origSuperDepth;
}
obj_init_859.apply(obj859, []);
  return obj859
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj856.methods["new"] = func858;
  superDepth = origSuperDepth;
}
obj_init_856.apply(obj856, []);
  var var_callNode = obj856;
  lineNumber = 323
  lineNumber = 1
var func930 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 323
  return var_classNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["classNode"] = func930;
  lineNumber = 1
  var obj931 = Grace_allocObject();
  obj931.outer = this;
    var reader_ast_outer932 = function() {
    return this.outer;
  }
  obj931.methods["outer"] = reader_ast_outer932;
function obj_init_931() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func933 = function(argcv) {
  var curarg = 1;
  var var_name__39__ = arguments[curarg];
  curarg++;
  var var_signature__39__ = arguments[curarg];
  curarg++;
  var var_body__39__ = arguments[curarg];
  curarg++;
  var var_superclass__39__ = arguments[curarg];
  curarg++;
  var var_constructor__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj934 = Grace_allocObject();
  obj934.outer = this;
    var reader_ast_outer935 = function() {
    return this.outer;
  }
  obj934.methods["outer"] = reader_ast_outer935;
function obj_init_934() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 339
  var string936 = new GraceString("class");
  obj934.data["kind"] = string936;
    var reader_ast_kind937 = function() {
    return this.data["kind"];
  }
  reader_ast_kind937.def = true;
  obj934.methods["kind"] = reader_ast_kind937;
  lineNumber = 340
  obj934.data["value"] = var_body__39__;
    var reader_ast_value938 = function() {
    return this.data["value"];
  }
  reader_ast_value938.def = true;
  obj934.methods["value"] = reader_ast_value938;
  lineNumber = 341
  obj934.data["name"] = var_name__39__;
    var reader_ast_name939 = function() {
    return this.data["name"];
  }
  reader_ast_name939.def = true;
  obj934.methods["name"] = reader_ast_name939;
  lineNumber = 342
  obj934.data["constructor"] = var_constructor__39__;
    var reader_ast_constructor940 = function() {
    return this.data["constructor"];
  }
  reader_ast_constructor940.def = true;
  obj934.methods["constructor"] = reader_ast_constructor940;
  lineNumber = 343
  obj934.data["signature"] = var_signature__39__;
    var reader_ast_signature941 = function() {
    return this.data["signature"];
  }
  reader_ast_signature941.def = true;
  obj934.methods["signature"] = reader_ast_signature941;
  lineNumber = 344
  var string942 = new GraceString("");
  obj934.data["register"] = string942;
    var reader_ast_register943 = function() {
    return this.data["register"];
  }
  obj934.methods["register"] = reader_ast_register943;
  obj934.data["register"] = string942;
  var writer_ast_register943 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj934.methods["register:="] = writer_ast_register943;
obj934.mutable = true;
  lineNumber = 346
  lineNumber = 1
  lineNumber = 345
  var call944 = callmethod(var_util,"linenum", [0]);
  obj934.data["line"] = call944;
    var reader_ast_line945 = function() {
    return this.data["line"];
  }
  reader_ast_line945.def = true;
  obj934.methods["line"] = reader_ast_line945;
  lineNumber = 346
  obj934.data["superclass"] = var_superclass__39__;
    var reader_ast_superclass946 = function() {
    return this.data["superclass"];
  }
  reader_ast_superclass946.def = true;
  obj934.methods["superclass"] = reader_ast_superclass946;
var func947 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 349
  lineNumber = 348
  var string948 = new GraceString("");
  var var_spc = string948;
  lineNumber = 351
  lineNumber = 349
  var opresult950 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 351
  var block951 = Grace_allocObject();
  block951.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block951.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block951.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block951.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block951.receiver = this;
  block951.className = 'block<ast:351>';
  block951.real = function(
var_i
) {
  lineNumber = 350
  var string952 = new GraceString("  ");
  var opresult954 = callmethod(var_spc, "++", [1], string952);
  var_spc = opresult954;
  return opresult954;
};
  var call955 = callmethod(Grace_prelude,"for()do", [1, 1], opresult950, block951);
  lineNumber = 352
  var string956 = new GraceString("Class(");
  lineNumber = 353
  lineNumber = 1
  lineNumber = 352
  var call957 = callmethod(this,"name", [0]);
  var call958 = callmethod(call957,"pretty", [1], new GraceNum(0));
  var opresult960 = callmethod(string956, "++", [1], call958);
  var string961 = new GraceString(")");
  var opresult963 = callmethod(opresult960, "++", [1], string961);
  var var_s = opresult963;
  lineNumber = 355
  lineNumber = 357
  lineNumber = 1
  lineNumber = 353
  var call965 = callmethod(this,"superclass", [0]);
  var bool966 = new GraceBoolean(false)
  var opresult968 = callmethod(call965, "/=", [1], bool966);
  if (Grace_isTrue(opresult968)) {
  lineNumber = 355
  lineNumber = 354
  var string969 = new GraceString("\n");
  var opresult971 = callmethod(var_s, "++", [1], string969);
  var opresult973 = callmethod(opresult971, "++", [1], var_spc);
  var string974 = new GraceString("Superclass:");
  var opresult976 = callmethod(opresult973, "++", [1], string974);
  var_s = opresult976;
  lineNumber = 355
  lineNumber = 356
  lineNumber = 355
  var string977 = new GraceString("\n  ");
  var opresult979 = callmethod(var_s, "++", [1], string977);
  var opresult981 = callmethod(opresult979, "++", [1], var_spc);
  var opresult983 = callmethod(var_depth, "+", [1], new GraceNum(2));
  lineNumber = 356
  lineNumber = 1
  lineNumber = 355
  var call984 = callmethod(this,"superclass", [0]);
  var call985 = callmethod(call984,"pretty", [1], opresult983);
  var opresult987 = callmethod(opresult981, "++", [1], call985);
  var_s = opresult987;
  var if964 = opresult987;
}
  lineNumber = 358
  lineNumber = 357
  var string988 = new GraceString("\n");
  var opresult990 = callmethod(var_s, "++", [1], string988);
  var_s = opresult990;
  lineNumber = 359
  lineNumber = 358
  var string991 = new GraceString("");
  var opresult993 = callmethod(string991, "++", [1], var_s);
  var string994 = new GraceString("");
  var opresult996 = callmethod(opresult993, "++", [1], string994);
  var opresult998 = callmethod(opresult996, "++", [1], var_spc);
  var string999 = new GraceString("Signature:");
  var opresult1001 = callmethod(opresult998, "++", [1], string999);
  var_s = opresult1001;
  lineNumber = 369
  lineNumber = 359
  var call1002 = callmethod(this,"signature", [0]);
  lineNumber = 369
  var block1003 = Grace_allocObject();
  block1003.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1003.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1003.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1003.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1003.receiver = this;
  block1003.className = 'block<ast:369>';
  block1003.real = function(
var_part
) {
  lineNumber = 361
  lineNumber = 360
  var string1004 = new GraceString("");
  var opresult1006 = callmethod(string1004, "++", [1], var_s);
  var string1007 = new GraceString("\n  ");
  var opresult1009 = callmethod(opresult1006, "++", [1], string1007);
  var opresult1011 = callmethod(opresult1009, "++", [1], var_spc);
  var string1012 = new GraceString("Part: ");
  var opresult1014 = callmethod(opresult1011, "++", [1], string1012);
  lineNumber = 361
  lineNumber = 1
  lineNumber = 360
  var call1015 = callmethod(var_part,"name", [0]);
  var opresult1017 = callmethod(opresult1014, "++", [1], call1015);
  var string1018 = new GraceString("");
  var opresult1020 = callmethod(opresult1017, "++", [1], string1018);
  var_s = opresult1020;
  lineNumber = 362
  lineNumber = 361
  var string1021 = new GraceString("");
  var opresult1023 = callmethod(string1021, "++", [1], var_s);
  var string1024 = new GraceString("\n    ");
  var opresult1026 = callmethod(opresult1023, "++", [1], string1024);
  var opresult1028 = callmethod(opresult1026, "++", [1], var_spc);
  var string1029 = new GraceString("Parameters:");
  var opresult1031 = callmethod(opresult1028, "++", [1], string1029);
  var_s = opresult1031;
  lineNumber = 366
  lineNumber = 362
  lineNumber = 1
  lineNumber = 362
  var call1032 = callmethod(var_part,"params", [0]);
  lineNumber = 366
  var block1033 = Grace_allocObject();
  block1033.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1033.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1033.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1033.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1033.receiver = this;
  block1033.className = 'block<ast:366>';
  block1033.real = function(
var_p
) {
  lineNumber = 363
  lineNumber = 364
  lineNumber = 363
  var string1034 = new GraceString("");
  var opresult1036 = callmethod(string1034, "++", [1], var_s);
  var string1037 = new GraceString("\n      ");
  var opresult1039 = callmethod(opresult1036, "++", [1], string1037);
  var opresult1041 = callmethod(opresult1039, "++", [1], var_spc);
  var string1042 = new GraceString("");
  var opresult1044 = callmethod(opresult1041, "++", [1], string1042);
  var opresult1046 = callmethod(var_depth, "+", [1], new GraceNum(4));
  var call1047 = callmethod(var_p,"pretty", [1], opresult1046);
  var opresult1049 = callmethod(opresult1044, "++", [1], call1047);
  var string1050 = new GraceString("");
  var opresult1052 = callmethod(opresult1049, "++", [1], string1050);
  var_s = opresult1052;
  lineNumber = 366
  lineNumber = 367
  lineNumber = 1
  lineNumber = 364
  var call1054 = callmethod(var_p,"dtype", [0]);
  var bool1055 = new GraceBoolean(false)
  var opresult1057 = callmethod(call1054, "!=", [1], bool1055);
  if (Grace_isTrue(opresult1057)) {
  lineNumber = 366
  lineNumber = 365
  var string1058 = new GraceString("");
  var opresult1060 = callmethod(string1058, "++", [1], var_s);
  var string1061 = new GraceString(" : ");
  var opresult1063 = callmethod(opresult1060, "++", [1], string1061);
  lineNumber = 366
  lineNumber = 1
  lineNumber = 366
  lineNumber = 1
  lineNumber = 365
  var call1064 = callmethod(var_p,"dtype", [0]);
  var call1065 = callmethod(call1064,"value", [0]);
  var opresult1067 = callmethod(opresult1063, "++", [1], call1065);
  var string1068 = new GraceString("");
  var opresult1070 = callmethod(opresult1067, "++", [1], string1068);
  var_s = opresult1070;
  var if1053 = opresult1070;
}
  return if1053;
};
  var call1071 = callmethod(Grace_prelude,"for()do", [1, 1], call1032, block1033);
  lineNumber = 369
  lineNumber = 371
  lineNumber = 1
  lineNumber = 368
  var call1073 = callmethod(var_part,"vararg", [0]);
  var bool1074 = new GraceBoolean(false)
  var opresult1076 = callmethod(call1073, "!=", [1], bool1074);
  if (Grace_isTrue(opresult1076)) {
  lineNumber = 369
  lineNumber = 370
  lineNumber = 369
  var string1077 = new GraceString("");
  var opresult1079 = callmethod(string1077, "++", [1], var_s);
  var string1080 = new GraceString("\n    ");
  var opresult1082 = callmethod(opresult1079, "++", [1], string1080);
  var opresult1084 = callmethod(opresult1082, "++", [1], var_spc);
  var string1085 = new GraceString("Vararg: ");
  var opresult1087 = callmethod(opresult1084, "++", [1], string1085);
  var opresult1089 = callmethod(var_depth, "+", [1], new GraceNum(3));
  lineNumber = 370
  lineNumber = 1
  lineNumber = 369
  var call1090 = callmethod(var_part,"vararg", [0]);
  var call1091 = callmethod(call1090,"pretty", [1], opresult1089);
  var opresult1093 = callmethod(opresult1087, "++", [1], call1091);
  var string1094 = new GraceString("");
  var opresult1096 = callmethod(opresult1093, "++", [1], string1094);
  var_s = opresult1096;
  var if1072 = opresult1096;
}
  return if1072;
};
  var call1097 = callmethod(Grace_prelude,"for()do", [1, 1], call1002, block1003);
  lineNumber = 373
  lineNumber = 372
  var string1098 = new GraceString("\n");
  var opresult1100 = callmethod(var_s, "++", [1], string1098);
  var opresult1102 = callmethod(opresult1100, "++", [1], var_spc);
  var string1103 = new GraceString("Body:");
  var opresult1105 = callmethod(opresult1102, "++", [1], string1103);
  var_s = opresult1105;
  lineNumber = 374
  lineNumber = 373
  lineNumber = 1
  lineNumber = 373
  var call1106 = callmethod(this,"value", [0]);
  lineNumber = 374
  var block1107 = Grace_allocObject();
  block1107.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1107.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1107.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1107.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1107.receiver = this;
  block1107.className = 'block<ast:374>';
  block1107.real = function(
var_x
) {
  lineNumber = 375
  lineNumber = 374
  var string1108 = new GraceString("\n  ");
  var opresult1110 = callmethod(var_s, "++", [1], string1108);
  var opresult1112 = callmethod(opresult1110, "++", [1], var_spc);
  var opresult1114 = callmethod(var_depth, "+", [1], new GraceNum(2));
  var call1115 = callmethod(var_x,"pretty", [1], opresult1114);
  var opresult1117 = callmethod(opresult1112, "++", [1], call1115);
  var_s = opresult1117;
  return opresult1117;
};
  var call1118 = callmethod(Grace_prelude,"for()do", [1, 1], call1106, block1107);
  lineNumber = 376
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj934.methods["pretty"] = func947;
  superDepth = origSuperDepth;
}
obj_init_934.apply(obj934, []);
  return obj934
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj931.methods["new"] = func933;
  superDepth = origSuperDepth;
}
obj_init_931.apply(obj931, []);
  var var_classNode = obj931;
  lineNumber = 379
  lineNumber = 1
var func1119 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 379
  return var_objectNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["objectNode"] = func1119;
  lineNumber = 1
  var obj1120 = Grace_allocObject();
  obj1120.outer = this;
    var reader_ast_outer1121 = function() {
    return this.outer;
  }
  obj1120.methods["outer"] = reader_ast_outer1121;
function obj_init_1120() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1122 = function(argcv) {
  var curarg = 1;
  var var_body = arguments[curarg];
  curarg++;
  var var_superclass__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1123 = Grace_allocObject();
  obj1123.outer = this;
    var reader_ast_outer1124 = function() {
    return this.outer;
  }
  obj1123.methods["outer"] = reader_ast_outer1124;
function obj_init_1123() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 380
  var string1125 = new GraceString("object");
  obj1123.data["kind"] = string1125;
    var reader_ast_kind1126 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1126.def = true;
  obj1123.methods["kind"] = reader_ast_kind1126;
  lineNumber = 381
  obj1123.data["value"] = var_body;
    var reader_ast_value1127 = function() {
    return this.data["value"];
  }
  reader_ast_value1127.def = true;
  obj1123.methods["value"] = reader_ast_value1127;
  lineNumber = 382
  var string1128 = new GraceString("");
  obj1123.data["register"] = string1128;
    var reader_ast_register1129 = function() {
    return this.data["register"];
  }
  obj1123.methods["register"] = reader_ast_register1129;
  obj1123.data["register"] = string1128;
  var writer_ast_register1129 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1123.methods["register:="] = writer_ast_register1129;
obj1123.mutable = true;
  lineNumber = 384
  lineNumber = 1
  lineNumber = 383
  var call1130 = callmethod(var_util,"linenum", [0]);
  obj1123.data["line"] = call1130;
    var reader_ast_line1131 = function() {
    return this.data["line"];
  }
  reader_ast_line1131.def = true;
  obj1123.methods["line"] = reader_ast_line1131;
  lineNumber = 384
  obj1123.data["superclass"] = var_superclass__39__;
    var reader_ast_superclass1132 = function() {
    return this.data["superclass"];
  }
  reader_ast_superclass1132.def = true;
  obj1123.methods["superclass"] = reader_ast_superclass1132;
  lineNumber = 385
  var bool1133 = new GraceBoolean(false)
  obj1123.data["otype"] = bool1133;
    var reader_ast_otype1134 = function() {
    return this.data["otype"];
  }
  obj1123.methods["otype"] = reader_ast_otype1134;
  obj1123.data["otype"] = bool1133;
  var writer_ast_otype1134 = function(argcv, o) {
    this.data["otype"] = o;
  }
  obj1123.methods["otype:="] = writer_ast_otype1134;
obj1123.mutable = true;
  lineNumber = 386
  var string1135 = new GraceString("object");
  obj1123.data["classname"] = string1135;
    var reader_ast_classname1136 = function() {
    return this.data["classname"];
  }
  obj1123.methods["classname"] = reader_ast_classname1136;
  obj1123.data["classname"] = string1135;
  var writer_ast_classname1136 = function(argcv, o) {
    this.data["classname"] = o;
  }
  obj1123.methods["classname:="] = writer_ast_classname1136;
obj1123.mutable = true;
var func1137 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 389
  lineNumber = 388
  var string1138 = new GraceString("");
  var var_spc = string1138;
  lineNumber = 391
  lineNumber = 389
  var opresult1140 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 391
  var block1141 = Grace_allocObject();
  block1141.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1141.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1141.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1141.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1141.receiver = this;
  block1141.className = 'block<ast:391>';
  block1141.real = function(
var_i
) {
  lineNumber = 390
  var string1142 = new GraceString("  ");
  var opresult1144 = callmethod(var_spc, "++", [1], string1142);
  var_spc = opresult1144;
  return opresult1144;
};
  var call1145 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1140, block1141);
  lineNumber = 393
  lineNumber = 392
  var string1146 = new GraceString("Object");
  var var_s = string1146;
  lineNumber = 398
  lineNumber = 399
  lineNumber = 1
  lineNumber = 393
  var call1148 = callmethod(this,"superclass", [0]);
  var bool1149 = new GraceBoolean(false)
  var opresult1151 = callmethod(call1148, "/=", [1], bool1149);
  if (Grace_isTrue(opresult1151)) {
  lineNumber = 395
  lineNumber = 394
  var string1152 = new GraceString("\n");
  var opresult1154 = callmethod(var_s, "++", [1], string1152);
  var opresult1156 = callmethod(opresult1154, "++", [1], var_spc);
  var string1157 = new GraceString("Superclass:");
  var opresult1159 = callmethod(opresult1156, "++", [1], string1157);
  var_s = opresult1159;
  lineNumber = 395
  lineNumber = 396
  lineNumber = 395
  var string1160 = new GraceString("\n  ");
  var opresult1162 = callmethod(var_s, "++", [1], string1160);
  var opresult1164 = callmethod(opresult1162, "++", [1], var_spc);
  var opresult1166 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 396
  lineNumber = 1
  lineNumber = 395
  var call1167 = callmethod(this,"superclass", [0]);
  var call1168 = callmethod(call1167,"pretty", [1], opresult1166);
  var opresult1170 = callmethod(opresult1164, "++", [1], call1168);
  var_s = opresult1170;
  lineNumber = 397
  lineNumber = 396
  var string1171 = new GraceString("\n");
  var opresult1173 = callmethod(var_s, "++", [1], string1171);
  var opresult1175 = callmethod(opresult1173, "++", [1], var_spc);
  var string1176 = new GraceString("Body:");
  var opresult1178 = callmethod(opresult1175, "++", [1], string1176);
  var_s = opresult1178;
  lineNumber = 398
  lineNumber = 397
  var opresult1180 = callmethod(var_depth, "+", [1], new GraceNum(1));
  var_depth = opresult1180;
  var if1147 = opresult1180;
}
  lineNumber = 400
  lineNumber = 399
  lineNumber = 1
  lineNumber = 399
  var call1181 = callmethod(this,"value", [0]);
  lineNumber = 400
  var block1182 = Grace_allocObject();
  block1182.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1182.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1182.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1182.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1182.receiver = this;
  block1182.className = 'block<ast:400>';
  block1182.real = function(
var_x
) {
  lineNumber = 401
  lineNumber = 400
  var string1183 = new GraceString("\n");
  var opresult1185 = callmethod(var_s, "++", [1], string1183);
  var opresult1187 = callmethod(opresult1185, "++", [1], var_spc);
  var opresult1189 = callmethod(var_depth, "+", [1], new GraceNum(1));
  var call1190 = callmethod(var_x,"pretty", [1], opresult1189);
  var opresult1192 = callmethod(opresult1187, "++", [1], call1190);
  var_s = opresult1192;
  return opresult1192;
};
  var call1193 = callmethod(Grace_prelude,"for()do", [1, 1], call1181, block1182);
  lineNumber = 402
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1123.methods["pretty"] = func1137;
  superDepth = origSuperDepth;
}
obj_init_1123.apply(obj1123, []);
  return obj1123
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1120.methods["new"] = func1122;
  superDepth = origSuperDepth;
}
obj_init_1120.apply(obj1120, []);
  var var_objectNode = obj1120;
  lineNumber = 405
  lineNumber = 1
var func1194 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 405
  return var_arrayNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["arrayNode"] = func1194;
  lineNumber = 1
  var obj1195 = Grace_allocObject();
  obj1195.outer = this;
    var reader_ast_outer1196 = function() {
    return this.outer;
  }
  obj1195.methods["outer"] = reader_ast_outer1196;
function obj_init_1195() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1197 = function(argcv) {
  var curarg = 1;
  var var_values = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1198 = Grace_allocObject();
  obj1198.outer = this;
    var reader_ast_outer1199 = function() {
    return this.outer;
  }
  obj1198.methods["outer"] = reader_ast_outer1199;
function obj_init_1198() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 406
  var string1200 = new GraceString("array");
  obj1198.data["kind"] = string1200;
    var reader_ast_kind1201 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1201.def = true;
  obj1198.methods["kind"] = reader_ast_kind1201;
  lineNumber = 407
  obj1198.data["value"] = var_values;
    var reader_ast_value1202 = function() {
    return this.data["value"];
  }
  reader_ast_value1202.def = true;
  obj1198.methods["value"] = reader_ast_value1202;
  lineNumber = 408
  var string1203 = new GraceString("");
  obj1198.data["register"] = string1203;
    var reader_ast_register1204 = function() {
    return this.data["register"];
  }
  obj1198.methods["register"] = reader_ast_register1204;
  obj1198.data["register"] = string1203;
  var writer_ast_register1204 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1198.methods["register:="] = writer_ast_register1204;
obj1198.mutable = true;
  lineNumber = 410
  lineNumber = 1
  lineNumber = 409
  var call1205 = callmethod(var_util,"linenum", [0]);
  obj1198.data["line"] = call1205;
    var reader_ast_line1206 = function() {
    return this.data["line"];
  }
  reader_ast_line1206.def = true;
  obj1198.methods["line"] = reader_ast_line1206;
var func1207 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 412
  lineNumber = 411
  var string1208 = new GraceString("");
  var var_spc = string1208;
  lineNumber = 414
  lineNumber = 412
  var opresult1210 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 414
  var block1211 = Grace_allocObject();
  block1211.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1211.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1211.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1211.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1211.receiver = this;
  block1211.className = 'block<ast:414>';
  block1211.real = function(
var_ai
) {
  lineNumber = 413
  var string1212 = new GraceString("  ");
  var opresult1214 = callmethod(var_spc, "++", [1], string1212);
  var_spc = opresult1214;
  return opresult1214;
};
  var call1215 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1210, block1211);
  lineNumber = 416
  lineNumber = 415
  var string1216 = new GraceString("Array");
  var var_s = string1216;
  lineNumber = 417
  lineNumber = 416
  lineNumber = 1
  lineNumber = 416
  var call1217 = callmethod(this,"value", [0]);
  lineNumber = 417
  var block1218 = Grace_allocObject();
  block1218.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1218.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1218.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1218.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1218.receiver = this;
  block1218.className = 'block<ast:417>';
  block1218.real = function(
var_ax
) {
  lineNumber = 418
  lineNumber = 417
  var string1219 = new GraceString("\n");
  var opresult1221 = callmethod(var_s, "++", [1], string1219);
  var opresult1223 = callmethod(opresult1221, "++", [1], var_spc);
  var opresult1225 = callmethod(var_depth, "+", [1], new GraceNum(1));
  var call1226 = callmethod(var_ax,"pretty", [1], opresult1225);
  var opresult1228 = callmethod(opresult1223, "++", [1], call1226);
  var_s = opresult1228;
  return opresult1228;
};
  var call1229 = callmethod(Grace_prelude,"for()do", [1, 1], call1217, block1218);
  lineNumber = 419
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1198.methods["pretty"] = func1207;
  superDepth = origSuperDepth;
}
obj_init_1198.apply(obj1198, []);
  return obj1198
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1195.methods["new"] = func1197;
  superDepth = origSuperDepth;
}
obj_init_1195.apply(obj1195, []);
  var var_arrayNode = obj1195;
  lineNumber = 422
  lineNumber = 1
var func1230 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 422
  return var_memberNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["memberNode"] = func1230;
  lineNumber = 1
  var obj1231 = Grace_allocObject();
  obj1231.outer = this;
    var reader_ast_outer1232 = function() {
    return this.outer;
  }
  obj1231.methods["outer"] = reader_ast_outer1232;
function obj_init_1231() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1233 = function(argcv) {
  var curarg = 1;
  var var_what = arguments[curarg];
  curarg++;
  var var_in__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1234 = Grace_allocObject();
  obj1234.outer = this;
    var reader_ast_outer1235 = function() {
    return this.outer;
  }
  obj1234.methods["outer"] = reader_ast_outer1235;
function obj_init_1234() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 423
  var string1236 = new GraceString("member");
  obj1234.data["kind"] = string1236;
    var reader_ast_kind1237 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1237.def = true;
  obj1234.methods["kind"] = reader_ast_kind1237;
  lineNumber = 424
  obj1234.data["value"] = var_what;
    var reader_ast_value1238 = function() {
    return this.data["value"];
  }
  obj1234.methods["value"] = reader_ast_value1238;
  obj1234.data["value"] = var_what;
  var writer_ast_value1238 = function(argcv, o) {
    this.data["value"] = o;
  }
  obj1234.methods["value:="] = writer_ast_value1238;
obj1234.mutable = true;
  lineNumber = 425
  obj1234.data["in"] = var_in__39__;
    var reader_ast_in1239 = function() {
    return this.data["in"];
  }
  reader_ast_in1239.def = true;
  obj1234.methods["in"] = reader_ast_in1239;
  lineNumber = 426
  var string1240 = new GraceString("");
  obj1234.data["register"] = string1240;
    var reader_ast_register1241 = function() {
    return this.data["register"];
  }
  obj1234.methods["register"] = reader_ast_register1241;
  obj1234.data["register"] = string1240;
  var writer_ast_register1241 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1234.methods["register:="] = writer_ast_register1241;
obj1234.mutable = true;
  lineNumber = 428
  lineNumber = 1
  lineNumber = 427
  var call1242 = callmethod(var_util,"linenum", [0]);
  obj1234.data["line"] = call1242;
    var reader_ast_line1243 = function() {
    return this.data["line"];
  }
  reader_ast_line1243.def = true;
  obj1234.methods["line"] = reader_ast_line1243;
var func1244 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 430
  lineNumber = 429
  var string1245 = new GraceString("");
  var var_spc = string1245;
  lineNumber = 432
  lineNumber = 430
  var opresult1247 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 432
  var block1248 = Grace_allocObject();
  block1248.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1248.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1248.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1248.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1248.receiver = this;
  block1248.className = 'block<ast:432>';
  block1248.real = function(
var_i
) {
  lineNumber = 431
  var string1249 = new GraceString("  ");
  var opresult1251 = callmethod(var_spc, "++", [1], string1249);
  var_spc = opresult1251;
  return opresult1251;
};
  var call1252 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1247, block1248);
  lineNumber = 434
  lineNumber = 433
  var string1253 = new GraceString("Member(");
  lineNumber = 434
  lineNumber = 1
  lineNumber = 433
  var call1254 = callmethod(this,"value", [0]);
  var opresult1256 = callmethod(string1253, "++", [1], call1254);
  var string1257 = new GraceString(")\n");
  var opresult1259 = callmethod(opresult1256, "++", [1], string1257);
  var var_s = opresult1259;
  lineNumber = 434
  lineNumber = 435
  lineNumber = 434
  var opresult1261 = callmethod(var_s, "++", [1], var_spc);
  var opresult1263 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 435
  lineNumber = 1
  lineNumber = 434
  var call1264 = callmethod(this,"in", [0]);
  var call1265 = callmethod(call1264,"pretty", [1], opresult1263);
  var opresult1267 = callmethod(opresult1261, "++", [1], call1265);
  var_s = opresult1267;
  lineNumber = 435
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1234.methods["pretty"] = func1244;
  superDepth = origSuperDepth;
}
obj_init_1234.apply(obj1234, []);
  return obj1234
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1231.methods["new"] = func1233;
  superDepth = origSuperDepth;
}
obj_init_1231.apply(obj1231, []);
  var var_memberNode = obj1231;
  lineNumber = 438
  lineNumber = 1
var func1268 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 438
  return var_genericNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["genericNode"] = func1268;
  lineNumber = 1
  var obj1269 = Grace_allocObject();
  obj1269.outer = this;
    var reader_ast_outer1270 = function() {
    return this.outer;
  }
  obj1269.methods["outer"] = reader_ast_outer1270;
function obj_init_1269() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1271 = function(argcv) {
  var curarg = 1;
  var var_base = arguments[curarg];
  curarg++;
  var var_params__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1272 = Grace_allocObject();
  obj1272.outer = this;
    var reader_ast_outer1273 = function() {
    return this.outer;
  }
  obj1272.methods["outer"] = reader_ast_outer1273;
function obj_init_1272() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 439
  var string1274 = new GraceString("generic");
  obj1272.data["kind"] = string1274;
    var reader_ast_kind1275 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1275.def = true;
  obj1272.methods["kind"] = reader_ast_kind1275;
  lineNumber = 440
  obj1272.data["value"] = var_base;
    var reader_ast_value1276 = function() {
    return this.data["value"];
  }
  reader_ast_value1276.def = true;
  obj1272.methods["value"] = reader_ast_value1276;
  lineNumber = 441
  obj1272.data["params"] = var_params__39__;
    var reader_ast_params1277 = function() {
    return this.data["params"];
  }
  reader_ast_params1277.def = true;
  obj1272.methods["params"] = reader_ast_params1277;
  lineNumber = 442
  var string1278 = new GraceString("");
  obj1272.data["register"] = string1278;
    var reader_ast_register1279 = function() {
    return this.data["register"];
  }
  obj1272.methods["register"] = reader_ast_register1279;
  obj1272.data["register"] = string1278;
  var writer_ast_register1279 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1272.methods["register:="] = writer_ast_register1279;
obj1272.mutable = true;
  lineNumber = 444
  lineNumber = 1
  lineNumber = 443
  var call1280 = callmethod(var_util,"linenum", [0]);
  obj1272.data["line"] = call1280;
    var reader_ast_line1281 = function() {
    return this.data["line"];
  }
  reader_ast_line1281.def = true;
  obj1272.methods["line"] = reader_ast_line1281;
var func1282 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 446
  lineNumber = 445
  var string1283 = new GraceString("Generic(");
  lineNumber = 446
  lineNumber = 1
  lineNumber = 446
  lineNumber = 1
  lineNumber = 445
  var call1284 = callmethod(this,"value", [0]);
  var call1285 = callmethod(call1284,"value", [0]);
  var opresult1287 = callmethod(string1283, "++", [1], call1285);
  var string1288 = new GraceString("<");
  var opresult1290 = callmethod(opresult1287, "++", [1], string1288);
  var var_s = opresult1290;
  lineNumber = 449
  lineNumber = 446
  var call1291 = callmethod(this,"params", [0]);
  lineNumber = 449
  var block1292 = Grace_allocObject();
  block1292.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1292.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1292.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1292.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1292.receiver = this;
  block1292.className = 'block<ast:449>';
  block1292.real = function(
var_p
) {
  lineNumber = 447
  var call1293 = callmethod(var_p,"pretty", [1], new GraceNum(0));
  var opresult1295 = callmethod(var_s, "++", [1], call1293);
  var_s = opresult1295;
  lineNumber = 449
  lineNumber = 448
  var string1296 = new GraceString(",");
  var opresult1298 = callmethod(var_s, "++", [1], string1296);
  var_s = opresult1298;
  return opresult1298;
};
  var call1299 = callmethod(Grace_prelude,"for()do", [1, 1], call1291, block1292);
  lineNumber = 451
  lineNumber = 450
  var string1300 = new GraceString(">)");
  var opresult1302 = callmethod(var_s, "++", [1], string1300);
  return opresult1302
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1272.methods["pretty"] = func1282;
  superDepth = origSuperDepth;
}
obj_init_1272.apply(obj1272, []);
  return obj1272
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1269.methods["new"] = func1271;
  superDepth = origSuperDepth;
}
obj_init_1269.apply(obj1269, []);
  var var_genericNode = obj1269;
  lineNumber = 453
  lineNumber = 1
var func1303 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 453
  return var_identifierNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["identifierNode"] = func1303;
  lineNumber = 1
  var obj1304 = Grace_allocObject();
  obj1304.outer = this;
    var reader_ast_outer1305 = function() {
    return this.outer;
  }
  obj1304.methods["outer"] = reader_ast_outer1305;
function obj_init_1304() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1306 = function(argcv) {
  var curarg = 1;
  var var_n = arguments[curarg];
  curarg++;
  var var_dtype__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1307 = Grace_allocObject();
  obj1307.outer = this;
    var reader_ast_outer1308 = function() {
    return this.outer;
  }
  obj1307.methods["outer"] = reader_ast_outer1308;
function obj_init_1307() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 454
  var string1309 = new GraceString("identifier");
  obj1307.data["kind"] = string1309;
    var reader_ast_kind1310 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1310.def = true;
  obj1307.methods["kind"] = reader_ast_kind1310;
  lineNumber = 455
  obj1307.data["value"] = var_n;
    var reader_ast_value1311 = function() {
    return this.data["value"];
  }
  obj1307.methods["value"] = reader_ast_value1311;
  obj1307.data["value"] = var_n;
  var writer_ast_value1311 = function(argcv, o) {
    this.data["value"] = o;
  }
  obj1307.methods["value:="] = writer_ast_value1311;
obj1307.mutable = true;
  lineNumber = 456
  obj1307.data["dtype"] = var_dtype__39__;
    var reader_ast_dtype1312 = function() {
    return this.data["dtype"];
  }
  obj1307.methods["dtype"] = reader_ast_dtype1312;
  obj1307.data["dtype"] = var_dtype__39__;
  var writer_ast_dtype1312 = function(argcv, o) {
    this.data["dtype"] = o;
  }
  obj1307.methods["dtype:="] = writer_ast_dtype1312;
obj1307.mutable = true;
  lineNumber = 457
  var string1313 = new GraceString("");
  obj1307.data["register"] = string1313;
    var reader_ast_register1314 = function() {
    return this.data["register"];
  }
  obj1307.methods["register"] = reader_ast_register1314;
  obj1307.data["register"] = string1313;
  var writer_ast_register1314 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1307.methods["register:="] = writer_ast_register1314;
obj1307.mutable = true;
  lineNumber = 459
  lineNumber = 1
  lineNumber = 458
  var call1315 = callmethod(var_util,"linenum", [0]);
  obj1307.data["line"] = call1315;
    var reader_ast_line1316 = function() {
    return this.data["line"];
  }
  reader_ast_line1316.def = true;
  obj1307.methods["line"] = reader_ast_line1316;
var func1317 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 461
  lineNumber = 460
  var string1318 = new GraceString("Identifier(");
  lineNumber = 461
  lineNumber = 1
  lineNumber = 460
  var call1319 = callmethod(this,"value", [0]);
  var opresult1321 = callmethod(string1318, "++", [1], call1319);
  var string1322 = new GraceString(")");
  var opresult1324 = callmethod(opresult1321, "++", [1], string1322);
  return opresult1324
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1307.methods["pretty"] = func1317;
  superDepth = origSuperDepth;
}
obj_init_1307.apply(obj1307, []);
  return obj1307
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1304.methods["new"] = func1306;
  superDepth = origSuperDepth;
}
obj_init_1304.apply(obj1304, []);
  var var_identifierNode = obj1304;
  lineNumber = 463
  lineNumber = 1
var func1325 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 463
  return var_octetsNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["octetsNode"] = func1325;
  lineNumber = 1
  var obj1326 = Grace_allocObject();
  obj1326.outer = this;
    var reader_ast_outer1327 = function() {
    return this.outer;
  }
  obj1326.methods["outer"] = reader_ast_outer1327;
function obj_init_1326() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1328 = function(argcv) {
  var curarg = 1;
  var var_n = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1329 = Grace_allocObject();
  obj1329.outer = this;
    var reader_ast_outer1330 = function() {
    return this.outer;
  }
  obj1329.methods["outer"] = reader_ast_outer1330;
function obj_init_1329() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 464
  var string1331 = new GraceString("octets");
  obj1329.data["kind"] = string1331;
    var reader_ast_kind1332 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1332.def = true;
  obj1329.methods["kind"] = reader_ast_kind1332;
  lineNumber = 465
  obj1329.data["value"] = var_n;
    var reader_ast_value1333 = function() {
    return this.data["value"];
  }
  reader_ast_value1333.def = true;
  obj1329.methods["value"] = reader_ast_value1333;
  lineNumber = 466
  var string1334 = new GraceString("");
  obj1329.data["register"] = string1334;
    var reader_ast_register1335 = function() {
    return this.data["register"];
  }
  obj1329.methods["register"] = reader_ast_register1335;
  obj1329.data["register"] = string1334;
  var writer_ast_register1335 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1329.methods["register:="] = writer_ast_register1335;
obj1329.mutable = true;
  lineNumber = 468
  lineNumber = 1
  lineNumber = 467
  var call1336 = callmethod(var_util,"linenum", [0]);
  obj1329.data["line"] = call1336;
    var reader_ast_line1337 = function() {
    return this.data["line"];
  }
  reader_ast_line1337.def = true;
  obj1329.methods["line"] = reader_ast_line1337;
var func1338 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 470
  lineNumber = 469
  var string1339 = new GraceString("Octets(");
  lineNumber = 470
  lineNumber = 1
  lineNumber = 469
  var call1340 = callmethod(this,"value", [0]);
  var opresult1342 = callmethod(string1339, "++", [1], call1340);
  var string1343 = new GraceString(")");
  var opresult1345 = callmethod(opresult1342, "++", [1], string1343);
  return opresult1345
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1329.methods["pretty"] = func1338;
  superDepth = origSuperDepth;
}
obj_init_1329.apply(obj1329, []);
  return obj1329
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1326.methods["new"] = func1328;
  superDepth = origSuperDepth;
}
obj_init_1326.apply(obj1326, []);
  var var_octetsNode = obj1326;
  lineNumber = 472
  lineNumber = 1
var func1346 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 472
  return var_stringNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["stringNode"] = func1346;
  lineNumber = 1
  var obj1347 = Grace_allocObject();
  obj1347.outer = this;
    var reader_ast_outer1348 = function() {
    return this.outer;
  }
  obj1347.methods["outer"] = reader_ast_outer1348;
function obj_init_1347() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1349 = function(argcv) {
  var curarg = 1;
  var var_n = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1350 = Grace_allocObject();
  obj1350.outer = this;
    var reader_ast_outer1351 = function() {
    return this.outer;
  }
  obj1350.methods["outer"] = reader_ast_outer1351;
function obj_init_1350() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 473
  var string1352 = new GraceString("string");
  obj1350.data["kind"] = string1352;
    var reader_ast_kind1353 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1353.def = true;
  obj1350.methods["kind"] = reader_ast_kind1353;
  lineNumber = 474
  obj1350.data["value"] = var_n;
    var reader_ast_value1354 = function() {
    return this.data["value"];
  }
  obj1350.methods["value"] = reader_ast_value1354;
  obj1350.data["value"] = var_n;
  var writer_ast_value1354 = function(argcv, o) {
    this.data["value"] = o;
  }
  obj1350.methods["value:="] = writer_ast_value1354;
obj1350.mutable = true;
  lineNumber = 475
  var string1355 = new GraceString("");
  obj1350.data["register"] = string1355;
    var reader_ast_register1356 = function() {
    return this.data["register"];
  }
  obj1350.methods["register"] = reader_ast_register1356;
  obj1350.data["register"] = string1355;
  var writer_ast_register1356 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1350.methods["register:="] = writer_ast_register1356;
obj1350.mutable = true;
  lineNumber = 477
  lineNumber = 1
  lineNumber = 476
  var call1357 = callmethod(var_util,"linenum", [0]);
  obj1350.data["line"] = call1357;
    var reader_ast_line1358 = function() {
    return this.data["line"];
  }
  reader_ast_line1358.def = true;
  obj1350.methods["line"] = reader_ast_line1358;
var func1359 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 479
  lineNumber = 478
  var string1360 = new GraceString("String(");
  lineNumber = 479
  lineNumber = 1
  lineNumber = 478
  var call1361 = callmethod(this,"value", [0]);
  var opresult1363 = callmethod(string1360, "++", [1], call1361);
  var string1364 = new GraceString(")");
  var opresult1366 = callmethod(opresult1363, "++", [1], string1364);
  return opresult1366
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1350.methods["pretty"] = func1359;
  superDepth = origSuperDepth;
}
obj_init_1350.apply(obj1350, []);
  return obj1350
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1347.methods["new"] = func1349;
  superDepth = origSuperDepth;
}
obj_init_1347.apply(obj1347, []);
  var var_stringNode = obj1347;
  lineNumber = 481
  lineNumber = 1
var func1367 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 481
  return var_numNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["numNode"] = func1367;
  lineNumber = 1
  var obj1368 = Grace_allocObject();
  obj1368.outer = this;
    var reader_ast_outer1369 = function() {
    return this.outer;
  }
  obj1368.methods["outer"] = reader_ast_outer1369;
function obj_init_1368() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1370 = function(argcv) {
  var curarg = 1;
  var var_n = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1371 = Grace_allocObject();
  obj1371.outer = this;
    var reader_ast_outer1372 = function() {
    return this.outer;
  }
  obj1371.methods["outer"] = reader_ast_outer1372;
function obj_init_1371() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 482
  var string1373 = new GraceString("num");
  obj1371.data["kind"] = string1373;
    var reader_ast_kind1374 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1374.def = true;
  obj1371.methods["kind"] = reader_ast_kind1374;
  lineNumber = 483
  obj1371.data["value"] = var_n;
    var reader_ast_value1375 = function() {
    return this.data["value"];
  }
  reader_ast_value1375.def = true;
  obj1371.methods["value"] = reader_ast_value1375;
  lineNumber = 484
  var string1376 = new GraceString("");
  obj1371.data["register"] = string1376;
    var reader_ast_register1377 = function() {
    return this.data["register"];
  }
  obj1371.methods["register"] = reader_ast_register1377;
  obj1371.data["register"] = string1376;
  var writer_ast_register1377 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1371.methods["register:="] = writer_ast_register1377;
obj1371.mutable = true;
  lineNumber = 486
  lineNumber = 1
  lineNumber = 485
  var call1378 = callmethod(var_util,"linenum", [0]);
  obj1371.data["line"] = call1378;
    var reader_ast_line1379 = function() {
    return this.data["line"];
  }
  reader_ast_line1379.def = true;
  obj1371.methods["line"] = reader_ast_line1379;
var func1380 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 488
  lineNumber = 487
  var string1381 = new GraceString("Num(");
  lineNumber = 488
  lineNumber = 1
  lineNumber = 487
  var call1382 = callmethod(this,"value", [0]);
  var opresult1384 = callmethod(string1381, "++", [1], call1382);
  var string1385 = new GraceString(")");
  var opresult1387 = callmethod(opresult1384, "++", [1], string1385);
  return opresult1387
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1371.methods["pretty"] = func1380;
  superDepth = origSuperDepth;
}
obj_init_1371.apply(obj1371, []);
  return obj1371
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1368.methods["new"] = func1370;
  superDepth = origSuperDepth;
}
obj_init_1368.apply(obj1368, []);
  var var_numNode = obj1368;
  lineNumber = 490
  lineNumber = 1
var func1388 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 490
  return var_opNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["opNode"] = func1388;
  lineNumber = 1
  var obj1389 = Grace_allocObject();
  obj1389.outer = this;
    var reader_ast_outer1390 = function() {
    return this.outer;
  }
  obj1389.methods["outer"] = reader_ast_outer1390;
function obj_init_1389() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1391 = function(argcv) {
  var curarg = 1;
  var var_op = arguments[curarg];
  curarg++;
  var var_l = arguments[curarg];
  curarg++;
  var var_r = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1392 = Grace_allocObject();
  obj1392.outer = this;
    var reader_ast_outer1393 = function() {
    return this.outer;
  }
  obj1392.methods["outer"] = reader_ast_outer1393;
function obj_init_1392() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 491
  var string1394 = new GraceString("op");
  obj1392.data["kind"] = string1394;
    var reader_ast_kind1395 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1395.def = true;
  obj1392.methods["kind"] = reader_ast_kind1395;
  lineNumber = 492
  obj1392.data["value"] = var_op;
    var reader_ast_value1396 = function() {
    return this.data["value"];
  }
  reader_ast_value1396.def = true;
  obj1392.methods["value"] = reader_ast_value1396;
  lineNumber = 493
  obj1392.data["left"] = var_l;
    var reader_ast_left1397 = function() {
    return this.data["left"];
  }
  reader_ast_left1397.def = true;
  obj1392.methods["left"] = reader_ast_left1397;
  lineNumber = 494
  obj1392.data["right"] = var_r;
    var reader_ast_right1398 = function() {
    return this.data["right"];
  }
  reader_ast_right1398.def = true;
  obj1392.methods["right"] = reader_ast_right1398;
  lineNumber = 495
  var string1399 = new GraceString("");
  obj1392.data["register"] = string1399;
    var reader_ast_register1400 = function() {
    return this.data["register"];
  }
  obj1392.methods["register"] = reader_ast_register1400;
  obj1392.data["register"] = string1399;
  var writer_ast_register1400 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1392.methods["register:="] = writer_ast_register1400;
obj1392.mutable = true;
  lineNumber = 497
  lineNumber = 1
  lineNumber = 496
  var call1401 = callmethod(var_util,"linenum", [0]);
  obj1392.data["line"] = call1401;
    var reader_ast_line1402 = function() {
    return this.data["line"];
  }
  reader_ast_line1402.def = true;
  obj1392.methods["line"] = reader_ast_line1402;
var func1403 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 499
  lineNumber = 498
  var string1404 = new GraceString("");
  var var_spc = string1404;
  lineNumber = 501
  lineNumber = 499
  var opresult1406 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 501
  var block1407 = Grace_allocObject();
  block1407.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1407.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1407.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1407.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1407.receiver = this;
  block1407.className = 'block<ast:501>';
  block1407.real = function(
var_i
) {
  lineNumber = 500
  var string1408 = new GraceString("  ");
  var opresult1410 = callmethod(var_spc, "++", [1], string1408);
  var_spc = opresult1410;
  return opresult1410;
};
  var call1411 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1406, block1407);
  lineNumber = 503
  lineNumber = 502
  var string1412 = new GraceString("Op(");
  lineNumber = 503
  lineNumber = 1
  lineNumber = 502
  var call1413 = callmethod(this,"value", [0]);
  var opresult1415 = callmethod(string1412, "++", [1], call1413);
  var string1416 = new GraceString(")");
  var opresult1418 = callmethod(opresult1415, "++", [1], string1416);
  var var_s = opresult1418;
  lineNumber = 504
  lineNumber = 503
  var string1419 = new GraceString("\n");
  var opresult1421 = callmethod(var_s, "++", [1], string1419);
  var_s = opresult1421;
  lineNumber = 504
  lineNumber = 505
  lineNumber = 504
  var opresult1423 = callmethod(var_s, "++", [1], var_spc);
  var opresult1425 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 505
  lineNumber = 1
  lineNumber = 504
  var call1426 = callmethod(this,"left", [0]);
  var call1427 = callmethod(call1426,"pretty", [1], opresult1425);
  var opresult1429 = callmethod(opresult1423, "++", [1], call1427);
  var_s = opresult1429;
  lineNumber = 506
  lineNumber = 505
  var string1430 = new GraceString("\n");
  var opresult1432 = callmethod(var_s, "++", [1], string1430);
  var_s = opresult1432;
  lineNumber = 506
  lineNumber = 507
  lineNumber = 506
  var opresult1434 = callmethod(var_s, "++", [1], var_spc);
  var opresult1436 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 507
  lineNumber = 1
  lineNumber = 506
  var call1437 = callmethod(this,"right", [0]);
  var call1438 = callmethod(call1437,"pretty", [1], opresult1436);
  var opresult1440 = callmethod(opresult1434, "++", [1], call1438);
  var_s = opresult1440;
  lineNumber = 507
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1392.methods["pretty"] = func1403;
  superDepth = origSuperDepth;
}
obj_init_1392.apply(obj1392, []);
  return obj1392
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1389.methods["new"] = func1391;
  superDepth = origSuperDepth;
}
obj_init_1389.apply(obj1389, []);
  var var_opNode = obj1389;
  lineNumber = 510
  lineNumber = 1
var func1441 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 510
  return var_indexNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["indexNode"] = func1441;
  lineNumber = 1
  var obj1442 = Grace_allocObject();
  obj1442.outer = this;
    var reader_ast_outer1443 = function() {
    return this.outer;
  }
  obj1442.methods["outer"] = reader_ast_outer1443;
function obj_init_1442() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1444 = function(argcv) {
  var curarg = 1;
  var var_expr = arguments[curarg];
  curarg++;
  var var_index__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1445 = Grace_allocObject();
  obj1445.outer = this;
    var reader_ast_outer1446 = function() {
    return this.outer;
  }
  obj1445.methods["outer"] = reader_ast_outer1446;
function obj_init_1445() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 511
  var string1447 = new GraceString("index");
  obj1445.data["kind"] = string1447;
    var reader_ast_kind1448 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1448.def = true;
  obj1445.methods["kind"] = reader_ast_kind1448;
  lineNumber = 512
  obj1445.data["value"] = var_expr;
    var reader_ast_value1449 = function() {
    return this.data["value"];
  }
  reader_ast_value1449.def = true;
  obj1445.methods["value"] = reader_ast_value1449;
  lineNumber = 513
  obj1445.data["index"] = var_index__39__;
    var reader_ast_index1450 = function() {
    return this.data["index"];
  }
  reader_ast_index1450.def = true;
  obj1445.methods["index"] = reader_ast_index1450;
  lineNumber = 514
  var string1451 = new GraceString("");
  obj1445.data["register"] = string1451;
    var reader_ast_register1452 = function() {
    return this.data["register"];
  }
  obj1445.methods["register"] = reader_ast_register1452;
  obj1445.data["register"] = string1451;
  var writer_ast_register1452 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1445.methods["register:="] = writer_ast_register1452;
obj1445.mutable = true;
  lineNumber = 516
  lineNumber = 1
  lineNumber = 515
  var call1453 = callmethod(var_util,"linenum", [0]);
  obj1445.data["line"] = call1453;
    var reader_ast_line1454 = function() {
    return this.data["line"];
  }
  reader_ast_line1454.def = true;
  obj1445.methods["line"] = reader_ast_line1454;
var func1455 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 518
  lineNumber = 517
  var string1456 = new GraceString("");
  var var_spc = string1456;
  lineNumber = 520
  lineNumber = 518
  var opresult1458 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 520
  var block1459 = Grace_allocObject();
  block1459.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1459.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1459.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1459.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1459.receiver = this;
  block1459.className = 'block<ast:520>';
  block1459.real = function(
var_i
) {
  lineNumber = 519
  var string1460 = new GraceString("  ");
  var opresult1462 = callmethod(var_spc, "++", [1], string1460);
  var_spc = opresult1462;
  return opresult1462;
};
  var call1463 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1458, block1459);
  lineNumber = 522
  lineNumber = 521
  var string1464 = new GraceString("Index");
  var var_s = string1464;
  lineNumber = 523
  lineNumber = 522
  var string1465 = new GraceString("\n");
  var opresult1467 = callmethod(var_s, "++", [1], string1465);
  var_s = opresult1467;
  lineNumber = 523
  lineNumber = 524
  lineNumber = 523
  var opresult1469 = callmethod(var_s, "++", [1], var_spc);
  var opresult1471 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 524
  lineNumber = 1
  lineNumber = 523
  var call1472 = callmethod(this,"value", [0]);
  var call1473 = callmethod(call1472,"pretty", [1], opresult1471);
  var opresult1475 = callmethod(opresult1469, "++", [1], call1473);
  var_s = opresult1475;
  lineNumber = 525
  lineNumber = 524
  var string1476 = new GraceString("\n");
  var opresult1478 = callmethod(var_s, "++", [1], string1476);
  var_s = opresult1478;
  lineNumber = 525
  lineNumber = 526
  lineNumber = 525
  var opresult1480 = callmethod(var_s, "++", [1], var_spc);
  var opresult1482 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 526
  lineNumber = 1
  lineNumber = 525
  var call1483 = callmethod(this,"index", [0]);
  var call1484 = callmethod(call1483,"pretty", [1], opresult1482);
  var opresult1486 = callmethod(opresult1480, "++", [1], call1484);
  var_s = opresult1486;
  lineNumber = 526
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1445.methods["pretty"] = func1455;
  superDepth = origSuperDepth;
}
obj_init_1445.apply(obj1445, []);
  return obj1445
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1442.methods["new"] = func1444;
  superDepth = origSuperDepth;
}
obj_init_1442.apply(obj1442, []);
  var var_indexNode = obj1442;
  lineNumber = 529
  lineNumber = 1
var func1487 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 529
  return var_bindNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bindNode"] = func1487;
  lineNumber = 1
  var obj1488 = Grace_allocObject();
  obj1488.outer = this;
    var reader_ast_outer1489 = function() {
    return this.outer;
  }
  obj1488.methods["outer"] = reader_ast_outer1489;
function obj_init_1488() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1490 = function(argcv) {
  var curarg = 1;
  var var_dest__39__ = arguments[curarg];
  curarg++;
  var var_val__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1491 = Grace_allocObject();
  obj1491.outer = this;
    var reader_ast_outer1492 = function() {
    return this.outer;
  }
  obj1491.methods["outer"] = reader_ast_outer1492;
function obj_init_1491() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 530
  var string1493 = new GraceString("bind");
  obj1491.data["kind"] = string1493;
    var reader_ast_kind1494 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1494.def = true;
  obj1491.methods["kind"] = reader_ast_kind1494;
  lineNumber = 531
  obj1491.data["dest"] = var_dest__39__;
    var reader_ast_dest1495 = function() {
    return this.data["dest"];
  }
  reader_ast_dest1495.def = true;
  obj1491.methods["dest"] = reader_ast_dest1495;
  lineNumber = 532
  obj1491.data["value"] = var_val__39__;
    var reader_ast_value1496 = function() {
    return this.data["value"];
  }
  reader_ast_value1496.def = true;
  obj1491.methods["value"] = reader_ast_value1496;
  lineNumber = 533
  var string1497 = new GraceString("");
  obj1491.data["register"] = string1497;
    var reader_ast_register1498 = function() {
    return this.data["register"];
  }
  obj1491.methods["register"] = reader_ast_register1498;
  obj1491.data["register"] = string1497;
  var writer_ast_register1498 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1491.methods["register:="] = writer_ast_register1498;
obj1491.mutable = true;
  lineNumber = 535
  lineNumber = 1
  lineNumber = 534
  var call1499 = callmethod(var_util,"linenum", [0]);
  obj1491.data["line"] = call1499;
    var reader_ast_line1500 = function() {
    return this.data["line"];
  }
  reader_ast_line1500.def = true;
  obj1491.methods["line"] = reader_ast_line1500;
var func1501 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 537
  lineNumber = 536
  var string1502 = new GraceString("");
  var var_spc = string1502;
  lineNumber = 539
  lineNumber = 537
  var opresult1504 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 539
  var block1505 = Grace_allocObject();
  block1505.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1505.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1505.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1505.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1505.receiver = this;
  block1505.className = 'block<ast:539>';
  block1505.real = function(
var_i
) {
  lineNumber = 538
  var string1506 = new GraceString("  ");
  var opresult1508 = callmethod(var_spc, "++", [1], string1506);
  var_spc = opresult1508;
  return opresult1508;
};
  var call1509 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1504, block1505);
  lineNumber = 541
  lineNumber = 540
  var string1510 = new GraceString("Bind");
  var var_s = string1510;
  lineNumber = 542
  lineNumber = 541
  var string1511 = new GraceString("\n");
  var opresult1513 = callmethod(var_s, "++", [1], string1511);
  var_s = opresult1513;
  lineNumber = 542
  lineNumber = 543
  lineNumber = 542
  var opresult1515 = callmethod(var_s, "++", [1], var_spc);
  var opresult1517 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 543
  lineNumber = 1
  lineNumber = 542
  var call1518 = callmethod(this,"dest", [0]);
  var call1519 = callmethod(call1518,"pretty", [1], opresult1517);
  var opresult1521 = callmethod(opresult1515, "++", [1], call1519);
  var_s = opresult1521;
  lineNumber = 544
  lineNumber = 543
  var string1522 = new GraceString("\n");
  var opresult1524 = callmethod(var_s, "++", [1], string1522);
  var_s = opresult1524;
  lineNumber = 544
  lineNumber = 545
  lineNumber = 544
  var opresult1526 = callmethod(var_s, "++", [1], var_spc);
  var opresult1528 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 545
  lineNumber = 1
  lineNumber = 544
  var call1529 = callmethod(this,"value", [0]);
  var call1530 = callmethod(call1529,"pretty", [1], opresult1528);
  var opresult1532 = callmethod(opresult1526, "++", [1], call1530);
  var_s = opresult1532;
  lineNumber = 545
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1491.methods["pretty"] = func1501;
  superDepth = origSuperDepth;
}
obj_init_1491.apply(obj1491, []);
  return obj1491
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1488.methods["new"] = func1490;
  superDepth = origSuperDepth;
}
obj_init_1488.apply(obj1488, []);
  var var_bindNode = obj1488;
  lineNumber = 548
  lineNumber = 1
var func1533 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 548
  return var_defDecNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["defDecNode"] = func1533;
  lineNumber = 1
  var obj1534 = Grace_allocObject();
  obj1534.outer = this;
    var reader_ast_outer1535 = function() {
    return this.outer;
  }
  obj1534.methods["outer"] = reader_ast_outer1535;
function obj_init_1534() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1536 = function(argcv) {
  var curarg = 1;
  var var_name__39__ = arguments[curarg];
  curarg++;
  var var_val = arguments[curarg];
  curarg++;
  var var_dtype__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1537 = Grace_allocObject();
  obj1537.outer = this;
    var reader_ast_outer1538 = function() {
    return this.outer;
  }
  obj1537.methods["outer"] = reader_ast_outer1538;
function obj_init_1537() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 549
  var string1539 = new GraceString("defdec");
  obj1537.data["kind"] = string1539;
    var reader_ast_kind1540 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1540.def = true;
  obj1537.methods["kind"] = reader_ast_kind1540;
  lineNumber = 550
  obj1537.data["name"] = var_name__39__;
    var reader_ast_name1541 = function() {
    return this.data["name"];
  }
  reader_ast_name1541.def = true;
  obj1537.methods["name"] = reader_ast_name1541;
  lineNumber = 551
  obj1537.data["value"] = var_val;
    var reader_ast_value1542 = function() {
    return this.data["value"];
  }
  reader_ast_value1542.def = true;
  obj1537.methods["value"] = reader_ast_value1542;
  lineNumber = 552
  obj1537.data["dtype"] = var_dtype__39__;
    var reader_ast_dtype1543 = function() {
    return this.data["dtype"];
  }
  obj1537.methods["dtype"] = reader_ast_dtype1543;
  obj1537.data["dtype"] = var_dtype__39__;
  var writer_ast_dtype1543 = function(argcv, o) {
    this.data["dtype"] = o;
  }
  obj1537.methods["dtype:="] = writer_ast_dtype1543;
obj1537.mutable = true;
  lineNumber = 553
  var string1544 = new GraceString("");
  obj1537.data["register"] = string1544;
    var reader_ast_register1545 = function() {
    return this.data["register"];
  }
  obj1537.methods["register"] = reader_ast_register1545;
  obj1537.data["register"] = string1544;
  var writer_ast_register1545 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1537.methods["register:="] = writer_ast_register1545;
obj1537.mutable = true;
  lineNumber = 555
  lineNumber = 1
  lineNumber = 554
  var call1546 = callmethod(var_util,"linenum", [0]);
  obj1537.data["line"] = call1546;
    var reader_ast_line1547 = function() {
    return this.data["line"];
  }
  reader_ast_line1547.def = true;
  obj1537.methods["line"] = reader_ast_line1547;
var func1548 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 557
  lineNumber = 556
  var string1549 = new GraceString("");
  var var_spc = string1549;
  lineNumber = 559
  lineNumber = 557
  var opresult1551 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 559
  var block1552 = Grace_allocObject();
  block1552.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1552.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1552.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1552.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1552.receiver = this;
  block1552.className = 'block<ast:559>';
  block1552.real = function(
var_i
) {
  lineNumber = 558
  var string1553 = new GraceString("  ");
  var opresult1555 = callmethod(var_spc, "++", [1], string1553);
  var_spc = opresult1555;
  return opresult1555;
};
  var call1556 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1551, block1552);
  lineNumber = 561
  lineNumber = 560
  var string1557 = new GraceString("defdec");
  var var_s = string1557;
  lineNumber = 562
  lineNumber = 561
  var string1558 = new GraceString("\n");
  var opresult1560 = callmethod(var_s, "++", [1], string1558);
  var_s = opresult1560;
  lineNumber = 562
  lineNumber = 563
  lineNumber = 562
  var opresult1562 = callmethod(var_s, "++", [1], var_spc);
  lineNumber = 563
  lineNumber = 1
  lineNumber = 562
  var call1563 = callmethod(this,"name", [0]);
  var call1564 = callmethod(call1563,"pretty", [1], var_depth);
  var opresult1566 = callmethod(opresult1562, "++", [1], call1564);
  var_s = opresult1566;
  lineNumber = 564
  lineNumber = 566
  lineNumber = 1
  lineNumber = 563
  var call1568 = callmethod(this,"dtype", [0]);
  if (Grace_isTrue(call1568)) {
  lineNumber = 564
  lineNumber = 565
  lineNumber = 564
  var string1569 = new GraceString(" : ");
  var opresult1571 = callmethod(var_s, "++", [1], string1569);
  lineNumber = 565
  lineNumber = 1
  lineNumber = 564
  var call1572 = callmethod(this,"dtype", [0]);
  var call1573 = callmethod(call1572,"pretty", [1], new GraceNum(0));
  var opresult1575 = callmethod(opresult1571, "++", [1], call1573);
  var_s = opresult1575;
  var if1567 = opresult1575;
}
  lineNumber = 568
  lineNumber = 570
  lineNumber = 566
  var bool1577 = new GraceBoolean(false)
  lineNumber = 570
  lineNumber = 1
  lineNumber = 566
  var call1578 = callmethod(this,"value", [0]);
  var opresult1580 = callmethod(bool1577, "!=", [1], call1578);
  if (Grace_isTrue(opresult1580)) {
  lineNumber = 568
  lineNumber = 567
  var string1581 = new GraceString("\n");
  var opresult1583 = callmethod(var_s, "++", [1], string1581);
  var_s = opresult1583;
  lineNumber = 568
  lineNumber = 569
  lineNumber = 568
  var opresult1585 = callmethod(var_s, "++", [1], var_spc);
  var opresult1587 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 569
  lineNumber = 1
  lineNumber = 568
  var call1588 = callmethod(this,"value", [0]);
  var call1589 = callmethod(call1588,"pretty", [1], opresult1587);
  var opresult1591 = callmethod(opresult1585, "++", [1], call1589);
  var_s = opresult1591;
  var if1576 = opresult1591;
}
  lineNumber = 570
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1537.methods["pretty"] = func1548;
  superDepth = origSuperDepth;
}
obj_init_1537.apply(obj1537, []);
  return obj1537
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1534.methods["new"] = func1536;
  superDepth = origSuperDepth;
}
obj_init_1534.apply(obj1534, []);
  var var_defDecNode = obj1534;
  lineNumber = 573
  lineNumber = 1
var func1592 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 573
  return var_varDecNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["varDecNode"] = func1592;
  lineNumber = 1
  var obj1593 = Grace_allocObject();
  obj1593.outer = this;
    var reader_ast_outer1594 = function() {
    return this.outer;
  }
  obj1593.methods["outer"] = reader_ast_outer1594;
function obj_init_1593() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1595 = function(argcv) {
  var curarg = 1;
  var var_name__39__ = arguments[curarg];
  curarg++;
  var var_val__39__ = arguments[curarg];
  curarg++;
  var var_dtype__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1596 = Grace_allocObject();
  obj1596.outer = this;
    var reader_ast_outer1597 = function() {
    return this.outer;
  }
  obj1596.methods["outer"] = reader_ast_outer1597;
function obj_init_1596() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 574
  var string1598 = new GraceString("vardec");
  obj1596.data["kind"] = string1598;
    var reader_ast_kind1599 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1599.def = true;
  obj1596.methods["kind"] = reader_ast_kind1599;
  lineNumber = 575
  obj1596.data["name"] = var_name__39__;
    var reader_ast_name1600 = function() {
    return this.data["name"];
  }
  reader_ast_name1600.def = true;
  obj1596.methods["name"] = reader_ast_name1600;
  lineNumber = 576
  obj1596.data["value"] = var_val__39__;
    var reader_ast_value1601 = function() {
    return this.data["value"];
  }
  reader_ast_value1601.def = true;
  obj1596.methods["value"] = reader_ast_value1601;
  lineNumber = 577
  obj1596.data["dtype"] = var_dtype__39__;
    var reader_ast_dtype1602 = function() {
    return this.data["dtype"];
  }
  obj1596.methods["dtype"] = reader_ast_dtype1602;
  obj1596.data["dtype"] = var_dtype__39__;
  var writer_ast_dtype1602 = function(argcv, o) {
    this.data["dtype"] = o;
  }
  obj1596.methods["dtype:="] = writer_ast_dtype1602;
obj1596.mutable = true;
  lineNumber = 578
  var string1603 = new GraceString("");
  obj1596.data["register"] = string1603;
    var reader_ast_register1604 = function() {
    return this.data["register"];
  }
  obj1596.methods["register"] = reader_ast_register1604;
  obj1596.data["register"] = string1603;
  var writer_ast_register1604 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1596.methods["register:="] = writer_ast_register1604;
obj1596.mutable = true;
  lineNumber = 580
  lineNumber = 1
  lineNumber = 579
  var call1605 = callmethod(var_util,"linenum", [0]);
  obj1596.data["line"] = call1605;
    var reader_ast_line1606 = function() {
    return this.data["line"];
  }
  reader_ast_line1606.def = true;
  obj1596.methods["line"] = reader_ast_line1606;
var func1607 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 582
  lineNumber = 581
  var string1608 = new GraceString("");
  var var_spc = string1608;
  lineNumber = 584
  lineNumber = 582
  var opresult1610 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 584
  var block1611 = Grace_allocObject();
  block1611.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1611.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1611.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1611.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1611.receiver = this;
  block1611.className = 'block<ast:584>';
  block1611.real = function(
var_i
) {
  lineNumber = 583
  var string1612 = new GraceString("  ");
  var opresult1614 = callmethod(var_spc, "++", [1], string1612);
  var_spc = opresult1614;
  return opresult1614;
};
  var call1615 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1610, block1611);
  lineNumber = 586
  lineNumber = 585
  var string1616 = new GraceString("VarDec");
  var var_s = string1616;
  lineNumber = 587
  lineNumber = 586
  var string1617 = new GraceString("\n");
  var opresult1619 = callmethod(var_s, "++", [1], string1617);
  var_s = opresult1619;
  lineNumber = 587
  lineNumber = 588
  lineNumber = 587
  var opresult1621 = callmethod(var_s, "++", [1], var_spc);
  var opresult1623 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 588
  lineNumber = 1
  lineNumber = 587
  var call1624 = callmethod(this,"name", [0]);
  var call1625 = callmethod(call1624,"pretty", [1], opresult1623);
  var opresult1627 = callmethod(opresult1621, "++", [1], call1625);
  var_s = opresult1627;
  lineNumber = 589
  lineNumber = 591
  lineNumber = 1
  lineNumber = 588
  var call1629 = callmethod(this,"dtype", [0]);
  if (Grace_isTrue(call1629)) {
  lineNumber = 589
  lineNumber = 590
  lineNumber = 589
  var string1630 = new GraceString(" : ");
  var opresult1632 = callmethod(var_s, "++", [1], string1630);
  lineNumber = 590
  lineNumber = 1
  lineNumber = 589
  var call1633 = callmethod(this,"dtype", [0]);
  var call1634 = callmethod(call1633,"pretty", [1], new GraceNum(0));
  var opresult1636 = callmethod(opresult1632, "++", [1], call1634);
  var_s = opresult1636;
  var if1628 = opresult1636;
}
  lineNumber = 593
  lineNumber = 595
  lineNumber = 591
  var bool1638 = new GraceBoolean(false)
  lineNumber = 595
  lineNumber = 1
  lineNumber = 591
  var call1639 = callmethod(this,"value", [0]);
  var opresult1641 = callmethod(bool1638, "!=", [1], call1639);
  if (Grace_isTrue(opresult1641)) {
  lineNumber = 593
  lineNumber = 592
  var string1642 = new GraceString("\n");
  var opresult1644 = callmethod(var_s, "++", [1], string1642);
  var_s = opresult1644;
  lineNumber = 593
  lineNumber = 594
  lineNumber = 593
  var opresult1646 = callmethod(var_s, "++", [1], var_spc);
  var opresult1648 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 594
  lineNumber = 1
  lineNumber = 593
  var call1649 = callmethod(this,"value", [0]);
  var call1650 = callmethod(call1649,"pretty", [1], opresult1648);
  var opresult1652 = callmethod(opresult1646, "++", [1], call1650);
  var_s = opresult1652;
  var if1637 = opresult1652;
}
  lineNumber = 595
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1596.methods["pretty"] = func1607;
  superDepth = origSuperDepth;
}
obj_init_1596.apply(obj1596, []);
  return obj1596
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1593.methods["new"] = func1595;
  superDepth = origSuperDepth;
}
obj_init_1593.apply(obj1593, []);
  var var_varDecNode = obj1593;
  lineNumber = 598
  lineNumber = 1
var func1653 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 598
  return var_importNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["importNode"] = func1653;
  lineNumber = 1
  var obj1654 = Grace_allocObject();
  obj1654.outer = this;
    var reader_ast_outer1655 = function() {
    return this.outer;
  }
  obj1654.methods["outer"] = reader_ast_outer1655;
function obj_init_1654() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1656 = function(argcv) {
  var curarg = 1;
  var var_name = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1657 = Grace_allocObject();
  obj1657.outer = this;
    var reader_ast_outer1658 = function() {
    return this.outer;
  }
  obj1657.methods["outer"] = reader_ast_outer1658;
function obj_init_1657() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 599
  var string1659 = new GraceString("import");
  obj1657.data["kind"] = string1659;
    var reader_ast_kind1660 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1660.def = true;
  obj1657.methods["kind"] = reader_ast_kind1660;
  lineNumber = 600
  obj1657.data["value"] = var_name;
    var reader_ast_value1661 = function() {
    return this.data["value"];
  }
  reader_ast_value1661.def = true;
  obj1657.methods["value"] = reader_ast_value1661;
  lineNumber = 601
  var string1662 = new GraceString("");
  obj1657.data["register"] = string1662;
    var reader_ast_register1663 = function() {
    return this.data["register"];
  }
  obj1657.methods["register"] = reader_ast_register1663;
  obj1657.data["register"] = string1662;
  var writer_ast_register1663 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1657.methods["register:="] = writer_ast_register1663;
obj1657.mutable = true;
  lineNumber = 603
  lineNumber = 1
  lineNumber = 602
  var call1664 = callmethod(var_util,"linenum", [0]);
  obj1657.data["line"] = call1664;
    var reader_ast_line1665 = function() {
    return this.data["line"];
  }
  reader_ast_line1665.def = true;
  obj1657.methods["line"] = reader_ast_line1665;
var func1666 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 605
  lineNumber = 604
  var string1667 = new GraceString("");
  var var_spc = string1667;
  lineNumber = 607
  lineNumber = 605
  var opresult1669 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 607
  var block1670 = Grace_allocObject();
  block1670.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1670.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1670.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1670.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1670.receiver = this;
  block1670.className = 'block<ast:607>';
  block1670.real = function(
var_i
) {
  lineNumber = 606
  var string1671 = new GraceString("  ");
  var opresult1673 = callmethod(var_spc, "++", [1], string1671);
  var_spc = opresult1673;
  return opresult1673;
};
  var call1674 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1669, block1670);
  lineNumber = 609
  lineNumber = 608
  var string1675 = new GraceString("Import");
  var var_s = string1675;
  lineNumber = 610
  lineNumber = 609
  var string1676 = new GraceString("\n");
  var opresult1678 = callmethod(var_s, "++", [1], string1676);
  var_s = opresult1678;
  lineNumber = 610
  lineNumber = 611
  lineNumber = 610
  var opresult1680 = callmethod(var_s, "++", [1], var_spc);
  var opresult1682 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 611
  lineNumber = 1
  lineNumber = 610
  var call1683 = callmethod(this,"value", [0]);
  var call1684 = callmethod(call1683,"pretty", [1], opresult1682);
  var opresult1686 = callmethod(opresult1680, "++", [1], call1684);
  var_s = opresult1686;
  lineNumber = 611
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1657.methods["pretty"] = func1666;
  superDepth = origSuperDepth;
}
obj_init_1657.apply(obj1657, []);
  return obj1657
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1654.methods["new"] = func1656;
  superDepth = origSuperDepth;
}
obj_init_1654.apply(obj1654, []);
  var var_importNode = obj1654;
  lineNumber = 614
  lineNumber = 1
var func1687 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 614
  return var_returnNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["returnNode"] = func1687;
  lineNumber = 1
  var obj1688 = Grace_allocObject();
  obj1688.outer = this;
    var reader_ast_outer1689 = function() {
    return this.outer;
  }
  obj1688.methods["outer"] = reader_ast_outer1689;
function obj_init_1688() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1690 = function(argcv) {
  var curarg = 1;
  var var_expr = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1691 = Grace_allocObject();
  obj1691.outer = this;
    var reader_ast_outer1692 = function() {
    return this.outer;
  }
  obj1691.methods["outer"] = reader_ast_outer1692;
function obj_init_1691() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 615
  var string1693 = new GraceString("return");
  obj1691.data["kind"] = string1693;
    var reader_ast_kind1694 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1694.def = true;
  obj1691.methods["kind"] = reader_ast_kind1694;
  lineNumber = 616
  obj1691.data["value"] = var_expr;
    var reader_ast_value1695 = function() {
    return this.data["value"];
  }
  reader_ast_value1695.def = true;
  obj1691.methods["value"] = reader_ast_value1695;
  lineNumber = 617
  var string1696 = new GraceString("");
  obj1691.data["register"] = string1696;
    var reader_ast_register1697 = function() {
    return this.data["register"];
  }
  obj1691.methods["register"] = reader_ast_register1697;
  obj1691.data["register"] = string1696;
  var writer_ast_register1697 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1691.methods["register:="] = writer_ast_register1697;
obj1691.mutable = true;
  lineNumber = 619
  lineNumber = 1
  lineNumber = 618
  var call1698 = callmethod(var_util,"linenum", [0]);
  obj1691.data["line"] = call1698;
    var reader_ast_line1699 = function() {
    return this.data["line"];
  }
  reader_ast_line1699.def = true;
  obj1691.methods["line"] = reader_ast_line1699;
var func1700 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 621
  lineNumber = 620
  var string1701 = new GraceString("");
  var var_spc = string1701;
  lineNumber = 623
  lineNumber = 621
  var opresult1703 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 623
  var block1704 = Grace_allocObject();
  block1704.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1704.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1704.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1704.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1704.receiver = this;
  block1704.className = 'block<ast:623>';
  block1704.real = function(
var_i
) {
  lineNumber = 622
  var string1705 = new GraceString("  ");
  var opresult1707 = callmethod(var_spc, "++", [1], string1705);
  var_spc = opresult1707;
  return opresult1707;
};
  var call1708 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1703, block1704);
  lineNumber = 625
  lineNumber = 624
  var string1709 = new GraceString("Return");
  var var_s = string1709;
  lineNumber = 626
  lineNumber = 625
  var string1710 = new GraceString("\n");
  var opresult1712 = callmethod(var_s, "++", [1], string1710);
  var_s = opresult1712;
  lineNumber = 626
  lineNumber = 627
  lineNumber = 626
  var opresult1714 = callmethod(var_s, "++", [1], var_spc);
  var opresult1716 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 627
  lineNumber = 1
  lineNumber = 626
  var call1717 = callmethod(this,"value", [0]);
  var call1718 = callmethod(call1717,"pretty", [1], opresult1716);
  var opresult1720 = callmethod(opresult1714, "++", [1], call1718);
  var_s = opresult1720;
  lineNumber = 627
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1691.methods["pretty"] = func1700;
  superDepth = origSuperDepth;
}
obj_init_1691.apply(obj1691, []);
  return obj1691
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1688.methods["new"] = func1690;
  superDepth = origSuperDepth;
}
obj_init_1688.apply(obj1688, []);
  var var_returnNode = obj1688;
  lineNumber = 630
  lineNumber = 1
var func1721 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 630
  return var_inheritsNode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["inheritsNode"] = func1721;
  lineNumber = 1
  var obj1722 = Grace_allocObject();
  obj1722.outer = this;
    var reader_ast_outer1723 = function() {
    return this.outer;
  }
  obj1722.methods["outer"] = reader_ast_outer1723;
function obj_init_1722() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1724 = function(argcv) {
  var curarg = 1;
  var var_expr = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1725 = Grace_allocObject();
  obj1725.outer = this;
    var reader_ast_outer1726 = function() {
    return this.outer;
  }
  obj1725.methods["outer"] = reader_ast_outer1726;
function obj_init_1725() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 631
  var string1727 = new GraceString("inherits");
  obj1725.data["kind"] = string1727;
    var reader_ast_kind1728 = function() {
    return this.data["kind"];
  }
  reader_ast_kind1728.def = true;
  obj1725.methods["kind"] = reader_ast_kind1728;
  lineNumber = 632
  obj1725.data["value"] = var_expr;
    var reader_ast_value1729 = function() {
    return this.data["value"];
  }
  reader_ast_value1729.def = true;
  obj1725.methods["value"] = reader_ast_value1729;
  lineNumber = 633
  var string1730 = new GraceString("");
  obj1725.data["register"] = string1730;
    var reader_ast_register1731 = function() {
    return this.data["register"];
  }
  obj1725.methods["register"] = reader_ast_register1731;
  obj1725.data["register"] = string1730;
  var writer_ast_register1731 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1725.methods["register:="] = writer_ast_register1731;
obj1725.mutable = true;
  lineNumber = 635
  lineNumber = 1
  lineNumber = 634
  var call1732 = callmethod(var_util,"linenum", [0]);
  obj1725.data["line"] = call1732;
    var reader_ast_line1733 = function() {
    return this.data["line"];
  }
  reader_ast_line1733.def = true;
  obj1725.methods["line"] = reader_ast_line1733;
var func1734 = function(argcv) {
  var curarg = 1;
  var var_depth = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 637
  lineNumber = 636
  var string1735 = new GraceString("");
  var var_spc = string1735;
  lineNumber = 639
  lineNumber = 637
  var opresult1737 = callmethod(new GraceNum(0), "..", [1], var_depth);
  lineNumber = 639
  var block1738 = Grace_allocObject();
  block1738.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1738.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1738.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1738.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1738.receiver = this;
  block1738.className = 'block<ast:639>';
  block1738.real = function(
var_i
) {
  lineNumber = 638
  var string1739 = new GraceString("  ");
  var opresult1741 = callmethod(var_spc, "++", [1], string1739);
  var_spc = opresult1741;
  return opresult1741;
};
  var call1742 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1737, block1738);
  lineNumber = 641
  lineNumber = 640
  var string1743 = new GraceString("Inherits");
  var var_s = string1743;
  lineNumber = 642
  lineNumber = 641
  var string1744 = new GraceString("\n");
  var opresult1746 = callmethod(var_s, "++", [1], string1744);
  var_s = opresult1746;
  lineNumber = 642
  lineNumber = 643
  lineNumber = 642
  var opresult1748 = callmethod(var_s, "++", [1], var_spc);
  var opresult1750 = callmethod(var_depth, "+", [1], new GraceNum(1));
  lineNumber = 643
  lineNumber = 1
  lineNumber = 642
  var call1751 = callmethod(this,"value", [0]);
  var call1752 = callmethod(call1751,"pretty", [1], opresult1750);
  var opresult1754 = callmethod(opresult1748, "++", [1], call1752);
  var_s = opresult1754;
  lineNumber = 643
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1725.methods["pretty"] = func1734;
  superDepth = origSuperDepth;
}
obj_init_1725.apply(obj1725, []);
  return obj1725
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1722.methods["new"] = func1724;
  superDepth = origSuperDepth;
}
obj_init_1722.apply(obj1722, []);
  var var_inheritsNode = obj1722;
  lineNumber = 662
var func1755 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1756 = Grace_allocObject();
  obj1756.outer = this;
    var reader_ast_outer1757 = function() {
    return this.outer;
  }
  obj1756.methods["outer"] = reader_ast_outer1757;
function obj_init_1756() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1758 = function(argcv) {
  var curarg = 1;
  var var_values = new GraceList(Array.prototype.slice.call(arguments, curarg, curarg + argcv[0] - 0));
  curarg += argcv[0] - 0;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1759 = Grace_allocObject();
  obj1759.outer = this;
    var reader_ast_outer1760 = function() {
    return this.outer;
  }
  obj1759.methods["outer"] = reader_ast_outer1760;
function obj_init_1759() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 651
  var string1761 = new GraceString("");
  obj1759.data["name"] = string1761;
    var reader_ast_name1762 = function() {
    return this.data["name"];
  }
  obj1759.methods["name"] = reader_ast_name1762;
  obj1759.data["name"] = string1761;
  var writer_ast_name1762 = function(argcv, o) {
    this.data["name"] = o;
  }
  obj1759.methods["name:="] = writer_ast_name1762;
obj1759.mutable = true;
  lineNumber = 653
  var array1763 = new GraceList([
]);

  obj1759.data["params"] = array1763;
    var reader_ast_params1764 = function() {
    return this.data["params"];
  }
  obj1759.methods["params"] = reader_ast_params1764;
  obj1759.data["params"] = array1763;
  var writer_ast_params1764 = function(argcv, o) {
    this.data["params"] = o;
  }
  obj1759.methods["params:="] = writer_ast_params1764;
obj1759.mutable = true;
  var bool1765 = new GraceBoolean(false)
  obj1759.data["vararg"] = bool1765;
    var reader_ast_vararg1766 = function() {
    return this.data["vararg"];
  }
  obj1759.methods["vararg"] = reader_ast_vararg1766;
  obj1759.data["vararg"] = bool1765;
  var writer_ast_vararg1766 = function(argcv, o) {
    this.data["vararg"] = o;
  }
  obj1759.methods["vararg:="] = writer_ast_vararg1766;
obj1759.mutable = true;
  lineNumber = 656
  lineNumber = 657
  lineNumber = 1
  lineNumber = 654
  var call1768 = callmethod(var_values,"size", [0]);
  var opresult1770 = callmethod(call1768, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1770)) {
  lineNumber = 656
  lineNumber = 1
  lineNumber = 656
  lineNumber = 655
  var idxres1771 = var_values.methods["[]"].call(var_values, [1], new GraceNum(1));
  lineNumber = 656
  var call1772 = callmethod(this,"name:=", [1], idxres1771);
  var if1767 = call1772;
}
  lineNumber = 659
  lineNumber = 660
  lineNumber = 1
  lineNumber = 657
  var call1774 = callmethod(var_values,"size", [0]);
  var opresult1776 = callmethod(call1774, ">", [1], new GraceNum(1));
  if (Grace_isTrue(opresult1776)) {
  lineNumber = 659
  lineNumber = 1
  lineNumber = 659
  lineNumber = 658
  var idxres1777 = var_values.methods["[]"].call(var_values, [1], new GraceNum(2));
  lineNumber = 659
  var call1778 = callmethod(this,"params:=", [1], idxres1777);
  var if1773 = call1778;
}
  lineNumber = 662
  lineNumber = 663
  lineNumber = 1
  lineNumber = 660
  var call1780 = callmethod(var_values,"size", [0]);
  var opresult1782 = callmethod(call1780, ">", [1], new GraceNum(2));
  if (Grace_isTrue(opresult1782)) {
  lineNumber = 662
  lineNumber = 1
  lineNumber = 662
  lineNumber = 661
  var idxres1783 = var_values.methods["[]"].call(var_values, [1], new GraceNum(3));
  lineNumber = 662
  var call1784 = callmethod(this,"vararg:=", [1], idxres1783);
  var if1779 = call1784;
}
  superDepth = origSuperDepth;
}
obj_init_1759.apply(obj1759, []);
  return obj1759
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1756.methods["new"] = func1758;
  superDepth = origSuperDepth;
}
obj_init_1756.apply(obj1756, []);
  return obj1756
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["signaturePart"] = func1755;
  lineNumber = 694
var func1785 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1786 = Grace_allocObject();
  obj1786.outer = this;
    var reader_ast_outer1787 = function() {
    return this.outer;
  }
  obj1786.methods["outer"] = reader_ast_outer1787;
function obj_init_1786() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1788 = function(argcv) {
  var curarg = 1;
  var var_values = new GraceList(Array.prototype.slice.call(arguments, curarg, curarg + argcv[0] - 0));
  curarg += argcv[0] - 0;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1789 = Grace_allocObject();
  obj1789.outer = this;
    var reader_ast_outer1790 = function() {
    return this.outer;
  }
  obj1789.methods["outer"] = reader_ast_outer1790;
function obj_init_1789() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 687
  var string1791 = new GraceString("");
  obj1789.data["name"] = string1791;
    var reader_ast_name1792 = function() {
    return this.data["name"];
  }
  obj1789.methods["name"] = reader_ast_name1792;
  obj1789.data["name"] = string1791;
  var writer_ast_name1792 = function(argcv, o) {
    this.data["name"] = o;
  }
  obj1789.methods["name:="] = writer_ast_name1792;
obj1789.mutable = true;
  lineNumber = 689
  var array1793 = new GraceList([
]);

  obj1789.data["args"] = array1793;
    var reader_ast_args1794 = function() {
    return this.data["args"];
  }
  obj1789.methods["args"] = reader_ast_args1794;
  obj1789.data["args"] = array1793;
  var writer_ast_args1794 = function(argcv, o) {
    this.data["args"] = o;
  }
  obj1789.methods["args:="] = writer_ast_args1794;
obj1789.mutable = true;
  lineNumber = 691
  lineNumber = 692
  lineNumber = 1
  lineNumber = 689
  var call1796 = callmethod(var_values,"size", [0]);
  var opresult1798 = callmethod(call1796, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1798)) {
  lineNumber = 691
  lineNumber = 1
  lineNumber = 691
  lineNumber = 690
  var idxres1799 = var_values.methods["[]"].call(var_values, [1], new GraceNum(1));
  lineNumber = 691
  var call1800 = callmethod(this,"name:=", [1], idxres1799);
  var if1795 = call1800;
}
  lineNumber = 694
  lineNumber = 695
  lineNumber = 1
  lineNumber = 692
  var call1802 = callmethod(var_values,"size", [0]);
  var opresult1804 = callmethod(call1802, ">", [1], new GraceNum(1));
  if (Grace_isTrue(opresult1804)) {
  lineNumber = 694
  lineNumber = 1
  lineNumber = 694
  lineNumber = 693
  var idxres1805 = var_values.methods["[]"].call(var_values, [1], new GraceNum(2));
  lineNumber = 694
  var call1806 = callmethod(this,"args:=", [1], idxres1805);
  var if1801 = call1806;
}
  superDepth = origSuperDepth;
}
obj_init_1789.apply(obj1789, []);
  return obj1789
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1786.methods["new"] = func1788;
  superDepth = origSuperDepth;
}
obj_init_1786.apply(obj1786, []);
  return obj1786
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["callWithPart"] = func1785;
  return this;
}
function gracecode_buildinfo() {
  lineNumber = 1
var func0 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var string1 = new GraceString("ba42f3f58b4891cc696fd0d9906846042f30eddd");
  return string1
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["gitrevision"] = func0;
  lineNumber = 2
var func2 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var string3 = new GraceString("1032");
  return string3
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["gitgeneration"] = func2;
  return this;
}
function gracecode_compiler() {
  lineNumber = 2
// Import of io
  var var_io = do_import("io", gracecode_io);
  lineNumber = 3
// Import of sys
  var var_sys = do_import("sys", gracecode_sys);
  lineNumber = 4
// Import of unicode
  var var_unicode = do_import("unicode", gracecode_unicode);
  lineNumber = 5
// Import of util
  var var_util = do_import("util", gracecode_util);
  lineNumber = 6
// Import of lexer
  var var_lexer = do_import("lexer", gracecode_lexer);
  lineNumber = 7
// Import of ast
  var var_ast = do_import("ast", gracecode_ast);
  lineNumber = 8
// Import of parser
  var var_parser = do_import("parser", gracecode_parser);
  lineNumber = 9
// Import of typechecker
  var var_typechecker = do_import("typechecker", gracecode_typechecker);
  lineNumber = 10
// Import of genllvm30
  var var_genllvm30 = do_import("genllvm30", gracecode_genllvm30);
  lineNumber = 11
// Import of genc
  var var_genc = do_import("genc", gracecode_genc);
  lineNumber = 12
// Import of genjava
  var var_genjava = do_import("genjava", gracecode_genjava);
  lineNumber = 13
// Import of genjs
  var var_genjs = do_import("genjs", gracecode_genjs);
  lineNumber = 14
// Import of buildinfo
  var var_buildinfo = do_import("buildinfo", gracecode_buildinfo);
  lineNumber = 16
// Import of subtype
  var var_subtype = do_import("subtype", gracecode_subtype);
  lineNumber = 1
  lineNumber = 16
  var call0 = callmethod(var_util,"parseargs", [0]);
  lineNumber = 18
  var string2 = new GraceString("lex");
  var string3 = new GraceString("parse");
  var string4 = new GraceString("processed-ast");
  var string5 = new GraceString("subtypematrix");
  var string6 = new GraceString("c");
  var string7 = new GraceString("js");
  var string8 = new GraceString("java");
  var array1 = new GraceList([
string2,
string3,
string4,
string5,
string6,
string7,
string8,
]);

  var var_targets = array1;
  lineNumber = 1
var func9 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 18
  return var_targets
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["targets"] = func9;
  lineNumber = 25
  lineNumber = 28
  lineNumber = 1
  lineNumber = 20
  var call11 = callmethod(var_util,"target", [0]);
  var string12 = new GraceString("help");
  var opresult14 = callmethod(call11, "==", [1], string12);
  if (Grace_isTrue(opresult14)) {
  lineNumber = 21
  var string15 = new GraceString("Valid targets:");
  var call16 = Grace_print(string15);
  lineNumber = 23
  lineNumber = 22
  lineNumber = 23
  var block17 = Grace_allocObject();
  block17.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block17.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block17.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block17.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block17.receiver = this;
  block17.className = 'block<compiler:23>';
  block17.real = function(
var_t
) {
  var string18 = new GraceString("  ");
  var opresult20 = callmethod(string18, "++", [1], var_t);
  var string21 = new GraceString("");
  var opresult23 = callmethod(opresult20, "++", [1], string21);
  var call24 = Grace_print(opresult23);
  return call24;
};
  var call25 = callmethod(Grace_prelude,"for()do", [1, 1], var_targets, block17);
  lineNumber = 25
  var call26 = callmethod(var_sys,"exit", [1], new GraceNum(0));
  var if10 = call26;
}
  lineNumber = 29
  lineNumber = 1
  lineNumber = 29
  lineNumber = 1
  lineNumber = 29
  lineNumber = 1
  lineNumber = 28
  var call27 = callmethod(var_lexer,"Lexer", [0]);
  var call28 = callmethod(call27,"new", [0]);
  var call29 = callmethod(call28,"lexinput", [0]);
  var var_tokens = call29;
  lineNumber = 1
var func30 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 28
  return var_tokens
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tokens"] = func30;
  lineNumber = 1
var func31 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_tokens = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tokens:="] = func31;
  lineNumber = 37
  lineNumber = 39
  lineNumber = 1
  lineNumber = 29
  var call33 = callmethod(var_util,"target", [0]);
  var string34 = new GraceString("lex");
  var opresult36 = callmethod(call33, "==", [1], string34);
  if (Grace_isTrue(opresult36)) {
  lineNumber = 34
  lineNumber = 31
  lineNumber = 34
  var block37 = Grace_allocObject();
  block37.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block37.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block37.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block37.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block37.receiver = this;
  block37.className = 'block<compiler:34>';
  block37.real = function(
var_v
) {
  lineNumber = 32
  lineNumber = 1
  lineNumber = 32
  var call38 = callmethod(var_v,"kind", [0]);
  var string39 = new GraceString(": ");
  var opresult41 = callmethod(call38, "++", [1], string39);
  lineNumber = 1
  lineNumber = 32
  var call42 = callmethod(var_v,"value", [0]);
  var opresult44 = callmethod(opresult41, "++", [1], call42);
  var call45 = Grace_print(opresult44);
  lineNumber = 34
  lineNumber = 36
  lineNumber = 1
  lineNumber = 33
  var call47 = callmethod(var_util,"verbosity", [0]);
  var opresult49 = callmethod(call47, ">", [1], new GraceNum(30));
  if (Grace_isTrue(opresult49)) {
  lineNumber = 34
  var string50 = new GraceString("  [line: ");
  lineNumber = 1
  lineNumber = 34
  var call51 = callmethod(var_v,"line", [0]);
  var opresult53 = callmethod(string50, "++", [1], call51);
  var string54 = new GraceString(" position: ");
  var opresult56 = callmethod(opresult53, "++", [1], string54);
  lineNumber = 1
  lineNumber = 34
  var call57 = callmethod(var_v,"linePos", [0]);
  var opresult59 = callmethod(opresult56, "++", [1], call57);
  var string60 = new GraceString(" indent: ");
  var opresult62 = callmethod(opresult59, "++", [1], string60);
  lineNumber = 1
  lineNumber = 34
  var call63 = callmethod(var_v,"indent", [0]);
  var opresult65 = callmethod(opresult62, "++", [1], call63);
  var string66 = new GraceString("]");
  var opresult68 = callmethod(opresult65, "++", [1], string66);
  var call69 = Grace_print(opresult68);
  var if46 = call69;
}
  return if46;
};
  var call70 = callmethod(Grace_prelude,"for()do", [1, 1], var_tokens, block37);
  lineNumber = 37
  var call71 = callmethod(var_sys,"exit", [1], new GraceNum(0));
  var if32 = call71;
}
  lineNumber = 39
  var call72 = callmethod(var_parser,"parse", [1], var_tokens);
  var var_values = call72;
  lineNumber = 1
var func73 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 39
  return var_values
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["values"] = func73;
  lineNumber = 1
var func74 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_values = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["values:="] = func74;
  lineNumber = 46
  lineNumber = 48
  lineNumber = 1
  lineNumber = 41
  var call76 = callmethod(var_util,"target", [0]);
  var string77 = new GraceString("parse");
  var opresult79 = callmethod(call76, "==", [1], string77);
  if (Grace_isTrue(opresult79)) {
  lineNumber = 44
  lineNumber = 43
  lineNumber = 44
  var block80 = Grace_allocObject();
  block80.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block80.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block80.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block80.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block80.receiver = this;
  block80.className = 'block<compiler:44>';
  block80.real = function(
var_v
) {
  var call81 = callmethod(var_v,"pretty", [1], new GraceNum(0));
  var call82 = Grace_print(call81);
  return call82;
};
  var call83 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block80);
  lineNumber = 46
  var call84 = callmethod(var_sys,"exit", [1], new GraceNum(0));
  var if75 = call84;
}
  lineNumber = 48
  var call85 = callmethod(var_typechecker,"typecheck", [1], var_values);
  var_values = call85;
  lineNumber = 53
  lineNumber = 55
  lineNumber = 1
  lineNumber = 49
  var call87 = callmethod(var_util,"target", [0]);
  var string88 = new GraceString("processed-ast");
  var opresult90 = callmethod(call87, "==", [1], string88);
  if (Grace_isTrue(opresult90)) {
  lineNumber = 51
  lineNumber = 50
  lineNumber = 51
  var block91 = Grace_allocObject();
  block91.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block91.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block91.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block91.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block91.receiver = this;
  block91.className = 'block<compiler:51>';
  block91.real = function(
var_v
) {
  var call92 = callmethod(var_v,"pretty", [1], new GraceNum(0));
  var call93 = Grace_print(call92);
  return call93;
};
  var call94 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block91);
  lineNumber = 53
  var call95 = callmethod(var_sys,"exit", [1], new GraceNum(0));
  var if86 = call95;
}
  lineNumber = 57
  lineNumber = 61
  lineNumber = 1
  lineNumber = 55
  var call97 = callmethod(var_util,"target", [0]);
  var string98 = new GraceString("subtypematrix");
  var opresult100 = callmethod(call97, "==", [1], string98);
  if (Grace_isTrue(opresult100)) {
  lineNumber = 56
  lineNumber = 1
  lineNumber = 56
  var call101 = callmethod(var_subtype,"printMatrix", [0]);
  lineNumber = 57
  var call102 = callmethod(var_sys,"exit", [1], new GraceNum(0));
  var if96 = call102;
}
  lineNumber = 75
  lineNumber = 76
  lineNumber = 1
  lineNumber = 61
  var call104 = callmethod(var_util,"target", [0]);
  var string105 = new GraceString("llvm30");
  var opresult107 = callmethod(call104, "==", [1], string105);
  if (Grace_isTrue(opresult107)) {
  lineNumber = 63
  lineNumber = 62
  lineNumber = 1
  lineNumber = 62
  var call108 = callmethod(var_util,"outfile", [0]);
  lineNumber = 1
  lineNumber = 62
  var call109 = callmethod(var_util,"modname", [0]);
  lineNumber = 1
  lineNumber = 62
  var call110 = callmethod(var_util,"runmode", [0]);
  lineNumber = 63
  lineNumber = 1
  lineNumber = 63
  var call111 = callmethod(var_util,"buildtype", [0]);
  lineNumber = 1
  lineNumber = 63
  var call112 = callmethod(var_util,"gracelibPath", [0]);
  lineNumber = 62
  var call113 = callmethod(var_genllvm30,"compile", [6], var_values, call108, call109, call110, call111, call112);
  var if103 = call113;
  } else {
  lineNumber = 75
  lineNumber = 67
  lineNumber = 1
  lineNumber = 64
  var call115 = callmethod(var_util,"target", [0]);
  var string116 = new GraceString("c");
  var opresult118 = callmethod(call115, "==", [1], string116);
  if (Grace_isTrue(opresult118)) {
  lineNumber = 66
  lineNumber = 65
  lineNumber = 1
  lineNumber = 65
  var call119 = callmethod(var_util,"outfile", [0]);
  lineNumber = 1
  lineNumber = 65
  var call120 = callmethod(var_util,"modname", [0]);
  lineNumber = 1
  lineNumber = 65
  var call121 = callmethod(var_util,"runmode", [0]);
  lineNumber = 66
  lineNumber = 1
  lineNumber = 66
  var call122 = callmethod(var_util,"buildtype", [0]);
  lineNumber = 65
  var call123 = callmethod(var_genc,"compile", [5], var_values, call119, call120, call121, call122);
  var if114 = call123;
  } else {
  lineNumber = 75
  lineNumber = 70
  lineNumber = 1
  lineNumber = 67
  var call125 = callmethod(var_util,"target", [0]);
  var string126 = new GraceString("js");
  var opresult128 = callmethod(call125, "==", [1], string126);
  lineNumber = 70
  lineNumber = 1
  lineNumber = 67
  var call129 = callmethod(var_util,"target", [0]);
  var string130 = new GraceString("ecmascript");
  var opresult132 = callmethod(call129, "==", [1], string130);
  var opresult134 = callmethod(opresult128, "|", [1], opresult132);
  if (Grace_isTrue(opresult134)) {
  lineNumber = 69
  lineNumber = 68
  lineNumber = 1
  lineNumber = 68
  var call135 = callmethod(var_util,"outfile", [0]);
  lineNumber = 1
  lineNumber = 68
  var call136 = callmethod(var_util,"modname", [0]);
  lineNumber = 1
  lineNumber = 68
  var call137 = callmethod(var_util,"runmode", [0]);
  lineNumber = 69
  lineNumber = 1
  lineNumber = 69
  var call138 = callmethod(var_util,"buildtype", [0]);
  lineNumber = 1
  lineNumber = 69
  var call139 = callmethod(var_util,"gracelibPath", [0]);
  lineNumber = 68
  var call140 = callmethod(var_genjs,"compile", [6], var_values, call135, call136, call137, call138, call139);
  var if124 = call140;
  } else {
  lineNumber = 75
  lineNumber = 73
  lineNumber = 1
  lineNumber = 70
  var call142 = callmethod(var_util,"target", [0]);
  var string143 = new GraceString("java");
  var opresult145 = callmethod(call142, "==", [1], string143);
  if (Grace_isTrue(opresult145)) {
  lineNumber = 72
  lineNumber = 71
  lineNumber = 1
  lineNumber = 71
  var call146 = callmethod(var_util,"outfile", [0]);
  lineNumber = 1
  lineNumber = 71
  var call147 = callmethod(var_util,"modname", [0]);
  lineNumber = 1
  lineNumber = 71
  var call148 = callmethod(var_util,"runmode", [0]);
  lineNumber = 72
  lineNumber = 1
  lineNumber = 72
  var call149 = callmethod(var_util,"buildtype", [0]);
  lineNumber = 1
  lineNumber = 72
  var call150 = callmethod(var_util,"gracelibPath", [0]);
  lineNumber = 71
  var call151 = callmethod(var_genjava,"compile", [6], var_values, call146, call147, call148, call149, call150);
  var if141 = call151;
  } else {
  lineNumber = 74
  var string152 = new GraceString("minigrace: no such target '");
  lineNumber = 1
  lineNumber = 74
  var call153 = callmethod(var_util,"target", [0]);
  var opresult155 = callmethod(string152, "++", [1], call153);
  var string156 = new GraceString("'");
  var opresult158 = callmethod(opresult155, "++", [1], string156);
  lineNumber = 75
  lineNumber = 1
  lineNumber = 74
  var call159 = callmethod(var_io,"error", [0]);
  var call160 = callmethod(call159,"write", [1], opresult158);
  lineNumber = 75
  var call161 = callmethod(var_sys,"exit", [1], new GraceNum(1));
  var if141 = call161;
}
  var if124 = if141;
}
  var if114 = if124;
}
  var if103 = if114;
}
  return this;
}
function gracecode_genc() {
  lineNumber = 2
// Import of io
  var var_io = do_import("io", gracecode_io);
  lineNumber = 3
// Import of sys
  var var_sys = do_import("sys", gracecode_sys);
  lineNumber = 4
// Import of ast
  var var_ast = do_import("ast", gracecode_ast);
  lineNumber = 5
// Import of util
  var var_util = do_import("util", gracecode_util);
  lineNumber = 6
// Import of buildinfo
  var var_buildinfo = do_import("buildinfo", gracecode_buildinfo);
  lineNumber = 14
// Import of subtype
  var var_subtype = do_import("subtype", gracecode_subtype);
  lineNumber = 15
  var var_tmp;
  lineNumber = 1
var func0 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 14
  return var_tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tmp"] = func0;
  lineNumber = 1
var func1 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_tmp = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tmp:="] = func1;
  lineNumber = 16
  lineNumber = 15
  var var_verbosity = new GraceNum(30);
  lineNumber = 1
var func2 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 15
  return var_verbosity
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["verbosity"] = func2;
  lineNumber = 1
var func3 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_verbosity = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["verbosity:="] = func3;
  lineNumber = 17
  lineNumber = 16
  var var_pad1 = new GraceNum(1);
  lineNumber = 1
var func4 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 16
  return var_pad1
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pad1"] = func4;
  lineNumber = 1
var func5 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_pad1 = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pad1:="] = func5;
  lineNumber = 18
  lineNumber = 17
  var var_auto__95__count = new GraceNum(0);
  lineNumber = 1
var func6 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 17
  return var_auto__95__count
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["auto_count"] = func6;
  lineNumber = 1
var func7 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_auto__95__count = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["auto_count:="] = func7;
  lineNumber = 19
  var array8 = new GraceList([
]);

  var var_constants = array8;
  lineNumber = 1
var func9 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 18
  return var_constants
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["constants"] = func9;
  lineNumber = 1
var func10 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_constants = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["constants:="] = func10;
  lineNumber = 20
  var array11 = new GraceList([
]);

  var var_globals = array11;
  lineNumber = 1
var func12 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 19
  return var_globals
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["globals"] = func12;
  lineNumber = 1
var func13 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_globals = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["globals:="] = func13;
  lineNumber = 21
  var array14 = new GraceList([
]);

  var var_output = array14;
  lineNumber = 1
var func15 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 20
  return var_output
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["output"] = func15;
  lineNumber = 1
var func16 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_output = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["output:="] = func16;
  lineNumber = 22
  var array17 = new GraceList([
]);

  var var_usedvars = array17;
  lineNumber = 1
var func18 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 21
  return var_usedvars
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["usedvars"] = func18;
  lineNumber = 1
var func19 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_usedvars = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["usedvars:="] = func19;
  lineNumber = 23
  var array20 = new GraceList([
]);

  var var_declaredvars = array20;
  lineNumber = 1
var func21 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 22
  return var_declaredvars
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["declaredvars"] = func21;
  lineNumber = 1
var func22 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_declaredvars = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["declaredvars:="] = func22;
  lineNumber = 24
  lineNumber = 23
  var string23 = new GraceString("entry");
  var var_bblock = string23;
  lineNumber = 1
var func24 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 23
  return var_bblock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bblock"] = func24;
  lineNumber = 1
var func25 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_bblock = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bblock:="] = func25;
  lineNumber = 25
  lineNumber = 24
  var var_linenum = new GraceNum(1);
  lineNumber = 1
var func26 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 24
  return var_linenum
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["linenum"] = func26;
  lineNumber = 1
var func27 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_linenum = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["linenum:="] = func27;
  lineNumber = 26
  var array28 = new GraceList([
]);

  var var_modules = array28;
  lineNumber = 1
var func29 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 25
  return var_modules
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modules"] = func29;
  lineNumber = 1
var func30 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_modules = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modules:="] = func30;
  lineNumber = 27
  var array31 = new GraceList([
]);

  var var_staticmodules = array31;
  lineNumber = 1
var func32 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 26
  return var_staticmodules
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["staticmodules"] = func32;
  lineNumber = 1
var func33 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_staticmodules = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["staticmodules:="] = func33;
  lineNumber = 28
  var array34 = new GraceList([
]);

  var var_values = array34;
  lineNumber = 1
var func35 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 27
  return var_values
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["values"] = func35;
  lineNumber = 1
var func36 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_values = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["values:="] = func36;
  lineNumber = 29
  var var_outfile;
  lineNumber = 1
var func37 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 28
  return var_outfile
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outfile"] = func37;
  lineNumber = 1
var func38 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_outfile = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outfile:="] = func38;
  lineNumber = 30
  lineNumber = 29
  var string39 = new GraceString("main");
  var var_modname = string39;
  lineNumber = 1
var func40 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 29
  return var_modname
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modname"] = func40;
  lineNumber = 1
var func41 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_modname = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modname:="] = func41;
  lineNumber = 31
  lineNumber = 30
  var string42 = new GraceString("main");
  var var_escmodname = string42;
  lineNumber = 1
var func43 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 30
  return var_escmodname
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["escmodname"] = func43;
  lineNumber = 1
var func44 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_escmodname = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["escmodname:="] = func44;
  lineNumber = 32
  lineNumber = 31
  var string45 = new GraceString("build");
  var var_runmode = string45;
  lineNumber = 1
var func46 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 31
  return var_runmode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["runmode"] = func46;
  lineNumber = 1
var func47 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_runmode = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["runmode:="] = func47;
  lineNumber = 33
  lineNumber = 32
  var string48 = new GraceString("bc");
  var var_buildtype = string48;
  lineNumber = 1
var func49 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 32
  return var_buildtype
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["buildtype"] = func49;
  lineNumber = 1
var func50 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_buildtype = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["buildtype:="] = func50;
  lineNumber = 34
  lineNumber = 33
  var string51 = new GraceString("gracelib.o");
  var var_gracelibPath = string51;
  lineNumber = 1
var func52 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 33
  return var_gracelibPath
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["gracelibPath"] = func52;
  lineNumber = 1
var func53 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_gracelibPath = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["gracelibPath:="] = func53;
  lineNumber = 35
  lineNumber = 34
  var bool54 = new GraceBoolean(false)
  var var_inBlock = bool54;
  lineNumber = 1
var func55 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 34
  return var_inBlock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["inBlock"] = func55;
  lineNumber = 1
var func56 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_inBlock = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["inBlock:="] = func56;
  lineNumber = 36
  lineNumber = 35
  var var_paramsUsed = new GraceNum(1);
  lineNumber = 1
var func57 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 35
  return var_paramsUsed
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["paramsUsed"] = func57;
  lineNumber = 1
var func58 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_paramsUsed = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["paramsUsed:="] = func58;
  lineNumber = 37
  lineNumber = 36
  var var_partsUsed = new GraceNum(1);
  lineNumber = 1
var func59 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 36
  return var_partsUsed
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["partsUsed"] = func59;
  lineNumber = 1
var func60 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_partsUsed = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["partsUsed:="] = func60;
  lineNumber = 38
  lineNumber = 37
  var var_topLevelMethodPos = new GraceNum(1);
  lineNumber = 1
var func61 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 37
  return var_topLevelMethodPos
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["topLevelMethodPos"] = func61;
  lineNumber = 1
var func62 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_topLevelMethodPos = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["topLevelMethodPos:="] = func62;
  lineNumber = 39
  var array63 = new GraceList([
]);

  var var_topOutput = array63;
  lineNumber = 1
var func64 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 38
  return var_topOutput
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["topOutput"] = func64;
  lineNumber = 1
var func65 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_topOutput = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["topOutput:="] = func65;
  lineNumber = 40
  lineNumber = 39
  var var_bottomOutput = var_output;
  lineNumber = 1
var func66 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 39
  return var_bottomOutput
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bottomOutput"] = func66;
  lineNumber = 1
var func67 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_bottomOutput = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bottomOutput:="] = func67;
  lineNumber = 41
  lineNumber = 40
  var var_compilationDepth = new GraceNum(0);
  lineNumber = 1
var func68 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 40
  return var_compilationDepth
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilationDepth"] = func68;
  lineNumber = 1
var func69 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_compilationDepth = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilationDepth:="] = func69;
  lineNumber = 43
  lineNumber = 1
  lineNumber = 41
  var call70 = callmethod(var_HashMap,"new", [0]);
  var var_topLevelTypes = call70;
  lineNumber = 1
var func71 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 41
  return var_topLevelTypes
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["topLevelTypes"] = func71;
  lineNumber = 44
var func72 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call73 = callmethod(var_output,"push", [1], var_s);
  return call73
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["out"] = func72;
  lineNumber = 47
var func74 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call75 = callmethod(var_util,"outprint", [1], var_s);
  return call75
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outprint"] = func74;
  lineNumber = 51
var func76 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 50
  var_output = var_topOutput;
  return var_topOutput
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outswitchup"] = func76;
  lineNumber = 54
var func77 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 53
  var_output = var_bottomOutput;
  return var_bottomOutput
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outswitchdown"] = func77;
  lineNumber = 56
var func78 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call79 = callmethod(var_util,"log_verbose", [1], var_s);
  return call79
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["log_verbose"] = func78;
  lineNumber = 62
var func80 = function(argcv) {
  var curarg = 1;
  var var_n = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 64
  lineNumber = 1
  lineNumber = 59
  var call82 = callmethod(var_n,"kind", [0]);
  var string83 = new GraceString("if");
  var opresult85 = callmethod(call82, "==", [1], string83);
  if (Grace_isTrue(opresult85)) {
  lineNumber = 60
  lineNumber = 1
  lineNumber = 60
  var call86 = callmethod(var_n,"thenblock", [0]);
  lineNumber = 61
  var call87 = callmethod(this,"countbindings", [1], call86);
  lineNumber = 60
  lineNumber = 1
  lineNumber = 60
  var call88 = callmethod(var_n,"elseblock", [0]);
  var call89 = callmethod(this,"countbindings", [1], call88);
  var opresult91 = callmethod(call87, "+", [1], call89);
  var if81 = opresult91;
  } else {
  lineNumber = 62
  var if81 = new GraceNum(0);
}
  return if81
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["countnodebindings"] = func80;
  lineNumber = 75
var func92 = function(argcv) {
  var curarg = 1;
  var var_l = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 67
  lineNumber = 66
  var var_numslots = new GraceNum(0);
  lineNumber = 72
  lineNumber = 67
  lineNumber = 72
  var block93 = Grace_allocObject();
  block93.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block93.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block93.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block93.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block93.receiver = this;
  block93.className = 'block<genc:72>';
  block93.real = function(
var_n
) {
  lineNumber = 74
  lineNumber = 1
  lineNumber = 68
  var call95 = callmethod(var_n,"kind", [0]);
  var string96 = new GraceString("vardec");
  var opresult98 = callmethod(call95, "==", [1], string96);
  lineNumber = 74
  lineNumber = 1
  lineNumber = 68
  var call99 = callmethod(var_n,"kind", [0]);
  var string100 = new GraceString("defdec");
  var opresult102 = callmethod(call99, "==", [1], string100);
  var opresult104 = callmethod(opresult98, "|", [1], opresult102);
  lineNumber = 74
  lineNumber = 1
  lineNumber = 69
  var call105 = callmethod(var_n,"kind", [0]);
  var string106 = new GraceString("class");
  var opresult108 = callmethod(call105, "==", [1], string106);
  var opresult110 = callmethod(opresult104, "|", [1], opresult108);
  lineNumber = 74
  lineNumber = 1
  lineNumber = 69
  var call111 = callmethod(var_n,"kind", [0]);
  var string112 = new GraceString("type");
  var opresult114 = callmethod(call111, "==", [1], string112);
  var opresult116 = callmethod(opresult110, "|", [1], opresult114);
  if (Grace_isTrue(opresult116)) {
  lineNumber = 71
  lineNumber = 70
  var opresult118 = callmethod(var_numslots, "+", [1], new GraceNum(1));
  var_numslots = opresult118;
  var if94 = opresult118;
  } else {
  lineNumber = 72
  lineNumber = 74
  lineNumber = 1
  lineNumber = 71
  var call120 = callmethod(var_n,"kind", [0]);
  var string121 = new GraceString("if");
  var opresult123 = callmethod(call120, "==", [1], string121);
  if (Grace_isTrue(opresult123)) {
  lineNumber = 72
  lineNumber = 73
  var call124 = callmethod(this,"countnodebindings", [1], var_n);
  var opresult126 = callmethod(var_numslots, "+", [1], call124);
  var_numslots = opresult126;
  var if119 = opresult126;
}
  var if94 = if119;
}
  return if94;
};
  var call127 = callmethod(Grace_prelude,"for()do", [1, 1], var_l, block93);
  lineNumber = 75
  return var_numslots
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["countbindings"] = func92;
  lineNumber = 110
var func128 = function(argcv) {
  var curarg = 1;
  var var_l = arguments[curarg];
  curarg++;
  var var_slot = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 105
  lineNumber = 78
  lineNumber = 105
  var block129 = Grace_allocObject();
  block129.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block129.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block129.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block129.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block129.receiver = this;
  block129.className = 'block<genc:105>';
  block129.real = function(
var_n
) {
  lineNumber = 109
  lineNumber = 1
  lineNumber = 79
  var call131 = callmethod(var_n,"kind", [0]);
  var string132 = new GraceString("vardec");
  var opresult134 = callmethod(call131, "==", [1], string132);
  lineNumber = 109
  lineNumber = 1
  lineNumber = 79
  var call135 = callmethod(var_n,"kind", [0]);
  var string136 = new GraceString("defdec");
  var opresult138 = callmethod(call135, "==", [1], string136);
  var opresult140 = callmethod(opresult134, "|", [1], opresult138);
  lineNumber = 109
  lineNumber = 1
  lineNumber = 80
  var call141 = callmethod(var_n,"kind", [0]);
  var string142 = new GraceString("class");
  var opresult144 = callmethod(call141, "==", [1], string142);
  var opresult146 = callmethod(opresult140, "|", [1], opresult144);
  if (Grace_isTrue(opresult146)) {
  lineNumber = 82
  lineNumber = 81
  var string147 = new GraceString("");
  var var_tnm = string147;
  lineNumber = 85
  lineNumber = 87
  lineNumber = 1
  lineNumber = 87
  lineNumber = 1
  lineNumber = 82
  var call149 = callmethod(var_n,"name", [0]);
  var call150 = callmethod(call149,"kind", [0]);
  var string151 = new GraceString("generic");
  var opresult153 = callmethod(call150, "==", [1], string151);
  if (Grace_isTrue(opresult153)) {
  lineNumber = 83
  lineNumber = 1
  lineNumber = 83
  lineNumber = 1
  lineNumber = 83
  lineNumber = 1
  lineNumber = 83
  var call154 = callmethod(var_n,"name", [0]);
  var call155 = callmethod(call154,"value", [0]);
  var call156 = callmethod(call155,"value", [0]);
  lineNumber = 84
  var call157 = callmethod(this,"escapeident", [1], call156);
  var_tnm = call157;
  var if148 = call157;
  } else {
  lineNumber = 85
  lineNumber = 1
  lineNumber = 85
  lineNumber = 1
  lineNumber = 85
  var call158 = callmethod(var_n,"name", [0]);
  var call159 = callmethod(call158,"value", [0]);
  lineNumber = 86
  var call160 = callmethod(this,"escapeident", [1], call159);
  var_tnm = call160;
  var if148 = call160;
}
  lineNumber = 91
  lineNumber = 87
  var call162 = callmethod(var_declaredvars,"contains", [1], var_tnm);
  var call163 = callmethod(call162,"prefix!", [0]);
  if (Grace_isTrue(call163)) {
  lineNumber = 88
  var call164 = callmethod(var_declaredvars,"push", [1], var_tnm);
  lineNumber = 89
  var string165 = new GraceString("  Object *var_");
  var opresult167 = callmethod(string165, "++", [1], var_tnm);
  var string168 = new GraceString(" = &(stackframe->slots[");
  var opresult170 = callmethod(opresult167, "++", [1], string168);
  var opresult172 = callmethod(opresult170, "++", [1], var_slot);
  var string173 = new GraceString("]);");
  var opresult175 = callmethod(opresult172, "++", [1], string173);
  lineNumber = 90
  var call176 = callmethod(this,"out", [1], opresult175);
  lineNumber = 91
  lineNumber = 90
  var opresult178 = callmethod(var_slot, "+", [1], new GraceNum(1));
  var_slot = opresult178;
  var if161 = opresult178;
}
  var if130 = if161;
  } else {
  lineNumber = 105
  lineNumber = 108
  lineNumber = 1
  lineNumber = 93
  var call180 = callmethod(var_n,"kind", [0]);
  var string181 = new GraceString("if");
  var opresult183 = callmethod(call180, "==", [1], string181);
  if (Grace_isTrue(opresult183)) {
  lineNumber = 94
  lineNumber = 1
  lineNumber = 94
  var call184 = callmethod(var_n,"thenblock", [0]);
  lineNumber = 95
  var call185 = callmethod(this,"definebindings", [2], call184, var_slot);
  var_slot = call185;
  lineNumber = 1
  lineNumber = 95
  var call186 = callmethod(var_n,"elseblock", [0]);
  lineNumber = 96
  var call187 = callmethod(this,"definebindings", [2], call186, var_slot);
  var_slot = call187;
  lineNumber = 97
  lineNumber = 1
  lineNumber = 96
  var bool188 = new GraceBoolean(true)
  var call189 = callmethod(var_n,"handledIdentifiers:=", [1], bool188);
  var if179 = call189;
  } else {
  lineNumber = 105
  lineNumber = 107
  lineNumber = 1
  lineNumber = 98
  var call191 = callmethod(var_n,"kind", [0]);
  var string192 = new GraceString("type");
  var opresult194 = callmethod(call191, "==", [1], string192);
  if (Grace_isTrue(opresult194)) {
  lineNumber = 99
  lineNumber = 1
  lineNumber = 99
  var call195 = callmethod(var_n,"value", [0]);
  lineNumber = 100
  var call196 = callmethod(this,"escapeident", [1], call195);
  var var_tnm = call196;
  lineNumber = 105
  lineNumber = 100
  var call198 = callmethod(var_declaredvars,"contains", [1], var_tnm);
  var call199 = callmethod(call198,"prefix!", [0]);
  if (Grace_isTrue(call199)) {
  lineNumber = 101
  var call200 = callmethod(var_declaredvars,"push", [1], var_tnm);
  lineNumber = 103
  lineNumber = 102
  var string201 = new GraceString("  Object *var_");
  var opresult203 = callmethod(string201, "++", [1], var_tnm);
  var string204 = new GraceString(" = ");
  var opresult206 = callmethod(opresult203, "++", [1], string204);
  lineNumber = 103
  var string207 = new GraceString("&(stackframe->slots[");
  var opresult209 = callmethod(string207, "++", [1], var_slot);
  var string210 = new GraceString("]);");
  var opresult212 = callmethod(opresult209, "++", [1], string210);
  var opresult214 = callmethod(opresult206, "++", [1], opresult212);
  lineNumber = 104
  var call215 = callmethod(this,"out", [1], opresult214);
  lineNumber = 105
  lineNumber = 104
  var opresult217 = callmethod(var_slot, "+", [1], new GraceNum(1));
  var_slot = opresult217;
  var if197 = opresult217;
}
  var if190 = if197;
}
  var if179 = if190;
}
  var if130 = if179;
}
  return if130;
};
  var call218 = callmethod(Grace_prelude,"for()do", [1, 1], var_l, block129);
  lineNumber = 110
  return var_slot
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["definebindings"] = func128;
  lineNumber = 114
var func219 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 113
  var string220 = new GraceString("%");
  var opresult222 = callmethod(string220, "++", [1], var_s);
  var_bblock = opresult222;
  lineNumber = 114
  var string223 = new GraceString(":");
  var opresult225 = callmethod(var_s, "++", [1], string223);
  lineNumber = 115
  var call226 = callmethod(this,"out", [1], opresult225);
  return call226
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["beginblock"] = func219;
  lineNumber = 129
var func227 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 118
  lineNumber = 117
  var string228 = new GraceString("");
  var var_ns = string228;
  lineNumber = 127
  lineNumber = 118
  lineNumber = 127
  var block229 = Grace_allocObject();
  block229.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block229.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block229.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block229.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block229.receiver = this;
  block229.className = 'block<genc:127>';
  block229.real = function(
var_c
) {
  lineNumber = 120
  lineNumber = 1
  lineNumber = 119
  var call230 = callmethod(var_c,"ord", [0]);
  var var_o = call230;
  lineNumber = 127
  lineNumber = 128
  lineNumber = 120
  var opresult233 = callmethod(var_o, ">=", [1], new GraceNum(65));
  lineNumber = 128
  lineNumber = 120
  var opresult235 = callmethod(var_o, "<=", [1], new GraceNum(90));
  var opresult237 = callmethod(opresult233, "&", [1], opresult235);
  lineNumber = 128
  lineNumber = 121
  var opresult239 = callmethod(var_o, ">=", [1], new GraceNum(97));
  lineNumber = 128
  lineNumber = 121
  var opresult241 = callmethod(var_o, "<=", [1], new GraceNum(122));
  var opresult243 = callmethod(opresult239, "&", [1], opresult241);
  var opresult245 = callmethod(opresult237, "|", [1], opresult243);
  lineNumber = 128
  lineNumber = 122
  var opresult247 = callmethod(var_o, ">=", [1], new GraceNum(48));
  lineNumber = 128
  lineNumber = 122
  var opresult249 = callmethod(var_o, "<=", [1], new GraceNum(57));
  var opresult251 = callmethod(opresult247, "&", [1], opresult249);
  var opresult253 = callmethod(opresult245, "|", [1], opresult251);
  lineNumber = 128
  lineNumber = 123
  var opresult255 = callmethod(var_o, "==", [1], new GraceNum(95));
  var opresult257 = callmethod(opresult253, "|", [1], opresult255);
  if (Grace_isTrue(opresult257)) {
  lineNumber = 125
  lineNumber = 124
  var opresult259 = callmethod(var_ns, "++", [1], var_c);
  var_ns = opresult259;
  var if231 = opresult259;
  } else {
  lineNumber = 127
  lineNumber = 126
  lineNumber = 127
  lineNumber = 126
  var string260 = new GraceString("_");
  var opresult262 = callmethod(string260, "++", [1], var_o);
  var string263 = new GraceString("_");
  var opresult265 = callmethod(opresult262, "++", [1], string263);
  var opresult267 = callmethod(var_ns, "++", [1], opresult265);
  var_ns = opresult267;
  var if231 = opresult267;
}
  return if231;
};
  var call268 = callmethod(Grace_prelude,"for()do", [1, 1], var_s, block229);
  lineNumber = 129
  return var_ns
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["escapeident"] = func227;
  lineNumber = 155
var func269 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 133
  lineNumber = 132
  var string270 = new GraceString("");
  var var_ns = string270;
  lineNumber = 134
  lineNumber = 133
  var var_cd = new GraceNum(0);
  lineNumber = 135
  lineNumber = 134
  var bool271 = new GraceBoolean(false)
  var var_ls = bool271;
  lineNumber = 153
  lineNumber = 135
  lineNumber = 1
  lineNumber = 135
  var call272 = callmethod(var_s,"_escape", [0]);
  lineNumber = 153
  var block273 = Grace_allocObject();
  block273.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block273.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block273.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block273.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block273.receiver = this;
  block273.className = 'block<genc:153>';
  block273.real = function(
var_c
) {
  lineNumber = 147
  lineNumber = 148
  lineNumber = 136
  lineNumber = 148
  lineNumber = 136
  var string275 = new GraceString("\\");
  var opresult277 = callmethod(var_c, "==", [1], string275);
  var opresult279 = callmethod(var_ls, "&", [1], opresult277);
  if (Grace_isTrue(opresult279)) {
  lineNumber = 138
  lineNumber = 137
  var bool280 = new GraceBoolean(false)
  var_ls = bool280;
  lineNumber = 139
  lineNumber = 138
  var string281 = new GraceString("\\\\");
  var opresult283 = callmethod(var_ns, "++", [1], string281);
  var_ns = opresult283;
  var if274 = opresult283;
  } else {
  lineNumber = 147
  lineNumber = 141
  lineNumber = 139
  var string285 = new GraceString("\\");
  var opresult287 = callmethod(var_c, "==", [1], string285);
  if (Grace_isTrue(opresult287)) {
  lineNumber = 141
  lineNumber = 140
  var bool288 = new GraceBoolean(true)
  var_ls = bool288;
  var if284 = bool288;
  } else {
  lineNumber = 147
  lineNumber = 141
  if (Grace_isTrue(var_ls)) {
  lineNumber = 143
  lineNumber = 142
  var string290 = new GraceString("\"\"\\x");
  var opresult292 = callmethod(var_ns, "++", [1], string290);
  var opresult294 = callmethod(opresult292, "++", [1], var_c);
  var_ns = opresult294;
  lineNumber = 144
  lineNumber = 143
  var bool295 = new GraceBoolean(false)
  var_ls = bool295;
  lineNumber = 145
  lineNumber = 144
  var_cd = new GraceNum(2);
  var if289 = new GraceNum(2);
  } else {
  lineNumber = 147
  lineNumber = 146
  var opresult297 = callmethod(var_ns, "++", [1], var_c);
  var_ns = opresult297;
  var if289 = opresult297;
}
  var if284 = if289;
}
  var if274 = if284;
}
  lineNumber = 153
  lineNumber = 154
  lineNumber = 148
  var opresult300 = callmethod(var_cd, "==", [1], new GraceNum(1));
  if (Grace_isTrue(opresult300)) {
  lineNumber = 150
  lineNumber = 149
  var string301 = new GraceString("\"\"");
  var opresult303 = callmethod(var_ns, "++", [1], string301);
  var_ns = opresult303;
  lineNumber = 151
  lineNumber = 150
  var_cd = new GraceNum(0);
  var if298 = new GraceNum(0);
  } else {
  lineNumber = 153
  lineNumber = 154
  lineNumber = 151
  var opresult306 = callmethod(var_cd, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult306)) {
  lineNumber = 153
  lineNumber = 152
  var diff308 = callmethod(var_cd, "-", [1], new GraceNum(1));
  var_cd = diff308;
  var if304 = diff308;
}
  var if298 = if304;
}
  return if298;
};
  var call309 = callmethod(Grace_prelude,"for()do", [1, 1], call272, block273);
  lineNumber = 155
  return var_ns
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["escapestring2"] = func269;
  lineNumber = 173
var func310 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 159
  lineNumber = 158
  var var_myc = var_auto__95__count;
  lineNumber = 160
  lineNumber = 159
  var opresult312 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult312;
  lineNumber = 161
  var var_r;
  var string313 = new GraceString("  Object array");
  var opresult315 = callmethod(string313, "++", [1], var_myc);
  var string316 = new GraceString(" = alloc_List();");
  var opresult318 = callmethod(opresult315, "++", [1], string316);
  lineNumber = 162
  var call319 = callmethod(this,"out", [1], opresult318);
  var string320 = new GraceString("  gc_pause();");
  lineNumber = 163
  var call321 = callmethod(this,"out", [1], string320);
  lineNumber = 164
  lineNumber = 163
  var var_i = new GraceNum(0);
  lineNumber = 170
  lineNumber = 164
  lineNumber = 1
  lineNumber = 164
  var call322 = callmethod(var_o,"value", [0]);
  lineNumber = 170
  var block323 = Grace_allocObject();
  block323.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block323.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block323.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block323.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block323.receiver = this;
  block323.className = 'block<genc:170>';
  block323.real = function(
var_a
) {
  lineNumber = 165
  lineNumber = 166
  var call324 = callmethod(this,"compilenode", [1], var_a);
  var_r = call324;
  var string325 = new GraceString("  params[0] = ");
  var opresult327 = callmethod(string325, "++", [1], var_r);
  var string328 = new GraceString(";");
  var opresult330 = callmethod(opresult327, "++", [1], string328);
  lineNumber = 167
  var call331 = callmethod(this,"out", [1], opresult330);
  var string332 = new GraceString("  partcv[0] = 1;");
  lineNumber = 168
  var call333 = callmethod(this,"out", [1], string332);
  var string334 = new GraceString("  callmethod(array");
  var opresult336 = callmethod(string334, "++", [1], var_myc);
  var string337 = new GraceString(", \"push\", 1, partcv, params);");
  var opresult339 = callmethod(opresult336, "++", [1], string337);
  lineNumber = 169
  var call340 = callmethod(this,"out", [1], opresult339);
  lineNumber = 170
  lineNumber = 169
  var opresult342 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult342;
  return opresult342;
};
  var call343 = callmethod(Grace_prelude,"for()do", [1, 1], call322, block323);
  lineNumber = 171
  var string344 = new GraceString("  gc_unpause();");
  lineNumber = 172
  var call345 = callmethod(this,"out", [1], string344);
  lineNumber = 173
  lineNumber = 1
  lineNumber = 173
  lineNumber = 172
  var string346 = new GraceString("array");
  var opresult348 = callmethod(string346, "++", [1], var_myc);
  var call349 = callmethod(var_o,"register:=", [1], opresult348);
  return call349
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilearray"] = func310;
  lineNumber = 179
var func350 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 176
  lineNumber = 1
  lineNumber = 176
  var call352 = callmethod(var_o,"value", [0]);
  lineNumber = 1
  lineNumber = 176
  var call353 = callmethod(var_ast,"callWithPart", [0]);
  var call354 = callmethod(call353,"new", [1], call352);
  var array351 = new GraceList([
call354,
]);

  lineNumber = 177
  lineNumber = 1
  lineNumber = 176
  var call355 = callmethod(var_ast,"callNode", [0]);
  var call356 = callmethod(call355,"new", [2], var_o, array351);
  var var_c = call356;
  lineNumber = 177
  lineNumber = 178
  var call357 = callmethod(this,"compilenode", [1], var_c);
  var var_r = call357;
  lineNumber = 179
  lineNumber = 1
  lineNumber = 178
  var call358 = callmethod(var_o,"register:=", [1], var_r);
  return call358
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilemember"] = func350;
  lineNumber = 194
var func359 = function(argcv) {
  var curarg = 1;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_outerRef = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 182
  lineNumber = 181
  var var_myc = var_auto__95__count;
  lineNumber = 183
  lineNumber = 182
  var opresult361 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult361;
  lineNumber = 184
  lineNumber = 183
  var string362 = new GraceString("outer");
  var var_nm = string362;
  lineNumber = 184
  var call363 = Grace_length(var_nm);
  var opresult365 = callmethod(call363, "+", [1], new GraceNum(1));
  var var_len = opresult365;
  lineNumber = 185
  lineNumber = 186
  var call366 = callmethod(this,"escapestring2", [1], var_nm);
  var var_enm = call366;
  var string367 = new GraceString("// OBJECT OUTER DEC ");
  var opresult369 = callmethod(string367, "++", [1], var_enm);
  lineNumber = 187
  var call370 = callmethod(this,"out", [1], opresult369);
  var string371 = new GraceString("  adddatum2(");
  var opresult373 = callmethod(string371, "++", [1], var_selfr);
  var string374 = new GraceString(", ");
  var opresult376 = callmethod(opresult373, "++", [1], string374);
  var opresult378 = callmethod(opresult376, "++", [1], var_outerRef);
  var string379 = new GraceString(", 0);");
  var opresult381 = callmethod(opresult378, "++", [1], string379);
  lineNumber = 188
  var call382 = callmethod(this,"out", [1], opresult381);
  lineNumber = 190
  lineNumber = 188
  var string383 = new GraceString("Object reader_");
  var opresult385 = callmethod(string383, "++", [1], var_escmodname);
  var string386 = new GraceString("_");
  var opresult388 = callmethod(opresult385, "++", [1], string386);
  var opresult390 = callmethod(opresult388, "++", [1], var_enm);
  var string391 = new GraceString("_");
  var opresult393 = callmethod(opresult390, "++", [1], string391);
  var opresult395 = callmethod(opresult393, "++", [1], var_myc);
  var string396 = new GraceString("");
  var opresult398 = callmethod(opresult395, "++", [1], string396);
  lineNumber = 189
  var string399 = new GraceString("(Object self, int nparams, int *argcv, ");
  var opresult401 = callmethod(opresult398, "++", [1], string399);
  lineNumber = 190
  var string402 = new GraceString("Object* args, int flags) {");
  var opresult404 = callmethod(opresult401, "++", [1], string402);
  lineNumber = 191
  var call405 = callmethod(this,"outprint", [1], opresult404);
  var string406 = new GraceString("  struct UserObject *uo = (struct UserObject*)self;");
  lineNumber = 192
  var call407 = callmethod(this,"outprint", [1], string406);
  var string408 = new GraceString("  return uo->data[0];");
  lineNumber = 193
  var call409 = callmethod(this,"outprint", [1], string408);
  var string410 = new GraceString("}");
  lineNumber = 194
  var call411 = callmethod(this,"outprint", [1], string410);
  var string412 = new GraceString("  addmethodreal(");
  var opresult414 = callmethod(string412, "++", [1], var_selfr);
  var string415 = new GraceString(",\"outer\", &reader_");
  var opresult417 = callmethod(opresult414, "++", [1], string415);
  var opresult419 = callmethod(opresult417, "++", [1], var_escmodname);
  var string420 = new GraceString("_");
  var opresult422 = callmethod(opresult419, "++", [1], string420);
  var opresult424 = callmethod(opresult422, "++", [1], var_enm);
  var string425 = new GraceString("_");
  var opresult427 = callmethod(opresult424, "++", [1], string425);
  var opresult429 = callmethod(opresult427, "++", [1], var_myc);
  var string430 = new GraceString(");");
  var opresult432 = callmethod(opresult429, "++", [1], string430);
  lineNumber = 195
  var call433 = callmethod(this,"out", [1], opresult432);
  return call433
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjouter"] = func359;
  lineNumber = 206
var func434 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 198
  lineNumber = 197
  var string435 = new GraceString("undefined");
  var var_val = string435;
  lineNumber = 203
  lineNumber = 206
  lineNumber = 198
  var bool437 = new GraceBoolean(false)
  lineNumber = 206
  lineNumber = 1
  lineNumber = 198
  var call438 = callmethod(var_o,"value", [0]);
  var opresult440 = callmethod(bool437, "!=", [1], call438);
  if (Grace_isTrue(opresult440)) {
  lineNumber = 203
  lineNumber = 205
  lineNumber = 1
  lineNumber = 205
  lineNumber = 1
  lineNumber = 199
  var call442 = callmethod(var_o,"value", [0]);
  var call443 = callmethod(call442,"kind", [0]);
  var string444 = new GraceString("object");
  var opresult446 = callmethod(call443, "==", [1], string444);
  if (Grace_isTrue(opresult446)) {
  lineNumber = 200
  lineNumber = 1
  lineNumber = 200
  var call447 = callmethod(var_o,"value", [0]);
  lineNumber = 201
  var call448 = callmethod(this,"compileobject", [2], call447, var_selfr);
  lineNumber = 202
  lineNumber = 1
  lineNumber = 202
  lineNumber = 1
  lineNumber = 201
  var call449 = callmethod(var_o,"value", [0]);
  var call450 = callmethod(call449,"register", [0]);
  var_val = call450;
  var if441 = call450;
  } else {
  lineNumber = 203
  lineNumber = 1
  lineNumber = 203
  var call451 = callmethod(var_o,"value", [0]);
  lineNumber = 204
  var call452 = callmethod(this,"compilenode", [1], call451);
  var_val = call452;
  var if441 = call452;
}
  var if436 = if441;
}
  lineNumber = 206
  var string453 = new GraceString("  adddatum2(");
  var opresult455 = callmethod(string453, "++", [1], var_selfr);
  var string456 = new GraceString(", ");
  var opresult458 = callmethod(opresult455, "++", [1], string456);
  var opresult460 = callmethod(opresult458, "++", [1], var_val);
  var string461 = new GraceString(", ");
  var opresult463 = callmethod(opresult460, "++", [1], string461);
  var opresult465 = callmethod(opresult463, "++", [1], var_pos);
  var string466 = new GraceString(");");
  var opresult468 = callmethod(opresult465, "++", [1], string466);
  lineNumber = 207
  var call469 = callmethod(this,"out", [1], opresult468);
  return call469
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjdefdecdata"] = func434;
  lineNumber = 221
var func470 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 210
  lineNumber = 209
  var var_myc = var_auto__95__count;
  lineNumber = 211
  lineNumber = 210
  var opresult472 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult472;
  lineNumber = 212
  lineNumber = 1
  lineNumber = 212
  lineNumber = 1
  lineNumber = 211
  var call473 = callmethod(var_o,"name", [0]);
  var call474 = callmethod(call473,"value", [0]);
  var var_nm = call474;
  lineNumber = 212
  var call475 = Grace_length(var_nm);
  var opresult477 = callmethod(call475, "+", [1], new GraceNum(1));
  var var_len = opresult477;
  lineNumber = 213
  lineNumber = 214
  var call478 = callmethod(this,"escapestring2", [1], var_nm);
  var var_enm = call478;
  lineNumber = 215
  var call479 = callmethod(this,"escapeident", [1], var_nm);
  var var_inm = call479;
  lineNumber = 217
  lineNumber = 215
  var string480 = new GraceString("Object reader_");
  var opresult482 = callmethod(string480, "++", [1], var_escmodname);
  var string483 = new GraceString("_");
  var opresult485 = callmethod(opresult482, "++", [1], string483);
  var opresult487 = callmethod(opresult485, "++", [1], var_inm);
  var string488 = new GraceString("_");
  var opresult490 = callmethod(opresult487, "++", [1], string488);
  var opresult492 = callmethod(opresult490, "++", [1], var_myc);
  var string493 = new GraceString("");
  var opresult495 = callmethod(opresult492, "++", [1], string493);
  lineNumber = 216
  var string496 = new GraceString("(Object self, int nparams, int *argcv, ");
  var opresult498 = callmethod(opresult495, "++", [1], string496);
  lineNumber = 217
  var string499 = new GraceString("Object* args, int flags) {");
  var opresult501 = callmethod(opresult498, "++", [1], string499);
  lineNumber = 218
  var call502 = callmethod(this,"outprint", [1], opresult501);
  var string503 = new GraceString("  struct UserObject *uo = (struct UserObject *)self;");
  lineNumber = 219
  var call504 = callmethod(this,"outprint", [1], string503);
  var string505 = new GraceString("  return uo->data[");
  var opresult507 = callmethod(string505, "++", [1], var_pos);
  var string508 = new GraceString("];");
  var opresult510 = callmethod(opresult507, "++", [1], string508);
  lineNumber = 220
  var call511 = callmethod(this,"outprint", [1], opresult510);
  var string512 = new GraceString("}");
  lineNumber = 221
  var call513 = callmethod(this,"outprint", [1], string512);
  var string514 = new GraceString("  addmethodrealflags(");
  var opresult516 = callmethod(string514, "++", [1], var_selfr);
  var string517 = new GraceString(", \"");
  var opresult519 = callmethod(opresult516, "++", [1], string517);
  var opresult521 = callmethod(opresult519, "++", [1], var_enm);
  var string522 = new GraceString("\",&reader_");
  var opresult524 = callmethod(opresult521, "++", [1], string522);
  var opresult526 = callmethod(opresult524, "++", [1], var_escmodname);
  var string527 = new GraceString("_");
  var opresult529 = callmethod(opresult526, "++", [1], string527);
  var opresult531 = callmethod(opresult529, "++", [1], var_inm);
  var string532 = new GraceString("_");
  var opresult534 = callmethod(opresult531, "++", [1], string532);
  var opresult536 = callmethod(opresult534, "++", [1], var_myc);
  var string537 = new GraceString(", MFLAG_DEF);");
  var opresult539 = callmethod(opresult536, "++", [1], string537);
  lineNumber = 222
  var call540 = callmethod(this,"out", [1], opresult539);
  return call540
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjdefdecmeth"] = func470;
  lineNumber = 247
var func541 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 225
  lineNumber = 224
  var string542 = new GraceString("undefined");
  var var_val = string542;
  lineNumber = 230
  lineNumber = 233
  lineNumber = 225
  var bool544 = new GraceBoolean(false)
  lineNumber = 233
  lineNumber = 1
  lineNumber = 225
  var call545 = callmethod(var_o,"value", [0]);
  var opresult547 = callmethod(bool544, "!=", [1], call545);
  if (Grace_isTrue(opresult547)) {
  lineNumber = 230
  lineNumber = 232
  lineNumber = 1
  lineNumber = 232
  lineNumber = 1
  lineNumber = 226
  var call549 = callmethod(var_o,"value", [0]);
  var call550 = callmethod(call549,"kind", [0]);
  var string551 = new GraceString("object");
  var opresult553 = callmethod(call550, "==", [1], string551);
  if (Grace_isTrue(opresult553)) {
  lineNumber = 227
  lineNumber = 1
  lineNumber = 227
  var call554 = callmethod(var_o,"value", [0]);
  lineNumber = 228
  var call555 = callmethod(this,"compileobject", [2], call554, var_selfr);
  lineNumber = 229
  lineNumber = 1
  lineNumber = 229
  lineNumber = 1
  lineNumber = 228
  var call556 = callmethod(var_o,"value", [0]);
  var call557 = callmethod(call556,"register", [0]);
  var_val = call557;
  var if548 = call557;
  } else {
  lineNumber = 230
  lineNumber = 1
  lineNumber = 230
  var call558 = callmethod(var_o,"value", [0]);
  lineNumber = 231
  var call559 = callmethod(this,"compilenode", [1], call558);
  var_val = call559;
  var if548 = call559;
}
  var if543 = if548;
}
  lineNumber = 234
  lineNumber = 233
  var var_myc = var_auto__95__count;
  lineNumber = 235
  lineNumber = 234
  var opresult561 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult561;
  lineNumber = 236
  lineNumber = 1
  lineNumber = 236
  lineNumber = 1
  lineNumber = 235
  var call562 = callmethod(var_o,"name", [0]);
  var call563 = callmethod(call562,"value", [0]);
  var var_nm = call563;
  lineNumber = 236
  var call564 = Grace_length(var_nm);
  var opresult566 = callmethod(call564, "+", [1], new GraceNum(1));
  var var_len = opresult566;
  lineNumber = 237
  lineNumber = 238
  var call567 = callmethod(this,"escapestring2", [1], var_nm);
  var var_enm = call567;
  lineNumber = 239
  var call568 = callmethod(this,"escapeident", [1], var_nm);
  var var_inm = call568;
  var string569 = new GraceString("// OBJECT CONST DEC ");
  var opresult571 = callmethod(string569, "++", [1], var_enm);
  lineNumber = 240
  var call572 = callmethod(this,"out", [1], opresult571);
  var string573 = new GraceString("  adddatum2(");
  var opresult575 = callmethod(string573, "++", [1], var_selfr);
  var string576 = new GraceString(", ");
  var opresult578 = callmethod(opresult575, "++", [1], string576);
  var opresult580 = callmethod(opresult578, "++", [1], var_val);
  var string581 = new GraceString(", ");
  var opresult583 = callmethod(opresult580, "++", [1], string581);
  var opresult585 = callmethod(opresult583, "++", [1], var_pos);
  var string586 = new GraceString(");");
  var opresult588 = callmethod(opresult585, "++", [1], string586);
  lineNumber = 241
  var call589 = callmethod(this,"out", [1], opresult588);
  lineNumber = 243
  lineNumber = 241
  var string590 = new GraceString("Object reader_");
  var opresult592 = callmethod(string590, "++", [1], var_escmodname);
  var string593 = new GraceString("_");
  var opresult595 = callmethod(opresult592, "++", [1], string593);
  var opresult597 = callmethod(opresult595, "++", [1], var_inm);
  var string598 = new GraceString("_");
  var opresult600 = callmethod(opresult597, "++", [1], string598);
  var opresult602 = callmethod(opresult600, "++", [1], var_myc);
  var string603 = new GraceString("");
  var opresult605 = callmethod(opresult602, "++", [1], string603);
  lineNumber = 242
  var string606 = new GraceString("(Object self, int nparams, int *argcv, ");
  var opresult608 = callmethod(opresult605, "++", [1], string606);
  lineNumber = 243
  var string609 = new GraceString("Object* args, int flags) {");
  var opresult611 = callmethod(opresult608, "++", [1], string609);
  lineNumber = 244
  var call612 = callmethod(this,"outprint", [1], opresult611);
  var string613 = new GraceString("  struct UserObject *uo = (struct UserObject *)self;");
  lineNumber = 245
  var call614 = callmethod(this,"outprint", [1], string613);
  var string615 = new GraceString("  return uo->data[");
  var opresult617 = callmethod(string615, "++", [1], var_pos);
  var string618 = new GraceString("];");
  var opresult620 = callmethod(opresult617, "++", [1], string618);
  lineNumber = 246
  var call621 = callmethod(this,"outprint", [1], opresult620);
  var string622 = new GraceString("}");
  lineNumber = 247
  var call623 = callmethod(this,"outprint", [1], string622);
  var string624 = new GraceString("  addmethodrealflags(");
  var opresult626 = callmethod(string624, "++", [1], var_selfr);
  var string627 = new GraceString(", \"");
  var opresult629 = callmethod(opresult626, "++", [1], string627);
  var opresult631 = callmethod(opresult629, "++", [1], var_enm);
  var string632 = new GraceString("\",&reader_");
  var opresult634 = callmethod(opresult631, "++", [1], string632);
  var opresult636 = callmethod(opresult634, "++", [1], var_escmodname);
  var string637 = new GraceString("_");
  var opresult639 = callmethod(opresult636, "++", [1], string637);
  var opresult641 = callmethod(opresult639, "++", [1], var_inm);
  var string642 = new GraceString("_");
  var opresult644 = callmethod(opresult641, "++", [1], string642);
  var opresult646 = callmethod(opresult644, "++", [1], var_myc);
  var string647 = new GraceString(", MFLAG_DEF);");
  var opresult649 = callmethod(opresult646, "++", [1], string647);
  lineNumber = 248
  var call650 = callmethod(this,"out", [1], opresult649);
  return call650
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjdefdec"] = func541;
  lineNumber = 254
var func651 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 251
  lineNumber = 250
  var string652 = new GraceString("undefined");
  var var_val = string652;
  lineNumber = 252
  lineNumber = 254
  lineNumber = 251
  var bool654 = new GraceBoolean(false)
  lineNumber = 254
  lineNumber = 1
  lineNumber = 251
  var call655 = callmethod(var_o,"value", [0]);
  var opresult657 = callmethod(bool654, "!=", [1], call655);
  if (Grace_isTrue(opresult657)) {
  lineNumber = 252
  lineNumber = 1
  lineNumber = 252
  var call658 = callmethod(var_o,"value", [0]);
  lineNumber = 253
  var call659 = callmethod(this,"compilenode", [1], call658);
  var_val = call659;
  var if653 = call659;
}
  lineNumber = 254
  var string660 = new GraceString("  adddatum2(");
  var opresult662 = callmethod(string660, "++", [1], var_selfr);
  var string663 = new GraceString(", ");
  var opresult665 = callmethod(opresult662, "++", [1], string663);
  var opresult667 = callmethod(opresult665, "++", [1], var_val);
  var string668 = new GraceString(", ");
  var opresult670 = callmethod(opresult667, "++", [1], string668);
  var opresult672 = callmethod(opresult670, "++", [1], var_pos);
  var string673 = new GraceString(");");
  var opresult675 = callmethod(opresult672, "++", [1], string673);
  lineNumber = 255
  var call676 = callmethod(this,"out", [1], opresult675);
  return call676
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjvardecdata"] = func651;
  lineNumber = 280
var func677 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 258
  lineNumber = 257
  var var_myc = var_auto__95__count;
  lineNumber = 259
  lineNumber = 258
  var opresult679 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult679;
  lineNumber = 260
  lineNumber = 1
  lineNumber = 260
  lineNumber = 1
  lineNumber = 259
  var call680 = callmethod(var_o,"name", [0]);
  var call681 = callmethod(call680,"value", [0]);
  var var_nm = call681;
  lineNumber = 260
  var call682 = Grace_length(var_nm);
  var opresult684 = callmethod(call682, "+", [1], new GraceNum(1));
  var var_len = opresult684;
  lineNumber = 261
  lineNumber = 262
  var call685 = callmethod(this,"escapestring2", [1], var_nm);
  var var_enm = call685;
  lineNumber = 263
  var call686 = callmethod(this,"escapeident", [1], var_nm);
  var var_inm = call686;
  lineNumber = 265
  lineNumber = 263
  var string687 = new GraceString("Object reader_");
  var opresult689 = callmethod(string687, "++", [1], var_escmodname);
  var string690 = new GraceString("_");
  var opresult692 = callmethod(opresult689, "++", [1], string690);
  var opresult694 = callmethod(opresult692, "++", [1], var_inm);
  var string695 = new GraceString("_");
  var opresult697 = callmethod(opresult694, "++", [1], string695);
  var opresult699 = callmethod(opresult697, "++", [1], var_myc);
  var string700 = new GraceString("");
  var opresult702 = callmethod(opresult699, "++", [1], string700);
  lineNumber = 264
  var string703 = new GraceString("(Object self, int nparams, int *argcv, ");
  var opresult705 = callmethod(opresult702, "++", [1], string703);
  lineNumber = 265
  var string706 = new GraceString("Object* args, int flags) {");
  var opresult708 = callmethod(opresult705, "++", [1], string706);
  lineNumber = 266
  var call709 = callmethod(this,"outprint", [1], opresult708);
  var string710 = new GraceString("  struct UserObject *uo = (struct UserObject *)self;");
  lineNumber = 267
  var call711 = callmethod(this,"outprint", [1], string710);
  var string712 = new GraceString("  return uo->data[");
  var opresult714 = callmethod(string712, "++", [1], var_pos);
  var string715 = new GraceString("];");
  var opresult717 = callmethod(opresult714, "++", [1], string715);
  lineNumber = 268
  var call718 = callmethod(this,"outprint", [1], opresult717);
  var string719 = new GraceString("}");
  lineNumber = 269
  var call720 = callmethod(this,"outprint", [1], string719);
  var string721 = new GraceString("  addmethodreal(");
  var opresult723 = callmethod(string721, "++", [1], var_selfr);
  var string724 = new GraceString(", \"");
  var opresult726 = callmethod(opresult723, "++", [1], string724);
  var opresult728 = callmethod(opresult726, "++", [1], var_enm);
  var string729 = new GraceString("\",&reader_");
  var opresult731 = callmethod(opresult728, "++", [1], string729);
  var opresult733 = callmethod(opresult731, "++", [1], var_escmodname);
  var string734 = new GraceString("_");
  var opresult736 = callmethod(opresult733, "++", [1], string734);
  var opresult738 = callmethod(opresult736, "++", [1], var_inm);
  var string739 = new GraceString("_");
  var opresult741 = callmethod(opresult738, "++", [1], string739);
  var opresult743 = callmethod(opresult741, "++", [1], var_myc);
  var string744 = new GraceString(");");
  var opresult746 = callmethod(opresult743, "++", [1], string744);
  lineNumber = 270
  var call747 = callmethod(this,"out", [1], opresult746);
  lineNumber = 271
  lineNumber = 270
  var string748 = new GraceString(":=");
  var opresult750 = callmethod(var_nm, "++", [1], string748);
  var var_nmw = opresult750;
  lineNumber = 271
  var call751 = Grace_length(var_nmw);
  var opresult753 = callmethod(call751, "+", [1], new GraceNum(1));
  var_len = opresult753;
  lineNumber = 272
  lineNumber = 273
  var call754 = callmethod(this,"escapestring2", [1], var_nmw);
  var_nmw = call754;
  lineNumber = 275
  lineNumber = 273
  var string755 = new GraceString("Object writer_");
  var opresult757 = callmethod(string755, "++", [1], var_escmodname);
  var string758 = new GraceString("_");
  var opresult760 = callmethod(opresult757, "++", [1], string758);
  var opresult762 = callmethod(opresult760, "++", [1], var_inm);
  var string763 = new GraceString("_");
  var opresult765 = callmethod(opresult762, "++", [1], string763);
  var opresult767 = callmethod(opresult765, "++", [1], var_myc);
  var string768 = new GraceString("");
  var opresult770 = callmethod(opresult767, "++", [1], string768);
  lineNumber = 274
  var string771 = new GraceString("(Object self, int nparams, int *argcv, ");
  var opresult773 = callmethod(opresult770, "++", [1], string771);
  lineNumber = 275
  var string774 = new GraceString("Object* args, int flags) {");
  var opresult776 = callmethod(opresult773, "++", [1], string774);
  lineNumber = 276
  var call777 = callmethod(this,"outprint", [1], opresult776);
  var string778 = new GraceString("  struct UserObject *uo = (struct UserObject *)self;");
  lineNumber = 277
  var call779 = callmethod(this,"outprint", [1], string778);
  var string780 = new GraceString("  uo->data[");
  var opresult782 = callmethod(string780, "++", [1], var_pos);
  var string783 = new GraceString("] = args[0];");
  var opresult785 = callmethod(opresult782, "++", [1], string783);
  lineNumber = 278
  var call786 = callmethod(this,"outprint", [1], opresult785);
  var string787 = new GraceString("  return none;");
  var call788 = callmethod(this,"outprint", [1], string787);
  lineNumber = 279
  var string789 = new GraceString("}");
  lineNumber = 280
  var call790 = callmethod(this,"outprint", [1], string789);
  var string791 = new GraceString("  addmethodreal(");
  var opresult793 = callmethod(string791, "++", [1], var_selfr);
  var string794 = new GraceString(", \"");
  var opresult796 = callmethod(opresult793, "++", [1], string794);
  var opresult798 = callmethod(opresult796, "++", [1], var_enm);
  var string799 = new GraceString(":=\", &writer_");
  var opresult801 = callmethod(opresult798, "++", [1], string799);
  var opresult803 = callmethod(opresult801, "++", [1], var_escmodname);
  var string804 = new GraceString("_");
  var opresult806 = callmethod(opresult803, "++", [1], string804);
  var opresult808 = callmethod(opresult806, "++", [1], var_inm);
  var string809 = new GraceString("_");
  var opresult811 = callmethod(opresult808, "++", [1], string809);
  var opresult813 = callmethod(opresult811, "++", [1], var_myc);
  var string814 = new GraceString(");");
  var opresult816 = callmethod(opresult813, "++", [1], string814);
  lineNumber = 281
  var call817 = callmethod(this,"out", [1], opresult816);
  return call817
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjvardecmeth"] = func677;
  lineNumber = 312
var func818 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 284
  lineNumber = 283
  var string819 = new GraceString("undefined");
  var var_val = string819;
  lineNumber = 285
  lineNumber = 287
  lineNumber = 284
  var bool821 = new GraceBoolean(false)
  lineNumber = 287
  lineNumber = 1
  lineNumber = 284
  var call822 = callmethod(var_o,"value", [0]);
  var opresult824 = callmethod(bool821, "!=", [1], call822);
  if (Grace_isTrue(opresult824)) {
  lineNumber = 285
  lineNumber = 1
  lineNumber = 285
  var call825 = callmethod(var_o,"value", [0]);
  lineNumber = 286
  var call826 = callmethod(this,"compilenode", [1], call825);
  var_val = call826;
  var if820 = call826;
}
  lineNumber = 288
  lineNumber = 287
  var var_myc = var_auto__95__count;
  lineNumber = 289
  lineNumber = 288
  var opresult828 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult828;
  lineNumber = 290
  lineNumber = 1
  lineNumber = 290
  lineNumber = 1
  lineNumber = 289
  var call829 = callmethod(var_o,"name", [0]);
  var call830 = callmethod(call829,"value", [0]);
  var var_nm = call830;
  lineNumber = 290
  var call831 = Grace_length(var_nm);
  var opresult833 = callmethod(call831, "+", [1], new GraceNum(1));
  var var_len = opresult833;
  lineNumber = 291
  lineNumber = 292
  var call834 = callmethod(this,"escapestring2", [1], var_nm);
  var var_enm = call834;
  lineNumber = 293
  var call835 = callmethod(this,"escapeident", [1], var_nm);
  var var_inm = call835;
  var string836 = new GraceString("// OBJECT VAR DEC ");
  var opresult838 = callmethod(string836, "++", [1], var_nm);
  lineNumber = 294
  var call839 = callmethod(this,"out", [1], opresult838);
  var string840 = new GraceString("  adddatum2(");
  var opresult842 = callmethod(string840, "++", [1], var_selfr);
  var string843 = new GraceString(", ");
  var opresult845 = callmethod(opresult842, "++", [1], string843);
  var opresult847 = callmethod(opresult845, "++", [1], var_val);
  var string848 = new GraceString(", ");
  var opresult850 = callmethod(opresult847, "++", [1], string848);
  var opresult852 = callmethod(opresult850, "++", [1], var_pos);
  var string853 = new GraceString(");");
  var opresult855 = callmethod(opresult852, "++", [1], string853);
  lineNumber = 295
  var call856 = callmethod(this,"out", [1], opresult855);
  lineNumber = 297
  lineNumber = 295
  var string857 = new GraceString("Object reader_");
  var opresult859 = callmethod(string857, "++", [1], var_escmodname);
  var string860 = new GraceString("_");
  var opresult862 = callmethod(opresult859, "++", [1], string860);
  var opresult864 = callmethod(opresult862, "++", [1], var_inm);
  var string865 = new GraceString("_");
  var opresult867 = callmethod(opresult864, "++", [1], string865);
  var opresult869 = callmethod(opresult867, "++", [1], var_myc);
  var string870 = new GraceString("");
  var opresult872 = callmethod(opresult869, "++", [1], string870);
  lineNumber = 296
  var string873 = new GraceString("(Object self, int nparams, int *argcv, ");
  var opresult875 = callmethod(opresult872, "++", [1], string873);
  lineNumber = 297
  var string876 = new GraceString("Object* args, int flags) {");
  var opresult878 = callmethod(opresult875, "++", [1], string876);
  lineNumber = 298
  var call879 = callmethod(this,"outprint", [1], opresult878);
  var string880 = new GraceString("  struct UserObject *uo = (struct UserObject *)self;");
  lineNumber = 299
  var call881 = callmethod(this,"outprint", [1], string880);
  var string882 = new GraceString("  return uo->data[");
  var opresult884 = callmethod(string882, "++", [1], var_pos);
  var string885 = new GraceString("];");
  var opresult887 = callmethod(opresult884, "++", [1], string885);
  lineNumber = 300
  var call888 = callmethod(this,"outprint", [1], opresult887);
  var string889 = new GraceString("}");
  lineNumber = 301
  var call890 = callmethod(this,"outprint", [1], string889);
  var string891 = new GraceString("  addmethodreal(");
  var opresult893 = callmethod(string891, "++", [1], var_selfr);
  var string894 = new GraceString(", \"");
  var opresult896 = callmethod(opresult893, "++", [1], string894);
  var opresult898 = callmethod(opresult896, "++", [1], var_enm);
  var string899 = new GraceString("\",&reader_");
  var opresult901 = callmethod(opresult898, "++", [1], string899);
  var opresult903 = callmethod(opresult901, "++", [1], var_escmodname);
  var string904 = new GraceString("_");
  var opresult906 = callmethod(opresult903, "++", [1], string904);
  var opresult908 = callmethod(opresult906, "++", [1], var_inm);
  var string909 = new GraceString("_");
  var opresult911 = callmethod(opresult908, "++", [1], string909);
  var opresult913 = callmethod(opresult911, "++", [1], var_myc);
  var string914 = new GraceString(");");
  var opresult916 = callmethod(opresult913, "++", [1], string914);
  lineNumber = 302
  var call917 = callmethod(this,"out", [1], opresult916);
  lineNumber = 303
  lineNumber = 302
  var string918 = new GraceString(":=");
  var opresult920 = callmethod(var_nm, "++", [1], string918);
  var var_nmw = opresult920;
  lineNumber = 303
  var call921 = Grace_length(var_nmw);
  var opresult923 = callmethod(call921, "+", [1], new GraceNum(1));
  var_len = opresult923;
  lineNumber = 304
  lineNumber = 305
  var call924 = callmethod(this,"escapestring2", [1], var_nmw);
  var_nmw = call924;
  lineNumber = 307
  lineNumber = 305
  var string925 = new GraceString("Object writer_");
  var opresult927 = callmethod(string925, "++", [1], var_escmodname);
  var string928 = new GraceString("_");
  var opresult930 = callmethod(opresult927, "++", [1], string928);
  var opresult932 = callmethod(opresult930, "++", [1], var_inm);
  var string933 = new GraceString("_");
  var opresult935 = callmethod(opresult932, "++", [1], string933);
  var opresult937 = callmethod(opresult935, "++", [1], var_myc);
  var string938 = new GraceString("");
  var opresult940 = callmethod(opresult937, "++", [1], string938);
  lineNumber = 306
  var string941 = new GraceString("(Object self, int nparams, int *argcv, ");
  var opresult943 = callmethod(opresult940, "++", [1], string941);
  lineNumber = 307
  var string944 = new GraceString("Object* args, int flags) {");
  var opresult946 = callmethod(opresult943, "++", [1], string944);
  lineNumber = 308
  var call947 = callmethod(this,"outprint", [1], opresult946);
  var string948 = new GraceString("  struct UserObject *uo = (struct UserObject *)self;");
  lineNumber = 309
  var call949 = callmethod(this,"outprint", [1], string948);
  var string950 = new GraceString("  uo->data[");
  var opresult952 = callmethod(string950, "++", [1], var_pos);
  var string953 = new GraceString("] = args[0];");
  var opresult955 = callmethod(opresult952, "++", [1], string953);
  lineNumber = 310
  var call956 = callmethod(this,"outprint", [1], opresult955);
  var string957 = new GraceString("  return none;");
  var call958 = callmethod(this,"outprint", [1], string957);
  lineNumber = 311
  var string959 = new GraceString("}");
  lineNumber = 312
  var call960 = callmethod(this,"outprint", [1], string959);
  var string961 = new GraceString("  addmethodreal(");
  var opresult963 = callmethod(string961, "++", [1], var_selfr);
  var string964 = new GraceString(", \"");
  var opresult966 = callmethod(opresult963, "++", [1], string964);
  var opresult968 = callmethod(opresult966, "++", [1], var_enm);
  var string969 = new GraceString(":=\", &writer_");
  var opresult971 = callmethod(opresult968, "++", [1], string969);
  var opresult973 = callmethod(opresult971, "++", [1], var_escmodname);
  var string974 = new GraceString("_");
  var opresult976 = callmethod(opresult973, "++", [1], string974);
  var opresult978 = callmethod(opresult976, "++", [1], var_inm);
  var string979 = new GraceString("_");
  var opresult981 = callmethod(opresult978, "++", [1], string979);
  var opresult983 = callmethod(opresult981, "++", [1], var_myc);
  var string984 = new GraceString(");");
  var opresult986 = callmethod(opresult983, "++", [1], string984);
  lineNumber = 313
  var call987 = callmethod(this,"out", [1], opresult986);
  return call987
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjvardec"] = func818;
  lineNumber = 327
var func988 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 316
  lineNumber = 1
  lineNumber = 315
  var call989 = callmethod(var_o,"signature", [0]);
  var var_signature = call989;
  lineNumber = 316
  lineNumber = 1
  lineNumber = 316
  var call990 = callmethod(var_o,"value", [0]);
  lineNumber = 1
  lineNumber = 316
  var call991 = callmethod(var_o,"superclass", [0]);
  lineNumber = 317
  lineNumber = 1
  lineNumber = 316
  var call992 = callmethod(var_ast,"objectNode", [0]);
  var call993 = callmethod(call992,"new", [2], call990, call991);
  var var_obj = call993;
  lineNumber = 318
  lineNumber = 1
  lineNumber = 318
  lineNumber = 1
  lineNumber = 318
  lineNumber = 1
  lineNumber = 317
  var call994 = callmethod(var_o,"name", [0]);
  var call995 = callmethod(call994,"value", [0]);
  var call996 = callmethod(var_obj,"classname:=", [1], call995);
  lineNumber = 318
  var array997 = new GraceList([
var_obj,
]);

  var var_mbody = array997;
  lineNumber = 319
  lineNumber = 1
  lineNumber = 319
  var call998 = callmethod(var_o,"constructor", [0]);
  var bool999 = new GraceBoolean(false)
  lineNumber = 320
  lineNumber = 1
  lineNumber = 319
  var call1000 = callmethod(var_ast,"methodNode", [0]);
  var call1001 = callmethod(call1000,"new", [4], call998, var_signature, var_mbody, bool999);
  var var_newmeth = call1001;
  lineNumber = 320
  var array1002 = new GraceList([
var_newmeth,
]);

  var var_obody = array1002;
  lineNumber = 321
  var bool1003 = new GraceBoolean(false)
  lineNumber = 322
  lineNumber = 1
  lineNumber = 321
  var call1004 = callmethod(var_ast,"objectNode", [0]);
  var call1005 = callmethod(call1004,"new", [2], var_obody, bool1003);
  var var_cobj = call1005;
  lineNumber = 322
  lineNumber = 1
  lineNumber = 322
  var call1006 = callmethod(var_o,"name", [0]);
  var bool1007 = new GraceBoolean(false)
  lineNumber = 323
  lineNumber = 1
  lineNumber = 322
  var call1008 = callmethod(var_ast,"defDecNode", [0]);
  var call1009 = callmethod(call1008,"new", [3], call1006, var_cobj, bool1007);
  var var_con = call1009;
  lineNumber = 325
  lineNumber = 323
  lineNumber = 327
  lineNumber = 323
  var opresult1012 = callmethod(var_compilationDepth, "==", [1], new GraceNum(1));
  var block1013 = Grace_allocObject();
  block1013.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1013.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1013.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1013.receiver = this;
  block1013.className = 'block<genc:323>';
  block1013.real = function(
) {
  lineNumber = 1
  lineNumber = 323
  lineNumber = 1
  lineNumber = 323
  var call1014 = callmethod(var_o,"name", [0]);
  var call1015 = callmethod(call1014,"kind", [0]);
  var string1016 = new GraceString("generic");
  var opresult1018 = callmethod(call1015, "!=", [1], string1016);
  return opresult1018;
};
  var opresult1020 = callmethod(opresult1012, "&&", [1], block1013);
  if (Grace_isTrue(opresult1020)) {
  lineNumber = 324
  lineNumber = 1
  lineNumber = 324
  var call1021 = callmethod(var_o,"name", [0]);
  lineNumber = 1
  lineNumber = 324
  var call1023 = callmethod(var_o,"name", [0]);
  lineNumber = 1
  lineNumber = 324
  var call1024 = callmethod(var_ast,"signaturePart", [0]);
  var call1025 = callmethod(call1024,"new", [1], call1023);
  var array1022 = new GraceList([
call1025,
]);

  lineNumber = 1
  lineNumber = 324
  var call1027 = callmethod(var_o,"name", [0]);
  var array1026 = new GraceList([
call1027,
]);

  var bool1028 = new GraceBoolean(false)
  lineNumber = 325
  lineNumber = 1
  lineNumber = 324
  var call1029 = callmethod(var_ast,"methodNode", [0]);
  var call1030 = callmethod(call1029,"new", [4], call1021, array1022, array1026, bool1028);
  var var_meth = call1030;
  lineNumber = 325
  lineNumber = 326
  var call1031 = callmethod(this,"compilenode", [1], var_meth);
  var if1010 = call1031;
}
  lineNumber = 327
  lineNumber = 1
  lineNumber = 327
  lineNumber = 328
  var call1032 = callmethod(this,"compilenode", [1], var_con);
  lineNumber = 327
  var call1033 = callmethod(var_o,"register:=", [1], call1032);
  return call1033
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileclass"] = func988;
  lineNumber = 398
var func1034 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_outerRef = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 331
  lineNumber = 330
  var var_origInBlock = var_inBlock;
  lineNumber = 332
  lineNumber = 331
  var bool1035 = new GraceBoolean(false)
  var_inBlock = bool1035;
  lineNumber = 333
  lineNumber = 332
  var var_myc = var_auto__95__count;
  lineNumber = 334
  lineNumber = 333
  var opresult1037 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1037;
  lineNumber = 335
  lineNumber = 334
  var string1038 = new GraceString("obj");
  var opresult1040 = callmethod(string1038, "++", [1], var_myc);
  var var_selfr = opresult1040;
  lineNumber = 336
  lineNumber = 335
  var var_numFields = new GraceNum(1);
  lineNumber = 337
  lineNumber = 336
  var var_numMethods = new GraceNum(0);
  lineNumber = 338
  lineNumber = 337
  var var_pos = new GraceNum(1);
  lineNumber = 339
  lineNumber = 338
  var bool1041 = new GraceBoolean(false)
  var var_superobj = bool1041;
  lineNumber = 345
  lineNumber = 339
  lineNumber = 1
  lineNumber = 339
  var call1042 = callmethod(var_o,"value", [0]);
  lineNumber = 345
  var block1043 = Grace_allocObject();
  block1043.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1043.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1043.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1043.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1043.receiver = this;
  block1043.className = 'block<genc:345>';
  block1043.real = function(
var_e
) {
  lineNumber = 342
  lineNumber = 343
  lineNumber = 1
  lineNumber = 340
  var call1045 = callmethod(var_e,"kind", [0]);
  var string1046 = new GraceString("vardec");
  var opresult1048 = callmethod(call1045, "==", [1], string1046);
  if (Grace_isTrue(opresult1048)) {
  lineNumber = 342
  lineNumber = 341
  var opresult1050 = callmethod(var_numMethods, "+", [1], new GraceNum(1));
  var_numMethods = opresult1050;
  var if1044 = opresult1050;
}
  lineNumber = 344
  lineNumber = 343
  var opresult1052 = callmethod(var_numMethods, "+", [1], new GraceNum(1));
  var_numMethods = opresult1052;
  lineNumber = 345
  lineNumber = 344
  var opresult1054 = callmethod(var_numFields, "+", [1], new GraceNum(1));
  var_numFields = opresult1054;
  return opresult1054;
};
  var call1055 = callmethod(Grace_prelude,"for()do", [1, 1], call1042, block1043);
  lineNumber = 348
  lineNumber = 349
  lineNumber = 346
  var opresult1058 = callmethod(var_numFields, "==", [1], new GraceNum(3));
  if (Grace_isTrue(opresult1058)) {
  lineNumber = 348
  lineNumber = 347
  var_numFields = new GraceNum(4);
  var if1056 = new GraceNum(4);
}
  lineNumber = 349
  var string1059 = new GraceString("static ClassData objclass");
  var opresult1061 = callmethod(string1059, "++", [1], var_myc);
  var string1062 = new GraceString(";");
  var opresult1064 = callmethod(opresult1061, "++", [1], string1062);
  var call1065 = callmethod(var_globals,"push", [1], opresult1064);
  lineNumber = 351
  lineNumber = 350
  var string1066 = new GraceString("  Object ");
  var opresult1068 = callmethod(string1066, "++", [1], var_selfr);
  lineNumber = 351
  lineNumber = 350
  var string1069 = new GraceString(" = alloc_userobj2(");
  var opresult1071 = callmethod(string1069, "++", [1], var_numMethods);
  var string1072 = new GraceString(",");
  var opresult1074 = callmethod(opresult1071, "++", [1], string1072);
  var opresult1076 = callmethod(opresult1068, "++", [1], opresult1074);
  lineNumber = 351
  var string1077 = new GraceString("");
  var opresult1079 = callmethod(string1077, "++", [1], var_numFields);
  var string1080 = new GraceString(", objclass");
  var opresult1082 = callmethod(opresult1079, "++", [1], string1080);
  var opresult1084 = callmethod(opresult1082, "++", [1], var_myc);
  var string1085 = new GraceString(");");
  var opresult1087 = callmethod(opresult1084, "++", [1], string1085);
  var opresult1089 = callmethod(opresult1076, "++", [1], opresult1087);
  lineNumber = 352
  var call1090 = callmethod(this,"out", [1], opresult1089);
  var string1091 = new GraceString("  gc_frame_newslot(");
  var opresult1093 = callmethod(string1091, "++", [1], var_selfr);
  var string1094 = new GraceString(");");
  var opresult1096 = callmethod(opresult1093, "++", [1], string1094);
  lineNumber = 353
  var call1097 = callmethod(this,"out", [1], opresult1096);
  lineNumber = 357
  lineNumber = 359
  lineNumber = 1
  lineNumber = 353
  var call1099 = callmethod(var_o,"classname", [0]);
  var string1100 = new GraceString("object");
  var opresult1102 = callmethod(call1099, "!=", [1], string1100);
  if (Grace_isTrue(opresult1102)) {
  lineNumber = 354
  var string1103 = new GraceString("if (objclass");
  var opresult1105 = callmethod(string1103, "++", [1], var_myc);
  var string1106 = new GraceString(" == NULL) {");
  var opresult1108 = callmethod(opresult1105, "++", [1], string1106);
  lineNumber = 355
  var call1109 = callmethod(this,"out", [1], opresult1108);
  var string1110 = new GraceString("  glfree(");
  var opresult1112 = callmethod(string1110, "++", [1], var_selfr);
  var string1113 = new GraceString("->class->name);");
  var opresult1115 = callmethod(opresult1112, "++", [1], string1113);
  lineNumber = 356
  var call1116 = callmethod(this,"out", [1], opresult1115);
  var string1117 = new GraceString("  ");
  var opresult1119 = callmethod(string1117, "++", [1], var_selfr);
  var string1120 = new GraceString("->class->name = \"");
  var opresult1122 = callmethod(opresult1119, "++", [1], string1120);
  lineNumber = 1
  lineNumber = 356
  var call1123 = callmethod(var_o,"classname", [0]);
  var opresult1125 = callmethod(opresult1122, "++", [1], call1123);
  var string1126 = new GraceString("\";");
  var opresult1128 = callmethod(opresult1125, "++", [1], string1126);
  lineNumber = 357
  var call1129 = callmethod(this,"out", [1], opresult1128);
  var string1130 = new GraceString("}");
  lineNumber = 358
  var call1131 = callmethod(this,"out", [1], string1130);
  var if1098 = call1131;
}
  lineNumber = 361
  lineNumber = 363
  lineNumber = 1
  lineNumber = 359
  var call1133 = callmethod(var_o,"superclass", [0]);
  var bool1134 = new GraceBoolean(false)
  var opresult1136 = callmethod(call1133, "/=", [1], bool1134);
  if (Grace_isTrue(opresult1136)) {
  lineNumber = 360
  lineNumber = 1
  lineNumber = 360
  var call1137 = callmethod(var_o,"superclass", [0]);
  lineNumber = 361
  var call1138 = callmethod(this,"compilenode", [1], call1137);
  var_superobj = call1138;
  var string1139 = new GraceString("  setsuperobj(");
  var opresult1141 = callmethod(string1139, "++", [1], var_selfr);
  var string1142 = new GraceString(", ");
  var opresult1144 = callmethod(opresult1141, "++", [1], string1142);
  var opresult1146 = callmethod(opresult1144, "++", [1], var_superobj);
  var string1147 = new GraceString(");");
  var opresult1149 = callmethod(opresult1146, "++", [1], string1147);
  lineNumber = 362
  var call1150 = callmethod(this,"out", [1], opresult1149);
  var if1132 = call1150;
}
  lineNumber = 363
  lineNumber = 364
  var call1151 = callmethod(this,"compileobjouter", [2], var_selfr, var_outerRef);
  var string1152 = new GraceString("  Object oldself");
  var opresult1154 = callmethod(string1152, "++", [1], var_myc);
  var string1155 = new GraceString(" = self;");
  var opresult1157 = callmethod(opresult1154, "++", [1], string1155);
  lineNumber = 365
  var call1158 = callmethod(this,"out", [1], opresult1157);
  var string1159 = new GraceString("  self = ");
  var opresult1161 = callmethod(string1159, "++", [1], var_selfr);
  var string1162 = new GraceString(";");
  var opresult1164 = callmethod(opresult1161, "++", [1], string1162);
  lineNumber = 366
  var call1165 = callmethod(this,"out", [1], opresult1164);
  var string1166 = new GraceString("  *selfslot = self;");
  lineNumber = 367
  var call1167 = callmethod(this,"out", [1], string1166);
  lineNumber = 390
  lineNumber = 367
  lineNumber = 1
  lineNumber = 367
  var call1168 = callmethod(var_o,"value", [0]);
  lineNumber = 390
  var block1169 = Grace_allocObject();
  block1169.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1169.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1169.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1169.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1169.receiver = this;
  block1169.className = 'block<genc:390>';
  block1169.real = function(
var_e
) {
  lineNumber = 388
  lineNumber = 389
  lineNumber = 1
  lineNumber = 368
  var call1171 = callmethod(var_e,"kind", [0]);
  var string1172 = new GraceString("method");
  var opresult1174 = callmethod(call1171, "==", [1], string1172);
  if (Grace_isTrue(opresult1174)) {
  lineNumber = 369
  lineNumber = 370
  var call1175 = callmethod(this,"compilemethod", [3], var_e, var_selfr, var_pos);
  var if1170 = call1175;
  } else {
  lineNumber = 388
  lineNumber = 376
  lineNumber = 1
  lineNumber = 370
  var call1177 = callmethod(var_e,"kind", [0]);
  var string1178 = new GraceString("vardec");
  var opresult1180 = callmethod(call1177, "==", [1], string1178);
  if (Grace_isTrue(opresult1180)) {
  lineNumber = 371
  var string1181 = new GraceString("if (objclass");
  var opresult1183 = callmethod(string1181, "++", [1], var_myc);
  var string1184 = new GraceString(" == NULL) {");
  var opresult1186 = callmethod(opresult1183, "++", [1], string1184);
  lineNumber = 372
  var call1187 = callmethod(this,"out", [1], opresult1186);
  lineNumber = 373
  var call1188 = callmethod(this,"compileobjvardecmeth", [3], var_e, var_selfr, var_pos);
  var string1189 = new GraceString("}");
  lineNumber = 374
  var call1190 = callmethod(this,"out", [1], string1189);
  var string1191 = new GraceString("");
  var opresult1193 = callmethod(string1191, "++", [1], var_selfr);
  var string1194 = new GraceString("->flags |= OFLAG_MUTABLE;");
  var opresult1196 = callmethod(opresult1193, "++", [1], string1194);
  lineNumber = 375
  var call1197 = callmethod(this,"out", [1], opresult1196);
  lineNumber = 376
  var call1198 = callmethod(this,"compileobjvardecdata", [3], var_e, var_selfr, var_pos);
  var if1176 = call1198;
  } else {
  lineNumber = 388
  lineNumber = 381
  lineNumber = 1
  lineNumber = 376
  var call1200 = callmethod(var_e,"kind", [0]);
  var string1201 = new GraceString("defdec");
  var opresult1203 = callmethod(call1200, "==", [1], string1201);
  if (Grace_isTrue(opresult1203)) {
  lineNumber = 377
  var string1204 = new GraceString("if (objclass");
  var opresult1206 = callmethod(string1204, "++", [1], var_myc);
  var string1207 = new GraceString(" == NULL) {");
  var opresult1209 = callmethod(opresult1206, "++", [1], string1207);
  lineNumber = 378
  var call1210 = callmethod(this,"out", [1], opresult1209);
  lineNumber = 379
  var call1211 = callmethod(this,"compileobjdefdecmeth", [3], var_e, var_selfr, var_pos);
  var string1212 = new GraceString("}");
  lineNumber = 380
  var call1213 = callmethod(this,"out", [1], string1212);
  lineNumber = 381
  var call1214 = callmethod(this,"compileobjdefdecdata", [3], var_e, var_selfr, var_pos);
  var if1199 = call1214;
  } else {
  lineNumber = 388
  lineNumber = 385
  lineNumber = 1
  lineNumber = 381
  var call1216 = callmethod(var_e,"kind", [0]);
  var string1217 = new GraceString("inherits");
  var opresult1219 = callmethod(call1216, "==", [1], string1217);
  if (Grace_isTrue(opresult1219)) {
  lineNumber = 382
  lineNumber = 1
  lineNumber = 382
  var call1220 = callmethod(var_e,"value", [0]);
  lineNumber = 383
  var call1221 = callmethod(this,"compilenode", [1], call1220);
  var_superobj = call1221;
  var string1222 = new GraceString("  setsuperobj(");
  var opresult1224 = callmethod(string1222, "++", [1], var_selfr);
  var string1225 = new GraceString(", ");
  var opresult1227 = callmethod(opresult1224, "++", [1], string1225);
  var opresult1229 = callmethod(opresult1227, "++", [1], var_superobj);
  var string1230 = new GraceString(");");
  var opresult1232 = callmethod(opresult1229, "++", [1], string1230);
  lineNumber = 384
  var call1233 = callmethod(this,"out", [1], opresult1232);
  lineNumber = 385
  lineNumber = 384
  var diff1235 = callmethod(var_pos, "-", [1], new GraceNum(1));
  var_pos = diff1235;
  var if1215 = diff1235;
  } else {
  lineNumber = 386
  lineNumber = 387
  var call1236 = callmethod(this,"compilenode", [1], var_e);
  lineNumber = 388
  lineNumber = 387
  var diff1238 = callmethod(var_pos, "-", [1], new GraceNum(1));
  var_pos = diff1238;
  var if1215 = diff1238;
}
  var if1199 = if1215;
}
  var if1176 = if1199;
}
  var if1170 = if1176;
}
  lineNumber = 390
  lineNumber = 389
  var opresult1240 = callmethod(var_pos, "+", [1], new GraceNum(1));
  var_pos = opresult1240;
  return opresult1240;
};
  var call1241 = callmethod(Grace_prelude,"for()do", [1, 1], call1168, block1169);
  lineNumber = 391
  var string1242 = new GraceString("objclass");
  var opresult1244 = callmethod(string1242, "++", [1], var_myc);
  var string1245 = new GraceString(" = ");
  var opresult1247 = callmethod(opresult1244, "++", [1], string1245);
  var opresult1249 = callmethod(opresult1247, "++", [1], var_selfr);
  var string1250 = new GraceString("->class;");
  var opresult1252 = callmethod(opresult1249, "++", [1], string1250);
  lineNumber = 392
  var call1253 = callmethod(this,"out", [1], opresult1252);
  var string1254 = new GraceString("  self = oldself");
  var opresult1256 = callmethod(string1254, "++", [1], var_myc);
  var string1257 = new GraceString(";");
  var opresult1259 = callmethod(opresult1256, "++", [1], string1257);
  lineNumber = 393
  var call1260 = callmethod(this,"out", [1], opresult1259);
  var string1261 = new GraceString("  *selfslot = self;");
  lineNumber = 394
  var call1262 = callmethod(this,"out", [1], string1261);
  lineNumber = 395
  lineNumber = 394
  var string1263 = new GraceString("  set_type(");
  var opresult1265 = callmethod(string1263, "++", [1], var_selfr);
  var string1266 = new GraceString(", ");
  var opresult1268 = callmethod(opresult1265, "++", [1], string1266);
  lineNumber = 395
  var string1269 = new GraceString("");
  lineNumber = 1
  lineNumber = 395
  var call1270 = callmethod(var_o,"otype", [0]);
  var call1271 = callmethod(var_subtype,"typeId", [1], call1270);
  var opresult1273 = callmethod(string1269, "++", [1], call1271);
  var string1274 = new GraceString(");");
  var opresult1276 = callmethod(opresult1273, "++", [1], string1274);
  var opresult1278 = callmethod(opresult1268, "++", [1], opresult1276);
  lineNumber = 396
  var call1279 = callmethod(this,"out", [1], opresult1278);
  lineNumber = 397
  lineNumber = 1
  lineNumber = 396
  var call1280 = callmethod(var_o,"register:=", [1], var_selfr);
  lineNumber = 398
  lineNumber = 397
  var_inBlock = var_origInBlock;
  return var_origInBlock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobject"] = func1034;
  lineNumber = 418
var func1281 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 401
  lineNumber = 400
  var var_origInBlock = var_inBlock;
  lineNumber = 402
  lineNumber = 401
  var bool1282 = new GraceBoolean(true)
  var_inBlock = bool1282;
  lineNumber = 403
  lineNumber = 402
  var var_myc = var_auto__95__count;
  lineNumber = 404
  lineNumber = 403
  var opresult1284 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1284;
  lineNumber = 405
  lineNumber = 404
  var string1285 = new GraceString("block");
  var opresult1287 = callmethod(string1285, "++", [1], var_myc);
  var string1288 = new GraceString("");
  var opresult1290 = callmethod(opresult1287, "++", [1], string1288);
  var var_obj = opresult1290;
  lineNumber = 405
  var string1291 = new GraceString("  Object ");
  var opresult1293 = callmethod(string1291, "++", [1], var_obj);
  var string1294 = new GraceString(" = alloc_Block(NULL, NULL, \"");
  var opresult1296 = callmethod(opresult1293, "++", [1], string1294);
  var opresult1298 = callmethod(opresult1296, "++", [1], var_modname);
  var string1299 = new GraceString("\", ");
  var opresult1301 = callmethod(opresult1298, "++", [1], string1299);
  var opresult1303 = callmethod(opresult1301, "++", [1], var_linenum);
  var string1304 = new GraceString(");");
  var opresult1306 = callmethod(opresult1303, "++", [1], string1304);
  lineNumber = 406
  var call1307 = callmethod(this,"out", [1], opresult1306);
  var string1308 = new GraceString("  gc_frame_newslot(");
  var opresult1310 = callmethod(string1308, "++", [1], var_obj);
  var string1311 = new GraceString(");");
  var opresult1313 = callmethod(opresult1310, "++", [1], string1311);
  lineNumber = 407
  var call1314 = callmethod(this,"out", [1], opresult1313);
  var string1315 = new GraceString("_apply");
  var bool1316 = new GraceBoolean(false)
  lineNumber = 408
  lineNumber = 1
  lineNumber = 407
  var call1317 = callmethod(var_ast,"identifierNode", [0]);
  var call1318 = callmethod(call1317,"new", [2], string1315, bool1316);
  var var_id = call1318;
  lineNumber = 408
  lineNumber = 1
  lineNumber = 408
  var call1320 = callmethod(var_o,"params", [0]);
  lineNumber = 1
  lineNumber = 408
  var call1321 = callmethod(var_ast,"signaturePart", [0]);
  var call1322 = callmethod(call1321,"new", [2], var_id, call1320);
  var array1319 = new GraceList([
call1322,
]);

  lineNumber = 1
  lineNumber = 408
  var call1323 = callmethod(var_o,"body", [0]);
  var bool1324 = new GraceBoolean(false)
  lineNumber = 409
  lineNumber = 1
  lineNumber = 408
  var call1325 = callmethod(var_ast,"methodNode", [0]);
  var call1326 = callmethod(call1325,"new", [4], var_id, array1319, call1323, bool1324);
  var var_applymeth = call1326;
  lineNumber = 410
  lineNumber = 1
  lineNumber = 409
  var bool1327 = new GraceBoolean(true)
  var call1328 = callmethod(var_applymeth,"selfclosure:=", [1], bool1327);
  lineNumber = 410
  lineNumber = 411
  var call1329 = callmethod(this,"compilemethod", [3], var_applymeth, var_obj, new GraceNum(0));
  lineNumber = 414
  lineNumber = 416
  lineNumber = 411
  var bool1331 = new GraceBoolean(false)
  lineNumber = 416
  lineNumber = 1
  lineNumber = 411
  var call1332 = callmethod(var_o,"matchingPattern", [0]);
  var opresult1334 = callmethod(bool1331, "!=", [1], call1332);
  if (Grace_isTrue(opresult1334)) {
  lineNumber = 412
  lineNumber = 1
  lineNumber = 412
  var call1335 = callmethod(var_o,"matchingPattern", [0]);
  lineNumber = 413
  var call1336 = callmethod(this,"compilenode", [1], call1335);
  var var_pat = call1336;
  var string1337 = new GraceString("((struct UserObject *)");
  var opresult1339 = callmethod(string1337, "++", [1], var_obj);
  var string1340 = new GraceString(")->data[1] = ");
  var opresult1342 = callmethod(opresult1339, "++", [1], string1340);
  var opresult1344 = callmethod(opresult1342, "++", [1], var_pat);
  var string1345 = new GraceString(";");
  var opresult1347 = callmethod(opresult1344, "++", [1], string1345);
  lineNumber = 414
  var call1348 = callmethod(this,"out", [1], opresult1347);
  var string1349 = new GraceString("((struct UserObject *)");
  var opresult1351 = callmethod(string1349, "++", [1], var_obj);
  var string1352 = new GraceString(")->data[2] = ");
  var opresult1354 = callmethod(opresult1351, "++", [1], string1352);
  var opresult1356 = callmethod(opresult1354, "++", [1], var_obj);
  var string1357 = new GraceString(";");
  var opresult1359 = callmethod(opresult1356, "++", [1], string1357);
  lineNumber = 415
  var call1360 = callmethod(this,"out", [1], opresult1359);
  var if1330 = call1360;
}
  lineNumber = 417
  lineNumber = 1
  lineNumber = 416
  var call1361 = callmethod(var_o,"register:=", [1], var_obj);
  lineNumber = 418
  lineNumber = 417
  var_inBlock = var_origInBlock;
  return var_origInBlock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileblock"] = func1281;
  lineNumber = 432
var func1362 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 421
  lineNumber = 420
  var var_myc = var_auto__95__count;
  lineNumber = 422
  lineNumber = 421
  var opresult1364 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1364;
  lineNumber = 422
  lineNumber = 1
  lineNumber = 422
  var call1365 = callmethod(var_o,"value", [0]);
  lineNumber = 423
  var call1366 = callmethod(this,"escapestring2", [1], call1365);
  var var_escName = call1366;
  lineNumber = 1
  lineNumber = 423
  var call1367 = callmethod(var_o,"value", [0]);
  lineNumber = 424
  var call1368 = callmethod(this,"escapeident", [1], call1367);
  var var_idName = call1368;
  var string1369 = new GraceString("// Type ");
  lineNumber = 1
  lineNumber = 424
  var call1370 = callmethod(var_o,"value", [0]);
  var opresult1372 = callmethod(string1369, "++", [1], call1370);
  var string1373 = new GraceString("");
  var opresult1375 = callmethod(opresult1372, "++", [1], string1373);
  lineNumber = 425
  var call1376 = callmethod(this,"out", [1], opresult1375);
  var string1377 = new GraceString("Object type");
  var opresult1379 = callmethod(string1377, "++", [1], var_myc);
  var string1380 = new GraceString(" = alloc_Type(\"");
  var opresult1382 = callmethod(opresult1379, "++", [1], string1380);
  var opresult1384 = callmethod(opresult1382, "++", [1], var_escName);
  var string1385 = new GraceString("\", ");
  var opresult1387 = callmethod(opresult1384, "++", [1], string1385);
  lineNumber = 1
  lineNumber = 425
  lineNumber = 1
  lineNumber = 425
  var call1388 = callmethod(var_o,"methods", [0]);
  var call1389 = callmethod(call1388,"size", [0]);
  var opresult1391 = callmethod(opresult1387, "++", [1], call1389);
  var string1392 = new GraceString(");");
  var opresult1394 = callmethod(opresult1391, "++", [1], string1392);
  lineNumber = 426
  var call1395 = callmethod(this,"out", [1], opresult1394);
  var string1396 = new GraceString("*var_");
  var opresult1398 = callmethod(string1396, "++", [1], var_idName);
  var string1399 = new GraceString(" = type");
  var opresult1401 = callmethod(opresult1398, "++", [1], string1399);
  var opresult1403 = callmethod(opresult1401, "++", [1], var_myc);
  var string1404 = new GraceString(";");
  var opresult1406 = callmethod(opresult1403, "++", [1], string1404);
  lineNumber = 427
  var call1407 = callmethod(this,"out", [1], opresult1406);
  lineNumber = 429
  lineNumber = 427
  lineNumber = 1
  lineNumber = 427
  var call1408 = callmethod(var_o,"methods", [0]);
  lineNumber = 429
  var block1409 = Grace_allocObject();
  block1409.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1409.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1409.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1409.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1409.receiver = this;
  block1409.className = 'block<genc:429>';
  block1409.real = function(
var_meth
) {
  lineNumber = 428
  lineNumber = 1
  lineNumber = 428
  var call1410 = callmethod(var_meth,"value", [0]);
  lineNumber = 429
  var call1411 = callmethod(this,"escapestring2", [1], call1410);
  var var_mnm = call1411;
  var string1412 = new GraceString("add_Method((ClassData)type");
  var opresult1414 = callmethod(string1412, "++", [1], var_myc);
  var string1415 = new GraceString(", \"");
  var opresult1417 = callmethod(opresult1414, "++", [1], string1415);
  var opresult1419 = callmethod(opresult1417, "++", [1], var_mnm);
  var string1420 = new GraceString("\", NULL);");
  var opresult1422 = callmethod(opresult1419, "++", [1], string1420);
  lineNumber = 430
  var call1423 = callmethod(this,"out", [1], opresult1422);
  return call1423;
};
  var call1424 = callmethod(Grace_prelude,"for()do", [1, 1], call1408, block1409);
  lineNumber = 432
  lineNumber = 1
  lineNumber = 431
  var string1425 = new GraceString("none");
  var call1426 = callmethod(var_o,"register:=", [1], string1425);
  return call1426
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compiletype"] = func1362;
  lineNumber = 456
var func1427 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 435
  lineNumber = 434
  var var_myc = var_auto__95__count;
  lineNumber = 436
  lineNumber = 435
  var opresult1429 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1429;
  lineNumber = 436
  var string1430 = new GraceString("  int forframe");
  var opresult1432 = callmethod(string1430, "++", [1], var_myc);
  var string1433 = new GraceString(" = gc_frame_new();");
  var opresult1435 = callmethod(opresult1432, "++", [1], string1433);
  lineNumber = 437
  var call1436 = callmethod(this,"out", [1], opresult1435);
  lineNumber = 1
  lineNumber = 437
  var call1437 = callmethod(var_o,"value", [0]);
  lineNumber = 438
  var call1438 = callmethod(this,"compilenode", [1], call1437);
  var var_over = call1438;
  var string1439 = new GraceString("  gc_frame_newslot(");
  var opresult1441 = callmethod(string1439, "++", [1], var_over);
  var string1442 = new GraceString(");");
  var opresult1444 = callmethod(opresult1441, "++", [1], string1442);
  lineNumber = 439
  var call1445 = callmethod(this,"out", [1], opresult1444);
  lineNumber = 440
  lineNumber = 1
  lineNumber = 439
  var call1446 = callmethod(var_o,"body", [0]);
  var var_blk = call1446;
  lineNumber = 440
  lineNumber = 441
  var call1447 = callmethod(this,"compilenode", [1], var_blk);
  var var_obj = call1447;
  var string1448 = new GraceString("  gc_frame_newslot(");
  var opresult1450 = callmethod(string1448, "++", [1], var_obj);
  var string1451 = new GraceString(");");
  var opresult1453 = callmethod(opresult1450, "++", [1], string1451);
  lineNumber = 442
  var call1454 = callmethod(this,"out", [1], opresult1453);
  var string1455 = new GraceString("  params[0] = ");
  var opresult1457 = callmethod(string1455, "++", [1], var_over);
  var string1458 = new GraceString(";");
  var opresult1460 = callmethod(opresult1457, "++", [1], string1458);
  lineNumber = 443
  var call1461 = callmethod(this,"out", [1], opresult1460);
  var string1462 = new GraceString("  partcv[0] = 1;");
  lineNumber = 444
  var call1463 = callmethod(this,"out", [1], string1462);
  var string1464 = new GraceString("  Object iter");
  var opresult1466 = callmethod(string1464, "++", [1], var_myc);
  var string1467 = new GraceString(" = callmethod(");
  var opresult1469 = callmethod(opresult1466, "++", [1], string1467);
  var opresult1471 = callmethod(opresult1469, "++", [1], var_over);
  var string1472 = new GraceString(", \"iter\", 1, partcv, params);");
  var opresult1474 = callmethod(opresult1471, "++", [1], string1472);
  lineNumber = 445
  var call1475 = callmethod(this,"out", [1], opresult1474);
  var string1476 = new GraceString("  gc_frame_newslot(iter");
  var opresult1478 = callmethod(string1476, "++", [1], var_myc);
  var string1479 = new GraceString(");");
  var opresult1481 = callmethod(opresult1478, "++", [1], string1479);
  lineNumber = 446
  var call1482 = callmethod(this,"out", [1], opresult1481);
  var string1483 = new GraceString("  int forvalslot");
  var opresult1485 = callmethod(string1483, "++", [1], var_myc);
  var string1486 = new GraceString(" = gc_frame_newslot(NULL);");
  var opresult1488 = callmethod(opresult1485, "++", [1], string1486);
  lineNumber = 447
  var call1489 = callmethod(this,"out", [1], opresult1488);
  var string1490 = new GraceString("  while(1) {");
  lineNumber = 448
  var call1491 = callmethod(this,"out", [1], string1490);
  var string1492 = new GraceString("    Object cond");
  var opresult1494 = callmethod(string1492, "++", [1], var_myc);
  var string1495 = new GraceString(" = callmethod(iter");
  var opresult1497 = callmethod(opresult1494, "++", [1], string1495);
  var opresult1499 = callmethod(opresult1497, "++", [1], var_myc);
  var string1500 = new GraceString(", \"havemore\", 0, NULL, NULL);");
  var opresult1502 = callmethod(opresult1499, "++", [1], string1500);
  lineNumber = 449
  var call1503 = callmethod(this,"out", [1], opresult1502);
  var string1504 = new GraceString("    if (!istrue(cond");
  var opresult1506 = callmethod(string1504, "++", [1], var_myc);
  var string1507 = new GraceString(")) break;");
  var opresult1509 = callmethod(opresult1506, "++", [1], string1507);
  lineNumber = 450
  var call1510 = callmethod(this,"out", [1], opresult1509);
  var string1511 = new GraceString("    params[0] = callmethod(iter");
  var opresult1513 = callmethod(string1511, "++", [1], var_myc);
  var string1514 = new GraceString(", \"next\", 0, NULL, NULL);");
  var opresult1516 = callmethod(opresult1513, "++", [1], string1514);
  lineNumber = 451
  var call1517 = callmethod(this,"out", [1], opresult1516);
  var string1518 = new GraceString("    gc_frame_setslot(forvalslot");
  var opresult1520 = callmethod(string1518, "++", [1], var_myc);
  var string1521 = new GraceString(", params[0]);");
  var opresult1523 = callmethod(opresult1520, "++", [1], string1521);
  lineNumber = 452
  var call1524 = callmethod(this,"out", [1], opresult1523);
  var string1525 = new GraceString("    callmethod(");
  var opresult1527 = callmethod(string1525, "++", [1], var_obj);
  var string1528 = new GraceString(", \"apply\", 1, partcv, params);");
  var opresult1530 = callmethod(opresult1527, "++", [1], string1528);
  lineNumber = 453
  var call1531 = callmethod(this,"out", [1], opresult1530);
  var string1532 = new GraceString("  }");
  lineNumber = 454
  var call1533 = callmethod(this,"out", [1], string1532);
  var string1534 = new GraceString("  gc_frame_end(forframe");
  var opresult1536 = callmethod(string1534, "++", [1], var_myc);
  var string1537 = new GraceString(");");
  var opresult1539 = callmethod(opresult1536, "++", [1], string1537);
  lineNumber = 455
  var call1540 = callmethod(this,"out", [1], opresult1539);
  lineNumber = 456
  lineNumber = 1
  lineNumber = 455
  var string1541 = new GraceString("none");
  var call1542 = callmethod(var_o,"register:=", [1], string1541);
  return call1542
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilefor"] = func1427;
  lineNumber = 678
var func1543 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfobj = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 463
  lineNumber = 462
  var var_origParamsUsed = var_paramsUsed;
  lineNumber = 464
  lineNumber = 463
  var_paramsUsed = new GraceNum(1);
  lineNumber = 465
  lineNumber = 464
  var var_origPartsUsed = var_partsUsed;
  lineNumber = 466
  lineNumber = 465
  var_partsUsed = new GraceNum(1);
  lineNumber = 467
  lineNumber = 466
  var var_origInBlock = var_inBlock;
  lineNumber = 468
  lineNumber = 1
  lineNumber = 467
  var call1544 = callmethod(var_o,"selfclosure", [0]);
  var_inBlock = call1544;
  lineNumber = 469
  lineNumber = 468
  var var_oldout = var_output;
  lineNumber = 470
  lineNumber = 469
  var var_oldbblock = var_bblock;
  lineNumber = 471
  lineNumber = 470
  var var_oldusedvars = var_usedvars;
  lineNumber = 472
  lineNumber = 471
  var var_olddeclaredvars = var_declaredvars;
  lineNumber = 473
  var array1545 = new GraceList([
]);

  var_output = array1545;
  lineNumber = 474
  var array1546 = new GraceList([
]);

  var_usedvars = array1546;
  lineNumber = 475
  var array1547 = new GraceList([
]);

  var_declaredvars = array1547;
  lineNumber = 476
  lineNumber = 475
  var var_myc = var_auto__95__count;
  lineNumber = 477
  lineNumber = 476
  var opresult1549 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1549;
  lineNumber = 478
  lineNumber = 1
  lineNumber = 478
  lineNumber = 1
  lineNumber = 477
  var call1550 = callmethod(var_o,"value", [0]);
  var call1551 = callmethod(call1550,"value", [0]);
  var var_name = call1551;
  lineNumber = 479
  lineNumber = 478
  var opresult1553 = callmethod(var_name, "++", [1], var_myc);
  var var_nm = opresult1553;
  lineNumber = 480
  lineNumber = 479
  var var_numslots = new GraceNum(0);
  lineNumber = 481
  lineNumber = 480
  var var_slot = new GraceNum(0);
  lineNumber = 482
  lineNumber = 481
  var bool1554 = new GraceBoolean(false)
  var var_haveTypedParams = bool1554;
  lineNumber = 482
  var string1555 = new GraceString("  int i;");
  lineNumber = 483
  var call1556 = callmethod(this,"out", [1], string1555);
  var string1557 = new GraceString("  int curarg = 0;");
  lineNumber = 484
  var call1558 = callmethod(this,"out", [1], string1557);
  var string1559 = new GraceString("  int pushcv[] = {1};");
  lineNumber = 485
  var call1560 = callmethod(this,"out", [1], string1559);
  lineNumber = 515
  lineNumber = 485
  lineNumber = 1
  lineNumber = 485
  lineNumber = 1
  lineNumber = 485
  var call1561 = callmethod(var_o,"signature", [0]);
  var call1562 = callmethod(call1561,"indices", [0]);
  lineNumber = 515
  var block1563 = Grace_allocObject();
  block1563.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1563.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1563.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1563.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1563.receiver = this;
  block1563.className = 'block<genc:515>';
  block1563.real = function(
var_partnr
) {
  lineNumber = 487
  lineNumber = 1
  lineNumber = 486
  var call1564 = callmethod(var_o,"signature", [0]);
  var idxres1565 = call1564.methods["[]"].call(call1564, [1], var_partnr);
  var var_part = idxres1565;
  lineNumber = 500
  lineNumber = 487
  lineNumber = 1
  lineNumber = 487
  var call1566 = callmethod(var_part,"params", [0]);
  lineNumber = 500
  var block1567 = Grace_allocObject();
  block1567.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1567.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1567.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1567.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1567.receiver = this;
  block1567.className = 'block<genc:500>';
  block1567.real = function(
var_param
) {
  lineNumber = 488
  lineNumber = 1
  lineNumber = 488
  var call1568 = callmethod(var_param,"value", [0]);
  lineNumber = 489
  var call1569 = callmethod(this,"escapeident", [1], call1568);
  var var_pn = call1569;
  var string1570 = new GraceString("  Object *var_");
  var opresult1572 = callmethod(string1570, "++", [1], var_pn);
  var string1573 = new GraceString(" = &(stackframe->slots[");
  var opresult1575 = callmethod(opresult1572, "++", [1], string1573);
  var opresult1577 = callmethod(opresult1575, "++", [1], var_slot);
  var string1578 = new GraceString("]);");
  var opresult1580 = callmethod(opresult1577, "++", [1], string1578);
  lineNumber = 490
  var call1581 = callmethod(this,"out", [1], opresult1580);
  var string1582 = new GraceString("  *var_");
  var opresult1584 = callmethod(string1582, "++", [1], var_pn);
  var string1585 = new GraceString(" = args[curarg];");
  var opresult1587 = callmethod(opresult1584, "++", [1], string1585);
  lineNumber = 491
  var call1588 = callmethod(this,"out", [1], opresult1587);
  var string1589 = new GraceString("  curarg++;");
  lineNumber = 492
  var call1590 = callmethod(this,"out", [1], string1589);
  var call1591 = callmethod(var_declaredvars,"push", [1], var_pn);
  lineNumber = 494
  lineNumber = 493
  var opresult1593 = callmethod(var_slot, "+", [1], new GraceNum(1));
  var_slot = opresult1593;
  lineNumber = 495
  lineNumber = 494
  var opresult1595 = callmethod(var_numslots, "+", [1], new GraceNum(1));
  var_numslots = opresult1595;
  lineNumber = 500
  lineNumber = 502
  lineNumber = 1
  lineNumber = 495
  var call1597 = callmethod(var_param,"dtype", [0]);
  var bool1598 = new GraceBoolean(false)
  var opresult1600 = callmethod(call1597, "!=", [1], bool1598);
  if (Grace_isTrue(opresult1600)) {
  lineNumber = 500
  lineNumber = 501
  lineNumber = 1
  lineNumber = 501
  lineNumber = 1
  lineNumber = 496
  var call1602 = callmethod(var_param,"dtype", [0]);
  var call1603 = callmethod(call1602,"value", [0]);
  var string1604 = new GraceString("Dynamic");
  var opresult1606 = callmethod(call1603, "!=", [1], string1604);
  lineNumber = 501
  lineNumber = 1
  lineNumber = 501
  lineNumber = 1
  lineNumber = 497
  var call1607 = callmethod(var_param,"dtype", [0]);
  var call1608 = callmethod(call1607,"kind", [0]);
  var string1609 = new GraceString("identifier");
  var opresult1611 = callmethod(call1608, "==", [1], string1609);
  lineNumber = 501
  lineNumber = 1
  lineNumber = 501
  lineNumber = 1
  lineNumber = 498
  var call1612 = callmethod(var_param,"dtype", [0]);
  var call1613 = callmethod(call1612,"kind", [0]);
  var string1614 = new GraceString("type");
  var opresult1616 = callmethod(call1613, "==", [1], string1614);
  var opresult1618 = callmethod(opresult1611, "||", [1], opresult1616);
  var opresult1620 = callmethod(opresult1606, "&&", [1], opresult1618);
  if (Grace_isTrue(opresult1620)) {
  lineNumber = 500
  lineNumber = 499
  var bool1621 = new GraceBoolean(true)
  var_haveTypedParams = bool1621;
  var if1601 = bool1621;
}
  var if1596 = if1601;
}
  return if1596;
};
  var call1622 = callmethod(Grace_prelude,"for()do", [1, 1], call1566, block1567);
  lineNumber = 515
  lineNumber = 516
  lineNumber = 1
  lineNumber = 503
  var call1624 = callmethod(var_part,"vararg", [0]);
  var bool1625 = new GraceBoolean(false)
  var opresult1627 = callmethod(call1624, "!=", [1], bool1625);
  if (Grace_isTrue(opresult1627)) {
  lineNumber = 504
  lineNumber = 1
  lineNumber = 504
  lineNumber = 1
  lineNumber = 504
  var call1628 = callmethod(var_part,"vararg", [0]);
  var call1629 = callmethod(call1628,"value", [0]);
  lineNumber = 505
  var call1630 = callmethod(this,"escapeident", [1], call1629);
  var var_van = call1630;
  var string1631 = new GraceString("  Object var_init_");
  var opresult1633 = callmethod(string1631, "++", [1], var_van);
  var string1634 = new GraceString(" = alloc_List();");
  var opresult1636 = callmethod(opresult1633, "++", [1], string1634);
  lineNumber = 506
  var call1637 = callmethod(this,"out", [1], opresult1636);
  var string1638 = new GraceString("  for (i = ");
  lineNumber = 1
  lineNumber = 506
  lineNumber = 1
  lineNumber = 506
  var call1639 = callmethod(var_part,"params", [0]);
  var call1640 = callmethod(call1639,"size", [0]);
  var opresult1642 = callmethod(string1638, "++", [1], call1640);
  var string1643 = new GraceString("; i < argcv[");
  var opresult1645 = callmethod(opresult1642, "++", [1], string1643);
  var diff1647 = callmethod(var_partnr, "-", [1], new GraceNum(1));
  var opresult1649 = callmethod(opresult1645, "++", [1], diff1647);
  var string1650 = new GraceString("]; i++) {");
  var opresult1652 = callmethod(opresult1649, "++", [1], string1650);
  lineNumber = 507
  var call1653 = callmethod(this,"out", [1], opresult1652);
  var string1654 = new GraceString("    callmethod(var_init_");
  var opresult1656 = callmethod(string1654, "++", [1], var_van);
  var string1657 = new GraceString(", \"push\", 1, pushcv, &args[curarg]);");
  var opresult1659 = callmethod(opresult1656, "++", [1], string1657);
  lineNumber = 508
  var call1660 = callmethod(this,"out", [1], opresult1659);
  var string1661 = new GraceString("    curarg++;");
  lineNumber = 509
  var call1662 = callmethod(this,"out", [1], string1661);
  var string1663 = new GraceString("  }");
  lineNumber = 510
  var call1664 = callmethod(this,"out", [1], string1663);
  var string1665 = new GraceString("  Object *var_");
  var opresult1667 = callmethod(string1665, "++", [1], var_van);
  var string1668 = new GraceString(" = &(stackframe->slots[");
  var opresult1670 = callmethod(opresult1667, "++", [1], string1668);
  var opresult1672 = callmethod(opresult1670, "++", [1], var_slot);
  var string1673 = new GraceString("]);");
  var opresult1675 = callmethod(opresult1672, "++", [1], string1673);
  lineNumber = 511
  var call1676 = callmethod(this,"out", [1], opresult1675);
  var string1677 = new GraceString("  *var_");
  var opresult1679 = callmethod(string1677, "++", [1], var_van);
  var string1680 = new GraceString(" = var_init_");
  var opresult1682 = callmethod(opresult1679, "++", [1], string1680);
  var opresult1684 = callmethod(opresult1682, "++", [1], var_van);
  var string1685 = new GraceString(";");
  var opresult1687 = callmethod(opresult1684, "++", [1], string1685);
  lineNumber = 512
  var call1688 = callmethod(this,"out", [1], opresult1687);
  var call1689 = callmethod(var_declaredvars,"push", [1], var_van);
  lineNumber = 514
  lineNumber = 513
  var opresult1691 = callmethod(var_slot, "+", [1], new GraceNum(1));
  var_slot = opresult1691;
  lineNumber = 515
  lineNumber = 514
  var opresult1693 = callmethod(var_numslots, "+", [1], new GraceNum(1));
  var_numslots = opresult1693;
  var if1623 = opresult1693;
}
  return if1623;
};
  var call1694 = callmethod(Grace_prelude,"for()do", [1, 1], call1562, block1563);
  lineNumber = 517
  var string1695 = new GraceString("  Object *selfslot = &(stackframe->slots[");
  var opresult1697 = callmethod(string1695, "++", [1], var_slot);
  var string1698 = new GraceString("]);");
  var opresult1700 = callmethod(opresult1697, "++", [1], string1698);
  lineNumber = 518
  var call1701 = callmethod(this,"out", [1], opresult1700);
  var string1702 = new GraceString("  *selfslot = self;");
  lineNumber = 519
  var call1703 = callmethod(this,"out", [1], string1702);
  lineNumber = 520
  lineNumber = 519
  var opresult1705 = callmethod(var_slot, "+", [1], new GraceNum(1));
  var_slot = opresult1705;
  lineNumber = 521
  lineNumber = 520
  var opresult1707 = callmethod(var_numslots, "+", [1], new GraceNum(1));
  var_numslots = opresult1707;
  lineNumber = 522
  lineNumber = 521
  var string1708 = new GraceString("none");
  var var_ret = string1708;
  lineNumber = 522
  lineNumber = 1
  lineNumber = 522
  var call1709 = callmethod(var_o,"body", [0]);
  lineNumber = 523
  var call1710 = callmethod(this,"countbindings", [1], call1709);
  var opresult1712 = callmethod(var_numslots, "+", [1], call1710);
  var_numslots = opresult1712;
  lineNumber = 1
  lineNumber = 523
  var call1713 = callmethod(var_o,"body", [0]);
  lineNumber = 524
  var call1714 = callmethod(this,"definebindings", [2], call1713, var_slot);
  lineNumber = 525
  lineNumber = 524
  var bool1715 = new GraceBoolean(false)
  var var_tco = bool1715;
  lineNumber = 528
  lineNumber = 526
  lineNumber = 525
  lineNumber = 529
  lineNumber = 1
  lineNumber = 529
  lineNumber = 1
  lineNumber = 525
  var call1717 = callmethod(var_o,"body", [0]);
  var call1718 = callmethod(call1717,"size", [0]);
  var opresult1720 = callmethod(call1718, ">", [1], new GraceNum(0));
  var block1721 = Grace_allocObject();
  block1721.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1721.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1721.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1721.receiver = this;
  block1721.className = 'block<genc:525>';
  block1721.real = function(
) {
  lineNumber = 1
  lineNumber = 525
  lineNumber = 1
  lineNumber = 525
  lineNumber = 1
  lineNumber = 525
  var call1722 = callmethod(var_o,"body", [0]);
  var call1723 = callmethod(call1722,"last", [0]);
  var call1724 = callmethod(call1723,"kind", [0]);
  var string1725 = new GraceString("call");
  var opresult1727 = callmethod(call1724, "==", [1], string1725);
  return opresult1727;
};
  var opresult1729 = callmethod(opresult1720, "&&", [1], block1721);
  lineNumber = 526
  var block1730 = Grace_allocObject();
  block1730.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1730.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1730.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1730.receiver = this;
  block1730.className = 'block<genc:526>';
  block1730.real = function(
) {
  var string1731 = new GraceString("TailCall");
  lineNumber = 1
  lineNumber = 526
  var call1732 = callmethod(var_util,"extensions", [0]);
  var call1733 = callmethod(call1732,"contains", [1], string1731);
  return call1733;
};
  var opresult1735 = callmethod(opresult1729, "&&", [1], block1730);
  if (Grace_isTrue(opresult1735)) {
  lineNumber = 528
  lineNumber = 1
  lineNumber = 528
  lineNumber = 1
  lineNumber = 527
  var call1736 = callmethod(var_o,"body", [0]);
  var call1737 = callmethod(call1736,"pop", [0]);
  var_tco = call1737;
  var if1716 = call1737;
}
  lineNumber = 530
  lineNumber = 529
  lineNumber = 1
  lineNumber = 529
  var call1738 = callmethod(var_o,"body", [0]);
  lineNumber = 530
  var block1739 = Grace_allocObject();
  block1739.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1739.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1739.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1739.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1739.receiver = this;
  block1739.className = 'block<genc:530>';
  block1739.real = function(
var_l
) {
  lineNumber = 531
  var call1740 = callmethod(this,"compilenode", [1], var_l);
  var_ret = call1740;
  return call1740;
};
  var call1741 = callmethod(Grace_prelude,"for()do", [1, 1], call1738, block1739);
  lineNumber = 535
  lineNumber = 536
  lineNumber = 532
  var bool1743 = new GraceBoolean(false)
  var opresult1745 = callmethod(bool1743, "!=", [1], var_tco);
  if (Grace_isTrue(opresult1745)) {
  lineNumber = 533
  var bool1746 = new GraceBoolean(true)
  lineNumber = 534
  var call1747 = callmethod(this,"compilecall", [2], var_tco, bool1746);
  lineNumber = 535
  lineNumber = 1
  lineNumber = 534
  var call1748 = callmethod(var_tco,"register", [0]);
  var_ret = call1748;
  var if1742 = call1748;
}
  lineNumber = 536
  var string1749 = new GraceString("  gc_frame_end(frame);");
  lineNumber = 537
  var call1750 = callmethod(this,"out", [1], string1749);
  var string1751 = new GraceString("  return ");
  var opresult1753 = callmethod(string1751, "++", [1], var_ret);
  var string1754 = new GraceString(";");
  var opresult1756 = callmethod(opresult1753, "++", [1], string1754);
  lineNumber = 538
  var call1757 = callmethod(this,"out", [1], opresult1756);
  var string1758 = new GraceString("}");
  lineNumber = 539
  var call1759 = callmethod(this,"out", [1], string1758);
  lineNumber = 540
  lineNumber = 539
  var var_body = var_output;
  lineNumber = 540
  var call1760 = callmethod(this,"outswitchup", [0]);
  lineNumber = 542
  var array1761 = new GraceList([
]);

  var var_closurevars = array1761;
  lineNumber = 561
  lineNumber = 542
  lineNumber = 561
  var block1762 = Grace_allocObject();
  block1762.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1762.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1762.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1762.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1762.receiver = this;
  block1762.className = 'block<genc:561>';
  block1762.real = function(
var_u
) {
  lineNumber = 544
  lineNumber = 543
  var bool1763 = new GraceBoolean(false)
  var var_decl = bool1763;
  lineNumber = 547
  lineNumber = 544
  lineNumber = 547
  var block1764 = Grace_allocObject();
  block1764.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1764.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1764.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1764.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1764.receiver = this;
  block1764.className = 'block<genc:547>';
  block1764.real = function(
var_d
) {
  lineNumber = 548
  lineNumber = 545
  var opresult1767 = callmethod(var_d, "==", [1], var_u);
  if (Grace_isTrue(opresult1767)) {
  lineNumber = 547
  lineNumber = 546
  var bool1768 = new GraceBoolean(true)
  var_decl = bool1768;
  var if1765 = bool1768;
}
  return if1765;
};
  var call1769 = callmethod(Grace_prelude,"for()do", [1, 1], var_declaredvars, block1764);
  lineNumber = 561
  lineNumber = 549
  if (Grace_isTrue(var_decl)) {
  lineNumber = 551
  lineNumber = 550
  var_decl = var_decl;
  var if1770 = var_decl;
  } else {
  lineNumber = 553
  lineNumber = 552
  var bool1771 = new GraceBoolean(false)
  var var_found = bool1771;
  lineNumber = 556
  lineNumber = 553
  lineNumber = 556
  var block1772 = Grace_allocObject();
  block1772.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1772.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1772.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1772.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1772.receiver = this;
  block1772.className = 'block<genc:556>';
  block1772.real = function(
var_v
) {
  lineNumber = 557
  lineNumber = 554
  var opresult1775 = callmethod(var_v, "==", [1], var_u);
  if (Grace_isTrue(opresult1775)) {
  lineNumber = 556
  lineNumber = 555
  var bool1776 = new GraceBoolean(true)
  var_found = bool1776;
  var if1773 = bool1776;
}
  return if1773;
};
  var call1777 = callmethod(Grace_prelude,"for()do", [1, 1], var_closurevars, block1772);
  lineNumber = 561
  lineNumber = 558
  if (Grace_isTrue(var_found)) {
  lineNumber = 560
  lineNumber = 559
  var_found = var_found;
  var if1778 = var_found;
  } else {
  lineNumber = 561
  var call1779 = callmethod(var_closurevars,"push", [1], var_u);
  var if1778 = call1779;
}
  var if1770 = if1778;
}
  return if1770;
};
  var call1780 = callmethod(Grace_prelude,"for()do", [1, 1], var_usedvars, block1762);
  lineNumber = 566
  lineNumber = 568
  lineNumber = 1
  lineNumber = 565
  var call1782 = callmethod(var_o,"selfclosure", [0]);
  if (Grace_isTrue(call1782)) {
  lineNumber = 566
  var string1783 = new GraceString("self");
  var call1784 = callmethod(var_closurevars,"push", [1], string1783);
  var if1781 = call1784;
}
  lineNumber = 568
  var string1785 = new GraceString("meth_");
  var opresult1787 = callmethod(string1785, "++", [1], var_modname);
  var string1788 = new GraceString("_");
  var opresult1790 = callmethod(opresult1787, "++", [1], string1788);
  var call1791 = callmethod(this,"escapestring2", [1], var_nm);
  var opresult1793 = callmethod(opresult1790, "++", [1], call1791);
  var string1794 = new GraceString("");
  var opresult1796 = callmethod(opresult1793, "++", [1], string1794);
  lineNumber = 569
  var call1797 = callmethod(this,"escapeident", [1], opresult1796);
  var var_litname = call1797;
  lineNumber = 584
  lineNumber = 586
  lineNumber = 1
  lineNumber = 569
  var call1799 = callmethod(var_closurevars,"size", [0]);
  var opresult1801 = callmethod(call1799, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1801)) {
  lineNumber = 577
  lineNumber = 579
  lineNumber = 1
  lineNumber = 570
  var call1803 = callmethod(var_o,"selfclosure", [0]);
  if (Grace_isTrue(call1803)) {
  lineNumber = 572
  lineNumber = 571
  var string1804 = new GraceString("Object ");
  var opresult1806 = callmethod(string1804, "++", [1], var_litname);
  var string1807 = new GraceString("(Object realself, int nparts, int *argcv, ");
  var opresult1809 = callmethod(opresult1806, "++", [1], string1807);
  lineNumber = 572
  var string1810 = new GraceString("Object *args, int32_t flags) {");
  var opresult1812 = callmethod(opresult1809, "++", [1], string1810);
  lineNumber = 573
  var call1813 = callmethod(this,"out", [1], opresult1812);
  var string1814 = new GraceString("  struct UserObject *uo = (struct UserObject*)realself;");
  lineNumber = 574
  var call1815 = callmethod(this,"out", [1], string1814);
  var if1802 = call1815;
  } else {
  lineNumber = 576
  lineNumber = 575
  var string1816 = new GraceString("Object ");
  var opresult1818 = callmethod(string1816, "++", [1], var_litname);
  var string1819 = new GraceString("(Object self, int nparts, int *argcv, Object *args, ");
  var opresult1821 = callmethod(opresult1818, "++", [1], string1819);
  lineNumber = 576
  var string1822 = new GraceString("int32_t flags) {");
  var opresult1824 = callmethod(opresult1821, "++", [1], string1822);
  lineNumber = 577
  var call1825 = callmethod(this,"out", [1], opresult1824);
  var string1826 = new GraceString("  struct UserObject *uo = (struct UserObject*)self;");
  lineNumber = 578
  var call1827 = callmethod(this,"out", [1], string1826);
  var if1802 = call1827;
}
  lineNumber = 579
  var string1828 = new GraceString("  Object closure = getdatum((Object)uo, ");
  var opresult1830 = callmethod(string1828, "++", [1], var_pos);
  var string1831 = new GraceString(", (flags>>24)&0xff);");
  var opresult1833 = callmethod(opresult1830, "++", [1], string1831);
  lineNumber = 580
  var call1834 = callmethod(this,"out", [1], opresult1833);
  var string1835 = new GraceString("  struct StackFrameObject *stackframe = alloc_StackFrame(");
  var opresult1837 = callmethod(string1835, "++", [1], var_numslots);
  var string1838 = new GraceString(", getclosureframe(closure));");
  var opresult1840 = callmethod(opresult1837, "++", [1], string1838);
  lineNumber = 581
  var call1841 = callmethod(this,"out", [1], opresult1840);
  var if1798 = call1841;
  } else {
  lineNumber = 583
  lineNumber = 582
  var string1842 = new GraceString("Object ");
  var opresult1844 = callmethod(string1842, "++", [1], var_litname);
  var string1845 = new GraceString("(Object self, int nparts, int *argcv, Object *args, ");
  var opresult1847 = callmethod(opresult1844, "++", [1], string1845);
  lineNumber = 583
  var string1848 = new GraceString("int32_t flags) {");
  var opresult1850 = callmethod(opresult1847, "++", [1], string1848);
  lineNumber = 584
  var call1851 = callmethod(this,"out", [1], opresult1850);
  var string1852 = new GraceString("  struct StackFrameObject *stackframe = alloc_StackFrame(");
  var opresult1854 = callmethod(string1852, "++", [1], var_numslots);
  var string1855 = new GraceString(", NULL);");
  var opresult1857 = callmethod(opresult1854, "++", [1], string1855);
  lineNumber = 585
  var call1858 = callmethod(this,"out", [1], opresult1857);
  var if1798 = call1858;
}
  lineNumber = 586
  var string1859 = new GraceString("  int frame = gc_frame_new();");
  lineNumber = 587
  var call1860 = callmethod(this,"out", [1], string1859);
  var string1861 = new GraceString("  gc_frame_newslot((Object)stackframe);");
  lineNumber = 588
  var call1862 = callmethod(this,"out", [1], string1861);
  lineNumber = 592
  lineNumber = 588
  lineNumber = 1
  lineNumber = 588
  lineNumber = 1
  lineNumber = 588
  var call1863 = callmethod(var_o,"signature", [0]);
  var call1864 = callmethod(call1863,"indices", [0]);
  lineNumber = 592
  var block1865 = Grace_allocObject();
  block1865.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1865.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1865.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1865.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1865.receiver = this;
  block1865.className = 'block<genc:592>';
  block1865.real = function(
var_partnr
) {
  lineNumber = 590
  lineNumber = 1
  lineNumber = 589
  var call1866 = callmethod(var_o,"signature", [0]);
  var idxres1867 = call1866.methods["[]"].call(call1866, [1], var_partnr);
  var var_part = idxres1867;
  lineNumber = 592
  lineNumber = 594
  lineNumber = 1
  lineNumber = 594
  lineNumber = 1
  lineNumber = 590
  var call1869 = callmethod(var_part,"params", [0]);
  var call1870 = callmethod(call1869,"size", [0]);
  var opresult1872 = callmethod(call1870, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1872)) {
  lineNumber = 591
  var string1873 = new GraceString("  if (nparts > 0 && argcv[");
  var diff1875 = callmethod(var_partnr, "-", [1], new GraceNum(1));
  var opresult1877 = callmethod(string1873, "++", [1], diff1875);
  var string1878 = new GraceString("] < ");
  var opresult1880 = callmethod(opresult1877, "++", [1], string1878);
  lineNumber = 1
  lineNumber = 591
  lineNumber = 1
  lineNumber = 591
  var call1881 = callmethod(var_part,"params", [0]);
  var call1882 = callmethod(call1881,"size", [0]);
  var opresult1884 = callmethod(opresult1880, "++", [1], call1882);
  var string1885 = new GraceString(")");
  var opresult1887 = callmethod(opresult1884, "++", [1], string1885);
  lineNumber = 592
  var call1888 = callmethod(this,"out", [1], opresult1887);
  var string1889 = new GraceString("    gracedie(\"insufficient arguments to method\");");
  lineNumber = 593
  var call1890 = callmethod(this,"out", [1], string1889);
  var if1868 = call1890;
}
  return if1868;
};
  var call1891 = callmethod(Grace_prelude,"for()do", [1, 1], call1864, block1865);
  lineNumber = 600
  lineNumber = 599
  var var_i = new GraceNum(0);
  lineNumber = 601
  var array1892 = new GraceList([
]);

  var var_toremove = array1892;
  lineNumber = 605
  lineNumber = 601
  lineNumber = 1
  lineNumber = 601
  var call1893 = callmethod(var_o,"signature", [0]);
  lineNumber = 605
  var block1894 = Grace_allocObject();
  block1894.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1894.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1894.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1894.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1894.receiver = this;
  block1894.className = 'block<genc:605>';
  block1894.real = function(
var_part
) {
  lineNumber = 602
  lineNumber = 1
  lineNumber = 602
  var call1895 = callmethod(var_part,"params", [0]);
  lineNumber = 605
  var block1896 = Grace_allocObject();
  block1896.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1896.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1896.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1896.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1896.receiver = this;
  block1896.className = 'block<genc:605>';
  block1896.real = function(
var_p
) {
  lineNumber = 603
  lineNumber = 1
  lineNumber = 603
  var call1897 = callmethod(var_p,"value", [0]);
  lineNumber = 604
  var call1898 = callmethod(this,"escapeident", [1], call1897);
  var var_pn = call1898;
  lineNumber = 605
  lineNumber = 604
  var call1900 = callmethod(var_closurevars,"contains", [1], var_pn);
  if (Grace_isTrue(call1900)) {
  lineNumber = 605
  var call1901 = callmethod(var_toremove,"push", [1], var_pn);
  var if1899 = call1901;
}
  return if1899;
};
  var call1902 = callmethod(Grace_prelude,"for()do", [1, 1], call1895, block1896);
  return call1902;
};
  var call1903 = callmethod(Grace_prelude,"for()do", [1, 1], call1893, block1894);
  lineNumber = 610
  lineNumber = 609
  var var_origclosurevars = var_closurevars;
  lineNumber = 611
  var array1904 = new GraceList([
]);

  var_closurevars = array1904;
  lineNumber = 615
  lineNumber = 611
  lineNumber = 615
  var block1905 = Grace_allocObject();
  block1905.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1905.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1905.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1905.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1905.receiver = this;
  block1905.className = 'block<genc:615>';
  block1905.real = function(
var_pn
) {
  lineNumber = 612
  var call1907 = callmethod(var_toremove,"contains", [1], var_pn);
  if (Grace_isTrue(call1907)) {
  var if1906 = undefined;
  } else {
  lineNumber = 615
  var call1908 = callmethod(var_closurevars,"push", [1], var_pn);
  var if1906 = call1908;
}
  return if1906;
};
  var call1909 = callmethod(Grace_prelude,"for()do", [1, 1], var_origclosurevars, block1905);
  lineNumber = 618
  var string1910 = new GraceString("  Object params[");
  var opresult1912 = callmethod(string1910, "++", [1], var_paramsUsed);
  var string1913 = new GraceString("];");
  var opresult1915 = callmethod(opresult1912, "++", [1], string1913);
  lineNumber = 619
  var call1916 = callmethod(this,"out", [1], opresult1915);
  var string1917 = new GraceString("  int partcv[");
  var opresult1919 = callmethod(string1917, "++", [1], var_partsUsed);
  var string1920 = new GraceString("];");
  var opresult1922 = callmethod(opresult1919, "++", [1], string1920);
  lineNumber = 620
  var call1923 = callmethod(this,"out", [1], opresult1922);
  lineNumber = 621
  lineNumber = 620
  var var_j = new GraceNum(0);
  lineNumber = 628
  lineNumber = 621
  lineNumber = 628
  var block1924 = Grace_allocObject();
  block1924.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1924.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1924.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1924.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1924.receiver = this;
  block1924.className = 'block<genc:628>';
  block1924.real = function(
var_cv
) {
  lineNumber = 625
  lineNumber = 627
  lineNumber = 622
  var string1926 = new GraceString("self");
  var opresult1928 = callmethod(var_cv, "==", [1], string1926);
  if (Grace_isTrue(opresult1928)) {
  lineNumber = 623
  var string1929 = new GraceString("  Object self = *(getfromclosure(closure, ");
  var opresult1931 = callmethod(string1929, "++", [1], var_j);
  var string1932 = new GraceString("));");
  var opresult1934 = callmethod(opresult1931, "++", [1], string1932);
  lineNumber = 624
  var call1935 = callmethod(this,"out", [1], opresult1934);
  var if1925 = call1935;
  } else {
  lineNumber = 625
  var string1936 = new GraceString("  Object *var_");
  var opresult1938 = callmethod(string1936, "++", [1], var_cv);
  var string1939 = new GraceString(" = getfromclosure(closure, ");
  var opresult1941 = callmethod(opresult1938, "++", [1], string1939);
  var opresult1943 = callmethod(opresult1941, "++", [1], var_j);
  var string1944 = new GraceString(");");
  var opresult1946 = callmethod(opresult1943, "++", [1], string1944);
  lineNumber = 626
  var call1947 = callmethod(this,"out", [1], opresult1946);
  var if1925 = call1947;
}
  lineNumber = 628
  lineNumber = 627
  var opresult1949 = callmethod(var_j, "+", [1], new GraceNum(1));
  var_j = opresult1949;
  return opresult1949;
};
  var call1950 = callmethod(Grace_prelude,"for()do", [1, 1], var_closurevars, block1924);
  lineNumber = 630
  lineNumber = 629
  lineNumber = 630
  var block1951 = Grace_allocObject();
  block1951.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1951.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1951.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1951.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1951.receiver = this;
  block1951.className = 'block<genc:630>';
  block1951.real = function(
var_l
) {
  lineNumber = 631
  var call1952 = callmethod(this,"out", [1], var_l);
  return call1952;
};
  var call1953 = callmethod(Grace_prelude,"for()do", [1, 1], var_body, block1951);
  lineNumber = 632
  var call1954 = callmethod(this,"outswitchdown", [0]);
  lineNumber = 634
  lineNumber = 633
  var_output = var_oldout;
  lineNumber = 635
  lineNumber = 634
  var_bblock = var_oldbblock;
  lineNumber = 636
  lineNumber = 635
  var_usedvars = var_oldusedvars;
  lineNumber = 637
  lineNumber = 636
  var_declaredvars = var_olddeclaredvars;
  lineNumber = 640
  lineNumber = 637
  lineNumber = 640
  var block1955 = Grace_allocObject();
  block1955.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1955.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1955.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1955.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1955.receiver = this;
  block1955.className = 'block<genc:640>';
  block1955.real = function(
var_cv
) {
  lineNumber = 643
  lineNumber = 638
  var string1957 = new GraceString("self");
  var opresult1959 = callmethod(var_cv, "/=", [1], string1957);
  if (Grace_isTrue(opresult1959)) {
  lineNumber = 640
  lineNumber = 639
  lineNumber = 1
  lineNumber = 639
  var call1961 = callmethod(var_usedvars,"contains", [1], var_cv);
  var call1962 = callmethod(call1961,"not", [0]);
  if (Grace_isTrue(call1962)) {
  lineNumber = 640
  var call1963 = callmethod(var_usedvars,"push", [1], var_cv);
  var if1960 = call1963;
}
  var if1956 = if1960;
}
  return if1956;
};
  var call1964 = callmethod(Grace_prelude,"for()do", [1, 1], var_closurevars, block1955);
  lineNumber = 644
  var call1965 = Grace_length(var_name);
  var opresult1967 = callmethod(call1965, "+", [1], new GraceNum(1));
  var var_len = opresult1967;
  lineNumber = 672
  lineNumber = 675
  lineNumber = 645
  var bool1969 = new GraceBoolean(false)
  var opresult1971 = callmethod(var_selfobj, "==", [1], bool1969);
  if (Grace_isTrue(opresult1971)) {
  var if1968 = undefined;
  } else {
  lineNumber = 672
  lineNumber = 654
  lineNumber = 1
  lineNumber = 646
  var call1973 = callmethod(var_closurevars,"size", [0]);
  var opresult1975 = callmethod(call1973, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1975)) {
  lineNumber = 648
  lineNumber = 647
  var string1976 = new GraceString("uo");
  var opresult1978 = callmethod(string1976, "++", [1], var_myc);
  var string1979 = new GraceString("");
  var opresult1981 = callmethod(opresult1978, "++", [1], string1979);
  var var_uo2 = opresult1981;
  lineNumber = 648
  var string1982 = new GraceString("  struct UserObject *");
  var opresult1984 = callmethod(string1982, "++", [1], var_uo2);
  var string1985 = new GraceString(" = (struct UserObject*)");
  var opresult1987 = callmethod(opresult1984, "++", [1], string1985);
  var opresult1989 = callmethod(opresult1987, "++", [1], var_selfobj);
  var string1990 = new GraceString(";");
  var opresult1992 = callmethod(opresult1989, "++", [1], string1990);
  lineNumber = 649
  var call1993 = callmethod(this,"out", [1], opresult1992);
  var string1994 = new GraceString("  ");
  var opresult1996 = callmethod(string1994, "++", [1], var_uo2);
  var string1997 = new GraceString("->data[");
  var opresult1999 = callmethod(opresult1996, "++", [1], string1997);
  var opresult2001 = callmethod(opresult1999, "++", [1], var_pos);
  var string2002 = new GraceString("] = emptyclosure;");
  var opresult2004 = callmethod(opresult2001, "++", [1], string2002);
  lineNumber = 650
  var call2005 = callmethod(this,"out", [1], opresult2004);
  var string2006 = new GraceString("  Method *meth_");
  var opresult2008 = callmethod(string2006, "++", [1], var_litname);
  var string2009 = new GraceString(" = addmethod2pos(");
  var opresult2011 = callmethod(opresult2008, "++", [1], string2009);
  var opresult2013 = callmethod(opresult2011, "++", [1], var_selfobj);
  var string2014 = new GraceString(", \"");
  var opresult2016 = callmethod(opresult2013, "++", [1], string2014);
  var call2017 = callmethod(this,"escapestring2", [1], var_name);
  var opresult2019 = callmethod(opresult2016, "++", [1], call2017);
  var string2020 = new GraceString("\", &");
  var opresult2022 = callmethod(opresult2019, "++", [1], string2020);
  var opresult2024 = callmethod(opresult2022, "++", [1], var_litname);
  var string2025 = new GraceString(", ");
  var opresult2027 = callmethod(opresult2024, "++", [1], string2025);
  var opresult2029 = callmethod(opresult2027, "++", [1], var_pos);
  var string2030 = new GraceString(");");
  var opresult2032 = callmethod(opresult2029, "++", [1], string2030);
  lineNumber = 651
  var call2033 = callmethod(this,"out", [1], opresult2032);
  lineNumber = 652
  lineNumber = 651
  if (Grace_isTrue(var_haveTypedParams)) {
  lineNumber = 652
  lineNumber = 653
  var call2035 = callmethod(this,"compilemethodtypes", [2], var_litname, var_o);
  var if2034 = call2035;
}
  var if1972 = if2034;
  } else {
  lineNumber = 655
  var string2036 = new GraceString("  block_savedest(");
  var opresult2038 = callmethod(string2036, "++", [1], var_selfobj);
  var string2039 = new GraceString(");");
  var opresult2041 = callmethod(opresult2038, "++", [1], string2039);
  lineNumber = 656
  var call2042 = callmethod(this,"out", [1], opresult2041);
  lineNumber = 657
  lineNumber = 656
  var string2043 = new GraceString("  Object closure");
  var opresult2045 = callmethod(string2043, "++", [1], var_myc);
  var string2046 = new GraceString(" = createclosure(");
  var opresult2048 = callmethod(opresult2045, "++", [1], string2046);
  lineNumber = 657
  lineNumber = 1
  lineNumber = 657
  var call2049 = callmethod(var_closurevars,"size", [0]);
  var opresult2051 = callmethod(opresult2048, "++", [1], call2049);
  var string2052 = new GraceString(", \"");
  var call2053 = callmethod(this,"escapestring2", [1], var_name);
  var opresult2055 = callmethod(string2052, "++", [1], call2053);
  var string2056 = new GraceString("\");");
  var opresult2058 = callmethod(opresult2055, "++", [1], string2056);
  var opresult2060 = callmethod(opresult2051, "++", [1], opresult2058);
  lineNumber = 658
  var call2061 = callmethod(this,"out", [1], opresult2060);
  var string2062 = new GraceString("setclosureframe(closure");
  var opresult2064 = callmethod(string2062, "++", [1], var_myc);
  var string2065 = new GraceString(", stackframe);");
  var opresult2067 = callmethod(opresult2064, "++", [1], string2065);
  lineNumber = 659
  var call2068 = callmethod(this,"out", [1], opresult2067);
  lineNumber = 664
  lineNumber = 659
  lineNumber = 664
  var block2069 = Grace_allocObject();
  block2069.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2069.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2069.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2069.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2069.receiver = this;
  block2069.className = 'block<genc:664>';
  block2069.real = function(
var_v
) {
  lineNumber = 666
  lineNumber = 660
  var string2071 = new GraceString("self");
  var opresult2073 = callmethod(var_v, "==", [1], string2071);
  if (Grace_isTrue(opresult2073)) {
  lineNumber = 661
  var string2074 = new GraceString("  addtoclosure(closure");
  var opresult2076 = callmethod(string2074, "++", [1], var_myc);
  var string2077 = new GraceString(", selfslot);");
  var opresult2079 = callmethod(opresult2076, "++", [1], string2077);
  lineNumber = 662
  var call2080 = callmethod(this,"out", [1], opresult2079);
  lineNumber = 663
  lineNumber = 662
  var opresult2082 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2082;
  var if2070 = opresult2082;
  } else {
  lineNumber = 664
  var string2083 = new GraceString("  addtoclosure(closure");
  var opresult2085 = callmethod(string2083, "++", [1], var_myc);
  var string2086 = new GraceString(", var_");
  var opresult2088 = callmethod(opresult2085, "++", [1], string2086);
  var opresult2090 = callmethod(opresult2088, "++", [1], var_v);
  var string2091 = new GraceString(");");
  var opresult2093 = callmethod(opresult2090, "++", [1], string2091);
  lineNumber = 665
  var call2094 = callmethod(this,"out", [1], opresult2093);
  var if2070 = call2094;
}
  return if2070;
};
  var call2095 = callmethod(Grace_prelude,"for()do", [1, 1], var_closurevars, block2069);
  lineNumber = 668
  lineNumber = 667
  var string2096 = new GraceString("uo");
  var opresult2098 = callmethod(string2096, "++", [1], var_myc);
  var string2099 = new GraceString("");
  var opresult2101 = callmethod(opresult2098, "++", [1], string2099);
  var var_uo = opresult2101;
  lineNumber = 668
  var string2102 = new GraceString("  struct UserObject *");
  var opresult2104 = callmethod(string2102, "++", [1], var_uo);
  var string2105 = new GraceString(" = (struct UserObject*)");
  var opresult2107 = callmethod(opresult2104, "++", [1], string2105);
  var opresult2109 = callmethod(opresult2107, "++", [1], var_selfobj);
  var string2110 = new GraceString(";");
  var opresult2112 = callmethod(opresult2109, "++", [1], string2110);
  lineNumber = 669
  var call2113 = callmethod(this,"out", [1], opresult2112);
  var string2114 = new GraceString("  ");
  var opresult2116 = callmethod(string2114, "++", [1], var_uo);
  var string2117 = new GraceString("->data[");
  var opresult2119 = callmethod(opresult2116, "++", [1], string2117);
  var opresult2121 = callmethod(opresult2119, "++", [1], var_pos);
  var string2122 = new GraceString("] = (Object)closure");
  var opresult2124 = callmethod(opresult2121, "++", [1], string2122);
  var opresult2126 = callmethod(opresult2124, "++", [1], var_myc);
  var string2127 = new GraceString(";");
  var opresult2129 = callmethod(opresult2126, "++", [1], string2127);
  lineNumber = 670
  var call2130 = callmethod(this,"out", [1], opresult2129);
  var string2131 = new GraceString("  Method *meth_");
  var opresult2133 = callmethod(string2131, "++", [1], var_litname);
  var string2134 = new GraceString(" = addmethod2pos(");
  var opresult2136 = callmethod(opresult2133, "++", [1], string2134);
  var opresult2138 = callmethod(opresult2136, "++", [1], var_selfobj);
  var string2139 = new GraceString(", \"");
  var opresult2141 = callmethod(opresult2138, "++", [1], string2139);
  var call2142 = callmethod(this,"escapestring2", [1], var_name);
  var opresult2144 = callmethod(opresult2141, "++", [1], call2142);
  var string2145 = new GraceString("\", &");
  var opresult2147 = callmethod(opresult2144, "++", [1], string2145);
  var opresult2149 = callmethod(opresult2147, "++", [1], var_litname);
  var string2150 = new GraceString(", ");
  var opresult2152 = callmethod(opresult2149, "++", [1], string2150);
  var opresult2154 = callmethod(opresult2152, "++", [1], var_pos);
  var string2155 = new GraceString(");");
  var opresult2157 = callmethod(opresult2154, "++", [1], string2155);
  lineNumber = 671
  var call2158 = callmethod(this,"out", [1], opresult2157);
  lineNumber = 672
  lineNumber = 671
  if (Grace_isTrue(var_haveTypedParams)) {
  lineNumber = 672
  lineNumber = 673
  var call2160 = callmethod(this,"compilemethodtypes", [2], var_litname, var_o);
  var if2159 = call2160;
}
  var if1972 = if2159;
}
  var if1968 = if1972;
}
  lineNumber = 676
  lineNumber = 675
  var_inBlock = var_origInBlock;
  lineNumber = 677
  lineNumber = 676
  var_paramsUsed = var_origParamsUsed;
  lineNumber = 678
  lineNumber = 677
  var_partsUsed = var_origPartsUsed;
  return var_origPartsUsed
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilemethod"] = func1543;
  lineNumber = 709
var func2161 = function(argcv) {
  var curarg = 1;
  var var_litname = arguments[curarg];
  curarg++;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 681
  lineNumber = 680
  var string2162 = new GraceString("int argcv_");
  var opresult2164 = callmethod(string2162, "++", [1], var_litname);
  var string2165 = new GraceString("[] = {");
  var opresult2167 = callmethod(opresult2164, "++", [1], string2165);
  var var_argcv = opresult2167;
  lineNumber = 686
  lineNumber = 681
  lineNumber = 1
  lineNumber = 681
  lineNumber = 1
  lineNumber = 681
  var call2168 = callmethod(var_o,"signature", [0]);
  var call2169 = callmethod(call2168,"indices", [0]);
  lineNumber = 686
  var block2170 = Grace_allocObject();
  block2170.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2170.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2170.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2170.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2170.receiver = this;
  block2170.className = 'block<genc:686>';
  block2170.real = function(
var_partnr
) {
  lineNumber = 683
  lineNumber = 1
  lineNumber = 682
  var call2171 = callmethod(var_o,"signature", [0]);
  var idxres2172 = call2171.methods["[]"].call(call2171, [1], var_partnr);
  var var_part = idxres2172;
  lineNumber = 684
  lineNumber = 683
  lineNumber = 684
  lineNumber = 1
  lineNumber = 684
  lineNumber = 1
  lineNumber = 683
  var call2173 = callmethod(var_part,"params", [0]);
  var call2174 = callmethod(call2173,"size", [0]);
  var opresult2176 = callmethod(var_argcv, "++", [1], call2174);
  var_argcv = opresult2176;
  lineNumber = 686
  lineNumber = 687
  lineNumber = 684
  lineNumber = 687
  lineNumber = 1
  lineNumber = 687
  lineNumber = 1
  lineNumber = 684
  var call2178 = callmethod(var_o,"signature", [0]);
  var call2179 = callmethod(call2178,"size", [0]);
  var opresult2181 = callmethod(var_partnr, "<", [1], call2179);
  if (Grace_isTrue(opresult2181)) {
  lineNumber = 686
  lineNumber = 685
  var string2182 = new GraceString(", ");
  var opresult2184 = callmethod(var_argcv, "++", [1], string2182);
  var_argcv = opresult2184;
  var if2177 = opresult2184;
}
  return if2177;
};
  var call2185 = callmethod(Grace_prelude,"for()do", [1, 1], call2169, block2170);
  lineNumber = 689
  lineNumber = 688
  var string2186 = new GraceString("};");
  var opresult2188 = callmethod(var_argcv, "++", [1], string2186);
  var_argcv = opresult2188;
  lineNumber = 689
  lineNumber = 690
  var call2189 = callmethod(this,"out", [1], var_argcv);
  var string2190 = new GraceString("meth_");
  var opresult2192 = callmethod(string2190, "++", [1], var_litname);
  var string2193 = new GraceString("->type = alloc_MethodType(");
  var opresult2195 = callmethod(opresult2192, "++", [1], string2193);
  lineNumber = 1
  lineNumber = 690
  lineNumber = 1
  lineNumber = 690
  var call2196 = callmethod(var_o,"signature", [0]);
  var call2197 = callmethod(call2196,"size", [0]);
  var opresult2199 = callmethod(opresult2195, "++", [1], call2197);
  var string2200 = new GraceString(", argcv_");
  var opresult2202 = callmethod(opresult2199, "++", [1], string2200);
  var opresult2204 = callmethod(opresult2202, "++", [1], var_litname);
  var string2205 = new GraceString(");");
  var opresult2207 = callmethod(opresult2204, "++", [1], string2205);
  lineNumber = 691
  var call2208 = callmethod(this,"out", [1], opresult2207);
  lineNumber = 692
  lineNumber = 691
  var var_pi = new GraceNum(0);
  lineNumber = 709
  lineNumber = 692
  lineNumber = 1
  lineNumber = 692
  var call2209 = callmethod(var_o,"signature", [0]);
  lineNumber = 709
  var block2210 = Grace_allocObject();
  block2210.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2210.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2210.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2210.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2210.receiver = this;
  block2210.className = 'block<genc:709>';
  block2210.real = function(
var_part
) {
  lineNumber = 693
  lineNumber = 1
  lineNumber = 693
  var call2211 = callmethod(var_part,"params", [0]);
  lineNumber = 709
  var block2212 = Grace_allocObject();
  block2212.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2212.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2212.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2212.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2212.receiver = this;
  block2212.className = 'block<genc:709>';
  block2212.real = function(
var_p
) {
  lineNumber = 704
  lineNumber = 708
  lineNumber = 696
  var bool2214 = new GraceBoolean(false)
  lineNumber = 708
  lineNumber = 1
  lineNumber = 696
  var call2215 = callmethod(var_p,"dtype", [0]);
  var opresult2217 = callmethod(bool2214, "!=", [1], call2215);
  if (Grace_isTrue(opresult2217)) {
  lineNumber = 704
  lineNumber = 707
  lineNumber = 1
  lineNumber = 707
  lineNumber = 1
  lineNumber = 697
  var call2219 = callmethod(var_p,"dtype", [0]);
  var call2220 = callmethod(call2219,"kind", [0]);
  var string2221 = new GraceString("identifier");
  var opresult2223 = callmethod(call2220, "==", [1], string2221);
  lineNumber = 707
  lineNumber = 1
  lineNumber = 707
  lineNumber = 1
  lineNumber = 698
  var call2224 = callmethod(var_p,"dtype", [0]);
  var call2225 = callmethod(call2224,"kind", [0]);
  var string2226 = new GraceString("type");
  var opresult2228 = callmethod(call2225, "==", [1], string2226);
  var opresult2230 = callmethod(opresult2223, "||", [1], opresult2228);
  if (Grace_isTrue(opresult2230)) {
  lineNumber = 699
  lineNumber = 1
  lineNumber = 699
  lineNumber = 1
  lineNumber = 699
  var call2231 = callmethod(var_p,"dtype", [0]);
  var call2232 = callmethod(call2231,"value", [0]);
  lineNumber = 700
  var call2233 = callmethod(this,"escapeident", [1], call2232);
  var var_typeid = call2233;
  lineNumber = 704
  lineNumber = 700
  var call2235 = callmethod(var_topLevelTypes,"contains", [1], var_typeid);
  if (Grace_isTrue(call2235)) {
  lineNumber = 702
  lineNumber = 701
  var string2236 = new GraceString("meth_");
  var opresult2238 = callmethod(string2236, "++", [1], var_litname);
  var string2239 = new GraceString("->type->types[");
  var opresult2241 = callmethod(opresult2238, "++", [1], string2239);
  var opresult2243 = callmethod(opresult2241, "++", [1], var_pi);
  var string2244 = new GraceString("] ");
  var opresult2246 = callmethod(opresult2243, "++", [1], string2244);
  lineNumber = 702
  var string2247 = new GraceString("= type_");
  var opresult2249 = callmethod(string2247, "++", [1], var_typeid);
  var string2250 = new GraceString(";");
  var opresult2252 = callmethod(opresult2249, "++", [1], string2250);
  var opresult2254 = callmethod(opresult2246, "++", [1], opresult2252);
  lineNumber = 703
  var call2255 = callmethod(this,"out", [1], opresult2254);
  lineNumber = 704
  lineNumber = 703
  var string2256 = new GraceString("meth_");
  var opresult2258 = callmethod(string2256, "++", [1], var_litname);
  var string2259 = new GraceString("->type->names[");
  var opresult2261 = callmethod(opresult2258, "++", [1], string2259);
  var opresult2263 = callmethod(opresult2261, "++", [1], var_pi);
  var string2264 = new GraceString("] ");
  var opresult2266 = callmethod(opresult2263, "++", [1], string2264);
  lineNumber = 704
  var string2267 = new GraceString("= \"");
  lineNumber = 1
  lineNumber = 704
  var call2268 = callmethod(var_p,"value", [0]);
  var call2269 = callmethod(this,"escapestring2", [1], call2268);
  var opresult2271 = callmethod(string2267, "++", [1], call2269);
  var string2272 = new GraceString("\";");
  var opresult2274 = callmethod(opresult2271, "++", [1], string2272);
  var opresult2276 = callmethod(opresult2266, "++", [1], opresult2274);
  lineNumber = 705
  var call2277 = callmethod(this,"out", [1], opresult2276);
  var if2234 = call2277;
}
  var if2218 = if2234;
}
  var if2213 = if2218;
}
  lineNumber = 709
  lineNumber = 708
  var opresult2279 = callmethod(var_pi, "+", [1], new GraceNum(1));
  var_pi = opresult2279;
  return opresult2279;
};
  var call2280 = callmethod(Grace_prelude,"for()do", [1, 1], call2211, block2212);
  return call2280;
};
  var call2281 = callmethod(Grace_prelude,"for()do", [1, 1], call2209, block2210);
  return call2281
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilemethodtypes"] = func2161;
  lineNumber = 735
var func2282 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 714
  lineNumber = 713
  var var_myc = var_auto__95__count;
  lineNumber = 715
  lineNumber = 714
  var opresult2284 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2284;
  lineNumber = 715
  lineNumber = 1
  lineNumber = 715
  var call2285 = callmethod(var_o,"body", [0]);
  lineNumber = 716
  var call2286 = callmethod(this,"countbindings", [1], call2285);
  var var_numslots = call2286;
  var string2287 = new GraceString("  int while_cond");
  var opresult2289 = callmethod(string2287, "++", [1], var_myc);
  var string2290 = new GraceString(" = gc_frame_newslot(undefined);");
  var opresult2292 = callmethod(opresult2289, "++", [1], string2290);
  lineNumber = 717
  var call2293 = callmethod(this,"out", [1], opresult2292);
  var string2294 = new GraceString("struct StackFrameObject *whiletmpstackframe");
  var opresult2296 = callmethod(string2294, "++", [1], var_myc);
  var string2297 = new GraceString(" = stackframe;");
  var opresult2299 = callmethod(opresult2296, "++", [1], string2297);
  lineNumber = 718
  var call2300 = callmethod(this,"out", [1], opresult2299);
  var string2301 = new GraceString("  while (1) {");
  lineNumber = 719
  var call2302 = callmethod(this,"out", [1], string2301);
  var string2303 = new GraceString("  int while_frame");
  var opresult2305 = callmethod(string2303, "++", [1], var_myc);
  var string2306 = new GraceString(" = gc_frame_new();");
  var opresult2308 = callmethod(opresult2305, "++", [1], string2306);
  lineNumber = 720
  var call2309 = callmethod(this,"out", [1], opresult2308);
  var string2310 = new GraceString("stackframe = alloc_StackFrame(");
  var opresult2312 = callmethod(string2310, "++", [1], var_numslots);
  var string2313 = new GraceString(", whiletmpstackframe");
  var opresult2315 = callmethod(opresult2312, "++", [1], string2313);
  var opresult2317 = callmethod(opresult2315, "++", [1], var_myc);
  var string2318 = new GraceString(");");
  var opresult2320 = callmethod(opresult2317, "++", [1], string2318);
  lineNumber = 721
  var call2321 = callmethod(this,"out", [1], opresult2320);
  var string2322 = new GraceString("gc_frame_newslot(stackframe);");
  lineNumber = 722
  var call2323 = callmethod(this,"out", [1], string2322);
  lineNumber = 1
  lineNumber = 722
  var call2324 = callmethod(var_o,"value", [0]);
  lineNumber = 723
  var call2325 = callmethod(this,"compilenode", [1], call2324);
  var var_cond = call2325;
  var string2326 = new GraceString("    gc_frame_setslot(while_cond");
  var opresult2328 = callmethod(string2326, "++", [1], var_myc);
  var string2329 = new GraceString(", ");
  var opresult2331 = callmethod(opresult2328, "++", [1], string2329);
  var opresult2333 = callmethod(opresult2331, "++", [1], var_cond);
  var string2334 = new GraceString(");");
  var opresult2336 = callmethod(opresult2333, "++", [1], string2334);
  lineNumber = 724
  var call2337 = callmethod(this,"out", [1], opresult2336);
  var string2338 = new GraceString("    if (!istrue(");
  var opresult2340 = callmethod(string2338, "++", [1], var_cond);
  var string2341 = new GraceString(")) break;");
  var opresult2343 = callmethod(opresult2340, "++", [1], string2341);
  lineNumber = 725
  var call2344 = callmethod(this,"out", [1], opresult2343);
  lineNumber = 726
  lineNumber = 725
  var string2345 = new GraceString("null");
  var var_tret = string2345;
  lineNumber = 727
  lineNumber = 726
  var var_slot = new GraceNum(0);
  lineNumber = 727
  lineNumber = 1
  lineNumber = 727
  var call2346 = callmethod(var_o,"body", [0]);
  lineNumber = 728
  var call2347 = callmethod(this,"definebindings", [2], call2346, new GraceNum(0));
  lineNumber = 729
  lineNumber = 728
  lineNumber = 1
  lineNumber = 728
  var call2348 = callmethod(var_o,"body", [0]);
  lineNumber = 729
  var block2349 = Grace_allocObject();
  block2349.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2349.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2349.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2349.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2349.receiver = this;
  block2349.className = 'block<genc:729>';
  block2349.real = function(
var_l
) {
  lineNumber = 730
  var call2350 = callmethod(this,"compilenode", [1], var_l);
  var_tret = call2350;
  return call2350;
};
  var call2351 = callmethod(Grace_prelude,"for()do", [1, 1], call2348, block2349);
  lineNumber = 731
  var string2352 = new GraceString("  gc_frame_end(while_frame");
  var opresult2354 = callmethod(string2352, "++", [1], var_myc);
  var string2355 = new GraceString(");");
  var opresult2357 = callmethod(opresult2354, "++", [1], string2355);
  lineNumber = 732
  var call2358 = callmethod(this,"out", [1], opresult2357);
  var string2359 = new GraceString("  }");
  lineNumber = 733
  var call2360 = callmethod(this,"out", [1], string2359);
  var string2361 = new GraceString("stackframe = whiletmpstackframe");
  var opresult2363 = callmethod(string2361, "++", [1], var_myc);
  var string2364 = new GraceString(";");
  var opresult2366 = callmethod(opresult2363, "++", [1], string2364);
  lineNumber = 734
  var call2367 = callmethod(this,"out", [1], opresult2366);
  lineNumber = 735
  lineNumber = 1
  lineNumber = 734
  var string2368 = new GraceString("none");
  var call2369 = callmethod(var_o,"register:=", [1], string2368);
  return call2369
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilewhile"] = func2282;
  lineNumber = 771
var func2370 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 738
  lineNumber = 737
  var var_myc = var_auto__95__count;
  lineNumber = 739
  lineNumber = 738
  var opresult2372 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2372;
  lineNumber = 739
  lineNumber = 1
  lineNumber = 739
  var call2373 = callmethod(var_o,"value", [0]);
  lineNumber = 740
  var call2374 = callmethod(this,"compilenode", [1], call2373);
  var var_cond = call2374;
  var string2375 = new GraceString("  Object if");
  var opresult2377 = callmethod(string2375, "++", [1], var_myc);
  var string2378 = new GraceString(" = none;");
  var opresult2380 = callmethod(opresult2377, "++", [1], string2378);
  lineNumber = 741
  var call2381 = callmethod(this,"out", [1], opresult2380);
  var string2382 = new GraceString("struct StackFrameObject *iftmpstackframe");
  var opresult2384 = callmethod(string2382, "++", [1], var_myc);
  var string2385 = new GraceString(" = stackframe;");
  var opresult2387 = callmethod(opresult2384, "++", [1], string2385);
  lineNumber = 742
  var call2388 = callmethod(this,"out", [1], opresult2387);
  var string2389 = new GraceString("  if (istrue(");
  var opresult2391 = callmethod(string2389, "++", [1], var_cond);
  var string2392 = new GraceString(")) {");
  var opresult2394 = callmethod(opresult2391, "++", [1], string2392);
  lineNumber = 743
  var call2395 = callmethod(this,"out", [1], opresult2394);
  lineNumber = 1
  lineNumber = 743
  var call2396 = callmethod(var_o,"thenblock", [0]);
  lineNumber = 744
  var call2397 = callmethod(this,"countbindings", [1], call2396);
  var var_numslots = call2397;
  var string2398 = new GraceString("stackframe = alloc_StackFrame(");
  var opresult2400 = callmethod(string2398, "++", [1], var_numslots);
  var string2401 = new GraceString(", iftmpstackframe");
  var opresult2403 = callmethod(opresult2400, "++", [1], string2401);
  var opresult2405 = callmethod(opresult2403, "++", [1], var_myc);
  var string2406 = new GraceString(");");
  var opresult2408 = callmethod(opresult2405, "++", [1], string2406);
  lineNumber = 745
  var call2409 = callmethod(this,"out", [1], opresult2408);
  var string2410 = new GraceString("gc_frame_newslot(stackframe);");
  lineNumber = 746
  var call2411 = callmethod(this,"out", [1], string2410);
  lineNumber = 747
  lineNumber = 746
  var string2412 = new GraceString("none");
  var var_tret = string2412;
  lineNumber = 748
  lineNumber = 747
  var string2413 = new GraceString("none");
  var var_fret = string2413;
  lineNumber = 749
  lineNumber = 748
  var string2414 = new GraceString("ERROR");
  var var_tblock = string2414;
  lineNumber = 750
  lineNumber = 749
  var string2415 = new GraceString("ERROR");
  var var_fblock = string2415;
  lineNumber = 750
  lineNumber = 1
  lineNumber = 750
  var call2416 = callmethod(var_o,"thenblock", [0]);
  lineNumber = 751
  var call2417 = callmethod(this,"definebindings", [2], call2416, new GraceNum(0));
  lineNumber = 752
  lineNumber = 751
  lineNumber = 1
  lineNumber = 751
  var call2418 = callmethod(var_o,"thenblock", [0]);
  lineNumber = 752
  var block2419 = Grace_allocObject();
  block2419.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2419.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2419.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2419.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2419.receiver = this;
  block2419.className = 'block<genc:752>';
  block2419.real = function(
var_l
) {
  lineNumber = 753
  var call2420 = callmethod(this,"compilenode", [1], var_l);
  var_tret = call2420;
  return call2420;
};
  var call2421 = callmethod(Grace_prelude,"for()do", [1, 1], call2418, block2419);
  lineNumber = 754
  var string2422 = new GraceString("    gc_frame_newslot(");
  var opresult2424 = callmethod(string2422, "++", [1], var_tret);
  var string2425 = new GraceString(");");
  var opresult2427 = callmethod(opresult2424, "++", [1], string2425);
  lineNumber = 755
  var call2428 = callmethod(this,"out", [1], opresult2427);
  var string2429 = new GraceString("    if");
  var opresult2431 = callmethod(string2429, "++", [1], var_myc);
  var string2432 = new GraceString(" = ");
  var opresult2434 = callmethod(opresult2431, "++", [1], string2432);
  var opresult2436 = callmethod(opresult2434, "++", [1], var_tret);
  var string2437 = new GraceString(";");
  var opresult2439 = callmethod(opresult2436, "++", [1], string2437);
  lineNumber = 756
  var call2440 = callmethod(this,"out", [1], opresult2439);
  var string2441 = new GraceString("  } else {");
  lineNumber = 757
  var call2442 = callmethod(this,"out", [1], string2441);
  lineNumber = 766
  lineNumber = 768
  lineNumber = 1
  lineNumber = 768
  lineNumber = 1
  lineNumber = 757
  var call2444 = callmethod(var_o,"elseblock", [0]);
  var call2445 = callmethod(call2444,"size", [0]);
  var opresult2447 = callmethod(call2445, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult2447)) {
  lineNumber = 758
  lineNumber = 1
  lineNumber = 758
  var call2448 = callmethod(var_o,"elseblock", [0]);
  lineNumber = 759
  var call2449 = callmethod(this,"countbindings", [1], call2448);
  var_numslots = call2449;
  var string2450 = new GraceString("stackframe = alloc_StackFrame(");
  var opresult2452 = callmethod(string2450, "++", [1], var_numslots);
  var string2453 = new GraceString(", iftmpstackframe");
  var opresult2455 = callmethod(opresult2452, "++", [1], string2453);
  var opresult2457 = callmethod(opresult2455, "++", [1], var_myc);
  var string2458 = new GraceString(");");
  var opresult2460 = callmethod(opresult2457, "++", [1], string2458);
  lineNumber = 760
  var call2461 = callmethod(this,"out", [1], opresult2460);
  var string2462 = new GraceString("gc_frame_newslot(stackframe);");
  lineNumber = 761
  var call2463 = callmethod(this,"out", [1], string2462);
  lineNumber = 1
  lineNumber = 761
  var call2464 = callmethod(var_o,"elseblock", [0]);
  lineNumber = 762
  var call2465 = callmethod(this,"definebindings", [2], call2464, new GraceNum(0));
  lineNumber = 763
  lineNumber = 762
  lineNumber = 1
  lineNumber = 762
  var call2466 = callmethod(var_o,"elseblock", [0]);
  lineNumber = 763
  var block2467 = Grace_allocObject();
  block2467.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2467.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2467.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2467.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2467.receiver = this;
  block2467.className = 'block<genc:763>';
  block2467.real = function(
var_l
) {
  lineNumber = 764
  var call2468 = callmethod(this,"compilenode", [1], var_l);
  var_fret = call2468;
  return call2468;
};
  var call2469 = callmethod(Grace_prelude,"for()do", [1, 1], call2466, block2467);
  lineNumber = 765
  var string2470 = new GraceString("    gc_frame_newslot(");
  var opresult2472 = callmethod(string2470, "++", [1], var_fret);
  var string2473 = new GraceString(");");
  var opresult2475 = callmethod(opresult2472, "++", [1], string2473);
  lineNumber = 766
  var call2476 = callmethod(this,"out", [1], opresult2475);
  var string2477 = new GraceString("    if");
  var opresult2479 = callmethod(string2477, "++", [1], var_myc);
  var string2480 = new GraceString(" = ");
  var opresult2482 = callmethod(opresult2479, "++", [1], string2480);
  var opresult2484 = callmethod(opresult2482, "++", [1], var_fret);
  var string2485 = new GraceString(";");
  var opresult2487 = callmethod(opresult2484, "++", [1], string2485);
  lineNumber = 767
  var call2488 = callmethod(this,"out", [1], opresult2487);
  var if2443 = call2488;
}
  lineNumber = 768
  var string2489 = new GraceString("  }");
  lineNumber = 769
  var call2490 = callmethod(this,"out", [1], string2489);
  var string2491 = new GraceString("stackframe = iftmpstackframe");
  var opresult2493 = callmethod(string2491, "++", [1], var_myc);
  var string2494 = new GraceString(";");
  var opresult2496 = callmethod(opresult2493, "++", [1], string2494);
  lineNumber = 770
  var call2497 = callmethod(this,"out", [1], opresult2496);
  lineNumber = 771
  lineNumber = 1
  lineNumber = 771
  lineNumber = 770
  var string2498 = new GraceString("if");
  var opresult2500 = callmethod(string2498, "++", [1], var_myc);
  var call2501 = callmethod(var_o,"register:=", [1], opresult2500);
  return call2501
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileifexpr"] = func2370;
  lineNumber = 800
var func2502 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 774
  lineNumber = 776
  lineNumber = 1
  lineNumber = 773
  var call2504 = callmethod(var_o,"handledIdentifiers", [0]);
  var bool2505 = new GraceBoolean(false)
  var opresult2507 = callmethod(call2504, "==", [1], bool2505);
  if (Grace_isTrue(opresult2507)) {
  lineNumber = 774
  lineNumber = 775
  var call2508 = callmethod(this,"compileifexpr", [1], var_o);
  return call2508
  var if2503 = undefined;
}
  lineNumber = 777
  lineNumber = 776
  var var_myc = var_auto__95__count;
  lineNumber = 778
  lineNumber = 777
  var opresult2510 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2510;
  lineNumber = 778
  lineNumber = 1
  lineNumber = 778
  var call2511 = callmethod(var_o,"value", [0]);
  lineNumber = 779
  var call2512 = callmethod(this,"compilenode", [1], call2511);
  var var_cond = call2512;
  var string2513 = new GraceString("  Object if");
  var opresult2515 = callmethod(string2513, "++", [1], var_myc);
  var string2516 = new GraceString(" = none;");
  var opresult2518 = callmethod(opresult2515, "++", [1], string2516);
  lineNumber = 780
  var call2519 = callmethod(this,"out", [1], opresult2518);
  var string2520 = new GraceString("  if (istrue(");
  var opresult2522 = callmethod(string2520, "++", [1], var_cond);
  var string2523 = new GraceString(")) {");
  var opresult2525 = callmethod(opresult2522, "++", [1], string2523);
  lineNumber = 781
  var call2526 = callmethod(this,"out", [1], opresult2525);
  lineNumber = 782
  lineNumber = 781
  var string2527 = new GraceString("none");
  var var_tret = string2527;
  lineNumber = 783
  lineNumber = 782
  var string2528 = new GraceString("none");
  var var_fret = string2528;
  lineNumber = 784
  lineNumber = 783
  var string2529 = new GraceString("ERROR");
  var var_tblock = string2529;
  lineNumber = 785
  lineNumber = 784
  var string2530 = new GraceString("ERROR");
  var var_fblock = string2530;
  lineNumber = 786
  lineNumber = 785
  lineNumber = 1
  lineNumber = 785
  var call2531 = callmethod(var_o,"thenblock", [0]);
  lineNumber = 786
  var block2532 = Grace_allocObject();
  block2532.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2532.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2532.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2532.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2532.receiver = this;
  block2532.className = 'block<genc:786>';
  block2532.real = function(
var_l
) {
  lineNumber = 787
  var call2533 = callmethod(this,"compilenode", [1], var_l);
  var_tret = call2533;
  return call2533;
};
  var call2534 = callmethod(Grace_prelude,"for()do", [1, 1], call2531, block2532);
  lineNumber = 788
  var string2535 = new GraceString("    gc_frame_newslot(");
  var opresult2537 = callmethod(string2535, "++", [1], var_tret);
  var string2538 = new GraceString(");");
  var opresult2540 = callmethod(opresult2537, "++", [1], string2538);
  lineNumber = 789
  var call2541 = callmethod(this,"out", [1], opresult2540);
  var string2542 = new GraceString("    if");
  var opresult2544 = callmethod(string2542, "++", [1], var_myc);
  var string2545 = new GraceString(" = ");
  var opresult2547 = callmethod(opresult2544, "++", [1], string2545);
  var opresult2549 = callmethod(opresult2547, "++", [1], var_tret);
  var string2550 = new GraceString(";");
  var opresult2552 = callmethod(opresult2549, "++", [1], string2550);
  lineNumber = 790
  var call2553 = callmethod(this,"out", [1], opresult2552);
  var string2554 = new GraceString("  } else {");
  lineNumber = 791
  var call2555 = callmethod(this,"out", [1], string2554);
  lineNumber = 796
  lineNumber = 798
  lineNumber = 1
  lineNumber = 798
  lineNumber = 1
  lineNumber = 791
  var call2557 = callmethod(var_o,"elseblock", [0]);
  var call2558 = callmethod(call2557,"size", [0]);
  var opresult2560 = callmethod(call2558, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult2560)) {
  lineNumber = 793
  lineNumber = 792
  lineNumber = 1
  lineNumber = 792
  var call2561 = callmethod(var_o,"elseblock", [0]);
  lineNumber = 793
  var block2562 = Grace_allocObject();
  block2562.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2562.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2562.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2562.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2562.receiver = this;
  block2562.className = 'block<genc:793>';
  block2562.real = function(
var_l
) {
  lineNumber = 794
  var call2563 = callmethod(this,"compilenode", [1], var_l);
  var_fret = call2563;
  return call2563;
};
  var call2564 = callmethod(Grace_prelude,"for()do", [1, 1], call2561, block2562);
  lineNumber = 795
  var string2565 = new GraceString("    gc_frame_newslot(");
  var opresult2567 = callmethod(string2565, "++", [1], var_fret);
  var string2568 = new GraceString(");");
  var opresult2570 = callmethod(opresult2567, "++", [1], string2568);
  lineNumber = 796
  var call2571 = callmethod(this,"out", [1], opresult2570);
  var string2572 = new GraceString("    if");
  var opresult2574 = callmethod(string2572, "++", [1], var_myc);
  var string2575 = new GraceString(" = ");
  var opresult2577 = callmethod(opresult2574, "++", [1], string2575);
  var opresult2579 = callmethod(opresult2577, "++", [1], var_fret);
  var string2580 = new GraceString(";");
  var opresult2582 = callmethod(opresult2579, "++", [1], string2580);
  lineNumber = 797
  var call2583 = callmethod(this,"out", [1], opresult2582);
  var if2556 = call2583;
}
  lineNumber = 798
  var string2584 = new GraceString("  }");
  lineNumber = 799
  var call2585 = callmethod(this,"out", [1], string2584);
  lineNumber = 800
  lineNumber = 1
  lineNumber = 800
  lineNumber = 799
  var string2586 = new GraceString("if");
  var opresult2588 = callmethod(string2586, "++", [1], var_myc);
  var call2589 = callmethod(var_o,"register:=", [1], opresult2588);
  return call2589
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileif"] = func2502;
  lineNumber = 821
var func2590 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 802
  lineNumber = 1
  lineNumber = 802
  var call2591 = callmethod(var_o,"value", [0]);
  lineNumber = 803
  var call2592 = callmethod(this,"escapeident", [1], call2591);
  var var_name = call2592;
  lineNumber = 821
  lineNumber = 823
  lineNumber = 803
  var string2594 = new GraceString("self");
  var opresult2596 = callmethod(var_name, "==", [1], string2594);
  if (Grace_isTrue(opresult2596)) {
  lineNumber = 805
  lineNumber = 1
  lineNumber = 804
  var string2597 = new GraceString("self");
  var call2598 = callmethod(var_o,"register:=", [1], string2597);
  var if2593 = call2598;
  } else {
  lineNumber = 821
  lineNumber = 810
  lineNumber = 805
  var string2600 = new GraceString("__compilerRevision");
  var opresult2602 = callmethod(var_name, "==", [1], string2600);
  if (Grace_isTrue(opresult2602)) {
  lineNumber = 807
  lineNumber = 806
  var string2603 = new GraceString("  Object var_val___compilerRevision");
  var opresult2605 = callmethod(string2603, "++", [1], var_auto__95__count);
  lineNumber = 807
  var string2606 = new GraceString(" = alloc_String(compilerRevision);");
  var opresult2608 = callmethod(opresult2605, "++", [1], string2606);
  lineNumber = 808
  var call2609 = callmethod(this,"out", [1], opresult2608);
  lineNumber = 809
  lineNumber = 1
  lineNumber = 809
  lineNumber = 808
  var string2610 = new GraceString("var_val___compilerRevision");
  var opresult2612 = callmethod(string2610, "++", [1], var_auto__95__count);
  var call2613 = callmethod(var_o,"register:=", [1], opresult2612);
  lineNumber = 810
  lineNumber = 809
  var opresult2615 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2615;
  var if2599 = opresult2615;
  } else {
  lineNumber = 821
  lineNumber = 814
  lineNumber = 810
  var string2617 = new GraceString("_46__46__46_");
  var opresult2619 = callmethod(var_name, "==", [1], string2617);
  if (Grace_isTrue(opresult2619)) {
  lineNumber = 811
  var string2620 = new GraceString("  Object ellipsis");
  var opresult2622 = callmethod(string2620, "++", [1], var_auto__95__count);
  var string2623 = new GraceString(" = alloc_ellipsis();");
  var opresult2625 = callmethod(opresult2622, "++", [1], string2623);
  lineNumber = 812
  var call2626 = callmethod(this,"out", [1], opresult2625);
  lineNumber = 813
  lineNumber = 1
  lineNumber = 813
  lineNumber = 812
  var string2627 = new GraceString("ellipsis");
  var opresult2629 = callmethod(string2627, "++", [1], var_auto__95__count);
  var string2630 = new GraceString("");
  var opresult2632 = callmethod(opresult2629, "++", [1], string2630);
  var call2633 = callmethod(var_o,"register:=", [1], opresult2632);
  lineNumber = 814
  lineNumber = 813
  var opresult2635 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2635;
  var if2616 = opresult2635;
  } else {
  lineNumber = 815
  lineNumber = 816
  var call2636 = callmethod(this,"escapestring2", [1], var_name);
  var_name = call2636;
  lineNumber = 821
  lineNumber = 816
  var call2638 = callmethod(var_modules,"contains", [1], var_name);
  if (Grace_isTrue(call2638)) {
  lineNumber = 818
  lineNumber = 1
  lineNumber = 818
  lineNumber = 817
  var string2639 = new GraceString("module_");
  var opresult2641 = callmethod(string2639, "++", [1], var_name);
  var call2642 = callmethod(var_o,"register:=", [1], opresult2641);
  var if2637 = call2642;
  } else {
  lineNumber = 819
  var call2643 = callmethod(var_usedvars,"push", [1], var_name);
  lineNumber = 821
  lineNumber = 1
  lineNumber = 821
  lineNumber = 820
  var string2644 = new GraceString("*var_");
  var opresult2646 = callmethod(string2644, "++", [1], var_name);
  var string2647 = new GraceString("");
  var opresult2649 = callmethod(opresult2646, "++", [1], string2647);
  var call2650 = callmethod(var_o,"register:=", [1], opresult2649);
  var if2637 = call2650;
}
  var if2616 = if2637;
}
  var if2599 = if2616;
}
  var if2593 = if2599;
}
  return if2593
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileidentifier"] = func2590;
  lineNumber = 851
var func2651 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 826
  lineNumber = 1
  lineNumber = 825
  var call2652 = callmethod(var_o,"dest", [0]);
  var var_dest = call2652;
  lineNumber = 827
  lineNumber = 826
  var string2653 = new GraceString("");
  var var_val = string2653;
  lineNumber = 828
  lineNumber = 827
  var string2654 = new GraceString("");
  var var_c = string2654;
  lineNumber = 829
  lineNumber = 828
  var string2655 = new GraceString("");
  var var_r = string2655;
  lineNumber = 849
  lineNumber = 850
  lineNumber = 1
  lineNumber = 829
  var call2657 = callmethod(var_dest,"kind", [0]);
  var string2658 = new GraceString("identifier");
  var opresult2660 = callmethod(call2657, "==", [1], string2658);
  if (Grace_isTrue(opresult2660)) {
  lineNumber = 831
  lineNumber = 1
  lineNumber = 830
  var call2661 = callmethod(var_o,"value", [0]);
  var_val = call2661;
  lineNumber = 831
  lineNumber = 832
  var call2662 = callmethod(this,"compilenode", [1], var_val);
  var_val = call2662;
  lineNumber = 1
  lineNumber = 832
  var call2663 = callmethod(var_dest,"value", [0]);
  lineNumber = 833
  var call2664 = callmethod(this,"escapeident", [1], call2663);
  var var_nm = call2664;
  var call2665 = callmethod(var_usedvars,"push", [1], var_nm);
  lineNumber = 834
  var string2666 = new GraceString("  *var_");
  var opresult2668 = callmethod(string2666, "++", [1], var_nm);
  var string2669 = new GraceString(" = ");
  var opresult2671 = callmethod(opresult2668, "++", [1], string2669);
  var opresult2673 = callmethod(opresult2671, "++", [1], var_val);
  var string2674 = new GraceString(";");
  var opresult2676 = callmethod(opresult2673, "++", [1], string2674);
  lineNumber = 835
  var call2677 = callmethod(this,"out", [1], opresult2676);
  var string2678 = new GraceString("  if (");
  var opresult2680 = callmethod(string2678, "++", [1], var_val);
  var string2681 = new GraceString(" == undefined)");
  var opresult2683 = callmethod(opresult2680, "++", [1], string2681);
  lineNumber = 836
  var call2684 = callmethod(this,"out", [1], opresult2683);
  var string2685 = new GraceString("    callmethod(none, \"assignment\", 0, NULL, NULL);");
  lineNumber = 837
  var call2686 = callmethod(this,"out", [1], string2685);
  lineNumber = 838
  lineNumber = 837
  var opresult2688 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2688;
  lineNumber = 839
  lineNumber = 1
  lineNumber = 838
  var call2689 = callmethod(var_o,"register:=", [1], var_val);
  var if2656 = call2689;
  } else {
  lineNumber = 849
  lineNumber = 844
  lineNumber = 1
  lineNumber = 839
  var call2691 = callmethod(var_dest,"kind", [0]);
  var string2692 = new GraceString("member");
  var opresult2694 = callmethod(call2691, "==", [1], string2692);
  if (Grace_isTrue(opresult2694)) {
  lineNumber = 841
  lineNumber = 1
  lineNumber = 841
  lineNumber = 1
  lineNumber = 840
  var call2695 = callmethod(var_dest,"value", [0]);
  var string2696 = new GraceString(":=");
  var opresult2698 = callmethod(call2695, "++", [1], string2696);
  var call2699 = callmethod(var_dest,"value:=", [1], opresult2698);
  lineNumber = 841
  lineNumber = 1
  lineNumber = 841
  var call2701 = callmethod(var_dest,"value", [0]);
  lineNumber = 1
  lineNumber = 841
  var call2703 = callmethod(var_o,"value", [0]);
  var array2702 = new GraceList([
call2703,
]);

  lineNumber = 1
  lineNumber = 841
  var call2704 = callmethod(var_ast,"callWithPart", [0]);
  var call2705 = callmethod(call2704,"new", [2], call2701, array2702);
  var array2700 = new GraceList([
call2705,
]);

  lineNumber = 842
  lineNumber = 1
  lineNumber = 841
  var call2706 = callmethod(var_ast,"callNode", [0]);
  var call2707 = callmethod(call2706,"new", [2], var_dest, array2700);
  var_c = call2707;
  lineNumber = 842
  lineNumber = 843
  var call2708 = callmethod(this,"compilenode", [1], var_c);
  var_r = call2708;
  lineNumber = 844
  lineNumber = 1
  lineNumber = 843
  var call2709 = callmethod(var_o,"register:=", [1], var_r);
  var if2690 = call2709;
  } else {
  lineNumber = 849
  lineNumber = 850
  lineNumber = 1
  lineNumber = 844
  var call2711 = callmethod(var_dest,"kind", [0]);
  var string2712 = new GraceString("index");
  var opresult2714 = callmethod(call2711, "==", [1], string2712);
  if (Grace_isTrue(opresult2714)) {
  lineNumber = 845
  var string2715 = new GraceString("[]:=");
  lineNumber = 1
  lineNumber = 845
  var call2716 = callmethod(var_dest,"value", [0]);
  lineNumber = 846
  lineNumber = 1
  lineNumber = 845
  var call2717 = callmethod(var_ast,"memberNode", [0]);
  var call2718 = callmethod(call2717,"new", [2], string2715, call2716);
  var var_imem = call2718;
  lineNumber = 846
  lineNumber = 1
  lineNumber = 846
  var call2720 = callmethod(var_imem,"value", [0]);
  lineNumber = 1
  lineNumber = 846
  var call2722 = callmethod(var_dest,"index", [0]);
  lineNumber = 1
  lineNumber = 846
  var call2723 = callmethod(var_o,"value", [0]);
  var array2721 = new GraceList([
call2722,
call2723,
]);

  lineNumber = 1
  lineNumber = 846
  var call2724 = callmethod(var_ast,"callWithPart", [0]);
  var call2725 = callmethod(call2724,"new", [2], call2720, array2721);
  var array2719 = new GraceList([
call2725,
]);

  lineNumber = 847
  lineNumber = 1
  lineNumber = 846
  var call2726 = callmethod(var_ast,"callNode", [0]);
  var call2727 = callmethod(call2726,"new", [2], var_imem, array2719);
  var_c = call2727;
  lineNumber = 847
  lineNumber = 848
  var call2728 = callmethod(this,"compilenode", [1], var_c);
  var_r = call2728;
  lineNumber = 849
  lineNumber = 1
  lineNumber = 848
  var call2729 = callmethod(var_o,"register:=", [1], var_r);
  var if2710 = call2729;
}
  var if2690 = if2710;
}
  var if2656 = if2690;
}
  lineNumber = 851
  lineNumber = 1
  lineNumber = 850
  var string2730 = new GraceString("none");
  var call2731 = callmethod(var_o,"register:=", [1], string2730);
  return call2731
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilebind"] = func2651;
  lineNumber = 873
var func2732 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 854
  var var_nm;
  lineNumber = 857
  lineNumber = 859
  lineNumber = 1
  lineNumber = 859
  lineNumber = 1
  lineNumber = 854
  var call2734 = callmethod(var_o,"name", [0]);
  var call2735 = callmethod(call2734,"kind", [0]);
  var string2736 = new GraceString("generic");
  var opresult2738 = callmethod(call2735, "==", [1], string2736);
  if (Grace_isTrue(opresult2738)) {
  lineNumber = 855
  lineNumber = 1
  lineNumber = 855
  lineNumber = 1
  lineNumber = 855
  lineNumber = 1
  lineNumber = 855
  var call2739 = callmethod(var_o,"name", [0]);
  var call2740 = callmethod(call2739,"value", [0]);
  var call2741 = callmethod(call2740,"value", [0]);
  lineNumber = 856
  var call2742 = callmethod(this,"escapeident", [1], call2741);
  var_nm = call2742;
  var if2733 = call2742;
  } else {
  lineNumber = 857
  lineNumber = 1
  lineNumber = 857
  lineNumber = 1
  lineNumber = 857
  var call2743 = callmethod(var_o,"name", [0]);
  var call2744 = callmethod(call2743,"value", [0]);
  lineNumber = 858
  var call2745 = callmethod(this,"escapeident", [1], call2744);
  var_nm = call2745;
  var if2733 = call2745;
}
  lineNumber = 859
  var call2746 = callmethod(var_declaredvars,"push", [1], var_nm);
  lineNumber = 861
  lineNumber = 1
  lineNumber = 860
  var call2747 = callmethod(var_o,"value", [0]);
  var var_val = call2747;
  lineNumber = 864
  lineNumber = 866
  lineNumber = 861
  var bool2749 = new GraceBoolean(false)
  var opresult2751 = callmethod(bool2749, "!=", [1], var_val);
  if (Grace_isTrue(opresult2751)) {
  lineNumber = 862
  lineNumber = 863
  var call2752 = callmethod(this,"compilenode", [1], var_val);
  var_val = call2752;
  var if2748 = call2752;
  } else {
  lineNumber = 864
  var string2753 = new GraceString("const must have value bound.");
  var call2754 = callmethod(var_util,"syntax_error", [1], string2753);
  var if2748 = call2754;
}
  lineNumber = 866
  var string2755 = new GraceString("  *var_");
  var opresult2757 = callmethod(string2755, "++", [1], var_nm);
  var string2758 = new GraceString(" = ");
  var opresult2760 = callmethod(opresult2757, "++", [1], string2758);
  var opresult2762 = callmethod(opresult2760, "++", [1], var_val);
  var string2763 = new GraceString(";");
  var opresult2765 = callmethod(opresult2762, "++", [1], string2763);
  lineNumber = 867
  var call2766 = callmethod(this,"out", [1], opresult2765);
  var string2767 = new GraceString("  if (");
  var opresult2769 = callmethod(string2767, "++", [1], var_val);
  var string2770 = new GraceString(" == undefined)");
  var opresult2772 = callmethod(opresult2769, "++", [1], string2770);
  lineNumber = 868
  var call2773 = callmethod(this,"out", [1], opresult2772);
  var string2774 = new GraceString("    callmethod(none, \"assignment\", 0, NULL, NULL);");
  lineNumber = 869
  var call2775 = callmethod(this,"out", [1], string2774);
  lineNumber = 870
  lineNumber = 872
  lineNumber = 869
  var opresult2778 = callmethod(var_compilationDepth, "==", [1], new GraceNum(1));
  if (Grace_isTrue(opresult2778)) {
  lineNumber = 870
  lineNumber = 1
  lineNumber = 870
  var call2779 = callmethod(var_o,"name", [0]);
  lineNumber = 1
  lineNumber = 870
  var call2781 = callmethod(var_o,"name", [0]);
  lineNumber = 1
  lineNumber = 870
  var call2782 = callmethod(var_ast,"signaturePart", [0]);
  var call2783 = callmethod(call2782,"new", [1], call2781);
  var array2780 = new GraceList([
call2783,
]);

  lineNumber = 1
  lineNumber = 870
  var call2785 = callmethod(var_o,"name", [0]);
  var array2784 = new GraceList([
call2785,
]);

  var bool2786 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 870
  var call2787 = callmethod(var_ast,"methodNode", [0]);
  var call2788 = callmethod(call2787,"new", [4], call2779, array2780, array2784, bool2786);
  lineNumber = 871
  var call2789 = callmethod(this,"compilenode", [1], call2788);
  var if2776 = call2789;
}
  lineNumber = 873
  lineNumber = 1
  lineNumber = 872
  var string2790 = new GraceString("none");
  var call2791 = callmethod(var_o,"register:=", [1], string2790);
  return call2791
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compiledefdec"] = func2732;
  lineNumber = 898
var func2792 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 875
  lineNumber = 1
  lineNumber = 875
  lineNumber = 1
  lineNumber = 875
  var call2793 = callmethod(var_o,"name", [0]);
  var call2794 = callmethod(call2793,"value", [0]);
  lineNumber = 876
  var call2795 = callmethod(this,"escapeident", [1], call2794);
  var var_nm = call2795;
  var call2796 = callmethod(var_declaredvars,"push", [1], var_nm);
  lineNumber = 878
  lineNumber = 1
  lineNumber = 877
  var call2797 = callmethod(var_o,"value", [0]);
  var var_val = call2797;
  lineNumber = 879
  lineNumber = 878
  var bool2798 = new GraceBoolean(false)
  var var_hadval = bool2798;
  lineNumber = 884
  lineNumber = 885
  lineNumber = 879
  var bool2800 = new GraceBoolean(false)
  var opresult2802 = callmethod(bool2800, "!=", [1], var_val);
  if (Grace_isTrue(opresult2802)) {
  lineNumber = 880
  lineNumber = 881
  var call2803 = callmethod(this,"compilenode", [1], var_val);
  var_val = call2803;
  lineNumber = 882
  lineNumber = 881
  var bool2804 = new GraceBoolean(true)
  var_hadval = bool2804;
  var if2799 = bool2804;
  } else {
  lineNumber = 884
  lineNumber = 883
  var string2805 = new GraceString("undefined");
  var_val = string2805;
  var if2799 = string2805;
}
  lineNumber = 885
  var string2806 = new GraceString("  *var_");
  var opresult2808 = callmethod(string2806, "++", [1], var_nm);
  var string2809 = new GraceString(" = ");
  var opresult2811 = callmethod(opresult2808, "++", [1], string2809);
  var opresult2813 = callmethod(opresult2811, "++", [1], var_val);
  var string2814 = new GraceString(";");
  var opresult2816 = callmethod(opresult2813, "++", [1], string2814);
  lineNumber = 886
  var call2817 = callmethod(this,"out", [1], opresult2816);
  lineNumber = 888
  lineNumber = 886
  if (Grace_isTrue(var_hadval)) {
  lineNumber = 887
  var string2819 = new GraceString("  if (");
  var opresult2821 = callmethod(string2819, "++", [1], var_val);
  var string2822 = new GraceString(" == undefined)");
  var opresult2824 = callmethod(opresult2821, "++", [1], string2822);
  lineNumber = 888
  var call2825 = callmethod(this,"out", [1], opresult2824);
  var string2826 = new GraceString("    callmethod(none, \"assignment\", 0, NULL, NULL);");
  lineNumber = 889
  var call2827 = callmethod(this,"out", [1], string2826);
  var if2818 = call2827;
}
  lineNumber = 895
  lineNumber = 897
  lineNumber = 890
  var opresult2830 = callmethod(var_compilationDepth, "==", [1], new GraceNum(1));
  if (Grace_isTrue(opresult2830)) {
  lineNumber = 891
  lineNumber = 1
  lineNumber = 891
  var call2831 = callmethod(var_o,"name", [0]);
  lineNumber = 1
  lineNumber = 891
  var call2833 = callmethod(var_o,"name", [0]);
  lineNumber = 1
  lineNumber = 891
  var call2834 = callmethod(var_ast,"signaturePart", [0]);
  var call2835 = callmethod(call2834,"new", [1], call2833);
  var array2832 = new GraceList([
call2835,
]);

  lineNumber = 1
  lineNumber = 891
  var call2837 = callmethod(var_o,"name", [0]);
  var array2836 = new GraceList([
call2837,
]);

  var bool2838 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 891
  var call2839 = callmethod(var_ast,"methodNode", [0]);
  var call2840 = callmethod(call2839,"new", [4], call2831, array2832, array2836, bool2838);
  lineNumber = 892
  var call2841 = callmethod(this,"compilenode", [1], call2840);
  lineNumber = 1
  lineNumber = 892
  lineNumber = 1
  lineNumber = 892
  var call2842 = callmethod(var_o,"name", [0]);
  var call2843 = callmethod(call2842,"value", [0]);
  var string2844 = new GraceString(":=");
  var opresult2846 = callmethod(call2843, "++", [1], string2844);
  var bool2847 = new GraceBoolean(false)
  lineNumber = 893
  lineNumber = 1
  lineNumber = 892
  var call2848 = callmethod(var_ast,"identifierNode", [0]);
  var call2849 = callmethod(call2848,"new", [2], opresult2846, bool2847);
  var var_assignID = call2849;
  lineNumber = 893
  var string2850 = new GraceString("_var_assign_tmp");
  var bool2851 = new GraceBoolean(false)
  lineNumber = 894
  lineNumber = 1
  lineNumber = 893
  var call2852 = callmethod(var_ast,"identifierNode", [0]);
  var call2853 = callmethod(call2852,"new", [2], string2850, bool2851);
  var var_tmpID = call2853;
  lineNumber = 895
  lineNumber = 894
  var array2855 = new GraceList([
var_tmpID,
]);

  lineNumber = 1
  lineNumber = 894
  var call2856 = callmethod(var_ast,"signaturePart", [0]);
  var call2857 = callmethod(call2856,"new", [2], var_assignID, array2855);
  var array2854 = new GraceList([
call2857,
]);

  lineNumber = 895
  lineNumber = 1
  lineNumber = 895
  var call2859 = callmethod(var_o,"name", [0]);
  lineNumber = 1
  lineNumber = 895
  var call2860 = callmethod(var_ast,"bindNode", [0]);
  var call2861 = callmethod(call2860,"new", [2], call2859, var_tmpID);
  var array2858 = new GraceList([
call2861,
]);

  var bool2862 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 894
  var call2863 = callmethod(var_ast,"methodNode", [0]);
  var call2864 = callmethod(call2863,"new", [4], var_assignID, array2854, array2858, bool2862);
  lineNumber = 896
  var call2865 = callmethod(this,"compilenode", [1], call2864);
  var if2828 = call2865;
}
  lineNumber = 898
  lineNumber = 1
  lineNumber = 897
  var string2866 = new GraceString("none");
  var call2867 = callmethod(var_o,"register:=", [1], string2866);
  return call2867
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilevardec"] = func2792;
  lineNumber = 908
var func2868 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 900
  lineNumber = 1
  lineNumber = 900
  var call2869 = callmethod(var_o,"value", [0]);
  lineNumber = 901
  var call2870 = callmethod(this,"compilenode", [1], call2869);
  var var_of = call2870;
  lineNumber = 1
  lineNumber = 901
  var call2871 = callmethod(var_o,"index", [0]);
  lineNumber = 902
  var call2872 = callmethod(this,"compilenode", [1], call2871);
  var var_index = call2872;
  var string2873 = new GraceString("  params[0] = ");
  var opresult2875 = callmethod(string2873, "++", [1], var_index);
  var string2876 = new GraceString(";");
  var opresult2878 = callmethod(opresult2875, "++", [1], string2876);
  lineNumber = 903
  var call2879 = callmethod(this,"out", [1], opresult2878);
  var string2880 = new GraceString("  gc_frame_newslot(params[0]);");
  lineNumber = 904
  var call2881 = callmethod(this,"out", [1], string2880);
  var string2882 = new GraceString("  partcv[0] = 1;");
  lineNumber = 905
  var call2883 = callmethod(this,"out", [1], string2882);
  var string2884 = new GraceString("  Object idxres");
  var opresult2886 = callmethod(string2884, "++", [1], var_auto__95__count);
  var string2887 = new GraceString(" = callmethod(");
  var opresult2889 = callmethod(opresult2886, "++", [1], string2887);
  var opresult2891 = callmethod(opresult2889, "++", [1], var_of);
  var string2892 = new GraceString(", \"[]\", 1, partcv, params);");
  var opresult2894 = callmethod(opresult2891, "++", [1], string2892);
  lineNumber = 906
  var call2895 = callmethod(this,"out", [1], opresult2894);
  lineNumber = 907
  lineNumber = 1
  lineNumber = 907
  lineNumber = 906
  var string2896 = new GraceString("idxres");
  var opresult2898 = callmethod(string2896, "++", [1], var_auto__95__count);
  var call2899 = callmethod(var_o,"register:=", [1], opresult2898);
  lineNumber = 908
  lineNumber = 907
  var opresult2901 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2901;
  return opresult2901
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileindex"] = func2868;
  lineNumber = 941
var func2902 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 911
  lineNumber = 910
  var var_myc = var_auto__95__count;
  lineNumber = 912
  lineNumber = 911
  var opresult2904 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2904;
  lineNumber = 913
  lineNumber = 1
  lineNumber = 912
  var call2905 = callmethod(var_o,"cases", [0]);
  var var_cases = call2905;
  lineNumber = 915
  lineNumber = 916
  lineNumber = 1
  lineNumber = 916
  lineNumber = 1
  lineNumber = 913
  var call2907 = callmethod(var_o,"cases", [0]);
  var call2908 = callmethod(call2907,"size", [0]);
  var opresult2910 = callmethod(call2908, ">", [1], var_paramsUsed);
  if (Grace_isTrue(opresult2910)) {
  lineNumber = 915
  lineNumber = 1
  lineNumber = 915
  lineNumber = 1
  lineNumber = 914
  var call2911 = callmethod(var_o,"cases", [0]);
  var call2912 = callmethod(call2911,"size", [0]);
  var_paramsUsed = call2912;
  var if2906 = call2912;
}
  lineNumber = 916
  lineNumber = 1
  lineNumber = 916
  var call2913 = callmethod(var_o,"value", [0]);
  lineNumber = 917
  var call2914 = callmethod(this,"compilenode", [1], call2913);
  var var_matchee = call2914;
  var string2915 = new GraceString("  int frame");
  var opresult2917 = callmethod(string2915, "++", [1], var_myc);
  var string2918 = new GraceString(" = gc_frame_new();");
  var opresult2920 = callmethod(opresult2917, "++", [1], string2918);
  lineNumber = 918
  var call2921 = callmethod(this,"out", [1], opresult2920);
  var string2922 = new GraceString("  gc_frame_newslot(");
  var opresult2924 = callmethod(string2922, "++", [1], var_matchee);
  var string2925 = new GraceString(");");
  var opresult2927 = callmethod(opresult2924, "++", [1], string2925);
  lineNumber = 919
  var call2928 = callmethod(this,"out", [1], opresult2927);
  lineNumber = 920
  lineNumber = 919
  var var_i = new GraceNum(0);
  lineNumber = 921
  var array2929 = new GraceList([
]);

  var var_params = array2929;
  lineNumber = 926
  lineNumber = 921
  lineNumber = 926
  var block2930 = Grace_allocObject();
  block2930.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2930.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2930.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2930.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2930.receiver = this;
  block2930.className = 'block<genc:926>';
  block2930.real = function(
var_c
) {
  lineNumber = 922
  lineNumber = 923
  var call2931 = callmethod(this,"compilenode", [1], var_c);
  var var_e = call2931;
  var string2932 = new GraceString("  gc_frame_newslot(");
  var opresult2934 = callmethod(string2932, "++", [1], var_e);
  var string2935 = new GraceString(");");
  var opresult2937 = callmethod(opresult2934, "++", [1], string2935);
  lineNumber = 924
  var call2938 = callmethod(this,"out", [1], opresult2937);
  var array2939 = new GraceList([
var_i,
var_e,
]);

  var call2940 = callmethod(var_params,"push", [1], array2939);
  lineNumber = 926
  lineNumber = 925
  var opresult2942 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult2942;
  return opresult2942;
};
  var call2943 = callmethod(Grace_prelude,"for()do", [1, 1], var_cases, block2930);
  lineNumber = 928
  lineNumber = 927
  var string2944 = new GraceString("NULL");
  var var_elsecase = string2944;
  lineNumber = 930
  lineNumber = 932
  lineNumber = 928
  var bool2946 = new GraceBoolean(false)
  lineNumber = 932
  lineNumber = 1
  lineNumber = 928
  var call2947 = callmethod(var_o,"elsecase", [0]);
  var opresult2949 = callmethod(bool2946, "!=", [1], call2947);
  if (Grace_isTrue(opresult2949)) {
  lineNumber = 929
  lineNumber = 1
  lineNumber = 929
  var call2950 = callmethod(var_o,"elsecase", [0]);
  lineNumber = 930
  var call2951 = callmethod(this,"compilenode", [1], call2950);
  var_elsecase = call2951;
  var string2952 = new GraceString("  gc_frame_newslot(");
  var opresult2954 = callmethod(string2952, "++", [1], var_elsecase);
  var string2955 = new GraceString(");");
  var opresult2957 = callmethod(opresult2954, "++", [1], string2955);
  lineNumber = 931
  var call2958 = callmethod(this,"out", [1], opresult2957);
  var if2945 = call2958;
}
  lineNumber = 935
  lineNumber = 932
  lineNumber = 935
  var block2959 = Grace_allocObject();
  block2959.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2959.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2959.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2959.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2959.receiver = this;
  block2959.className = 'block<genc:935>';
  block2959.real = function(
var_ie
) {
  lineNumber = 934
  lineNumber = 933
  var idxres2960 = var_ie.methods["[]"].call(var_ie, [1], new GraceNum(1));
  var var_idx = idxres2960;
  lineNumber = 935
  lineNumber = 934
  var idxres2961 = var_ie.methods["[]"].call(var_ie, [1], new GraceNum(2));
  var var_e = idxres2961;
  lineNumber = 935
  var string2962 = new GraceString("  params[");
  var opresult2964 = callmethod(string2962, "++", [1], var_idx);
  var string2965 = new GraceString("] = ");
  var opresult2967 = callmethod(opresult2964, "++", [1], string2965);
  var opresult2969 = callmethod(opresult2967, "++", [1], var_e);
  var string2970 = new GraceString(";");
  var opresult2972 = callmethod(opresult2969, "++", [1], string2970);
  lineNumber = 936
  var call2973 = callmethod(this,"out", [1], opresult2972);
  return call2973;
};
  var call2974 = callmethod(Grace_prelude,"for()do", [1, 1], var_params, block2959);
  lineNumber = 938
  lineNumber = 937
  var string2975 = new GraceString("  Object matchres");
  var opresult2977 = callmethod(string2975, "++", [1], var_myc);
  var string2978 = new GraceString(" = matchCase(");
  var opresult2980 = callmethod(opresult2977, "++", [1], string2978);
  var opresult2982 = callmethod(opresult2980, "++", [1], var_matchee);
  var string2983 = new GraceString(", params, ");
  var opresult2985 = callmethod(opresult2982, "++", [1], string2983);
  lineNumber = 938
  lineNumber = 1
  lineNumber = 937
  var call2986 = callmethod(var_cases,"size", [0]);
  var opresult2988 = callmethod(opresult2985, "++", [1], call2986);
  var string2989 = new GraceString(",");
  var opresult2991 = callmethod(opresult2988, "++", [1], string2989);
  lineNumber = 938
  var string2992 = new GraceString("");
  var opresult2994 = callmethod(string2992, "++", [1], var_elsecase);
  var string2995 = new GraceString(");");
  var opresult2997 = callmethod(opresult2994, "++", [1], string2995);
  var opresult2999 = callmethod(opresult2991, "++", [1], opresult2997);
  lineNumber = 939
  var call3000 = callmethod(this,"out", [1], opresult2999);
  var string3001 = new GraceString("  gc_frame_end(frame");
  var opresult3003 = callmethod(string3001, "++", [1], var_myc);
  var string3004 = new GraceString(");");
  var opresult3006 = callmethod(opresult3003, "++", [1], string3004);
  lineNumber = 940
  var call3007 = callmethod(this,"out", [1], opresult3006);
  lineNumber = 941
  lineNumber = 1
  lineNumber = 941
  lineNumber = 940
  var string3008 = new GraceString("matchres");
  var opresult3010 = callmethod(string3008, "++", [1], var_myc);
  var call3011 = callmethod(var_o,"register:=", [1], opresult3010);
  return call3011
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilematchcase"] = func2902;
  lineNumber = 982
var func3012 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 944
  lineNumber = 943
  var var_myc = var_auto__95__count;
  lineNumber = 945
  lineNumber = 944
  var opresult3014 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3014;
  lineNumber = 945
  lineNumber = 1
  lineNumber = 945
  var call3015 = callmethod(var_o,"left", [0]);
  lineNumber = 946
  var call3016 = callmethod(this,"compilenode", [1], call3015);
  var var_left = call3016;
  var string3017 = new GraceString("  int op_slot_left_");
  var opresult3019 = callmethod(string3017, "++", [1], var_myc);
  var string3020 = new GraceString(" = gc_frame_newslot(");
  var opresult3022 = callmethod(opresult3019, "++", [1], string3020);
  var opresult3024 = callmethod(opresult3022, "++", [1], var_left);
  var string3025 = new GraceString(");");
  var opresult3027 = callmethod(opresult3024, "++", [1], string3025);
  lineNumber = 947
  var call3028 = callmethod(this,"out", [1], opresult3027);
  lineNumber = 1
  lineNumber = 947
  var call3029 = callmethod(var_o,"right", [0]);
  lineNumber = 948
  var call3030 = callmethod(this,"compilenode", [1], call3029);
  var var_right = call3030;
  var string3031 = new GraceString("  int op_slot_right_");
  var opresult3033 = callmethod(string3031, "++", [1], var_myc);
  var string3034 = new GraceString(" = gc_frame_newslot(");
  var opresult3036 = callmethod(opresult3033, "++", [1], string3034);
  var opresult3038 = callmethod(opresult3036, "++", [1], var_right);
  var string3039 = new GraceString(");");
  var opresult3041 = callmethod(opresult3038, "++", [1], string3039);
  lineNumber = 949
  var call3042 = callmethod(this,"out", [1], opresult3041);
  lineNumber = 950
  lineNumber = 949
  var opresult3044 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3044;
  lineNumber = 982
  lineNumber = 983
  lineNumber = 1
  lineNumber = 950
  var call3046 = callmethod(var_o,"value", [0]);
  var string3047 = new GraceString("+");
  var opresult3049 = callmethod(call3046, "==", [1], string3047);
  lineNumber = 983
  lineNumber = 1
  lineNumber = 950
  var call3050 = callmethod(var_o,"value", [0]);
  var string3051 = new GraceString("*");
  var opresult3053 = callmethod(call3050, "==", [1], string3051);
  var opresult3055 = callmethod(opresult3049, "|", [1], opresult3053);
  lineNumber = 983
  lineNumber = 1
  lineNumber = 950
  var call3056 = callmethod(var_o,"value", [0]);
  var string3057 = new GraceString("/");
  var opresult3059 = callmethod(call3056, "==", [1], string3057);
  var opresult3061 = callmethod(opresult3055, "|", [1], opresult3059);
  lineNumber = 983
  lineNumber = 1
  lineNumber = 951
  var call3062 = callmethod(var_o,"value", [0]);
  var string3063 = new GraceString("-");
  var opresult3065 = callmethod(call3062, "==", [1], string3063);
  var opresult3067 = callmethod(opresult3061, "|", [1], opresult3065);
  lineNumber = 983
  lineNumber = 1
  lineNumber = 951
  var call3068 = callmethod(var_o,"value", [0]);
  var string3069 = new GraceString("%");
  var opresult3071 = callmethod(call3068, "==", [1], string3069);
  var opresult3073 = callmethod(opresult3067, "|", [1], opresult3071);
  if (Grace_isTrue(opresult3073)) {
  lineNumber = 953
  lineNumber = 952
  var string3074 = new GraceString("sum");
  var var_rnm = string3074;
  lineNumber = 955
  lineNumber = 956
  lineNumber = 1
  lineNumber = 953
  var call3076 = callmethod(var_o,"value", [0]);
  var string3077 = new GraceString("*");
  var opresult3079 = callmethod(call3076, "==", [1], string3077);
  if (Grace_isTrue(opresult3079)) {
  lineNumber = 955
  lineNumber = 954
  var string3080 = new GraceString("prod");
  var_rnm = string3080;
  var if3075 = string3080;
}
  lineNumber = 958
  lineNumber = 959
  lineNumber = 1
  lineNumber = 956
  var call3082 = callmethod(var_o,"value", [0]);
  var string3083 = new GraceString("/");
  var opresult3085 = callmethod(call3082, "==", [1], string3083);
  if (Grace_isTrue(opresult3085)) {
  lineNumber = 958
  lineNumber = 957
  var string3086 = new GraceString("quotient");
  var_rnm = string3086;
  var if3081 = string3086;
}
  lineNumber = 961
  lineNumber = 962
  lineNumber = 1
  lineNumber = 959
  var call3088 = callmethod(var_o,"value", [0]);
  var string3089 = new GraceString("-");
  var opresult3091 = callmethod(call3088, "==", [1], string3089);
  if (Grace_isTrue(opresult3091)) {
  lineNumber = 961
  lineNumber = 960
  var string3092 = new GraceString("diff");
  var_rnm = string3092;
  var if3087 = string3092;
}
  lineNumber = 964
  lineNumber = 965
  lineNumber = 1
  lineNumber = 962
  var call3094 = callmethod(var_o,"value", [0]);
  var string3095 = new GraceString("%");
  var opresult3097 = callmethod(call3094, "==", [1], string3095);
  if (Grace_isTrue(opresult3097)) {
  lineNumber = 964
  lineNumber = 963
  var string3098 = new GraceString("modulus");
  var_rnm = string3098;
  var if3093 = string3098;
}
  lineNumber = 965
  var string3099 = new GraceString("  params[0] = ");
  var opresult3101 = callmethod(string3099, "++", [1], var_right);
  var string3102 = new GraceString(";");
  var opresult3104 = callmethod(opresult3101, "++", [1], string3102);
  lineNumber = 966
  var call3105 = callmethod(this,"out", [1], opresult3104);
  var string3106 = new GraceString("  partcv[0] = 1;");
  lineNumber = 967
  var call3107 = callmethod(this,"out", [1], string3106);
  lineNumber = 968
  lineNumber = 967
  var string3108 = new GraceString("  Object ");
  var opresult3110 = callmethod(string3108, "++", [1], var_rnm);
  var string3111 = new GraceString("");
  var opresult3113 = callmethod(opresult3110, "++", [1], string3111);
  var opresult3115 = callmethod(opresult3113, "++", [1], var_auto__95__count);
  var string3116 = new GraceString(" = callmethod(");
  var opresult3118 = callmethod(opresult3115, "++", [1], string3116);
  var opresult3120 = callmethod(opresult3118, "++", [1], var_left);
  var string3121 = new GraceString(", \"");
  var opresult3123 = callmethod(opresult3120, "++", [1], string3121);
  lineNumber = 968
  lineNumber = 1
  lineNumber = 967
  var call3124 = callmethod(var_o,"value", [0]);
  var opresult3126 = callmethod(opresult3123, "++", [1], call3124);
  var string3127 = new GraceString("\", ");
  var opresult3129 = callmethod(opresult3126, "++", [1], string3127);
  lineNumber = 968
  var string3130 = new GraceString("1, partcv, params);");
  var opresult3132 = callmethod(opresult3129, "++", [1], string3130);
  lineNumber = 969
  var call3133 = callmethod(this,"out", [1], opresult3132);
  lineNumber = 970
  lineNumber = 1
  lineNumber = 970
  lineNumber = 969
  var opresult3135 = callmethod(var_rnm, "++", [1], var_auto__95__count);
  var call3136 = callmethod(var_o,"register:=", [1], opresult3135);
  lineNumber = 971
  lineNumber = 970
  var opresult3138 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3138;
  var if3045 = opresult3138;
  } else {
  lineNumber = 972
  lineNumber = 1
  lineNumber = 972
  var call3139 = callmethod(var_o,"value", [0]);
  var call3140 = Grace_length(call3139);
  var opresult3142 = callmethod(call3140, "+", [1], new GraceNum(1));
  var var_len = opresult3142;
  lineNumber = 973
  lineNumber = 1
  lineNumber = 973
  var call3143 = callmethod(var_o,"value", [0]);
  lineNumber = 974
  var call3144 = callmethod(this,"escapestring2", [1], call3143);
  var var_evl = call3144;
  lineNumber = 976
  lineNumber = 974
  var string3145 = new GraceString("@.str");
  lineNumber = 976
  lineNumber = 1
  lineNumber = 974
  var call3146 = callmethod(var_constants,"size", [0]);
  var opresult3148 = callmethod(string3145, "++", [1], call3146);
  var string3149 = new GraceString(" = private unnamed_addr ");
  var opresult3151 = callmethod(opresult3148, "++", [1], string3149);
  lineNumber = 975
  var string3152 = new GraceString("constant [");
  var opresult3154 = callmethod(opresult3151, "++", [1], string3152);
  var opresult3156 = callmethod(opresult3154, "++", [1], var_len);
  var string3157 = new GraceString(" x i8] c\"");
  var opresult3159 = callmethod(opresult3156, "++", [1], string3157);
  var opresult3161 = callmethod(opresult3159, "++", [1], var_evl);
  var string3162 = new GraceString("\\00\"");
  var opresult3164 = callmethod(opresult3161, "++", [1], string3162);
  var var_con = opresult3164;
  lineNumber = 976
  var string3165 = new GraceString("  params[0] = ");
  var opresult3167 = callmethod(string3165, "++", [1], var_right);
  var string3168 = new GraceString(";");
  var opresult3170 = callmethod(opresult3167, "++", [1], string3168);
  lineNumber = 977
  var call3171 = callmethod(this,"out", [1], opresult3170);
  var string3172 = new GraceString("  partcv[0] = 1;");
  lineNumber = 978
  var call3173 = callmethod(this,"out", [1], string3172);
  lineNumber = 979
  lineNumber = 978
  var string3174 = new GraceString("  Object opresult");
  var opresult3176 = callmethod(string3174, "++", [1], var_auto__95__count);
  var string3177 = new GraceString(" = ");
  var opresult3179 = callmethod(opresult3176, "++", [1], string3177);
  lineNumber = 979
  var string3180 = new GraceString("callmethod(");
  var opresult3182 = callmethod(string3180, "++", [1], var_left);
  var string3183 = new GraceString(", \"");
  var opresult3185 = callmethod(opresult3182, "++", [1], string3183);
  lineNumber = 1
  lineNumber = 979
  var call3186 = callmethod(var_o,"value", [0]);
  var opresult3188 = callmethod(opresult3185, "++", [1], call3186);
  var string3189 = new GraceString("\", 1, partcv, params);");
  var opresult3191 = callmethod(opresult3188, "++", [1], string3189);
  var opresult3193 = callmethod(opresult3179, "++", [1], opresult3191);
  lineNumber = 980
  var call3194 = callmethod(this,"out", [1], opresult3193);
  lineNumber = 981
  lineNumber = 1
  lineNumber = 981
  lineNumber = 980
  var string3195 = new GraceString("opresult");
  var opresult3197 = callmethod(string3195, "++", [1], var_auto__95__count);
  var call3198 = callmethod(var_o,"register:=", [1], opresult3197);
  lineNumber = 982
  lineNumber = 981
  var opresult3200 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3200;
  var if3045 = opresult3200;
}
  return if3045
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileop"] = func3012;
  lineNumber = 1072
var func3201 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_tailcall = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 986
  lineNumber = 985
  var var_myc = var_auto__95__count;
  lineNumber = 987
  lineNumber = 986
  var opresult3203 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3203;
  lineNumber = 988
  var array3204 = new GraceList([
]);

  var var_args = array3204;
  lineNumber = 989
  lineNumber = 988
  var string3205 = new GraceString("");
  var var_obj = string3205;
  lineNumber = 990
  lineNumber = 989
  var var_len = new GraceNum(0);
  lineNumber = 991
  var var_evl;
  lineNumber = 992
  lineNumber = 991
  var var_i = new GraceNum(0);
  lineNumber = 992
  var string3206 = new GraceString("  int callframe");
  var opresult3208 = callmethod(string3206, "++", [1], var_myc);
  var string3209 = new GraceString(" = gc_frame_new();");
  var opresult3211 = callmethod(opresult3208, "++", [1], string3209);
  lineNumber = 993
  var call3212 = callmethod(this,"out", [1], opresult3211);
  lineNumber = 997
  lineNumber = 993
  lineNumber = 1
  lineNumber = 993
  var call3213 = callmethod(var_o,"with", [0]);
  lineNumber = 997
  var block3214 = Grace_allocObject();
  block3214.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3214.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3214.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3214.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3214.receiver = this;
  block3214.className = 'block<genc:997>';
  block3214.real = function(
var_part
) {
  lineNumber = 994
  lineNumber = 1
  lineNumber = 994
  var call3215 = callmethod(var_part,"args", [0]);
  lineNumber = 997
  var block3216 = Grace_allocObject();
  block3216.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3216.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3216.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3216.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3216.receiver = this;
  block3216.className = 'block<genc:997>';
  block3216.real = function(
var_p
) {
  lineNumber = 995
  lineNumber = 996
  var call3217 = callmethod(this,"compilenode", [1], var_p);
  var var_r = call3217;
  var call3218 = callmethod(var_args,"push", [1], var_r);
  lineNumber = 997
  var string3219 = new GraceString("  gc_frame_newslot(");
  var opresult3221 = callmethod(string3219, "++", [1], var_r);
  var string3222 = new GraceString(");");
  var opresult3224 = callmethod(opresult3221, "++", [1], string3222);
  lineNumber = 998
  var call3225 = callmethod(this,"out", [1], opresult3224);
  return call3225;
};
  var call3226 = callmethod(Grace_prelude,"for()do", [1, 1], call3215, block3216);
  return call3226;
};
  var call3227 = callmethod(Grace_prelude,"for()do", [1, 1], call3213, block3214);
  lineNumber = 1002
  lineNumber = 1003
  lineNumber = 1
  lineNumber = 1000
  var call3229 = callmethod(var_args,"size", [0]);
  var opresult3231 = callmethod(call3229, ">", [1], var_paramsUsed);
  if (Grace_isTrue(opresult3231)) {
  lineNumber = 1002
  lineNumber = 1
  lineNumber = 1001
  var call3232 = callmethod(var_args,"size", [0]);
  var_paramsUsed = call3232;
  var if3228 = call3232;
}
  lineNumber = 1005
  lineNumber = 1006
  lineNumber = 1
  lineNumber = 1006
  lineNumber = 1
  lineNumber = 1003
  var call3234 = callmethod(var_o,"with", [0]);
  var call3235 = callmethod(call3234,"size", [0]);
  var opresult3237 = callmethod(call3235, ">", [1], var_partsUsed);
  if (Grace_isTrue(opresult3237)) {
  lineNumber = 1005
  lineNumber = 1
  lineNumber = 1005
  lineNumber = 1
  lineNumber = 1004
  var call3238 = callmethod(var_o,"with", [0]);
  var call3239 = callmethod(call3238,"size", [0]);
  var_partsUsed = call3239;
  var if3233 = call3239;
}
  lineNumber = 1006
  lineNumber = 1
  lineNumber = 1006
  lineNumber = 1
  lineNumber = 1006
  var call3240 = callmethod(var_o,"value", [0]);
  var call3241 = callmethod(call3240,"value", [0]);
  lineNumber = 1007
  var call3242 = callmethod(this,"escapestring2", [1], call3241);
  var_evl = call3242;
  lineNumber = 1066
  lineNumber = 1008
  lineNumber = 1069
  lineNumber = 1
  lineNumber = 1069
  lineNumber = 1
  lineNumber = 1007
  var call3244 = callmethod(var_o,"value", [0]);
  var call3245 = callmethod(call3244,"kind", [0]);
  var string3246 = new GraceString("member");
  var opresult3248 = callmethod(call3245, "==", [1], string3246);
  lineNumber = 1008
  var block3249 = Grace_allocObject();
  block3249.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3249.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3249.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3249.receiver = this;
  block3249.className = 'block<genc:1008>';
  block3249.real = function(
) {
  lineNumber = 1
  lineNumber = 1008
  lineNumber = 1
  lineNumber = 1008
  lineNumber = 1
  lineNumber = 1007
  var call3250 = callmethod(var_o,"value", [0]);
  var call3251 = callmethod(call3250,"in", [0]);
  var call3252 = callmethod(call3251,"kind", [0]);
  var string3253 = new GraceString("identifier");
  var opresult3255 = callmethod(call3252, "==", [1], string3253);
  lineNumber = 1008
  lineNumber = 1
  lineNumber = 1008
  lineNumber = 1
  lineNumber = 1008
  lineNumber = 1
  lineNumber = 1008
  var call3256 = callmethod(var_o,"value", [0]);
  var call3257 = callmethod(call3256,"in", [0]);
  var call3258 = callmethod(call3257,"value", [0]);
  var string3259 = new GraceString("super");
  var opresult3261 = callmethod(call3258, "==", [1], string3259);
  var opresult3263 = callmethod(opresult3255, "&", [1], opresult3261);
  return opresult3263;
};
  var opresult3265 = callmethod(opresult3248, "&&", [1], block3249);
  if (Grace_isTrue(opresult3265)) {
  lineNumber = 1012
  lineNumber = 1009
  lineNumber = 1012
  var block3266 = Grace_allocObject();
  block3266.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3266.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3266.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3266.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3266.receiver = this;
  block3266.className = 'block<genc:1012>';
  block3266.real = function(
var_arg
) {
  lineNumber = 1010
  var string3267 = new GraceString("  params[");
  var opresult3269 = callmethod(string3267, "++", [1], var_i);
  var string3270 = new GraceString("] = ");
  var opresult3272 = callmethod(opresult3269, "++", [1], string3270);
  var opresult3274 = callmethod(opresult3272, "++", [1], var_arg);
  var string3275 = new GraceString(";");
  var opresult3277 = callmethod(opresult3274, "++", [1], string3275);
  lineNumber = 1011
  var call3278 = callmethod(this,"out", [1], opresult3277);
  lineNumber = 1012
  lineNumber = 1011
  var opresult3280 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult3280;
  return opresult3280;
};
  var call3281 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block3266);
  lineNumber = 1014
  lineNumber = 1013
  lineNumber = 1
  lineNumber = 1013
  lineNumber = 1
  lineNumber = 1013
  var call3282 = callmethod(var_o,"with", [0]);
  var call3283 = callmethod(call3282,"indices", [0]);
  lineNumber = 1014
  var block3284 = Grace_allocObject();
  block3284.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3284.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3284.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3284.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3284.receiver = this;
  block3284.className = 'block<genc:1014>';
  block3284.real = function(
var_partnr
) {
  var string3285 = new GraceString("  partcv[");
  var diff3287 = callmethod(var_partnr, "-", [1], new GraceNum(1));
  var opresult3289 = callmethod(string3285, "++", [1], diff3287);
  var string3290 = new GraceString("] = ");
  var opresult3292 = callmethod(opresult3289, "++", [1], string3290);
  lineNumber = 1
  lineNumber = 1014
  lineNumber = 1
  lineNumber = 1014
  lineNumber = 1
  lineNumber = 1014
  var call3293 = callmethod(var_o,"with", [0]);
  var idxres3294 = call3293.methods["[]"].call(call3293, [1], var_partnr);
  var call3295 = callmethod(idxres3294,"args", [0]);
  var call3296 = callmethod(call3295,"size", [0]);
  var opresult3298 = callmethod(opresult3292, "++", [1], call3296);
  var string3299 = new GraceString(";");
  var opresult3301 = callmethod(opresult3298, "++", [1], string3299);
  lineNumber = 1015
  var call3302 = callmethod(this,"out", [1], opresult3301);
  return call3302;
};
  var call3303 = callmethod(Grace_prelude,"for()do", [1, 1], call3283, block3284);
  lineNumber = 1017
  lineNumber = 1016
  var string3304 = new GraceString("  Object call");
  var opresult3306 = callmethod(string3304, "++", [1], var_auto__95__count);
  var string3307 = new GraceString(" = callmethod3(self, \"");
  var opresult3309 = callmethod(opresult3306, "++", [1], string3307);
  var opresult3311 = callmethod(opresult3309, "++", [1], var_evl);
  var string3312 = new GraceString("\", ");
  var opresult3314 = callmethod(opresult3311, "++", [1], string3312);
  lineNumber = 1017
  var string3315 = new GraceString("");
  lineNumber = 1
  lineNumber = 1017
  lineNumber = 1
  lineNumber = 1017
  var call3316 = callmethod(var_o,"with", [0]);
  var call3317 = callmethod(call3316,"size", [0]);
  var opresult3319 = callmethod(string3315, "++", [1], call3317);
  var string3320 = new GraceString(", partcv, params, ((flags >> 24) & 0xff) + 1);");
  var opresult3322 = callmethod(opresult3319, "++", [1], string3320);
  var opresult3324 = callmethod(opresult3314, "++", [1], opresult3322);
  lineNumber = 1018
  var call3325 = callmethod(this,"out", [1], opresult3324);
  var if3243 = call3325;
  } else {
  lineNumber = 1066
  lineNumber = 1019
  lineNumber = 1023
  lineNumber = 1
  lineNumber = 1023
  lineNumber = 1
  lineNumber = 1018
  var call3327 = callmethod(var_o,"value", [0]);
  var call3328 = callmethod(call3327,"kind", [0]);
  var string3329 = new GraceString("member");
  var opresult3331 = callmethod(call3328, "==", [1], string3329);
  lineNumber = 1019
  var block3332 = Grace_allocObject();
  block3332.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3332.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3332.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3332.receiver = this;
  block3332.className = 'block<genc:1019>';
  block3332.real = function(
) {
  lineNumber = 1
  lineNumber = 1019
  lineNumber = 1
  lineNumber = 1019
  lineNumber = 1
  lineNumber = 1018
  var call3333 = callmethod(var_o,"value", [0]);
  var call3334 = callmethod(call3333,"in", [0]);
  var call3335 = callmethod(call3334,"kind", [0]);
  var string3336 = new GraceString("identifier");
  var opresult3338 = callmethod(call3335, "==", [1], string3336);
  lineNumber = 1019
  lineNumber = 1
  lineNumber = 1019
  lineNumber = 1
  lineNumber = 1019
  lineNumber = 1
  lineNumber = 1019
  var call3339 = callmethod(var_o,"value", [0]);
  var call3340 = callmethod(call3339,"in", [0]);
  var call3341 = callmethod(call3340,"value", [0]);
  var string3342 = new GraceString("self");
  var opresult3344 = callmethod(call3341, "==", [1], string3342);
  var opresult3346 = callmethod(opresult3338, "&", [1], opresult3344);
  lineNumber = 1
  lineNumber = 1019
  lineNumber = 1
  lineNumber = 1019
  var call3347 = callmethod(var_o,"value", [0]);
  var call3348 = callmethod(call3347,"value", [0]);
  var string3349 = new GraceString("outer");
  var opresult3351 = callmethod(call3348, "==", [1], string3349);
  var opresult3353 = callmethod(opresult3346, "&", [1], opresult3351);
  return opresult3353;
};
  var opresult3355 = callmethod(opresult3331, "&&", [1], block3332);
  if (Grace_isTrue(opresult3355)) {
  lineNumber = 1022
  lineNumber = 1021
  var string3356 = new GraceString("  Object call");
  var opresult3358 = callmethod(string3356, "++", [1], var_auto__95__count);
  var string3359 = new GraceString(" = callmethod3(self, \"");
  var opresult3361 = callmethod(opresult3358, "++", [1], string3359);
  var opresult3363 = callmethod(opresult3361, "++", [1], var_evl);
  var string3364 = new GraceString("\", ");
  var opresult3366 = callmethod(opresult3363, "++", [1], string3364);
  lineNumber = 1022
  var string3367 = new GraceString("0, 0, NULL, ((flags >> 24) & 0xff));");
  var opresult3369 = callmethod(opresult3366, "++", [1], string3367);
  lineNumber = 1023
  var call3370 = callmethod(this,"out", [1], opresult3369);
  var if3326 = call3370;
  } else {
  lineNumber = 1066
  lineNumber = 1024
  lineNumber = 1034
  lineNumber = 1
  lineNumber = 1034
  lineNumber = 1
  lineNumber = 1023
  var call3372 = callmethod(var_o,"value", [0]);
  var call3373 = callmethod(call3372,"kind", [0]);
  var string3374 = new GraceString("member");
  var opresult3376 = callmethod(call3373, "==", [1], string3374);
  lineNumber = 1024
  var block3377 = Grace_allocObject();
  block3377.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3377.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3377.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3377.receiver = this;
  block3377.className = 'block<genc:1024>';
  block3377.real = function(
) {
  lineNumber = 1
  lineNumber = 1024
  lineNumber = 1
  lineNumber = 1024
  lineNumber = 1
  lineNumber = 1023
  var call3378 = callmethod(var_o,"value", [0]);
  var call3379 = callmethod(call3378,"in", [0]);
  var call3380 = callmethod(call3379,"kind", [0]);
  var string3381 = new GraceString("identifier");
  var opresult3383 = callmethod(call3380, "==", [1], string3381);
  lineNumber = 1024
  lineNumber = 1
  lineNumber = 1024
  lineNumber = 1
  lineNumber = 1024
  lineNumber = 1
  lineNumber = 1024
  var call3384 = callmethod(var_o,"value", [0]);
  var call3385 = callmethod(call3384,"in", [0]);
  var call3386 = callmethod(call3385,"value", [0]);
  var string3387 = new GraceString("prelude");
  var opresult3389 = callmethod(call3386, "==", [1], string3387);
  var opresult3391 = callmethod(opresult3383, "&", [1], opresult3389);
  return opresult3391;
};
  var opresult3393 = callmethod(opresult3376, "&&", [1], block3377);
  if (Grace_isTrue(opresult3393)) {
  lineNumber = 1028
  lineNumber = 1025
  lineNumber = 1028
  var block3394 = Grace_allocObject();
  block3394.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3394.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3394.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3394.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3394.receiver = this;
  block3394.className = 'block<genc:1028>';
  block3394.real = function(
var_arg
) {
  lineNumber = 1026
  var string3395 = new GraceString("  params[");
  var opresult3397 = callmethod(string3395, "++", [1], var_i);
  var string3398 = new GraceString("] = ");
  var opresult3400 = callmethod(opresult3397, "++", [1], string3398);
  var opresult3402 = callmethod(opresult3400, "++", [1], var_arg);
  var string3403 = new GraceString(";");
  var opresult3405 = callmethod(opresult3402, "++", [1], string3403);
  lineNumber = 1027
  var call3406 = callmethod(this,"out", [1], opresult3405);
  lineNumber = 1028
  lineNumber = 1027
  var opresult3408 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult3408;
  return opresult3408;
};
  var call3409 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block3394);
  lineNumber = 1030
  lineNumber = 1029
  lineNumber = 1
  lineNumber = 1029
  lineNumber = 1
  lineNumber = 1029
  var call3410 = callmethod(var_o,"with", [0]);
  var call3411 = callmethod(call3410,"indices", [0]);
  lineNumber = 1030
  var block3412 = Grace_allocObject();
  block3412.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3412.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3412.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3412.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3412.receiver = this;
  block3412.className = 'block<genc:1030>';
  block3412.real = function(
var_partnr
) {
  var string3413 = new GraceString("  partcv[");
  var diff3415 = callmethod(var_partnr, "-", [1], new GraceNum(1));
  var opresult3417 = callmethod(string3413, "++", [1], diff3415);
  var string3418 = new GraceString("] = ");
  var opresult3420 = callmethod(opresult3417, "++", [1], string3418);
  lineNumber = 1
  lineNumber = 1030
  lineNumber = 1
  lineNumber = 1030
  lineNumber = 1
  lineNumber = 1030
  var call3421 = callmethod(var_o,"with", [0]);
  var idxres3422 = call3421.methods["[]"].call(call3421, [1], var_partnr);
  var call3423 = callmethod(idxres3422,"args", [0]);
  var call3424 = callmethod(call3423,"size", [0]);
  var opresult3426 = callmethod(opresult3420, "++", [1], call3424);
  var string3427 = new GraceString(";");
  var opresult3429 = callmethod(opresult3426, "++", [1], string3427);
  lineNumber = 1031
  var call3430 = callmethod(this,"out", [1], opresult3429);
  return call3430;
};
  var call3431 = callmethod(Grace_prelude,"for()do", [1, 1], call3411, block3412);
  lineNumber = 1033
  lineNumber = 1032
  var string3432 = new GraceString("  Object call");
  var opresult3434 = callmethod(string3432, "++", [1], var_auto__95__count);
  var string3435 = new GraceString(" = callmethod(prelude, \"");
  var opresult3437 = callmethod(opresult3434, "++", [1], string3435);
  var opresult3439 = callmethod(opresult3437, "++", [1], var_evl);
  var string3440 = new GraceString("\", ");
  var opresult3442 = callmethod(opresult3439, "++", [1], string3440);
  lineNumber = 1033
  var string3443 = new GraceString("");
  lineNumber = 1
  lineNumber = 1033
  lineNumber = 1
  lineNumber = 1033
  var call3444 = callmethod(var_o,"with", [0]);
  var call3445 = callmethod(call3444,"size", [0]);
  var opresult3447 = callmethod(string3443, "++", [1], call3445);
  var string3448 = new GraceString(", partcv, params);");
  var opresult3450 = callmethod(opresult3447, "++", [1], string3448);
  var opresult3452 = callmethod(opresult3442, "++", [1], opresult3450);
  lineNumber = 1034
  var call3453 = callmethod(this,"out", [1], opresult3452);
  var if3371 = call3453;
  } else {
  lineNumber = 1066
  lineNumber = 1051
  lineNumber = 1
  lineNumber = 1051
  lineNumber = 1
  lineNumber = 1034
  var call3455 = callmethod(var_o,"value", [0]);
  var call3456 = callmethod(call3455,"kind", [0]);
  var string3457 = new GraceString("member");
  var opresult3459 = callmethod(call3456, "==", [1], string3457);
  if (Grace_isTrue(opresult3459)) {
  lineNumber = 1035
  lineNumber = 1
  lineNumber = 1035
  lineNumber = 1
  lineNumber = 1035
  var call3460 = callmethod(var_o,"value", [0]);
  var call3461 = callmethod(call3460,"in", [0]);
  lineNumber = 1036
  var call3462 = callmethod(this,"compilenode", [1], call3461);
  var_obj = call3462;
  lineNumber = 1
  lineNumber = 1036
  lineNumber = 1
  lineNumber = 1036
  var call3463 = callmethod(var_o,"value", [0]);
  var call3464 = callmethod(call3463,"value", [0]);
  var call3465 = Grace_length(call3464);
  var opresult3467 = callmethod(call3465, "+", [1], new GraceNum(1));
  var_len = opresult3467;
  lineNumber = 1040
  lineNumber = 1037
  lineNumber = 1040
  var block3468 = Grace_allocObject();
  block3468.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3468.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3468.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3468.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3468.receiver = this;
  block3468.className = 'block<genc:1040>';
  block3468.real = function(
var_arg
) {
  lineNumber = 1038
  var string3469 = new GraceString("  params[");
  var opresult3471 = callmethod(string3469, "++", [1], var_i);
  var string3472 = new GraceString("] = ");
  var opresult3474 = callmethod(opresult3471, "++", [1], string3472);
  var opresult3476 = callmethod(opresult3474, "++", [1], var_arg);
  var string3477 = new GraceString(";");
  var opresult3479 = callmethod(opresult3476, "++", [1], string3477);
  lineNumber = 1039
  var call3480 = callmethod(this,"out", [1], opresult3479);
  lineNumber = 1040
  lineNumber = 1039
  var opresult3482 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult3482;
  return opresult3482;
};
  var call3483 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block3468);
  lineNumber = 1042
  lineNumber = 1041
  lineNumber = 1
  lineNumber = 1041
  lineNumber = 1
  lineNumber = 1041
  var call3484 = callmethod(var_o,"with", [0]);
  var call3485 = callmethod(call3484,"indices", [0]);
  lineNumber = 1042
  var block3486 = Grace_allocObject();
  block3486.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3486.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3486.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3486.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3486.receiver = this;
  block3486.className = 'block<genc:1042>';
  block3486.real = function(
var_partnr
) {
  var string3487 = new GraceString("  partcv[");
  var diff3489 = callmethod(var_partnr, "-", [1], new GraceNum(1));
  var opresult3491 = callmethod(string3487, "++", [1], diff3489);
  var string3492 = new GraceString("] = ");
  var opresult3494 = callmethod(opresult3491, "++", [1], string3492);
  lineNumber = 1
  lineNumber = 1042
  lineNumber = 1
  lineNumber = 1042
  lineNumber = 1
  lineNumber = 1042
  var call3495 = callmethod(var_o,"with", [0]);
  var idxres3496 = call3495.methods["[]"].call(call3495, [1], var_partnr);
  var call3497 = callmethod(idxres3496,"args", [0]);
  var call3498 = callmethod(call3497,"size", [0]);
  var opresult3500 = callmethod(opresult3494, "++", [1], call3498);
  var string3501 = new GraceString(";");
  var opresult3503 = callmethod(opresult3500, "++", [1], string3501);
  lineNumber = 1043
  var call3504 = callmethod(this,"out", [1], opresult3503);
  return call3504;
};
  var call3505 = callmethod(Grace_prelude,"for()do", [1, 1], call3485, block3486);
  lineNumber = 1049
  lineNumber = 1044
  if (Grace_isTrue(var_tailcall)) {
  lineNumber = 1045
  var string3507 = new GraceString("  Object call");
  var opresult3509 = callmethod(string3507, "++", [1], var_auto__95__count);
  var string3510 = new GraceString(" = tailcall(");
  var opresult3512 = callmethod(opresult3509, "++", [1], string3510);
  var opresult3514 = callmethod(opresult3512, "++", [1], var_obj);
  var string3515 = new GraceString(", \"");
  var opresult3517 = callmethod(opresult3514, "++", [1], string3515);
  var opresult3519 = callmethod(opresult3517, "++", [1], var_evl);
  var string3520 = new GraceString("\",");
  var opresult3522 = callmethod(opresult3519, "++", [1], string3520);
  lineNumber = 1046
  var call3523 = callmethod(this,"out", [1], opresult3522);
  var string3524 = new GraceString("    ");
  lineNumber = 1
  lineNumber = 1046
  lineNumber = 1
  lineNumber = 1046
  var call3525 = callmethod(var_o,"with", [0]);
  var call3526 = callmethod(call3525,"size", [0]);
  var opresult3528 = callmethod(string3524, "++", [1], call3526);
  var string3529 = new GraceString(", partcv, params, 0);");
  var opresult3531 = callmethod(opresult3528, "++", [1], string3529);
  lineNumber = 1047
  var call3532 = callmethod(this,"out", [1], opresult3531);
  var if3506 = call3532;
  } else {
  lineNumber = 1048
  var string3533 = new GraceString("  Object call");
  var opresult3535 = callmethod(string3533, "++", [1], var_auto__95__count);
  var string3536 = new GraceString(" = callmethod(");
  var opresult3538 = callmethod(opresult3535, "++", [1], string3536);
  var opresult3540 = callmethod(opresult3538, "++", [1], var_obj);
  var string3541 = new GraceString(", \"");
  var opresult3543 = callmethod(opresult3540, "++", [1], string3541);
  var opresult3545 = callmethod(opresult3543, "++", [1], var_evl);
  var string3546 = new GraceString("\",");
  var opresult3548 = callmethod(opresult3545, "++", [1], string3546);
  lineNumber = 1049
  var call3549 = callmethod(this,"out", [1], opresult3548);
  var string3550 = new GraceString("    ");
  lineNumber = 1
  lineNumber = 1049
  lineNumber = 1
  lineNumber = 1049
  var call3551 = callmethod(var_o,"with", [0]);
  var call3552 = callmethod(call3551,"size", [0]);
  var opresult3554 = callmethod(string3550, "++", [1], call3552);
  var string3555 = new GraceString(", partcv, params);");
  var opresult3557 = callmethod(opresult3554, "++", [1], string3555);
  lineNumber = 1050
  var call3558 = callmethod(this,"out", [1], opresult3557);
  var if3506 = call3558;
}
  var if3454 = if3506;
  } else {
  lineNumber = 1053
  lineNumber = 1052
  var string3559 = new GraceString("self");
  var_obj = string3559;
  lineNumber = 1053
  lineNumber = 1
  lineNumber = 1053
  lineNumber = 1
  lineNumber = 1053
  var call3560 = callmethod(var_o,"value", [0]);
  var call3561 = callmethod(call3560,"value", [0]);
  var call3562 = Grace_length(call3561);
  var opresult3564 = callmethod(call3562, "+", [1], new GraceNum(1));
  var_len = opresult3564;
  lineNumber = 1057
  lineNumber = 1054
  lineNumber = 1057
  var block3565 = Grace_allocObject();
  block3565.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3565.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3565.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3565.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3565.receiver = this;
  block3565.className = 'block<genc:1057>';
  block3565.real = function(
var_arg
) {
  lineNumber = 1055
  var string3566 = new GraceString("  params[");
  var opresult3568 = callmethod(string3566, "++", [1], var_i);
  var string3569 = new GraceString("] = ");
  var opresult3571 = callmethod(opresult3568, "++", [1], string3569);
  var opresult3573 = callmethod(opresult3571, "++", [1], var_arg);
  var string3574 = new GraceString(";");
  var opresult3576 = callmethod(opresult3573, "++", [1], string3574);
  lineNumber = 1056
  var call3577 = callmethod(this,"out", [1], opresult3576);
  lineNumber = 1057
  lineNumber = 1056
  var opresult3579 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult3579;
  return opresult3579;
};
  var call3580 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block3565);
  lineNumber = 1059
  lineNumber = 1058
  lineNumber = 1
  lineNumber = 1058
  lineNumber = 1
  lineNumber = 1058
  var call3581 = callmethod(var_o,"with", [0]);
  var call3582 = callmethod(call3581,"indices", [0]);
  lineNumber = 1059
  var block3583 = Grace_allocObject();
  block3583.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3583.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3583.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3583.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3583.receiver = this;
  block3583.className = 'block<genc:1059>';
  block3583.real = function(
var_partnr
) {
  var string3584 = new GraceString("  partcv[");
  var diff3586 = callmethod(var_partnr, "-", [1], new GraceNum(1));
  var opresult3588 = callmethod(string3584, "++", [1], diff3586);
  var string3589 = new GraceString("] = ");
  var opresult3591 = callmethod(opresult3588, "++", [1], string3589);
  lineNumber = 1
  lineNumber = 1059
  lineNumber = 1
  lineNumber = 1059
  lineNumber = 1
  lineNumber = 1059
  var call3592 = callmethod(var_o,"with", [0]);
  var idxres3593 = call3592.methods["[]"].call(call3592, [1], var_partnr);
  var call3594 = callmethod(idxres3593,"args", [0]);
  var call3595 = callmethod(call3594,"size", [0]);
  var opresult3597 = callmethod(opresult3591, "++", [1], call3595);
  var string3598 = new GraceString(";");
  var opresult3600 = callmethod(opresult3597, "++", [1], string3598);
  lineNumber = 1060
  var call3601 = callmethod(this,"out", [1], opresult3600);
  return call3601;
};
  var call3602 = callmethod(Grace_prelude,"for()do", [1, 1], call3582, block3583);
  lineNumber = 1066
  lineNumber = 1061
  if (Grace_isTrue(var_tailcall)) {
  lineNumber = 1062
  var string3604 = new GraceString("  Object call");
  var opresult3606 = callmethod(string3604, "++", [1], var_auto__95__count);
  var string3607 = new GraceString(" = tailcall(self, \"");
  var opresult3609 = callmethod(opresult3606, "++", [1], string3607);
  var opresult3611 = callmethod(opresult3609, "++", [1], var_evl);
  var string3612 = new GraceString("\",");
  var opresult3614 = callmethod(opresult3611, "++", [1], string3612);
  lineNumber = 1063
  var call3615 = callmethod(this,"out", [1], opresult3614);
  var string3616 = new GraceString("    ");
  lineNumber = 1
  lineNumber = 1063
  lineNumber = 1
  lineNumber = 1063
  var call3617 = callmethod(var_o,"with", [0]);
  var call3618 = callmethod(call3617,"size", [0]);
  var opresult3620 = callmethod(string3616, "++", [1], call3618);
  var string3621 = new GraceString(", partcv, params, 0);");
  var opresult3623 = callmethod(opresult3620, "++", [1], string3621);
  lineNumber = 1064
  var call3624 = callmethod(this,"out", [1], opresult3623);
  var if3603 = call3624;
  } else {
  lineNumber = 1065
  var string3625 = new GraceString("  Object call");
  var opresult3627 = callmethod(string3625, "++", [1], var_auto__95__count);
  var string3628 = new GraceString(" = callmethod(self, \"");
  var opresult3630 = callmethod(opresult3627, "++", [1], string3628);
  var opresult3632 = callmethod(opresult3630, "++", [1], var_evl);
  var string3633 = new GraceString("\",");
  var opresult3635 = callmethod(opresult3632, "++", [1], string3633);
  lineNumber = 1066
  var call3636 = callmethod(this,"out", [1], opresult3635);
  var string3637 = new GraceString("    ");
  lineNumber = 1
  lineNumber = 1066
  lineNumber = 1
  lineNumber = 1066
  var call3638 = callmethod(var_o,"with", [0]);
  var call3639 = callmethod(call3638,"size", [0]);
  var opresult3641 = callmethod(string3637, "++", [1], call3639);
  var string3642 = new GraceString(", partcv, params);");
  var opresult3644 = callmethod(opresult3641, "++", [1], string3642);
  lineNumber = 1067
  var call3645 = callmethod(this,"out", [1], opresult3644);
  var if3603 = call3645;
}
  var if3454 = if3603;
}
  var if3371 = if3454;
}
  var if3326 = if3371;
}
  var if3243 = if3326;
}
  lineNumber = 1069
  var string3646 = new GraceString("  gc_frame_end(callframe");
  var opresult3648 = callmethod(string3646, "++", [1], var_myc);
  var string3649 = new GraceString(");");
  var opresult3651 = callmethod(opresult3648, "++", [1], string3649);
  lineNumber = 1070
  var call3652 = callmethod(this,"out", [1], opresult3651);
  lineNumber = 1071
  lineNumber = 1
  lineNumber = 1071
  lineNumber = 1070
  var string3653 = new GraceString("call");
  var opresult3655 = callmethod(string3653, "++", [1], var_auto__95__count);
  var call3656 = callmethod(var_o,"register:=", [1], opresult3655);
  lineNumber = 1072
  lineNumber = 1071
  var opresult3658 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3658;
  return opresult3658
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilecall"] = func3201;
  lineNumber = 1090
var func3659 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1075
  lineNumber = 1074
  var string3660 = new GraceString("");
  var var_escval = string3660;
  lineNumber = 1075
  lineNumber = 1
  lineNumber = 1075
  var call3661 = callmethod(var_o,"value", [0]);
  var call3662 = Grace_length(call3661);
  var quotient3664 = callmethod(call3662, "/", [1], new GraceNum(2));
  var var_l = quotient3664;
  lineNumber = 1077
  lineNumber = 1076
  var var_i = new GraceNum(0);
  lineNumber = 1083
  lineNumber = 1077
  lineNumber = 1
  lineNumber = 1077
  var call3665 = callmethod(var_o,"value", [0]);
  lineNumber = 1083
  var block3666 = Grace_allocObject();
  block3666.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3666.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3666.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3666.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3666.receiver = this;
  block3666.className = 'block<genc:1083>';
  block3666.real = function(
var_c
) {
  lineNumber = 1080
  lineNumber = 1081
  lineNumber = 1078
  var modulus3669 = callmethod(var_i, "%", [1], new GraceNum(2));
  var opresult3671 = callmethod(modulus3669, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult3671)) {
  lineNumber = 1080
  lineNumber = 1079
  var string3672 = new GraceString("\"\"\\x");
  var opresult3674 = callmethod(var_escval, "++", [1], string3672);
  var_escval = opresult3674;
  var if3667 = opresult3674;
}
  lineNumber = 1082
  lineNumber = 1081
  var opresult3676 = callmethod(var_escval, "++", [1], var_c);
  var_escval = opresult3676;
  lineNumber = 1083
  lineNumber = 1082
  var opresult3678 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult3678;
  return opresult3678;
};
  var call3679 = callmethod(Grace_prelude,"for()do", [1, 1], call3665, block3666);
  lineNumber = 1084
  var string3680 = new GraceString("  if (octlit");
  var opresult3682 = callmethod(string3680, "++", [1], var_auto__95__count);
  var string3683 = new GraceString(" == NULL) {");
  var opresult3685 = callmethod(opresult3682, "++", [1], string3683);
  lineNumber = 1085
  var call3686 = callmethod(this,"out", [1], opresult3685);
  var string3687 = new GraceString("    octlit");
  var opresult3689 = callmethod(string3687, "++", [1], var_auto__95__count);
  var string3690 = new GraceString(" = alloc_Octets(\"");
  var opresult3692 = callmethod(opresult3689, "++", [1], string3690);
  var opresult3694 = callmethod(opresult3692, "++", [1], var_escval);
  var string3695 = new GraceString("\", ");
  var opresult3697 = callmethod(opresult3694, "++", [1], string3695);
  var opresult3699 = callmethod(opresult3697, "++", [1], var_l);
  var string3700 = new GraceString(");");
  var opresult3702 = callmethod(opresult3699, "++", [1], string3700);
  lineNumber = 1086
  var call3703 = callmethod(this,"out", [1], opresult3702);
  var string3704 = new GraceString("  }");
  lineNumber = 1087
  var call3705 = callmethod(this,"out", [1], string3704);
  var string3706 = new GraceString("static Object octlit");
  var opresult3708 = callmethod(string3706, "++", [1], var_auto__95__count);
  var string3709 = new GraceString(";");
  var opresult3711 = callmethod(opresult3708, "++", [1], string3709);
  var call3712 = callmethod(var_globals,"push", [1], opresult3711);
  lineNumber = 1089
  lineNumber = 1
  lineNumber = 1089
  lineNumber = 1088
  var string3713 = new GraceString("octlit");
  var opresult3715 = callmethod(string3713, "++", [1], var_auto__95__count);
  var call3716 = callmethod(var_o,"register:=", [1], opresult3715);
  lineNumber = 1090
  lineNumber = 1089
  var opresult3718 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3718;
  return opresult3718
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileoctets"] = func3659;
  lineNumber = 1110
var func3719 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1092
  var string3720 = new GraceString("// Import of ");
  lineNumber = 1
  lineNumber = 1092
  lineNumber = 1
  lineNumber = 1092
  var call3721 = callmethod(var_o,"value", [0]);
  var call3722 = callmethod(call3721,"value", [0]);
  var opresult3724 = callmethod(string3720, "++", [1], call3722);
  lineNumber = 1093
  var call3725 = callmethod(this,"out", [1], opresult3724);
  lineNumber = 1094
  var var_con;
  lineNumber = 1
  lineNumber = 1094
  lineNumber = 1
  lineNumber = 1094
  var call3726 = callmethod(var_o,"value", [0]);
  var call3727 = callmethod(call3726,"value", [0]);
  lineNumber = 1095
  var call3728 = callmethod(this,"escapeident", [1], call3727);
  var var_nm = call3728;
  lineNumber = 1
  lineNumber = 1095
  lineNumber = 1
  lineNumber = 1095
  var call3729 = callmethod(var_o,"value", [0]);
  var call3730 = callmethod(call3729,"value", [0]);
  lineNumber = 1096
  var call3731 = callmethod(this,"escapestring2", [1], call3730);
  var var_fn = call3731;
  lineNumber = 1097
  lineNumber = 1096
  var string3732 = new GraceString("module_");
  var opresult3734 = callmethod(string3732, "++", [1], var_nm);
  var var_modg = opresult3734;
  lineNumber = 1097
  var string3735 = new GraceString("  if (");
  var opresult3737 = callmethod(string3735, "++", [1], var_modg);
  var string3738 = new GraceString(" == NULL)");
  var opresult3740 = callmethod(opresult3737, "++", [1], string3738);
  lineNumber = 1098
  var call3741 = callmethod(this,"out", [1], opresult3740);
  lineNumber = 1101
  lineNumber = 1098
  var call3743 = callmethod(var_staticmodules,"contains", [1], var_nm);
  if (Grace_isTrue(call3743)) {
  lineNumber = 1099
  var string3744 = new GraceString("    ");
  var opresult3746 = callmethod(string3744, "++", [1], var_modg);
  var string3747 = new GraceString(" = ");
  var opresult3749 = callmethod(opresult3746, "++", [1], string3747);
  var opresult3751 = callmethod(opresult3749, "++", [1], var_modg);
  var string3752 = new GraceString("_init();");
  var opresult3754 = callmethod(opresult3751, "++", [1], string3752);
  lineNumber = 1100
  var call3755 = callmethod(this,"out", [1], opresult3754);
  var if3742 = call3755;
  } else {
  lineNumber = 1101
  var string3756 = new GraceString("    ");
  var opresult3758 = callmethod(string3756, "++", [1], var_modg);
  var string3759 = new GraceString(" = dlmodule(\"");
  var opresult3761 = callmethod(opresult3758, "++", [1], string3759);
  var opresult3763 = callmethod(opresult3761, "++", [1], var_fn);
  var string3764 = new GraceString("\");");
  var opresult3766 = callmethod(opresult3763, "++", [1], string3764);
  lineNumber = 1102
  var call3767 = callmethod(this,"out", [1], opresult3766);
  var if3742 = call3767;
}
  lineNumber = 1103
  var string3768 = new GraceString("  Object *var_");
  var opresult3770 = callmethod(string3768, "++", [1], var_nm);
  var string3771 = new GraceString(" = alloc_var();");
  var opresult3773 = callmethod(opresult3770, "++", [1], string3771);
  lineNumber = 1104
  var call3774 = callmethod(this,"out", [1], opresult3773);
  var string3775 = new GraceString("  *var_");
  var opresult3777 = callmethod(string3775, "++", [1], var_nm);
  var string3778 = new GraceString(" = ");
  var opresult3780 = callmethod(opresult3777, "++", [1], string3778);
  var opresult3782 = callmethod(opresult3780, "++", [1], var_modg);
  var string3783 = new GraceString(";");
  var opresult3785 = callmethod(opresult3782, "++", [1], string3783);
  lineNumber = 1105
  var call3786 = callmethod(this,"out", [1], opresult3785);
  var call3787 = callmethod(var_modules,"push", [1], var_nm);
  lineNumber = 1106
  var string3788 = new GraceString("Object ");
  var opresult3790 = callmethod(string3788, "++", [1], var_modg);
  var string3791 = new GraceString("_init();");
  var opresult3793 = callmethod(opresult3790, "++", [1], string3791);
  var call3794 = callmethod(var_globals,"push", [1], opresult3793);
  lineNumber = 1107
  var string3795 = new GraceString("Object ");
  var opresult3797 = callmethod(string3795, "++", [1], var_modg);
  var string3798 = new GraceString(";");
  var opresult3800 = callmethod(opresult3797, "++", [1], string3798);
  var call3801 = callmethod(var_globals,"push", [1], opresult3800);
  lineNumber = 1109
  lineNumber = 1108
  var opresult3803 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3803;
  lineNumber = 1110
  lineNumber = 1
  lineNumber = 1109
  var string3804 = new GraceString("none");
  var call3805 = callmethod(var_o,"register:=", [1], string3804);
  return call3805
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileimport"] = func3719;
  lineNumber = 1127
var func3806 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1113
  var var_reg;
  lineNumber = 1119
  lineNumber = 1114
  lineNumber = 1121
  lineNumber = 1
  lineNumber = 1121
  lineNumber = 1
  lineNumber = 1113
  var call3808 = callmethod(var_o,"value", [0]);
  var call3809 = callmethod(call3808,"kind", [0]);
  var string3810 = new GraceString("call");
  var opresult3812 = callmethod(call3809, "==", [1], string3810);
  lineNumber = 1114
  var block3813 = Grace_allocObject();
  block3813.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3813.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3813.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3813.receiver = this;
  block3813.className = 'block<genc:1114>';
  block3813.real = function(
) {
  var string3814 = new GraceString("TailCall");
  lineNumber = 1
  lineNumber = 1114
  var call3815 = callmethod(var_util,"extensions", [0]);
  var call3816 = callmethod(call3815,"contains", [1], string3814);
  return call3816;
};
  var opresult3818 = callmethod(opresult3812, "&&", [1], block3813);
  if (Grace_isTrue(opresult3818)) {
  lineNumber = 1116
  lineNumber = 1
  lineNumber = 1116
  var call3819 = callmethod(var_o,"value", [0]);
  var bool3820 = new GraceBoolean(true)
  lineNumber = 1117
  var call3821 = callmethod(this,"compilecall", [2], call3819, bool3820);
  lineNumber = 1118
  lineNumber = 1
  lineNumber = 1118
  lineNumber = 1
  lineNumber = 1117
  var call3822 = callmethod(var_o,"value", [0]);
  var call3823 = callmethod(call3822,"register", [0]);
  var_reg = call3823;
  var if3807 = call3823;
  } else {
  lineNumber = 1119
  lineNumber = 1
  lineNumber = 1119
  var call3824 = callmethod(var_o,"value", [0]);
  lineNumber = 1120
  var call3825 = callmethod(this,"compilenode", [1], call3824);
  var_reg = call3825;
  var if3807 = call3825;
}
  lineNumber = 1124
  lineNumber = 1121
  if (Grace_isTrue(var_inBlock)) {
  lineNumber = 1122
  var string3827 = new GraceString("  block_return(realself, ");
  var opresult3829 = callmethod(string3827, "++", [1], var_reg);
  var string3830 = new GraceString(");");
  var opresult3832 = callmethod(opresult3829, "++", [1], string3830);
  lineNumber = 1123
  var call3833 = callmethod(this,"out", [1], opresult3832);
  var if3826 = call3833;
  } else {
  lineNumber = 1124
  var string3834 = new GraceString("  return ");
  var opresult3836 = callmethod(string3834, "++", [1], var_reg);
  var string3837 = new GraceString(";");
  var opresult3839 = callmethod(opresult3836, "++", [1], string3837);
  lineNumber = 1125
  var call3840 = callmethod(this,"out", [1], opresult3839);
  var if3826 = call3840;
}
  lineNumber = 1127
  lineNumber = 1
  lineNumber = 1126
  var string3841 = new GraceString("undefined");
  var call3842 = callmethod(var_o,"register:=", [1], string3841);
  return call3842
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilereturn"] = func3806;
  lineNumber = 1139
var func3843 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1130
  lineNumber = 1
  lineNumber = 1129
  var call3844 = callmethod(var_o,"value", [0]);
  var var_cnum = call3844;
  lineNumber = 1131
  lineNumber = 1130
  var bool3845 = new GraceBoolean(false)
  var var_havedot = bool3845;
  lineNumber = 1134
  lineNumber = 1131
  lineNumber = 1134
  var block3846 = Grace_allocObject();
  block3846.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3846.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3846.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3846.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3846.receiver = this;
  block3846.className = 'block<genc:1134>';
  block3846.real = function(
var_c
) {
  lineNumber = 1135
  lineNumber = 1132
  var string3848 = new GraceString(".");
  var opresult3850 = callmethod(var_c, "==", [1], string3848);
  if (Grace_isTrue(opresult3850)) {
  lineNumber = 1134
  lineNumber = 1133
  var bool3851 = new GraceBoolean(true)
  var_havedot = bool3851;
  var if3847 = bool3851;
}
  return if3847;
};
  var call3852 = callmethod(Grace_prelude,"for()do", [1, 1], var_cnum, block3846);
  lineNumber = 1136
  var string3853 = new GraceString("  Object num");
  var opresult3855 = callmethod(string3853, "++", [1], var_auto__95__count);
  var string3856 = new GraceString(" = alloc_Float64(");
  var opresult3858 = callmethod(opresult3855, "++", [1], string3856);
  var opresult3860 = callmethod(opresult3858, "++", [1], var_cnum);
  var string3861 = new GraceString(");");
  var opresult3863 = callmethod(opresult3860, "++", [1], string3861);
  lineNumber = 1137
  var call3864 = callmethod(this,"out", [1], opresult3863);
  lineNumber = 1138
  lineNumber = 1
  lineNumber = 1138
  lineNumber = 1137
  var string3865 = new GraceString("num");
  var opresult3867 = callmethod(string3865, "++", [1], var_auto__95__count);
  var call3868 = callmethod(var_o,"register:=", [1], opresult3867);
  lineNumber = 1139
  lineNumber = 1138
  var opresult3870 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3870;
  return opresult3870
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilenum"] = func3843;
  lineNumber = 1293
var func3871 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1142
  lineNumber = 1141
  var opresult3873 = callmethod(var_compilationDepth, "+", [1], new GraceNum(1));
  var_compilationDepth = opresult3873;
  lineNumber = 1146
  lineNumber = 1148
  lineNumber = 1142
  lineNumber = 1148
  lineNumber = 1
  lineNumber = 1142
  var call3875 = callmethod(var_o,"line", [0]);
  var opresult3877 = callmethod(var_linenum, "/=", [1], call3875);
  if (Grace_isTrue(opresult3877)) {
  lineNumber = 1144
  lineNumber = 1
  lineNumber = 1143
  var call3878 = callmethod(var_o,"line", [0]);
  var_linenum = call3878;
  lineNumber = 1144
  var string3879 = new GraceString("// Begin line ");
  var opresult3881 = callmethod(string3879, "++", [1], var_linenum);
  lineNumber = 1145
  var call3882 = callmethod(this,"out", [1], opresult3881);
  var string3883 = new GraceString("  setline(");
  var opresult3885 = callmethod(string3883, "++", [1], var_linenum);
  var string3886 = new GraceString(");");
  var opresult3888 = callmethod(opresult3885, "++", [1], string3886);
  lineNumber = 1146
  var call3889 = callmethod(this,"out", [1], opresult3888);
  var string3890 = new GraceString("  setmodule(modulename);");
  lineNumber = 1147
  var call3891 = callmethod(this,"out", [1], string3890);
  var if3874 = call3891;
}
  lineNumber = 1149
  lineNumber = 1151
  lineNumber = 1
  lineNumber = 1148
  var call3893 = callmethod(var_o,"kind", [0]);
  var string3894 = new GraceString("num");
  var opresult3896 = callmethod(call3893, "==", [1], string3894);
  if (Grace_isTrue(opresult3896)) {
  lineNumber = 1149
  lineNumber = 1150
  var call3897 = callmethod(this,"compilenum", [1], var_o);
  var if3892 = call3897;
}
  lineNumber = 1152
  lineNumber = 1151
  var string3898 = new GraceString("");
  var var_l = string3898;
  lineNumber = 1163
  lineNumber = 1164
  lineNumber = 1
  lineNumber = 1152
  var call3900 = callmethod(var_o,"kind", [0]);
  var string3901 = new GraceString("string");
  var opresult3903 = callmethod(call3900, "==", [1], string3901);
  if (Grace_isTrue(opresult3903)) {
  lineNumber = 1153
  lineNumber = 1
  lineNumber = 1153
  var call3904 = callmethod(var_o,"value", [0]);
  var call3905 = Grace_length(call3904);
  var_l = call3905;
  lineNumber = 1155
  lineNumber = 1154
  var opresult3907 = callmethod(var_l, "+", [1], new GraceNum(1));
  var_l = opresult3907;
  lineNumber = 1155
  lineNumber = 1
  lineNumber = 1155
  lineNumber = 1
  lineNumber = 1155
  var call3908 = callmethod(var_o,"value", [0]);
  lineNumber = 1156
  var call3909 = callmethod(this,"escapestring2", [1], call3908);
  lineNumber = 1155
  var call3910 = callmethod(var_o,"value:=", [1], call3909);
  lineNumber = 1156
  var string3911 = new GraceString("  if (strlit");
  var opresult3913 = callmethod(string3911, "++", [1], var_auto__95__count);
  var string3914 = new GraceString(" == NULL) {");
  var opresult3916 = callmethod(opresult3913, "++", [1], string3914);
  lineNumber = 1157
  var call3917 = callmethod(this,"out", [1], opresult3916);
  var string3918 = new GraceString("    strlit");
  var opresult3920 = callmethod(string3918, "++", [1], var_auto__95__count);
  var string3921 = new GraceString(" = alloc_String(\"");
  var opresult3923 = callmethod(opresult3920, "++", [1], string3921);
  lineNumber = 1
  lineNumber = 1157
  var call3924 = callmethod(var_o,"value", [0]);
  var opresult3926 = callmethod(opresult3923, "++", [1], call3924);
  var string3927 = new GraceString("\");");
  var opresult3929 = callmethod(opresult3926, "++", [1], string3927);
  lineNumber = 1158
  var call3930 = callmethod(this,"out", [1], opresult3929);
  var string3931 = new GraceString("    gc_root(strlit");
  var opresult3933 = callmethod(string3931, "++", [1], var_auto__95__count);
  var string3934 = new GraceString(");");
  var opresult3936 = callmethod(opresult3933, "++", [1], string3934);
  lineNumber = 1159
  var call3937 = callmethod(this,"out", [1], opresult3936);
  var string3938 = new GraceString("  }");
  lineNumber = 1160
  var call3939 = callmethod(this,"out", [1], string3938);
  var string3940 = new GraceString("static Object strlit");
  var opresult3942 = callmethod(string3940, "++", [1], var_auto__95__count);
  var string3943 = new GraceString(";");
  var opresult3945 = callmethod(opresult3942, "++", [1], string3943);
  var call3946 = callmethod(var_globals,"push", [1], opresult3945);
  lineNumber = 1162
  lineNumber = 1
  lineNumber = 1162
  lineNumber = 1161
  var string3947 = new GraceString("strlit");
  var opresult3949 = callmethod(string3947, "++", [1], var_auto__95__count);
  var call3950 = callmethod(var_o,"register:=", [1], opresult3949);
  lineNumber = 1163
  lineNumber = 1162
  var opresult3952 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3952;
  var if3899 = opresult3952;
}
  lineNumber = 1165
  lineNumber = 1167
  lineNumber = 1
  lineNumber = 1164
  var call3954 = callmethod(var_o,"kind", [0]);
  var string3955 = new GraceString("index");
  var opresult3957 = callmethod(call3954, "==", [1], string3955);
  if (Grace_isTrue(opresult3957)) {
  lineNumber = 1165
  lineNumber = 1166
  var call3958 = callmethod(this,"compileindex", [1], var_o);
  var if3953 = call3958;
}
  lineNumber = 1168
  lineNumber = 1170
  lineNumber = 1
  lineNumber = 1167
  var call3960 = callmethod(var_o,"kind", [0]);
  var string3961 = new GraceString("octets");
  var opresult3963 = callmethod(call3960, "==", [1], string3961);
  if (Grace_isTrue(opresult3963)) {
  lineNumber = 1168
  lineNumber = 1169
  var call3964 = callmethod(this,"compileoctets", [1], var_o);
  var if3959 = call3964;
}
  lineNumber = 1171
  lineNumber = 1173
  lineNumber = 1
  lineNumber = 1170
  var call3966 = callmethod(var_o,"kind", [0]);
  var string3967 = new GraceString("import");
  var opresult3969 = callmethod(call3966, "==", [1], string3967);
  if (Grace_isTrue(opresult3969)) {
  lineNumber = 1171
  lineNumber = 1172
  var call3970 = callmethod(this,"compileimport", [1], var_o);
  var if3965 = call3970;
}
  lineNumber = 1174
  lineNumber = 1176
  lineNumber = 1
  lineNumber = 1173
  var call3972 = callmethod(var_o,"kind", [0]);
  var string3973 = new GraceString("return");
  var opresult3975 = callmethod(call3972, "==", [1], string3973);
  if (Grace_isTrue(opresult3975)) {
  lineNumber = 1174
  lineNumber = 1175
  var call3976 = callmethod(this,"compilereturn", [1], var_o);
  var if3971 = call3976;
}
  lineNumber = 1177
  lineNumber = 1179
  lineNumber = 1
  lineNumber = 1176
  var call3978 = callmethod(var_o,"kind", [0]);
  var string3979 = new GraceString("generic");
  var opresult3981 = callmethod(call3978, "==", [1], string3979);
  if (Grace_isTrue(opresult3981)) {
  lineNumber = 1177
  lineNumber = 1
  lineNumber = 1177
  lineNumber = 1
  lineNumber = 1177
  var call3982 = callmethod(var_o,"value", [0]);
  lineNumber = 1178
  var call3983 = callmethod(this,"compilenode", [1], call3982);
  lineNumber = 1177
  var call3984 = callmethod(var_o,"register:=", [1], call3983);
  var if3977 = call3984;
}
  lineNumber = 1189
  lineNumber = 1191
  lineNumber = 1
  lineNumber = 1179
  var call3986 = callmethod(var_o,"kind", [0]);
  var string3987 = new GraceString("identifier");
  var opresult3989 = callmethod(call3986, "==", [1], string3987);
  lineNumber = 1191
  lineNumber = 1
  lineNumber = 1180
  var call3990 = callmethod(var_o,"value", [0]);
  var string3991 = new GraceString("true");
  var opresult3993 = callmethod(call3990, "==", [1], string3991);
  lineNumber = 1191
  lineNumber = 1
  lineNumber = 1180
  var call3994 = callmethod(var_o,"value", [0]);
  var string3995 = new GraceString("false");
  var opresult3997 = callmethod(call3994, "==", [1], string3995);
  var opresult3999 = callmethod(opresult3993, "|", [1], opresult3997);
  var opresult4001 = callmethod(opresult3989, "&", [1], opresult3999);
  if (Grace_isTrue(opresult4001)) {
  lineNumber = 1182
  lineNumber = 1181
  var var_val = new GraceNum(0);
  lineNumber = 1184
  lineNumber = 1185
  lineNumber = 1
  lineNumber = 1182
  var call4003 = callmethod(var_o,"value", [0]);
  var string4004 = new GraceString("true");
  var opresult4006 = callmethod(call4003, "==", [1], string4004);
  if (Grace_isTrue(opresult4006)) {
  lineNumber = 1184
  lineNumber = 1183
  var_val = new GraceNum(1);
  var if4002 = new GraceNum(1);
}
  lineNumber = 1185
  var string4007 = new GraceString("  Object bool");
  var opresult4009 = callmethod(string4007, "++", [1], var_auto__95__count);
  var string4010 = new GraceString(" = alloc_Boolean(");
  var opresult4012 = callmethod(string4010, "++", [1], var_val);
  var string4013 = new GraceString(");");
  var opresult4015 = callmethod(opresult4012, "++", [1], string4013);
  var opresult4017 = callmethod(opresult4009, "++", [1], opresult4015);
  lineNumber = 1186
  var call4018 = callmethod(this,"out", [1], opresult4017);
  lineNumber = 1187
  lineNumber = 1
  lineNumber = 1187
  lineNumber = 1186
  var string4019 = new GraceString("bool");
  var opresult4021 = callmethod(string4019, "++", [1], var_auto__95__count);
  var call4022 = callmethod(var_o,"register:=", [1], opresult4021);
  lineNumber = 1188
  lineNumber = 1187
  var opresult4024 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult4024;
  var if3985 = opresult4024;
  } else {
  lineNumber = 1189
  lineNumber = 1191
  lineNumber = 1
  lineNumber = 1188
  var call4026 = callmethod(var_o,"kind", [0]);
  var string4027 = new GraceString("identifier");
  var opresult4029 = callmethod(call4026, "==", [1], string4027);
  if (Grace_isTrue(opresult4029)) {
  lineNumber = 1189
  lineNumber = 1190
  var call4030 = callmethod(this,"compileidentifier", [1], var_o);
  var if4025 = call4030;
}
  var if3985 = if4025;
}
  lineNumber = 1192
  lineNumber = 1194
  lineNumber = 1
  lineNumber = 1191
  var call4032 = callmethod(var_o,"kind", [0]);
  var string4033 = new GraceString("defdec");
  var opresult4035 = callmethod(call4032, "==", [1], string4033);
  if (Grace_isTrue(opresult4035)) {
  lineNumber = 1192
  lineNumber = 1193
  var call4036 = callmethod(this,"compiledefdec", [1], var_o);
  var if4031 = call4036;
}
  lineNumber = 1195
  lineNumber = 1197
  lineNumber = 1
  lineNumber = 1194
  var call4038 = callmethod(var_o,"kind", [0]);
  var string4039 = new GraceString("vardec");
  var opresult4041 = callmethod(call4038, "==", [1], string4039);
  if (Grace_isTrue(opresult4041)) {
  lineNumber = 1195
  lineNumber = 1196
  var call4042 = callmethod(this,"compilevardec", [1], var_o);
  var if4037 = call4042;
}
  lineNumber = 1198
  lineNumber = 1200
  lineNumber = 1
  lineNumber = 1197
  var call4044 = callmethod(var_o,"kind", [0]);
  var string4045 = new GraceString("block");
  var opresult4047 = callmethod(call4044, "==", [1], string4045);
  if (Grace_isTrue(opresult4047)) {
  lineNumber = 1198
  lineNumber = 1199
  var call4048 = callmethod(this,"compileblock", [1], var_o);
  var if4043 = call4048;
}
  lineNumber = 1203
  lineNumber = 1204
  lineNumber = 1
  lineNumber = 1200
  var call4050 = callmethod(var_o,"kind", [0]);
  var string4051 = new GraceString("method");
  var opresult4053 = callmethod(call4050, "==", [1], string4051);
  if (Grace_isTrue(opresult4053)) {
  lineNumber = 1201
  var string4054 = new GraceString("self");
  lineNumber = 1202
  var call4055 = callmethod(this,"compilemethod", [3], var_o, string4054, var_topLevelMethodPos);
  lineNumber = 1203
  lineNumber = 1202
  var opresult4057 = callmethod(var_topLevelMethodPos, "+", [1], new GraceNum(1));
  var_topLevelMethodPos = opresult4057;
  var if4049 = opresult4057;
}
  lineNumber = 1205
  lineNumber = 1207
  lineNumber = 1
  lineNumber = 1204
  var call4059 = callmethod(var_o,"kind", [0]);
  var string4060 = new GraceString("array");
  var opresult4062 = callmethod(call4059, "==", [1], string4060);
  if (Grace_isTrue(opresult4062)) {
  lineNumber = 1205
  lineNumber = 1206
  var call4063 = callmethod(this,"compilearray", [1], var_o);
  var if4058 = call4063;
}
  lineNumber = 1208
  lineNumber = 1210
  lineNumber = 1
  lineNumber = 1207
  var call4065 = callmethod(var_o,"kind", [0]);
  var string4066 = new GraceString("bind");
  var opresult4068 = callmethod(call4065, "==", [1], string4066);
  if (Grace_isTrue(opresult4068)) {
  lineNumber = 1208
  lineNumber = 1209
  var call4069 = callmethod(this,"compilebind", [1], var_o);
  var if4064 = call4069;
}
  lineNumber = 1211
  lineNumber = 1213
  lineNumber = 1
  lineNumber = 1210
  var call4071 = callmethod(var_o,"kind", [0]);
  var string4072 = new GraceString("while");
  var opresult4074 = callmethod(call4071, "==", [1], string4072);
  if (Grace_isTrue(opresult4074)) {
  lineNumber = 1211
  lineNumber = 1212
  var call4075 = callmethod(this,"compilewhile", [1], var_o);
  var if4070 = call4075;
}
  lineNumber = 1214
  lineNumber = 1216
  lineNumber = 1
  lineNumber = 1213
  var call4077 = callmethod(var_o,"kind", [0]);
  var string4078 = new GraceString("if");
  var opresult4080 = callmethod(call4077, "==", [1], string4078);
  if (Grace_isTrue(opresult4080)) {
  lineNumber = 1214
  lineNumber = 1215
  var call4081 = callmethod(this,"compileif", [1], var_o);
  var if4076 = call4081;
}
  lineNumber = 1217
  lineNumber = 1219
  lineNumber = 1
  lineNumber = 1216
  var call4083 = callmethod(var_o,"kind", [0]);
  var string4084 = new GraceString("matchcase");
  var opresult4086 = callmethod(call4083, "==", [1], string4084);
  if (Grace_isTrue(opresult4086)) {
  lineNumber = 1217
  lineNumber = 1218
  var call4087 = callmethod(this,"compilematchcase", [1], var_o);
  var if4082 = call4087;
}
  lineNumber = 1220
  lineNumber = 1222
  lineNumber = 1
  lineNumber = 1219
  var call4089 = callmethod(var_o,"kind", [0]);
  var string4090 = new GraceString("class");
  var opresult4092 = callmethod(call4089, "==", [1], string4090);
  if (Grace_isTrue(opresult4092)) {
  lineNumber = 1220
  lineNumber = 1221
  var call4093 = callmethod(this,"compileclass", [1], var_o);
  var if4088 = call4093;
}
  lineNumber = 1223
  lineNumber = 1225
  lineNumber = 1
  lineNumber = 1222
  var call4095 = callmethod(var_o,"kind", [0]);
  var string4096 = new GraceString("object");
  var opresult4098 = callmethod(call4095, "==", [1], string4096);
  if (Grace_isTrue(opresult4098)) {
  lineNumber = 1223
  var string4099 = new GraceString("self");
  lineNumber = 1224
  var call4100 = callmethod(this,"compileobject", [2], var_o, string4099);
  var if4094 = call4100;
}
  lineNumber = 1226
  lineNumber = 1228
  lineNumber = 1
  lineNumber = 1225
  var call4102 = callmethod(var_o,"kind", [0]);
  var string4103 = new GraceString("type");
  var opresult4105 = callmethod(call4102, "==", [1], string4103);
  if (Grace_isTrue(opresult4105)) {
  lineNumber = 1226
  lineNumber = 1227
  var call4106 = callmethod(this,"compiletype", [1], var_o);
  var if4101 = call4106;
}
  lineNumber = 1229
  lineNumber = 1231
  lineNumber = 1
  lineNumber = 1228
  var call4108 = callmethod(var_o,"kind", [0]);
  var string4109 = new GraceString("member");
  var opresult4111 = callmethod(call4108, "==", [1], string4109);
  if (Grace_isTrue(opresult4111)) {
  lineNumber = 1229
  lineNumber = 1230
  var call4112 = callmethod(this,"compilemember", [1], var_o);
  var if4107 = call4112;
}
  lineNumber = 1232
  lineNumber = 1234
  lineNumber = 1
  lineNumber = 1231
  var call4114 = callmethod(var_o,"kind", [0]);
  var string4115 = new GraceString("for");
  var opresult4117 = callmethod(call4114, "==", [1], string4115);
  if (Grace_isTrue(opresult4117)) {
  lineNumber = 1232
  lineNumber = 1233
  var call4118 = callmethod(this,"compilefor", [1], var_o);
  var if4113 = call4118;
}
  lineNumber = 1285
  lineNumber = 1288
  lineNumber = 1
  lineNumber = 1234
  var call4120 = callmethod(var_o,"kind", [0]);
  var string4121 = new GraceString("call");
  var opresult4123 = callmethod(call4120, "==", [1], string4121);
  if (Grace_isTrue(opresult4123)) {
  lineNumber = 1285
  lineNumber = 1287
  lineNumber = 1
  lineNumber = 1287
  lineNumber = 1
  lineNumber = 1235
  var call4125 = callmethod(var_o,"value", [0]);
  var call4126 = callmethod(call4125,"value", [0]);
  var string4127 = new GraceString("print");
  var opresult4129 = callmethod(call4126, "==", [1], string4127);
  if (Grace_isTrue(opresult4129)) {
  lineNumber = 1237
  var array4130 = new GraceList([
]);

  var var_args = array4130;
  lineNumber = 1239
  lineNumber = 1237
  lineNumber = 1
  lineNumber = 1237
  lineNumber = 1
  lineNumber = 1237
  lineNumber = 1
  lineNumber = 1237
  var call4131 = callmethod(var_o,"with", [0]);
  var call4132 = callmethod(call4131,"first", [0]);
  var call4133 = callmethod(call4132,"args", [0]);
  lineNumber = 1239
  var block4134 = Grace_allocObject();
  block4134.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4134.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4134.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4134.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4134.receiver = this;
  block4134.className = 'block<genc:1239>';
  block4134.real = function(
var_prm
) {
  lineNumber = 1238
  lineNumber = 1239
  var call4135 = callmethod(this,"compilenode", [1], var_prm);
  var var_r = call4135;
  var call4136 = callmethod(var_args,"push", [1], var_r);
  return call4136;
};
  var call4137 = callmethod(Grace_prelude,"for()do", [1, 1], call4133, block4134);
  lineNumber = 1242
  lineNumber = 1241
  var var_parami = new GraceNum(0);
  lineNumber = 1245
  lineNumber = 1242
  lineNumber = 1245
  var block4138 = Grace_allocObject();
  block4138.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4138.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4138.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4138.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4138.receiver = this;
  block4138.className = 'block<genc:1245>';
  block4138.real = function(
var_arg
) {
  lineNumber = 1243
  var string4139 = new GraceString("  params[");
  var opresult4141 = callmethod(string4139, "++", [1], var_parami);
  var string4142 = new GraceString("] = ");
  var opresult4144 = callmethod(opresult4141, "++", [1], string4142);
  var opresult4146 = callmethod(opresult4144, "++", [1], var_arg);
  var string4147 = new GraceString(";");
  var opresult4149 = callmethod(opresult4146, "++", [1], string4147);
  lineNumber = 1244
  var call4150 = callmethod(this,"out", [1], opresult4149);
  lineNumber = 1245
  lineNumber = 1244
  var opresult4152 = callmethod(var_parami, "+", [1], new GraceNum(1));
  var_parami = opresult4152;
  return opresult4152;
};
  var call4153 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block4138);
  lineNumber = 1247
  lineNumber = 1246
  var string4154 = new GraceString("  Object call");
  var opresult4156 = callmethod(string4154, "++", [1], var_auto__95__count);
  var string4157 = new GraceString(" = gracelib_print(NULL, ");
  var opresult4159 = callmethod(opresult4156, "++", [1], string4157);
  lineNumber = 1247
  lineNumber = 1
  lineNumber = 1247
  var call4160 = callmethod(var_args,"size", [0]);
  var opresult4162 = callmethod(opresult4159, "++", [1], call4160);
  var string4163 = new GraceString(",  params);");
  var opresult4165 = callmethod(opresult4162, "++", [1], string4163);
  lineNumber = 1248
  var call4166 = callmethod(this,"out", [1], opresult4165);
  lineNumber = 1249
  lineNumber = 1
  lineNumber = 1249
  lineNumber = 1248
  var string4167 = new GraceString("call");
  var opresult4169 = callmethod(string4167, "++", [1], var_auto__95__count);
  var call4170 = callmethod(var_o,"register:=", [1], opresult4169);
  lineNumber = 1250
  lineNumber = 1249
  var opresult4172 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult4172;
  var if4124 = opresult4172;
  } else {
  lineNumber = 1285
  lineNumber = 1253
  lineNumber = 1258
  lineNumber = 1
  lineNumber = 1258
  lineNumber = 1
  lineNumber = 1250
  var call4174 = callmethod(var_o,"value", [0]);
  var call4175 = callmethod(call4174,"kind", [0]);
  var string4176 = new GraceString("member");
  var opresult4178 = callmethod(call4175, "==", [1], string4176);
  lineNumber = 1253
  var block4179 = Grace_allocObject();
  block4179.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4179.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4179.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4179.receiver = this;
  block4179.className = 'block<genc:1253>';
  block4179.real = function(
) {
  lineNumber = 1
  lineNumber = 1253
  lineNumber = 1
  lineNumber = 1253
  lineNumber = 1
  lineNumber = 1251
  var call4180 = callmethod(var_o,"value", [0]);
  var call4181 = callmethod(call4180,"in", [0]);
  var call4182 = callmethod(call4181,"kind", [0]);
  var string4183 = new GraceString("identifier");
  var opresult4185 = callmethod(call4182, "==", [1], string4183);
  lineNumber = 1253
  lineNumber = 1
  lineNumber = 1253
  lineNumber = 1
  lineNumber = 1253
  lineNumber = 1
  lineNumber = 1252
  var call4186 = callmethod(var_o,"value", [0]);
  var call4187 = callmethod(call4186,"in", [0]);
  var call4188 = callmethod(call4187,"value", [0]);
  var string4189 = new GraceString("self");
  var opresult4191 = callmethod(call4188, "==", [1], string4189);
  var opresult4193 = callmethod(opresult4185, "&", [1], opresult4191);
  lineNumber = 1253
  lineNumber = 1
  lineNumber = 1253
  lineNumber = 1
  lineNumber = 1253
  var call4194 = callmethod(var_o,"value", [0]);
  var call4195 = callmethod(call4194,"value", [0]);
  var string4196 = new GraceString("length");
  var opresult4198 = callmethod(call4195, "==", [1], string4196);
  var opresult4200 = callmethod(opresult4193, "&", [1], opresult4198);
  return opresult4200;
};
  var opresult4202 = callmethod(opresult4178, "&&", [1], block4179);
  if (Grace_isTrue(opresult4202)) {
  lineNumber = 1254
  lineNumber = 1
  lineNumber = 1254
  lineNumber = 1
  lineNumber = 1254
  lineNumber = 1
  lineNumber = 1254
  lineNumber = 1
  lineNumber = 1254
  var call4203 = callmethod(var_o,"with", [0]);
  var call4204 = callmethod(call4203,"first", [0]);
  var call4205 = callmethod(call4204,"args", [0]);
  var call4206 = callmethod(call4205,"first", [0]);
  lineNumber = 1255
  var call4207 = callmethod(this,"compilenode", [1], call4206);
  var_tmp = call4207;
  var string4208 = new GraceString("  Object call");
  var opresult4210 = callmethod(string4208, "++", [1], var_auto__95__count);
  var string4211 = new GraceString(" = gracelib_length(");
  var opresult4213 = callmethod(string4211, "++", [1], var_tmp);
  var string4214 = new GraceString(");");
  var opresult4216 = callmethod(opresult4213, "++", [1], string4214);
  var opresult4218 = callmethod(opresult4210, "++", [1], opresult4216);
  lineNumber = 1256
  var call4219 = callmethod(this,"out", [1], opresult4218);
  lineNumber = 1257
  lineNumber = 1
  lineNumber = 1257
  lineNumber = 1256
  var string4220 = new GraceString("call");
  var opresult4222 = callmethod(string4220, "++", [1], var_auto__95__count);
  var call4223 = callmethod(var_o,"register:=", [1], opresult4222);
  lineNumber = 1258
  lineNumber = 1257
  var opresult4225 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult4225;
  var if4173 = opresult4225;
  } else {
  lineNumber = 1285
  lineNumber = 1270
  lineNumber = 1
  lineNumber = 1270
  lineNumber = 1
  lineNumber = 1258
  var call4227 = callmethod(var_o,"value", [0]);
  var call4228 = callmethod(call4227,"kind", [0]);
  var string4229 = new GraceString("identifier");
  var opresult4231 = callmethod(call4228, "==", [1], string4229);
  lineNumber = 1270
  lineNumber = 1
  lineNumber = 1270
  lineNumber = 1
  lineNumber = 1259
  var call4232 = callmethod(var_o,"value", [0]);
  var call4233 = callmethod(call4232,"value", [0]);
  var string4234 = new GraceString("length");
  var opresult4236 = callmethod(call4233, "==", [1], string4234);
  var opresult4238 = callmethod(opresult4231, "&", [1], opresult4236);
  if (Grace_isTrue(opresult4238)) {
  lineNumber = 1265
  lineNumber = 1267
  lineNumber = 1
  lineNumber = 1267
  lineNumber = 1
  lineNumber = 1267
  lineNumber = 1
  lineNumber = 1267
  lineNumber = 1
  lineNumber = 1260
  var call4240 = callmethod(var_o,"with", [0]);
  var call4241 = callmethod(call4240,"first", [0]);
  var call4242 = callmethod(call4241,"args", [0]);
  var call4243 = callmethod(call4242,"size", [0]);
  var opresult4245 = callmethod(call4243, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult4245)) {
  lineNumber = 1261
  var string4246 = new GraceString("; PP FOLLOWS");
  lineNumber = 1262
  var call4247 = callmethod(this,"out", [1], string4246);
  var call4248 = callmethod(var_o,"pretty", [1], new GraceNum(0));
  lineNumber = 1263
  var call4249 = callmethod(this,"out", [1], call4248);
  lineNumber = 1264
  lineNumber = 1263
  var string4250 = new GraceString("null");
  var_tmp = string4250;
  var if4239 = string4250;
  } else {
  lineNumber = 1265
  lineNumber = 1
  lineNumber = 1265
  lineNumber = 1
  lineNumber = 1265
  lineNumber = 1
  lineNumber = 1265
  lineNumber = 1
  lineNumber = 1265
  var call4251 = callmethod(var_o,"with", [0]);
  var call4252 = callmethod(call4251,"first", [0]);
  var call4253 = callmethod(call4252,"args", [0]);
  var call4254 = callmethod(call4253,"first", [0]);
  lineNumber = 1266
  var call4255 = callmethod(this,"compilenode", [1], call4254);
  var_tmp = call4255;
  var if4239 = call4255;
}
  lineNumber = 1267
  var string4256 = new GraceString("  Object call");
  var opresult4258 = callmethod(string4256, "++", [1], var_auto__95__count);
  var string4259 = new GraceString(" = gracelib_length(");
  var opresult4261 = callmethod(string4259, "++", [1], var_tmp);
  var string4262 = new GraceString(");");
  var opresult4264 = callmethod(opresult4261, "++", [1], string4262);
  var opresult4266 = callmethod(opresult4258, "++", [1], opresult4264);
  lineNumber = 1268
  var call4267 = callmethod(this,"out", [1], opresult4266);
  lineNumber = 1269
  lineNumber = 1
  lineNumber = 1269
  lineNumber = 1268
  var string4268 = new GraceString("call");
  var opresult4270 = callmethod(string4268, "++", [1], var_auto__95__count);
  var call4271 = callmethod(var_o,"register:=", [1], opresult4270);
  lineNumber = 1270
  lineNumber = 1269
  var opresult4273 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult4273;
  var if4226 = opresult4273;
  } else {
  lineNumber = 1285
  lineNumber = 1273
  lineNumber = 1278
  lineNumber = 1
  lineNumber = 1278
  lineNumber = 1
  lineNumber = 1270
  var call4275 = callmethod(var_o,"value", [0]);
  var call4276 = callmethod(call4275,"kind", [0]);
  var string4277 = new GraceString("member");
  var opresult4279 = callmethod(call4276, "==", [1], string4277);
  lineNumber = 1273
  var block4280 = Grace_allocObject();
  block4280.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4280.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4280.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4280.receiver = this;
  block4280.className = 'block<genc:1273>';
  block4280.real = function(
) {
  lineNumber = 1
  lineNumber = 1273
  lineNumber = 1
  lineNumber = 1273
  lineNumber = 1
  lineNumber = 1271
  var call4281 = callmethod(var_o,"value", [0]);
  var call4282 = callmethod(call4281,"in", [0]);
  var call4283 = callmethod(call4282,"kind", [0]);
  var string4284 = new GraceString("identifier");
  var opresult4286 = callmethod(call4283, "==", [1], string4284);
  lineNumber = 1273
  lineNumber = 1
  lineNumber = 1273
  lineNumber = 1
  lineNumber = 1273
  lineNumber = 1
  lineNumber = 1272
  var call4287 = callmethod(var_o,"value", [0]);
  var call4288 = callmethod(call4287,"in", [0]);
  var call4289 = callmethod(call4288,"value", [0]);
  var string4290 = new GraceString("self");
  var opresult4292 = callmethod(call4289, "==", [1], string4290);
  var opresult4294 = callmethod(opresult4286, "&", [1], opresult4292);
  lineNumber = 1273
  lineNumber = 1
  lineNumber = 1273
  lineNumber = 1
  lineNumber = 1273
  var call4295 = callmethod(var_o,"value", [0]);
  var call4296 = callmethod(call4295,"value", [0]);
  var string4297 = new GraceString("escapestring");
  var opresult4299 = callmethod(call4296, "==", [1], string4297);
  var opresult4301 = callmethod(opresult4294, "&", [1], opresult4299);
  return opresult4301;
};
  var opresult4303 = callmethod(opresult4279, "&&", [1], block4280);
  if (Grace_isTrue(opresult4303)) {
  lineNumber = 1275
  lineNumber = 1
  lineNumber = 1275
  lineNumber = 1
  lineNumber = 1275
  lineNumber = 1
  lineNumber = 1275
  lineNumber = 1
  lineNumber = 1274
  var call4304 = callmethod(var_o,"with", [0]);
  var call4305 = callmethod(call4304,"first", [0]);
  var call4306 = callmethod(call4305,"args", [0]);
  var call4307 = callmethod(call4306,"first", [0]);
  var_tmp = call4307;
  lineNumber = 1275
  var string4308 = new GraceString("_escape");
  lineNumber = 1276
  lineNumber = 1
  lineNumber = 1275
  var call4309 = callmethod(var_ast,"memberNode", [0]);
  var call4310 = callmethod(call4309,"new", [2], string4308, var_tmp);
  var_tmp = call4310;
  lineNumber = 1276
  lineNumber = 1
  lineNumber = 1276
  var call4312 = callmethod(var_tmp,"value", [0]);
  lineNumber = 1
  lineNumber = 1276
  var call4313 = callmethod(var_ast,"callWithPart", [0]);
  var call4314 = callmethod(call4313,"new", [1], call4312);
  var array4311 = new GraceList([
call4314,
]);

  lineNumber = 1277
  lineNumber = 1
  lineNumber = 1276
  var call4315 = callmethod(var_ast,"callNode", [0]);
  var call4316 = callmethod(call4315,"new", [2], var_tmp, array4311);
  var_tmp = call4316;
  lineNumber = 1277
  lineNumber = 1
  lineNumber = 1277
  lineNumber = 1278
  var call4317 = callmethod(this,"compilenode", [1], var_tmp);
  lineNumber = 1277
  var call4318 = callmethod(var_o,"register:=", [1], call4317);
  var if4274 = call4318;
  } else {
  lineNumber = 1285
  lineNumber = 1284
  lineNumber = 1
  lineNumber = 1284
  lineNumber = 1
  lineNumber = 1278
  var call4320 = callmethod(var_o,"value", [0]);
  var call4321 = callmethod(call4320,"kind", [0]);
  var string4322 = new GraceString("identifier");
  var opresult4324 = callmethod(call4321, "==", [1], string4322);
  lineNumber = 1284
  lineNumber = 1
  lineNumber = 1284
  lineNumber = 1
  lineNumber = 1279
  var call4325 = callmethod(var_o,"value", [0]);
  var call4326 = callmethod(call4325,"value", [0]);
  var string4327 = new GraceString("escapestring");
  var opresult4329 = callmethod(call4326, "==", [1], string4327);
  var opresult4331 = callmethod(opresult4324, "&", [1], opresult4329);
  if (Grace_isTrue(opresult4331)) {
  lineNumber = 1281
  lineNumber = 1
  lineNumber = 1281
  lineNumber = 1
  lineNumber = 1281
  lineNumber = 1
  lineNumber = 1281
  lineNumber = 1
  lineNumber = 1280
  var call4332 = callmethod(var_o,"with", [0]);
  var call4333 = callmethod(call4332,"first", [0]);
  var call4334 = callmethod(call4333,"args", [0]);
  var call4335 = callmethod(call4334,"first", [0]);
  var_tmp = call4335;
  lineNumber = 1281
  var string4336 = new GraceString("_escape");
  lineNumber = 1282
  lineNumber = 1
  lineNumber = 1281
  var call4337 = callmethod(var_ast,"memberNode", [0]);
  var call4338 = callmethod(call4337,"new", [2], string4336, var_tmp);
  var_tmp = call4338;
  lineNumber = 1282
  lineNumber = 1
  lineNumber = 1282
  var call4340 = callmethod(var_tmp,"value", [0]);
  lineNumber = 1
  lineNumber = 1282
  var call4341 = callmethod(var_ast,"callWithPart", [0]);
  var call4342 = callmethod(call4341,"new", [1], call4340);
  var array4339 = new GraceList([
call4342,
]);

  lineNumber = 1283
  lineNumber = 1
  lineNumber = 1282
  var call4343 = callmethod(var_ast,"callNode", [0]);
  var call4344 = callmethod(call4343,"new", [2], var_tmp, array4339);
  var_tmp = call4344;
  lineNumber = 1283
  lineNumber = 1
  lineNumber = 1283
  lineNumber = 1284
  var call4345 = callmethod(this,"compilenode", [1], var_tmp);
  lineNumber = 1283
  var call4346 = callmethod(var_o,"register:=", [1], call4345);
  var if4319 = call4346;
  } else {
  lineNumber = 1285
  var bool4347 = new GraceBoolean(false)
  lineNumber = 1286
  var call4348 = callmethod(this,"compilecall", [2], var_o, bool4347);
  var if4319 = call4348;
}
  var if4274 = if4319;
}
  var if4226 = if4274;
}
  var if4173 = if4226;
}
  var if4124 = if4173;
}
  var if4119 = if4124;
}
  lineNumber = 1289
  lineNumber = 1291
  lineNumber = 1
  lineNumber = 1288
  var call4350 = callmethod(var_o,"kind", [0]);
  var string4351 = new GraceString("op");
  var opresult4353 = callmethod(call4350, "==", [1], string4351);
  if (Grace_isTrue(opresult4353)) {
  lineNumber = 1289
  lineNumber = 1290
  var call4354 = callmethod(this,"compileop", [1], var_o);
  var if4349 = call4354;
}
  lineNumber = 1292
  lineNumber = 1291
  var diff4356 = callmethod(var_compilationDepth, "-", [1], new GraceNum(1));
  var_compilationDepth = diff4356;
  lineNumber = 1292
  var string4357 = new GraceString("// compilenode returning ");
  lineNumber = 1
  lineNumber = 1292
  var call4358 = callmethod(var_o,"register", [0]);
  var opresult4360 = callmethod(string4357, "++", [1], call4358);
  lineNumber = 1293
  var call4361 = callmethod(this,"out", [1], opresult4360);
  lineNumber = 1
  lineNumber = 1293
  var call4362 = callmethod(var_o,"register", [0]);
  return call4362
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilenode"] = func3871;
  lineNumber = 1313
var func4363 = function(argcv) {
  var curarg = 1;
  var var_subprocesses = arguments[curarg];
  curarg++;
  var var_id = arguments[curarg];
  curarg++;
  var var_cmd = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1297
  lineNumber = 1299
  lineNumber = 1
  lineNumber = 1296
  var call4365 = callmethod(var_subprocesses,"size", [0]);
  lineNumber = 1299
  lineNumber = 1
  lineNumber = 1296
  var call4366 = callmethod(var_util,"jobs", [0]);
  var opresult4368 = callmethod(call4365, "<", [1], call4366);
  if (Grace_isTrue(opresult4368)) {
  lineNumber = 1297
  var string4370 = new GraceString("bash");
  var string4371 = new GraceString("-c");
  var call4372 = callmethod(var_io,"spawn", [3], string4370, string4371, var_cmd);
  var array4369 = new GraceList([
var_id,
call4372,
]);

  var call4373 = callmethod(var_subprocesses,"push", [1], array4369);
  return call4373
  var if4364 = undefined;
}
  lineNumber = 1300
  lineNumber = 1299
  var var_alive = new GraceNum(0);
  lineNumber = 1301
  lineNumber = 1300
  var bool4374 = new GraceBoolean(false)
  var var_firstAlive = bool4374;
  lineNumber = 1308
  lineNumber = 1301
  lineNumber = 1308
  var block4375 = Grace_allocObject();
  block4375.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4375.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4375.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4375.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4375.receiver = this;
  block4375.className = 'block<genc:1308>';
  block4375.real = function(
var_spinfo
) {
  lineNumber = 1303
  lineNumber = 1302
  var idxres4376 = var_spinfo.methods["[]"].call(var_spinfo, [1], new GraceNum(2));
  var var_sp = idxres4376;
  lineNumber = 1308
  lineNumber = 1309
  lineNumber = 1
  lineNumber = 1303
  var call4378 = callmethod(var_sp,"terminated", [0]);
  var call4379 = callmethod(call4378,"prefix!", [0]);
  if (Grace_isTrue(call4379)) {
  lineNumber = 1306
  lineNumber = 1307
  lineNumber = 1304
  var bool4381 = new GraceBoolean(false)
  var opresult4383 = callmethod(bool4381, "==", [1], var_firstAlive);
  if (Grace_isTrue(opresult4383)) {
  lineNumber = 1306
  lineNumber = 1305
  var_firstAlive = var_spinfo;
  var if4380 = var_spinfo;
}
  lineNumber = 1308
  lineNumber = 1307
  var opresult4385 = callmethod(var_alive, "+", [1], new GraceNum(1));
  var_alive = opresult4385;
  var if4377 = opresult4385;
}
  return if4377;
};
  var call4386 = callmethod(Grace_prelude,"for()do", [1, 1], var_subprocesses, block4375);
  lineNumber = 1311
  lineNumber = 1313
  lineNumber = 1310
  lineNumber = 1313
  lineNumber = 1
  lineNumber = 1310
  var call4388 = callmethod(var_util,"jobs", [0]);
  var opresult4390 = callmethod(var_alive, ">=", [1], call4388);
  if (Grace_isTrue(opresult4390)) {
  lineNumber = 1311
  lineNumber = 1
  lineNumber = 1311
  var idxres4391 = var_firstAlive.methods["[]"].call(var_firstAlive, [1], new GraceNum(2));
  var call4392 = callmethod(idxres4391,"wait", [0]);
  var if4387 = call4392;
}
  lineNumber = 1313
  var string4394 = new GraceString("bash");
  var string4395 = new GraceString("-c");
  var call4396 = callmethod(var_io,"spawn", [3], string4394, string4395, var_cmd);
  var array4393 = new GraceList([
var_id,
call4396,
]);

  var call4397 = callmethod(var_subprocesses,"push", [1], array4393);
  return call4397
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["spawnSubprocess"] = func4363;
  lineNumber = 1614
var func4398 = function(argcv) {
  var curarg = 1;
  var var_vl = arguments[curarg];
  curarg++;
  var var_of = arguments[curarg];
  curarg++;
  var var_mn = arguments[curarg];
  curarg++;
  var var_rm = arguments[curarg];
  curarg++;
  var var_bt = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1317
  lineNumber = 1
  lineNumber = 1316
  var call4399 = callmethod(var_sys,"argv", [0]);
  var var_argv = call4399;
  lineNumber = 1318
  var var_cmd;
  lineNumber = 1319
  lineNumber = 1318
  var_values = var_vl;
  lineNumber = 1320
  lineNumber = 1319
  var var_nummethods = new GraceNum(2);
  lineNumber = 1329
  lineNumber = 1320
  lineNumber = 1329
  var block4400 = Grace_allocObject();
  block4400.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4400.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4400.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4400.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4400.receiver = this;
  block4400.className = 'block<genc:1329>';
  block4400.real = function(
var_v
) {
  lineNumber = 1330
  lineNumber = 1
  lineNumber = 1321
  var call4402 = callmethod(var_v,"kind", [0]);
  var string4403 = new GraceString("vardec");
  var opresult4405 = callmethod(call4402, "==", [1], string4403);
  if (Grace_isTrue(opresult4405)) {
  lineNumber = 1323
  lineNumber = 1322
  var opresult4407 = callmethod(var_nummethods, "+", [1], new GraceNum(2));
  var_nummethods = opresult4407;
  var if4401 = opresult4407;
  } else {
  lineNumber = 1329
  lineNumber = 1325
  lineNumber = 1
  lineNumber = 1323
  var call4409 = callmethod(var_v,"kind", [0]);
  var string4410 = new GraceString("method");
  var opresult4412 = callmethod(call4409, "==", [1], string4410);
  if (Grace_isTrue(opresult4412)) {
  lineNumber = 1325
  lineNumber = 1324
  var opresult4414 = callmethod(var_nummethods, "+", [1], new GraceNum(1));
  var_nummethods = opresult4414;
  var if4408 = opresult4414;
  } else {
  lineNumber = 1329
  lineNumber = 1327
  lineNumber = 1
  lineNumber = 1325
  var call4416 = callmethod(var_v,"kind", [0]);
  var string4417 = new GraceString("defdec");
  var opresult4419 = callmethod(call4416, "==", [1], string4417);
  if (Grace_isTrue(opresult4419)) {
  lineNumber = 1327
  lineNumber = 1326
  var opresult4421 = callmethod(var_nummethods, "+", [1], new GraceNum(1));
  var_nummethods = opresult4421;
  var if4415 = opresult4421;
  } else {
  lineNumber = 1329
  lineNumber = 1330
  lineNumber = 1
  lineNumber = 1327
  var call4423 = callmethod(var_v,"kind", [0]);
  var string4424 = new GraceString("class");
  var opresult4426 = callmethod(call4423, "==", [1], string4424);
  if (Grace_isTrue(opresult4426)) {
  lineNumber = 1329
  lineNumber = 1328
  var opresult4428 = callmethod(var_nummethods, "+", [1], new GraceNum(1));
  var_nummethods = opresult4428;
  var if4422 = opresult4428;
}
  var if4415 = if4422;
}
  var if4408 = if4415;
}
  var if4401 = if4408;
}
  return if4401;
};
  var call4429 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block4400);
  lineNumber = 1332
  lineNumber = 1331
  var_outfile = var_of;
  lineNumber = 1333
  lineNumber = 1332
  var_modname = var_mn;
  lineNumber = 1333
  lineNumber = 1334
  var call4430 = callmethod(this,"escapeident", [1], var_modname);
  var_escmodname = call4430;
  lineNumber = 1335
  lineNumber = 1334
  var_runmode = var_rm;
  lineNumber = 1336
  lineNumber = 1335
  var_buildtype = var_bt;
  lineNumber = 1337
  var array4431 = new GraceList([
]);

  var var_linkfiles = array4431;
  lineNumber = 1338
  lineNumber = 1337
  var bool4432 = new GraceBoolean(false)
  var var_ext = bool4432;
  lineNumber = 1413
  lineNumber = 1416
  lineNumber = 1338
  var string4434 = new GraceString("make");
  var opresult4436 = callmethod(var_runmode, "==", [1], string4434);
  if (Grace_isTrue(opresult4436)) {
  lineNumber = 1339
  var string4437 = new GraceString("checking imports.");
  lineNumber = 1340
  var call4438 = callmethod(this,"log_verbose", [1], string4437);
  lineNumber = 1341
  var array4439 = new GraceList([
]);

  var var_subprocesses = array4439;
  lineNumber = 1400
  lineNumber = 1341
  lineNumber = 1400
  var block4440 = Grace_allocObject();
  block4440.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4440.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4440.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4440.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4440.receiver = this;
  block4440.className = 'block<genc:1400>';
  block4440.real = function(
var_v
) {
  lineNumber = 1403
  lineNumber = 1
  lineNumber = 1342
  var call4442 = callmethod(var_v,"kind", [0]);
  var string4443 = new GraceString("import");
  var opresult4445 = callmethod(call4442, "==", [1], string4443);
  if (Grace_isTrue(opresult4445)) {
  lineNumber = 1344
  lineNumber = 1
  lineNumber = 1344
  lineNumber = 1
  lineNumber = 1343
  var call4446 = callmethod(var_v,"value", [0]);
  var call4447 = callmethod(call4446,"value", [0]);
  var var_nm = call4447;
  lineNumber = 1345
  lineNumber = 1344
  var bool4448 = new GraceBoolean(false)
  var var_exists = bool4448;
  lineNumber = 1366
  lineNumber = 1346
  lineNumber = 1345
  var string4450 = new GraceString("");
  lineNumber = 1
  lineNumber = 1345
  var call4451 = callmethod(var_sys,"execPath", [0]);
  var opresult4453 = callmethod(string4450, "++", [1], call4451);
  var string4454 = new GraceString("/");
  var opresult4456 = callmethod(opresult4453, "++", [1], string4454);
  var opresult4458 = callmethod(opresult4456, "++", [1], var_nm);
  var string4459 = new GraceString(".gso");
  var opresult4461 = callmethod(opresult4458, "++", [1], string4459);
  var call4462 = callmethod(var_io,"exists", [1], opresult4461);
  lineNumber = 1346
  var block4463 = Grace_allocObject();
  block4463.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4463.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4463.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4463.receiver = this;
  block4463.className = 'block<genc:1346>';
  block4463.real = function(
) {
  var string4464 = new GraceString("Static");
  lineNumber = 1
  lineNumber = 1346
  var call4465 = callmethod(var_util,"extensions", [0]);
  var call4466 = callmethod(call4465,"contains", [1], string4464);
  var call4467 = callmethod(call4466,"prefix!", [0]);
  return call4467;
};
  var opresult4469 = callmethod(call4462, "&&", [1], block4463);
  if (Grace_isTrue(opresult4469)) {
  lineNumber = 1348
  lineNumber = 1347
  var bool4470 = new GraceBoolean(true)
  var_exists = bool4470;
  var if4449 = bool4470;
  } else {
  lineNumber = 1366
  lineNumber = 1349
  lineNumber = 1348
  var string4472 = new GraceString(".gso");
  var opresult4474 = callmethod(var_nm, "++", [1], string4472);
  var call4475 = callmethod(var_io,"exists", [1], opresult4474);
  lineNumber = 1349
  var block4476 = Grace_allocObject();
  block4476.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4476.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4476.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4476.receiver = this;
  block4476.className = 'block<genc:1349>';
  block4476.real = function(
) {
  var string4477 = new GraceString("Static");
  lineNumber = 1
  lineNumber = 1349
  var call4478 = callmethod(var_util,"extensions", [0]);
  var call4479 = callmethod(call4478,"contains", [1], string4477);
  var call4480 = callmethod(call4479,"prefix!", [0]);
  return call4480;
};
  var opresult4482 = callmethod(call4475, "&&", [1], block4476);
  if (Grace_isTrue(opresult4482)) {
  lineNumber = 1351
  lineNumber = 1350
  var bool4483 = new GraceBoolean(true)
  var_exists = bool4483;
  var if4471 = bool4483;
  } else {
  lineNumber = 1366
  lineNumber = 1354
  lineNumber = 1351
  var string4485 = new GraceString("StandardPrelude");
  var opresult4487 = callmethod(var_nm, "==", [1], string4485);
  if (Grace_isTrue(opresult4487)) {
  lineNumber = 1353
  lineNumber = 1352
  var bool4488 = new GraceBoolean(true)
  var_exists = bool4488;
  lineNumber = 1353
  var call4489 = callmethod(var_staticmodules,"push", [1], var_nm);
  var if4484 = call4489;
  } else {
  lineNumber = 1366
  lineNumber = 1355
  lineNumber = 1354
  var string4491 = new GraceString("");
  lineNumber = 1
  lineNumber = 1354
  var call4492 = callmethod(var_sys,"execPath", [0]);
  var opresult4494 = callmethod(string4491, "++", [1], call4492);
  var string4495 = new GraceString("/");
  var opresult4497 = callmethod(opresult4494, "++", [1], string4495);
  var opresult4499 = callmethod(opresult4497, "++", [1], var_nm);
  var string4500 = new GraceString(".gcn");
  var opresult4502 = callmethod(opresult4499, "++", [1], string4500);
  var call4503 = callmethod(var_io,"exists", [1], opresult4502);
  lineNumber = 1355
  var block4504 = Grace_allocObject();
  block4504.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4504.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4504.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4504.receiver = this;
  block4504.className = 'block<genc:1355>';
  block4504.real = function(
) {
  var string4505 = new GraceString("");
  var opresult4507 = callmethod(string4505, "++", [1], var_nm);
  var string4508 = new GraceString(".grace");
  var opresult4510 = callmethod(opresult4507, "++", [1], string4508);
  var call4511 = callmethod(var_io,"exists", [1], opresult4510);
  var call4512 = callmethod(call4511,"prefix!", [0]);
  return call4512;
};
  var opresult4514 = callmethod(call4503, "&&", [1], block4504);
  if (Grace_isTrue(opresult4514)) {
  lineNumber = 1360
  lineNumber = 1359
  var bool4515 = new GraceBoolean(true)
  var_exists = bool4515;
  lineNumber = 1360
  var string4516 = new GraceString("");
  lineNumber = 1
  lineNumber = 1360
  var call4517 = callmethod(var_sys,"execPath", [0]);
  var opresult4519 = callmethod(string4516, "++", [1], call4517);
  var string4520 = new GraceString("/");
  var opresult4522 = callmethod(opresult4519, "++", [1], string4520);
  var opresult4524 = callmethod(opresult4522, "++", [1], var_nm);
  var string4525 = new GraceString(".gcn");
  var opresult4527 = callmethod(opresult4524, "++", [1], string4525);
  var call4528 = callmethod(var_linkfiles,"push", [1], opresult4527);
  lineNumber = 1361
  var call4529 = callmethod(var_staticmodules,"push", [1], var_nm);
  var if4490 = call4529;
  } else {
  lineNumber = 1366
  lineNumber = 1362
  var string4531 = new GraceString(".gcn");
  var opresult4533 = callmethod(var_nm, "++", [1], string4531);
  var call4534 = callmethod(var_io,"exists", [1], opresult4533);
  if (Grace_isTrue(call4534)) {
  lineNumber = 1366
  lineNumber = 1363
  var string4536 = new GraceString(".gcn");
  var opresult4538 = callmethod(var_nm, "++", [1], string4536);
  var string4539 = new GraceString(".grace");
  var opresult4541 = callmethod(var_nm, "++", [1], string4539);
  var call4542 = callmethod(var_io,"newer", [2], opresult4538, opresult4541);
  if (Grace_isTrue(call4542)) {
  lineNumber = 1365
  lineNumber = 1364
  var bool4543 = new GraceBoolean(true)
  var_exists = bool4543;
  lineNumber = 1365
  var string4544 = new GraceString(".gcn");
  var opresult4546 = callmethod(var_nm, "++", [1], string4544);
  var call4547 = callmethod(var_linkfiles,"push", [1], opresult4546);
  lineNumber = 1366
  var call4548 = callmethod(var_staticmodules,"push", [1], var_nm);
  var if4535 = call4548;
}
  var if4530 = if4535;
}
  var if4490 = if4530;
}
  var if4484 = if4490;
}
  var if4471 = if4484;
}
  var if4449 = if4471;
}
  lineNumber = 1393
  lineNumber = 1395
  lineNumber = 1
  lineNumber = 1369
  var call4550 = callmethod(var_exists,"not", [0]);
  if (Grace_isTrue(call4550)) {
  lineNumber = 1372
  lineNumber = 1370
  var string4552 = new GraceString(".gc");
  var opresult4554 = callmethod(var_nm, "++", [1], string4552);
  var call4555 = callmethod(var_io,"exists", [1], opresult4554);
  if (Grace_isTrue(call4555)) {
  lineNumber = 1372
  lineNumber = 1371
  var string4556 = new GraceString(".gc");
  var_ext = string4556;
  var if4551 = string4556;
}
  lineNumber = 1375
  lineNumber = 1373
  var string4558 = new GraceString(".grace");
  var opresult4560 = callmethod(var_nm, "++", [1], string4558);
  var call4561 = callmethod(var_io,"exists", [1], opresult4560);
  if (Grace_isTrue(call4561)) {
  lineNumber = 1375
  lineNumber = 1374
  var string4562 = new GraceString(".grace");
  var_ext = string4562;
  var if4557 = string4562;
}
  lineNumber = 1393
  lineNumber = 1394
  lineNumber = 1376
  var bool4564 = new GraceBoolean(false)
  var opresult4566 = callmethod(var_ext, "/=", [1], bool4564);
  if (Grace_isTrue(opresult4566)) {
  lineNumber = 1378
  lineNumber = 1
  lineNumber = 1377
  var call4567 = callmethod(var_argv,"first", [0]);
  var string4568 = new GraceString(" --target c --make ");
  var opresult4570 = callmethod(call4567, "++", [1], string4568);
  var opresult4572 = callmethod(opresult4570, "++", [1], var_nm);
  var opresult4574 = callmethod(opresult4572, "++", [1], var_ext);
  var_cmd = opresult4574;
  lineNumber = 1379
  lineNumber = 1378
  lineNumber = 1379
  lineNumber = 1378
  var string4575 = new GraceString(" --gracelib \"");
  lineNumber = 1379
  lineNumber = 1
  lineNumber = 1378
  var call4576 = callmethod(var_util,"gracelibPath", [0]);
  var opresult4578 = callmethod(string4575, "++", [1], call4576);
  var string4579 = new GraceString("\"");
  var opresult4581 = callmethod(opresult4578, "++", [1], string4579);
  var opresult4583 = callmethod(var_cmd, "++", [1], opresult4581);
  var_cmd = opresult4583;
  lineNumber = 1381
  lineNumber = 1382
  lineNumber = 1
  lineNumber = 1379
  var call4585 = callmethod(var_util,"verbosity", [0]);
  var opresult4587 = callmethod(call4585, ">", [1], new GraceNum(30));
  if (Grace_isTrue(opresult4587)) {
  lineNumber = 1381
  lineNumber = 1380
  var string4588 = new GraceString(" --verbose");
  var opresult4590 = callmethod(var_cmd, "++", [1], string4588);
  var_cmd = opresult4590;
  var if4584 = opresult4590;
}
  lineNumber = 1384
  lineNumber = 1385
  lineNumber = 1382
  var bool4592 = new GraceBoolean(false)
  lineNumber = 1385
  lineNumber = 1
  lineNumber = 1382
  var call4593 = callmethod(var_util,"vtag", [0]);
  var opresult4595 = callmethod(bool4592, "!=", [1], call4593);
  if (Grace_isTrue(opresult4595)) {
  lineNumber = 1384
  lineNumber = 1383
  var string4596 = new GraceString(" --vtag ");
  var opresult4598 = callmethod(var_cmd, "++", [1], string4596);
  lineNumber = 1384
  lineNumber = 1
  lineNumber = 1383
  var call4599 = callmethod(var_util,"vtag", [0]);
  var opresult4601 = callmethod(opresult4598, "++", [1], call4599);
  var_cmd = opresult4601;
  var if4591 = opresult4601;
}
  lineNumber = 1386
  lineNumber = 1385
  var string4602 = new GraceString(" --noexec --no-recurse -XNoMain");
  var opresult4604 = callmethod(var_cmd, "++", [1], string4602);
  var_cmd = opresult4604;
  lineNumber = 1387
  lineNumber = 1389
  lineNumber = 1
  lineNumber = 1386
  var call4606 = callmethod(var_util,"recurse", [0]);
  if (Grace_isTrue(call4606)) {
  lineNumber = 1387
  lineNumber = 1388
  var call4607 = callmethod(this,"spawnSubprocess", [3], var_subprocesses, var_nm, var_cmd);
  var if4605 = call4607;
}
  lineNumber = 1390
  lineNumber = 1389
  var bool4608 = new GraceBoolean(true)
  var_exists = bool4608;
  lineNumber = 1390
  var string4609 = new GraceString(".gcn");
  var opresult4611 = callmethod(var_nm, "++", [1], string4609);
  var call4612 = callmethod(var_linkfiles,"push", [1], opresult4611);
  lineNumber = 1391
  var call4613 = callmethod(var_staticmodules,"push", [1], var_nm);
  lineNumber = 1393
  lineNumber = 1392
  var bool4614 = new GraceBoolean(false)
  var_ext = bool4614;
  var if4563 = bool4614;
}
  var if4549 = if4563;
}
  lineNumber = 1397
  lineNumber = 1399
  lineNumber = 1395
  var string4616 = new GraceString("sys");
  var opresult4618 = callmethod(var_nm, "==", [1], string4616);
  lineNumber = 1399
  lineNumber = 1395
  var string4619 = new GraceString("io");
  var opresult4621 = callmethod(var_nm, "==", [1], string4619);
  var opresult4623 = callmethod(opresult4618, "|", [1], opresult4621);
  if (Grace_isTrue(opresult4623)) {
  lineNumber = 1397
  lineNumber = 1396
  var bool4624 = new GraceBoolean(true)
  var_exists = bool4624;
  lineNumber = 1397
  var call4625 = callmethod(var_staticmodules,"push", [1], var_nm);
  var if4615 = call4625;
}
  lineNumber = 1400
  lineNumber = 1402
  lineNumber = 1
  lineNumber = 1399
  var call4627 = callmethod(var_exists,"not", [0]);
  if (Grace_isTrue(call4627)) {
  lineNumber = 1400
  var string4628 = new GraceString("failed finding import of ");
  var opresult4630 = callmethod(string4628, "++", [1], var_nm);
  var string4631 = new GraceString(".");
  var opresult4633 = callmethod(opresult4630, "++", [1], string4631);
  var call4634 = callmethod(var_util,"syntax_error", [1], opresult4633);
  var if4626 = call4634;
}
  var if4441 = if4626;
}
  return if4441;
};
  var call4635 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block4440);
  lineNumber = 1405
  var array4636 = new GraceList([
]);

  var var_imperrors = array4636;
  lineNumber = 1409
  lineNumber = 1405
  lineNumber = 1409
  var block4637 = Grace_allocObject();
  block4637.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4637.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4637.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4637.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4637.receiver = this;
  block4637.className = 'block<genc:1409>';
  block4637.real = function(
var_tt
) {
  lineNumber = 1407
  lineNumber = 1406
  var idxres4638 = var_tt.methods["[]"].call(var_tt, [1], new GraceNum(1));
  var var_nm = idxres4638;
  lineNumber = 1408
  lineNumber = 1407
  var idxres4639 = var_tt.methods["[]"].call(var_tt, [1], new GraceNum(2));
  var var_p = idxres4639;
  lineNumber = 1409
  lineNumber = 1411
  lineNumber = 1
  lineNumber = 1408
  var call4641 = callmethod(var_p,"success", [0]);
  var call4642 = callmethod(call4641,"prefix!", [0]);
  if (Grace_isTrue(call4642)) {
  lineNumber = 1409
  var call4643 = callmethod(var_imperrors,"push", [1], var_nm);
  var if4640 = call4643;
}
  return if4640;
};
  var call4644 = callmethod(Grace_prelude,"for()do", [1, 1], var_subprocesses, block4637);
  lineNumber = 1413
  lineNumber = 1415
  lineNumber = 1
  lineNumber = 1412
  var call4646 = callmethod(var_imperrors,"size", [0]);
  var opresult4648 = callmethod(call4646, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult4648)) {
  lineNumber = 1413
  var string4649 = new GraceString("failed processing import of ");
  var opresult4651 = callmethod(string4649, "++", [1], var_imperrors);
  var string4652 = new GraceString(".");
  var opresult4654 = callmethod(opresult4651, "++", [1], string4652);
  var call4655 = callmethod(var_util,"syntax_error", [1], opresult4654);
  var if4645 = call4655;
}
  var if4433 = if4645;
}
  lineNumber = 1416
  var string4656 = new GraceString("#include \"");
  lineNumber = 1
  lineNumber = 1416
  var call4657 = callmethod(var_util,"gracelibPath", [0]);
  var opresult4659 = callmethod(string4656, "++", [1], call4657);
  var string4660 = new GraceString("/gracelib.h\"");
  var opresult4662 = callmethod(opresult4659, "++", [1], string4660);
  lineNumber = 1417
  var call4663 = callmethod(this,"outprint", [1], opresult4662);
  var string4664 = new GraceString("#include <stdlib.h>");
  lineNumber = 1418
  var call4665 = callmethod(this,"outprint", [1], string4664);
  var string4666 = new GraceString("#ifndef __CYGWIN__");
  lineNumber = 1419
  var call4667 = callmethod(this,"outprint", [1], string4666);
  var string4668 = new GraceString("#pragma weak main");
  lineNumber = 1420
  var call4669 = callmethod(this,"outprint", [1], string4668);
  var string4670 = new GraceString("#endif");
  lineNumber = 1421
  var call4671 = callmethod(this,"outprint", [1], string4670);
  var string4672 = new GraceString("static char compilerRevision[] = \"");
  lineNumber = 1
  lineNumber = 1421
  var call4673 = callmethod(var_buildinfo,"gitrevision", [0]);
  var opresult4675 = callmethod(string4672, "++", [1], call4673);
  var string4676 = new GraceString("\";");
  var opresult4678 = callmethod(opresult4675, "++", [1], string4676);
  lineNumber = 1422
  var call4679 = callmethod(this,"outprint", [1], opresult4678);
  var string4680 = new GraceString("static Object undefined;");
  lineNumber = 1423
  var call4681 = callmethod(this,"outprint", [1], string4680);
  var string4682 = new GraceString("extern Object none;");
  lineNumber = 1424
  var call4683 = callmethod(this,"outprint", [1], string4682);
  var string4684 = new GraceString("extern Object _prelude;");
  lineNumber = 1425
  var call4685 = callmethod(this,"outprint", [1], string4684);
  var string4686 = new GraceString("extern Object String;");
  lineNumber = 1426
  var call4687 = callmethod(this,"outprint", [1], string4686);
  var string4688 = new GraceString("extern Object Number;");
  lineNumber = 1427
  var call4689 = callmethod(this,"outprint", [1], string4688);
  var string4690 = new GraceString("extern Object Boolean;");
  lineNumber = 1428
  var call4691 = callmethod(this,"outprint", [1], string4690);
  var string4692 = new GraceString("extern Object Dynamic;");
  lineNumber = 1429
  var call4693 = callmethod(this,"outprint", [1], string4692);
  var string4694 = new GraceString("extern Object Block;");
  lineNumber = 1430
  var call4695 = callmethod(this,"outprint", [1], string4694);
  var string4696 = new GraceString("extern Object None;");
  lineNumber = 1431
  var call4697 = callmethod(this,"outprint", [1], string4696);
  var string4698 = new GraceString("extern Object Type;");
  lineNumber = 1432
  var call4699 = callmethod(this,"outprint", [1], string4698);
  var string4700 = new GraceString("static Object type_String;");
  lineNumber = 1433
  var call4701 = callmethod(this,"outprint", [1], string4700);
  var string4702 = new GraceString("static Object type_Number;");
  lineNumber = 1434
  var call4703 = callmethod(this,"outprint", [1], string4702);
  var string4704 = new GraceString("static Object type_Boolean;");
  lineNumber = 1435
  var call4705 = callmethod(this,"outprint", [1], string4704);
  var string4706 = new GraceString("static Object type_Block;");
  lineNumber = 1436
  var call4707 = callmethod(this,"outprint", [1], string4706);
  var string4708 = new GraceString("static Object type_None;");
  lineNumber = 1437
  var call4709 = callmethod(this,"outprint", [1], string4708);
  var string4710 = new GraceString("static Object type_Void;");
  lineNumber = 1438
  var call4711 = callmethod(this,"outprint", [1], string4710);
  var string4712 = new GraceString("static Object argv;");
  lineNumber = 1439
  var call4713 = callmethod(this,"outprint", [1], string4712);
  var string4714 = new GraceString("static Object emptyclosure;");
  lineNumber = 1440
  var call4715 = callmethod(this,"outprint", [1], string4714);
  var string4716 = new GraceString("static Object prelude;");
  lineNumber = 1441
  var call4717 = callmethod(this,"outprint", [1], string4716);
  var string4718 = new GraceString("static const char modulename[] = \"");
  var opresult4720 = callmethod(string4718, "++", [1], var_modname);
  var string4721 = new GraceString("\";");
  var opresult4723 = callmethod(opresult4720, "++", [1], string4721);
  var call4724 = callmethod(this,"outprint", [1], opresult4723);
  lineNumber = 1442
  var string4725 = new GraceString("Object module_StandardPrelude_init();");
  var call4726 = callmethod(this,"outprint", [1], string4725);
  lineNumber = 1443
  var string4727 = new GraceString("String");
  var bool4728 = new GraceBoolean(true)
  var call4729 = callmethod(var_topLevelTypes,"put", [2], string4727, bool4728);
  lineNumber = 1444
  var string4730 = new GraceString("Number");
  var bool4731 = new GraceBoolean(true)
  var call4732 = callmethod(var_topLevelTypes,"put", [2], string4730, bool4731);
  lineNumber = 1445
  var string4733 = new GraceString("Boolean");
  var bool4734 = new GraceBoolean(true)
  var call4735 = callmethod(var_topLevelTypes,"put", [2], string4733, bool4734);
  lineNumber = 1446
  var string4736 = new GraceString("Void");
  var bool4737 = new GraceBoolean(true)
  var call4738 = callmethod(var_topLevelTypes,"put", [2], string4736, bool4737);
  lineNumber = 1447
  var string4739 = new GraceString("None");
  var bool4740 = new GraceBoolean(true)
  var call4741 = callmethod(var_topLevelTypes,"put", [2], string4739, bool4740);
  lineNumber = 1448
  var string4742 = new GraceString("Block");
  var bool4743 = new GraceBoolean(true)
  var call4744 = callmethod(var_topLevelTypes,"put", [2], string4742, bool4743);
  lineNumber = 1453
  lineNumber = 1449
  lineNumber = 1453
  var block4745 = Grace_allocObject();
  block4745.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4745.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4745.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4745.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4745.receiver = this;
  block4745.className = 'block<genc:1453>';
  block4745.real = function(
var_v
) {
  lineNumber = 1455
  lineNumber = 1
  lineNumber = 1450
  var call4747 = callmethod(var_v,"kind", [0]);
  var string4748 = new GraceString("type");
  var opresult4750 = callmethod(call4747, "==", [1], string4748);
  if (Grace_isTrue(opresult4750)) {
  lineNumber = 1451
  lineNumber = 1
  lineNumber = 1451
  var call4751 = callmethod(var_v,"value", [0]);
  lineNumber = 1452
  var call4752 = callmethod(this,"escapeident", [1], call4751);
  var var_typeid = call4752;
  var string4753 = new GraceString("static Object type_");
  var opresult4755 = callmethod(string4753, "++", [1], var_typeid);
  var string4756 = new GraceString(";");
  var opresult4758 = callmethod(opresult4755, "++", [1], string4756);
  lineNumber = 1453
  var call4759 = callmethod(this,"outprint", [1], opresult4758);
  var bool4760 = new GraceBoolean(true)
  var call4761 = callmethod(var_topLevelTypes,"put", [2], var_typeid, bool4760);
  var if4746 = call4761;
}
  return if4746;
};
  var call4762 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block4745);
  lineNumber = 1456
  var string4763 = new GraceString("Object module_");
  var opresult4765 = callmethod(string4763, "++", [1], var_escmodname);
  var string4766 = new GraceString("_init() {");
  var opresult4768 = callmethod(opresult4765, "++", [1], string4766);
  lineNumber = 1457
  var call4769 = callmethod(this,"out", [1], opresult4768);
  var string4770 = new GraceString("  int flags = 0;");
  lineNumber = 1458
  var call4771 = callmethod(this,"out", [1], string4770);
  var string4772 = new GraceString("  int frame = gc_frame_new();");
  lineNumber = 1459
  var call4773 = callmethod(this,"out", [1], string4772);
  var string4774 = new GraceString("  Object self = alloc_obj2(");
  var opresult4776 = callmethod(string4774, "++", [1], var_nummethods);
  var string4777 = new GraceString(", ");
  var opresult4779 = callmethod(opresult4776, "++", [1], string4777);
  var opresult4781 = callmethod(opresult4779, "++", [1], var_nummethods);
  var string4782 = new GraceString(");");
  var opresult4784 = callmethod(opresult4781, "++", [1], string4782);
  lineNumber = 1460
  var call4785 = callmethod(this,"out", [1], opresult4784);
  var string4786 = new GraceString("  gc_root(self);");
  lineNumber = 1461
  var call4787 = callmethod(this,"out", [1], string4786);
  lineNumber = 1466
  lineNumber = 1461
  var string4789 = new GraceString("NativePrelude");
  lineNumber = 1468
  lineNumber = 1
  lineNumber = 1461
  var call4790 = callmethod(var_util,"extensions", [0]);
  var call4791 = callmethod(call4790,"contains", [1], string4789);
  if (Grace_isTrue(call4791)) {
  lineNumber = 1462
  var string4792 = new GraceString("  prelude = grace_prelude();");
  lineNumber = 1463
  var call4793 = callmethod(this,"out", [1], string4792);
  var string4794 = new GraceString("  adddatum2(self, grace_prelude(), 0);");
  lineNumber = 1464
  var call4795 = callmethod(this,"out", [1], string4794);
  var if4788 = call4795;
  } else {
  lineNumber = 1465
  var string4796 = new GraceString("  prelude = module_StandardPrelude_init();");
  lineNumber = 1466
  var call4797 = callmethod(this,"out", [1], string4796);
  var string4798 = new GraceString("  adddatum2(self, prelude, 0);");
  lineNumber = 1467
  var call4799 = callmethod(this,"out", [1], string4798);
  var if4788 = call4799;
}
  lineNumber = 1468
  var string4800 = new GraceString("  addmethod2(self, \"outer\", &grace_userobj_outer);");
  lineNumber = 1469
  var call4801 = callmethod(this,"out", [1], string4800);
  lineNumber = 1470
  lineNumber = 1469
  var string4802 = new GraceString("Module<");
  var opresult4804 = callmethod(string4802, "++", [1], var_modname);
  var string4805 = new GraceString(">");
  var opresult4807 = callmethod(opresult4804, "++", [1], string4805);
  var var_modn = opresult4807;
  lineNumber = 1470
  var string4808 = new GraceString("  setclassname(self, \"");
  var opresult4810 = callmethod(string4808, "++", [1], var_modn);
  var string4811 = new GraceString("\");");
  var opresult4813 = callmethod(opresult4810, "++", [1], string4811);
  lineNumber = 1471
  var call4814 = callmethod(this,"out", [1], opresult4813);
  var string4815 = new GraceString("  Object *var_HashMap = alloc_var();");
  lineNumber = 1472
  var call4816 = callmethod(this,"out", [1], string4815);
  var string4817 = new GraceString("  *var_HashMap = alloc_HashMapClassObject();");
  lineNumber = 1473
  var call4818 = callmethod(this,"out", [1], string4817);
  var string4819 = new GraceString("  Object *var_MatchFailed = alloc_var();");
  lineNumber = 1474
  var call4820 = callmethod(this,"out", [1], string4819);
  var string4821 = new GraceString("  *var_MatchFailed = alloc_MatchFailed();");
  lineNumber = 1475
  var call4822 = callmethod(this,"out", [1], string4821);
  var string4823 = new GraceString("  Object *var_noSuchValue = alloc_var();");
  lineNumber = 1476
  var call4824 = callmethod(this,"out", [1], string4823);
  var string4825 = new GraceString("  *var_noSuchValue = none;");
  lineNumber = 1477
  var call4826 = callmethod(this,"out", [1], string4825);
  var string4827 = new GraceString("  Object *var_void = alloc_var();");
  lineNumber = 1478
  var call4828 = callmethod(this,"out", [1], string4827);
  var string4829 = new GraceString("  *var_void = none;");
  lineNumber = 1479
  var call4830 = callmethod(this,"out", [1], string4829);
  var string4831 = new GraceString("  Object *var_nothing = alloc_var();");
  lineNumber = 1480
  var call4832 = callmethod(this,"out", [1], string4831);
  var string4833 = new GraceString("  *var_nothing = none;");
  lineNumber = 1481
  var call4834 = callmethod(this,"out", [1], string4833);
  var string4835 = new GraceString("  Object *var_String = alloc_var();");
  lineNumber = 1482
  var call4836 = callmethod(this,"out", [1], string4835);
  var string4837 = new GraceString("  *var_String = String;");
  lineNumber = 1483
  var call4838 = callmethod(this,"out", [1], string4837);
  var string4839 = new GraceString("  type_String = String;");
  lineNumber = 1484
  var call4840 = callmethod(this,"out", [1], string4839);
  var string4841 = new GraceString("  Object *var_Block = alloc_var();");
  lineNumber = 1485
  var call4842 = callmethod(this,"out", [1], string4841);
  var string4843 = new GraceString("  *var_Block = Block;");
  lineNumber = 1486
  var call4844 = callmethod(this,"out", [1], string4843);
  var string4845 = new GraceString("  type_Block = Block;");
  lineNumber = 1487
  var call4846 = callmethod(this,"out", [1], string4845);
  var string4847 = new GraceString("  Object *var_Void = alloc_var();");
  lineNumber = 1488
  var call4848 = callmethod(this,"out", [1], string4847);
  var string4849 = new GraceString("  *var_Void = None;");
  lineNumber = 1489
  var call4850 = callmethod(this,"out", [1], string4849);
  var string4851 = new GraceString("  type_Void = None;");
  lineNumber = 1490
  var call4852 = callmethod(this,"out", [1], string4851);
  var string4853 = new GraceString("  Object *var_None = alloc_var();");
  lineNumber = 1491
  var call4854 = callmethod(this,"out", [1], string4853);
  var string4855 = new GraceString("  *var_None = None;");
  lineNumber = 1492
  var call4856 = callmethod(this,"out", [1], string4855);
  var string4857 = new GraceString("  type_None = None;");
  lineNumber = 1493
  var call4858 = callmethod(this,"out", [1], string4857);
  var string4859 = new GraceString("  Object *var_Number = alloc_var();");
  lineNumber = 1494
  var call4860 = callmethod(this,"out", [1], string4859);
  var string4861 = new GraceString("  *var_Number = Number;");
  lineNumber = 1495
  var call4862 = callmethod(this,"out", [1], string4861);
  var string4863 = new GraceString("  type_Number = Number;");
  lineNumber = 1496
  var call4864 = callmethod(this,"out", [1], string4863);
  var string4865 = new GraceString("  Object *var_Boolean = alloc_var();");
  lineNumber = 1497
  var call4866 = callmethod(this,"out", [1], string4865);
  var string4867 = new GraceString("  *var_Boolean = Boolean;");
  lineNumber = 1498
  var call4868 = callmethod(this,"out", [1], string4867);
  var string4869 = new GraceString("  type_Boolean = Boolean;");
  lineNumber = 1499
  var call4870 = callmethod(this,"out", [1], string4869);
  var string4871 = new GraceString("  Object *var_Dynamic = alloc_var();");
  lineNumber = 1500
  var call4872 = callmethod(this,"out", [1], string4871);
  var string4873 = new GraceString("  *var_Dynamic = Dynamic;");
  lineNumber = 1501
  var call4874 = callmethod(this,"out", [1], string4873);
  var string4875 = new GraceString("  Object *var_Type = alloc_var();");
  lineNumber = 1502
  var call4876 = callmethod(this,"out", [1], string4875);
  var string4877 = new GraceString("  *var_Type = Type;");
  lineNumber = 1503
  var call4878 = callmethod(this,"out", [1], string4877);
  var string4879 = new GraceString("  Object *var__prelude = alloc_var();");
  lineNumber = 1504
  var call4880 = callmethod(this,"out", [1], string4879);
  var string4881 = new GraceString("  *var__prelude = grace_prelude();");
  lineNumber = 1505
  var call4882 = callmethod(this,"out", [1], string4881);
  var string4883 = new GraceString("  gc_root(*var_MatchFailed);");
  lineNumber = 1506
  var call4884 = callmethod(this,"out", [1], string4883);
  var string4885 = new GraceString("  emptyclosure = createclosure(0, \"empty\");");
  lineNumber = 1507
  var call4886 = callmethod(this,"out", [1], string4885);
  var string4887 = new GraceString("  gc_root(emptyclosure);");
  lineNumber = 1508
  var call4888 = callmethod(this,"out", [1], string4887);
  var string4889 = new GraceString("  struct StackFrameObject *stackframe = alloc_StackFrame(");
  var opresult4891 = callmethod(string4889, "++", [1], var_nummethods);
  var string4892 = new GraceString(", NULL);");
  var opresult4894 = callmethod(opresult4891, "++", [1], string4892);
  lineNumber = 1509
  var call4895 = callmethod(this,"out", [1], opresult4894);
  var string4896 = new GraceString("  gc_root((Object)stackframe);");
  lineNumber = 1510
  var call4897 = callmethod(this,"out", [1], string4896);
  var string4898 = new GraceString("  Object *selfslot = &(stackframe->slots[0]);");
  lineNumber = 1511
  var call4899 = callmethod(this,"out", [1], string4898);
  var string4900 = new GraceString("  *selfslot = self;");
  lineNumber = 1512
  var call4901 = callmethod(this,"out", [1], string4900);
  lineNumber = 1513
  lineNumber = 1512
  var var_tmpo = var_output;
  lineNumber = 1514
  var array4902 = new GraceList([
]);

  var_output = array4902;
  lineNumber = 1515
  var call4903 = callmethod(this,"definebindings", [2], var_values, new GraceNum(1));
  lineNumber = 1523
  lineNumber = 1515
  lineNumber = 1523
  var block4904 = Grace_allocObject();
  block4904.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4904.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4904.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4904.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4904.receiver = this;
  block4904.className = 'block<genc:1523>';
  block4904.real = function(
var_o
) {
  lineNumber = 1518
  lineNumber = 1520
  lineNumber = 1
  lineNumber = 1516
  var call4906 = callmethod(var_o,"kind", [0]);
  var string4907 = new GraceString("inherits");
  var opresult4909 = callmethod(call4906, "==", [1], string4907);
  if (Grace_isTrue(opresult4909)) {
  lineNumber = 1517
  lineNumber = 1
  lineNumber = 1517
  var call4910 = callmethod(var_o,"value", [0]);
  lineNumber = 1518
  var call4911 = callmethod(this,"compilenode", [1], call4910);
  var var_superobj = call4911;
  var string4912 = new GraceString("  setsuperobj(self, ");
  var opresult4914 = callmethod(string4912, "++", [1], var_superobj);
  var string4915 = new GraceString(");");
  var opresult4917 = callmethod(opresult4914, "++", [1], string4915);
  lineNumber = 1519
  var call4918 = callmethod(this,"out", [1], opresult4917);
  var if4905 = call4918;
}
  lineNumber = 1520
  lineNumber = 1521
  var call4919 = callmethod(this,"compilenode", [1], var_o);
  lineNumber = 1523
  lineNumber = 1525
  lineNumber = 1
  lineNumber = 1521
  var call4921 = callmethod(var_o,"kind", [0]);
  var string4922 = new GraceString("type");
  var opresult4924 = callmethod(call4921, "==", [1], string4922);
  if (Grace_isTrue(opresult4924)) {
  lineNumber = 1522
  lineNumber = 1
  lineNumber = 1522
  var call4925 = callmethod(var_o,"value", [0]);
  lineNumber = 1523
  var call4926 = callmethod(this,"escapeident", [1], call4925);
  var var_typeid = call4926;
  var string4927 = new GraceString("type_");
  var opresult4929 = callmethod(string4927, "++", [1], var_typeid);
  var string4930 = new GraceString(" = *var_");
  var opresult4932 = callmethod(opresult4929, "++", [1], string4930);
  var opresult4934 = callmethod(opresult4932, "++", [1], var_typeid);
  var string4935 = new GraceString(";");
  var opresult4937 = callmethod(opresult4934, "++", [1], string4935);
  lineNumber = 1524
  var call4938 = callmethod(this,"out", [1], opresult4937);
  var if4920 = call4938;
}
  return if4920;
};
  var call4939 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block4904);
  lineNumber = 1527
  lineNumber = 1526
  lineNumber = 1527
  var block4940 = Grace_allocObject();
  block4940.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4940.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4940.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4940.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4940.receiver = this;
  block4940.className = 'block<genc:1527>';
  block4940.real = function(
var_e
) {
  lineNumber = 1528
  var call4941 = callmethod(this,"outprint", [1], var_e);
  return call4941;
};
  var call4942 = callmethod(Grace_prelude,"for()do", [1, 1], var_globals, block4940);
  lineNumber = 1530
  lineNumber = 1529
  var var_tmpo2 = var_output;
  lineNumber = 1531
  lineNumber = 1530
  var_output = var_tmpo;
  lineNumber = 1531
  var string4943 = new GraceString("  Object params[");
  var opresult4945 = callmethod(string4943, "++", [1], var_paramsUsed);
  var string4946 = new GraceString("];");
  var opresult4948 = callmethod(opresult4945, "++", [1], string4946);
  lineNumber = 1532
  var call4949 = callmethod(this,"out", [1], opresult4948);
  var string4950 = new GraceString("  int partcv[");
  var opresult4952 = callmethod(string4950, "++", [1], var_partsUsed);
  var string4953 = new GraceString("];");
  var opresult4955 = callmethod(opresult4952, "++", [1], string4953);
  lineNumber = 1533
  var call4956 = callmethod(this,"out", [1], opresult4955);
  lineNumber = 1534
  lineNumber = 1533
  lineNumber = 1534
  var block4957 = Grace_allocObject();
  block4957.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4957.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4957.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4957.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4957.receiver = this;
  block4957.className = 'block<genc:1534>';
  block4957.real = function(
var_l
) {
  lineNumber = 1535
  var call4958 = callmethod(this,"out", [1], var_l);
  return call4958;
};
  var call4959 = callmethod(Grace_prelude,"for()do", [1, 1], var_tmpo2, block4957);
  lineNumber = 1537
  lineNumber = 1536
  var_paramsUsed = new GraceNum(1);
  lineNumber = 1538
  lineNumber = 1537
  var_partsUsed = new GraceNum(1);
  lineNumber = 1538
  var string4960 = new GraceString("  gc_frame_end(frame);");
  lineNumber = 1539
  var call4961 = callmethod(this,"out", [1], string4960);
  var string4962 = new GraceString("  return self;");
  lineNumber = 1540
  var call4963 = callmethod(this,"out", [1], string4962);
  var string4964 = new GraceString("}");
  lineNumber = 1541
  var call4965 = callmethod(this,"out", [1], string4964);
  lineNumber = 1566
  lineNumber = 1541
  var string4967 = new GraceString("NoMain");
  lineNumber = 1568
  lineNumber = 1
  lineNumber = 1541
  var call4968 = callmethod(var_util,"extensions", [0]);
  var call4969 = callmethod(call4968,"contains", [1], string4967);
  var call4970 = callmethod(call4969,"prefix!", [0]);
  if (Grace_isTrue(call4970)) {
  lineNumber = 1542
  var string4971 = new GraceString("int main(int argc, char **argv) {");
  lineNumber = 1543
  var call4972 = callmethod(this,"out", [1], string4971);
  var string4973 = new GraceString("  initprofiling();");
  lineNumber = 1544
  var call4974 = callmethod(this,"out", [1], string4973);
  lineNumber = 1546
  lineNumber = 1544
  var string4976 = new GraceString("LogCallGraph");
  lineNumber = 1548
  lineNumber = 1
  lineNumber = 1544
  var call4977 = callmethod(var_util,"extensions", [0]);
  var call4978 = callmethod(call4977,"contains", [1], string4976);
  if (Grace_isTrue(call4978)) {
  lineNumber = 1545
  var string4979 = new GraceString("LogCallGraph");
  lineNumber = 1546
  lineNumber = 1
  lineNumber = 1545
  var call4980 = callmethod(var_util,"extensions", [0]);
  var call4981 = callmethod(call4980,"get", [1], string4979);
  var var_lcgfile = call4981;
  lineNumber = 1546
  var string4982 = new GraceString("  enable_callgraph(\"");
  var opresult4984 = callmethod(string4982, "++", [1], var_lcgfile);
  var string4985 = new GraceString("\");");
  var opresult4987 = callmethod(opresult4984, "++", [1], string4985);
  lineNumber = 1547
  var call4988 = callmethod(this,"out", [1], opresult4987);
  var if4975 = call4988;
}
  lineNumber = 1548
  var string4990 = new GraceString("NativePrelude");
  lineNumber = 1551
  lineNumber = 1
  lineNumber = 1548
  var call4991 = callmethod(var_util,"extensions", [0]);
  var call4992 = callmethod(call4991,"contains", [1], string4990);
  var call4993 = callmethod(call4992,"prefix!", [0]);
  if (Grace_isTrue(call4993)) {
  var if4989 = undefined;
}
  lineNumber = 1551
  var string4994 = new GraceString("  gracelib_argv(argv);");
  lineNumber = 1552
  var call4995 = callmethod(this,"out", [1], string4994);
  var string4996 = new GraceString("  Object params[1];");
  lineNumber = 1553
  var call4997 = callmethod(this,"out", [1], string4996);
  var string4998 = new GraceString("  undefined = alloc_Undefined();");
  lineNumber = 1554
  var call4999 = callmethod(this,"out", [1], string4998);
  var string5000 = new GraceString("  none = alloc_none();");
  lineNumber = 1555
  var call5001 = callmethod(this,"out", [1], string5000);
  var string5002 = new GraceString("  Object tmp_argv = alloc_List();");
  lineNumber = 1556
  var call5003 = callmethod(this,"out", [1], string5002);
  var string5004 = new GraceString("  gc_root(tmp_argv);");
  lineNumber = 1557
  var call5005 = callmethod(this,"out", [1], string5004);
  var string5006 = new GraceString("  int partcv_push[] = {1};");
  lineNumber = 1558
  var call5007 = callmethod(this,"out", [1], string5006);
  var string5008 = new GraceString("  int i; for (i=0; i<argc; i++) {");
  lineNumber = 1559
  var call5009 = callmethod(this,"out", [1], string5008);
  var string5010 = new GraceString("    params[0] = alloc_String(argv[i]);");
  lineNumber = 1560
  var call5011 = callmethod(this,"out", [1], string5010);
  var string5012 = new GraceString("    callmethod(tmp_argv, \"push\", 1, partcv_push, params);");
  lineNumber = 1561
  var call5013 = callmethod(this,"out", [1], string5012);
  var string5014 = new GraceString("  }");
  lineNumber = 1562
  var call5015 = callmethod(this,"out", [1], string5014);
  var string5016 = new GraceString("  module_sys_init_argv(tmp_argv);");
  lineNumber = 1563
  var call5017 = callmethod(this,"out", [1], string5016);
  var string5018 = new GraceString("  module_");
  var opresult5020 = callmethod(string5018, "++", [1], var_escmodname);
  var string5021 = new GraceString("_init();");
  var opresult5023 = callmethod(opresult5020, "++", [1], string5021);
  lineNumber = 1564
  var call5024 = callmethod(this,"out", [1], opresult5023);
  var string5025 = new GraceString("  gracelib_stats();");
  lineNumber = 1565
  var call5026 = callmethod(this,"out", [1], string5025);
  var string5027 = new GraceString("  return 0;");
  lineNumber = 1566
  var call5028 = callmethod(this,"out", [1], string5027);
  var string5029 = new GraceString("}");
  lineNumber = 1567
  var call5030 = callmethod(this,"out", [1], string5029);
  var if4966 = call5030;
}
  lineNumber = 1568
  var string5031 = new GraceString("writing file.");
  lineNumber = 1569
  var call5032 = callmethod(this,"log_verbose", [1], string5031);
  lineNumber = 1570
  lineNumber = 1569
  lineNumber = 1570
  var block5033 = Grace_allocObject();
  block5033.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block5033.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block5033.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block5033.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block5033.receiver = this;
  block5033.className = 'block<genc:1570>';
  block5033.real = function(
var_x
) {
  lineNumber = 1571
  var call5034 = callmethod(this,"outprint", [1], var_x);
  return call5034;
};
  var call5035 = callmethod(Grace_prelude,"for()do", [1, 1], var_topOutput, block5033);
  lineNumber = 1573
  lineNumber = 1572
  lineNumber = 1573
  var block5036 = Grace_allocObject();
  block5036.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block5036.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block5036.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block5036.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block5036.receiver = this;
  block5036.className = 'block<genc:1573>';
  block5036.real = function(
var_x
) {
  lineNumber = 1574
  var call5037 = callmethod(this,"outprint", [1], var_x);
  return call5037;
};
  var call5038 = callmethod(Grace_prelude,"for()do", [1, 1], var_output, block5036);
  lineNumber = 1614
  lineNumber = 1618
  lineNumber = 1576
  var string5040 = new GraceString("make");
  var opresult5042 = callmethod(var_runmode, "==", [1], string5040);
  if (Grace_isTrue(opresult5042)) {
  lineNumber = 1577
  var string5043 = new GraceString("compiling C code.");
  lineNumber = 1578
  var call5044 = callmethod(this,"log_verbose", [1], string5043);
  lineNumber = 1
  lineNumber = 1578
  var call5045 = callmethod(var_outfile,"close", [0]);
  lineNumber = 1580
  lineNumber = 1579
  var string5046 = new GraceString("gcc -g -I\"");
  lineNumber = 1580
  lineNumber = 1
  lineNumber = 1579
  var call5047 = callmethod(var_sys,"execPath", [0]);
  var opresult5049 = callmethod(string5046, "++", [1], call5047);
  var string5050 = new GraceString("\" -o ");
  var opresult5052 = callmethod(opresult5049, "++", [1], string5050);
  var opresult5054 = callmethod(opresult5052, "++", [1], var_modname);
  var string5055 = new GraceString(".gcn -c ");
  var opresult5057 = callmethod(opresult5054, "++", [1], string5055);
  var opresult5059 = callmethod(opresult5057, "++", [1], var_modname);
  var string5060 = new GraceString(".c");
  var opresult5062 = callmethod(opresult5059, "++", [1], string5060);
  var_cmd = opresult5062;
  lineNumber = 1582
  lineNumber = 1580
  lineNumber = 1
  lineNumber = 1580
  var call5064 = callmethod(var_io,"system", [1], var_cmd);
  var call5065 = callmethod(call5064,"not", [0]);
  if (Grace_isTrue(call5065)) {
  lineNumber = 1581
  var string5066 = new GraceString("Fatal error: Failed C compilation of ");
  var opresult5068 = callmethod(string5066, "++", [1], var_modname);
  var string5069 = new GraceString(".\n");
  var opresult5071 = callmethod(opresult5068, "++", [1], string5069);
  lineNumber = 1582
  lineNumber = 1
  lineNumber = 1581
  var call5072 = callmethod(var_io,"error", [0]);
  var call5073 = callmethod(call5072,"write", [1], opresult5071);
  lineNumber = 1582
  var call5074 = callmethod(var_sys,"exit", [1], new GraceNum(1));
  var if5063 = call5074;
}
  lineNumber = 1605
  lineNumber = 1608
  lineNumber = 1
  lineNumber = 1608
  lineNumber = 1
  lineNumber = 1584
  var call5076 = callmethod(var_util,"noexec", [0]);
  var call5077 = callmethod(call5076,"not", [0]);
  if (Grace_isTrue(call5077)) {
  lineNumber = 1585
  var string5078 = new GraceString("linking.");
  lineNumber = 1586
  var call5079 = callmethod(this,"log_verbose", [1], string5078);
  lineNumber = 1587
  lineNumber = 1586
  var string5080 = new GraceString("");
  var var_dlbit = string5080;
  lineNumber = 1588
  lineNumber = 1587
  var string5081 = new GraceString("");
  var var_exportDynamicBit = string5081;
  lineNumber = 1589
  lineNumber = 1588
  var string5082 = new GraceString("ld -ldl -o /dev/null 2>/dev/null");
  var_cmd = string5082;
  lineNumber = 1591
  lineNumber = 1589
  var call5084 = callmethod(var_io,"system", [1], var_cmd);
  if (Grace_isTrue(call5084)) {
  lineNumber = 1591
  lineNumber = 1590
  var string5085 = new GraceString("-ldl");
  var_dlbit = string5085;
  var if5083 = string5085;
}
  lineNumber = 1593
  lineNumber = 1592
  var string5086 = new GraceString("ld -o /dev/null --export-dynamic -lc >/dev/null 2>&1");
  var_cmd = string5086;
  lineNumber = 1595
  lineNumber = 1593
  var call5088 = callmethod(var_io,"system", [1], var_cmd);
  if (Grace_isTrue(call5088)) {
  lineNumber = 1595
  lineNumber = 1594
  var string5089 = new GraceString("-Wl,--export-dynamic");
  var_exportDynamicBit = string5089;
  var if5087 = string5089;
}
  lineNumber = 1600
  lineNumber = 1596
  var string5090 = new GraceString("gcc -g -o ");
  var opresult5092 = callmethod(string5090, "++", [1], var_modname);
  var string5093 = new GraceString(" -fPIC ");
  var opresult5095 = callmethod(opresult5092, "++", [1], string5093);
  var opresult5097 = callmethod(opresult5095, "++", [1], var_exportDynamicBit);
  var string5098 = new GraceString(" ");
  var opresult5100 = callmethod(opresult5097, "++", [1], string5098);
  lineNumber = 1600
  lineNumber = 1597
  var string5101 = new GraceString("");
  var opresult5103 = callmethod(string5101, "++", [1], var_modname);
  var string5104 = new GraceString(".gcn ");
  var opresult5106 = callmethod(opresult5103, "++", [1], string5104);
  var opresult5108 = callmethod(opresult5100, "++", [1], opresult5106);
  lineNumber = 1600
  lineNumber = 1
  lineNumber = 1598
  var call5109 = callmethod(var_util,"gracelibPath", [0]);
  var opresult5111 = callmethod(opresult5108, "++", [1], call5109);
  var string5112 = new GraceString("/gracelib.o ");
  var opresult5114 = callmethod(opresult5111, "++", [1], string5112);
  lineNumber = 1600
  lineNumber = 1599
  var string5115 = new GraceString("-lm ");
  var opresult5117 = callmethod(string5115, "++", [1], var_dlbit);
  var string5118 = new GraceString("");
  var opresult5120 = callmethod(opresult5117, "++", [1], string5118);
  var opresult5122 = callmethod(opresult5114, "++", [1], opresult5120);
  var_cmd = opresult5122;
  lineNumber = 1602
  lineNumber = 1600
  lineNumber = 1602
  var block5123 = Grace_allocObject();
  block5123.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block5123.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block5123.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block5123.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block5123.receiver = this;
  block5123.className = 'block<genc:1602>';
  block5123.real = function(
var_fn
) {
  lineNumber = 1601
  var string5124 = new GraceString(" ");
  var opresult5126 = callmethod(var_cmd, "++", [1], string5124);
  var opresult5128 = callmethod(opresult5126, "++", [1], var_fn);
  var_cmd = opresult5128;
  return opresult5128;
};
  var call5129 = callmethod(Grace_prelude,"for()do", [1, 1], var_linkfiles, block5123);
  lineNumber = 1605
  lineNumber = 1603
  lineNumber = 1
  lineNumber = 1603
  var call5131 = callmethod(var_io,"system", [1], var_cmd);
  var call5132 = callmethod(call5131,"not", [0]);
  if (Grace_isTrue(call5132)) {
  lineNumber = 1604
  var string5133 = new GraceString("Failed linking");
  lineNumber = 1605
  lineNumber = 1
  lineNumber = 1604
  var call5134 = callmethod(var_io,"error", [0]);
  var call5135 = callmethod(call5134,"write", [1], string5133);
  lineNumber = 1605
  var call5136 = callmethod(var_sys,"exit", [1], new GraceNum(1));
  var if5130 = call5136;
}
  var if5075 = if5130;
}
  lineNumber = 1608
  var string5137 = new GraceString("done.");
  lineNumber = 1609
  var call5138 = callmethod(this,"log_verbose", [1], string5137);
  lineNumber = 1614
  lineNumber = 1617
  lineNumber = 1609
  var string5140 = new GraceString("run");
  var opresult5142 = callmethod(var_buildtype, "==", [1], string5140);
  if (Grace_isTrue(opresult5142)) {
  lineNumber = 1611
  lineNumber = 1610
  var string5143 = new GraceString("./");
  var opresult5145 = callmethod(string5143, "++", [1], var_modname);
  var_cmd = opresult5145;
  lineNumber = 1614
  lineNumber = 1611
  var call5147 = callmethod(var_io,"system", [1], var_cmd);
  var call5148 = callmethod(call5147,"prefix!", [0]);
  if (Grace_isTrue(call5148)) {
  lineNumber = 1613
  lineNumber = 1612
  var string5149 = new GraceString("minigrace: Program exited with error: ");
  lineNumber = 1613
  var opresult5151 = callmethod(string5149, "++", [1], var_modname);
  var string5152 = new GraceString("\n");
  var opresult5154 = callmethod(opresult5151, "++", [1], string5152);
  lineNumber = 1614
  lineNumber = 1
  lineNumber = 1612
  var call5155 = callmethod(var_io,"error", [0]);
  var call5156 = callmethod(call5155,"write", [1], opresult5154);
  lineNumber = 1614
  var call5157 = callmethod(var_sys,"exit", [1], new GraceNum(1));
  var if5146 = call5157;
}
  var if5139 = if5146;
}
  var if5039 = if5139;
}
  return if5039
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compile"] = func4398;
  return this;
}
function gracecode_genjava() {
  lineNumber = 2
// Import of ast
  var var_ast = do_import("ast", gracecode_ast);
  lineNumber = 3
// Import of io
  var var_io = do_import("io", gracecode_io);
  lineNumber = 4
// Import of sys
  var var_sys = do_import("sys", gracecode_sys);
  lineNumber = 5
// Import of unicode
  var var_unicode = do_import("unicode", gracecode_unicode);
  lineNumber = 8
// Import of util
  var var_util = do_import("util", gracecode_util);
  lineNumber = 9
  lineNumber = 8
  var string0 = new GraceString("Obj");
  var var_obj = string0;
  lineNumber = 1
var func1 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 8
  return var_obj
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["obj"] = func1;
  lineNumber = 10
  lineNumber = 9
  var string2 = new GraceString("Block");
  var var_blk = string2;
  lineNumber = 1
var func3 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 9
  return var_blk
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["blk"] = func3;
  lineNumber = 11
  lineNumber = 10
  var string4 = new GraceString("Return");
  var var_ret = string4;
  lineNumber = 1
var func5 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 10
  return var_ret
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["ret"] = func5;
  lineNumber = 14
  lineNumber = 11
  var string6 = new GraceString("$javaBoolean");
  var var_bln = string6;
  lineNumber = 1
var func7 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 11
  return var_bln
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bln"] = func7;
  lineNumber = 19
var var_ImmutableIndexedCollection = new GraceType("ImmutableIndexedCollection");
var_ImmutableIndexedCollection.typeMethods.push("[]");
var_ImmutableIndexedCollection.typeMethods.push("at");
var type_ImmutableIndexedCollection = var_ImmutableIndexedCollection;
  lineNumber = 79
var func9 = function(argcv) {
  var curarg = 1;
  var var_nodes = arguments[curarg];
  curarg++;
  var var_outFile = arguments[curarg];
  curarg++;
  var var_modName = arguments[curarg];
  curarg++;
  var var_runMode = arguments[curarg];
  curarg++;
  var var_buildType = arguments[curarg];
  curarg++;
  var var_libPath = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 53
  lineNumber = 58
  lineNumber = 21
  var string11 = new GraceString("make");
  var opresult13 = callmethod(var_runMode, "==", [1], string11);
  if (Grace_isTrue(opresult13)) {
  lineNumber = 22
  var string14 = new GraceString("checking imports.");
  var call15 = callmethod(var_util,"log_verbose", [1], string14);
  lineNumber = 30
  lineNumber = 24
  lineNumber = 30
  var block16 = Grace_allocObject();
  block16.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block16.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block16.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block16.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block16.receiver = this;
  block16.className = 'block<genjava:30>';
  block16.real = function(
var_node
) {
  lineNumber = 34
  lineNumber = 1
  lineNumber = 25
  var call17 = callmethod(var_node,"kind", [0]);
  var string18 = new GraceString("import");
  var opresult20 = callmethod(call17, "==", [1], string18);
  lineNumber = 30
  var block21 = Grace_allocObject();
  block21.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block21.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block21.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block21.receiver = this;
  block21.className = 'block<genjava:30>';
  block21.real = function(
) {
  lineNumber = 28
  lineNumber = 1
  lineNumber = 28
  lineNumber = 1
  lineNumber = 26
  var call22 = callmethod(var_node,"value", [0]);
  var call23 = callmethod(call22,"value", [0]);
  var var_name = call23;
  lineNumber = 30
  lineNumber = 28
  var string24 = new GraceString("");
  var opresult26 = callmethod(string24, "++", [1], var_name);
  var string27 = new GraceString(".grace");
  var opresult29 = callmethod(opresult26, "++", [1], string27);
  var call30 = callmethod(var_io,"exists", [1], opresult29);
  lineNumber = 30
  var block31 = Grace_allocObject();
  block31.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block31.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block31.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block31.receiver = this;
  block31.className = 'block<genjava:30>';
  block31.real = function(
) {
  lineNumber = 29
  lineNumber = 1
  lineNumber = 29
  var string32 = new GraceString("");
  var opresult34 = callmethod(string32, "++", [1], var_name);
  var string35 = new GraceString(".java");
  var opresult37 = callmethod(opresult34, "++", [1], string35);
  var call38 = callmethod(var_io,"exists", [1], opresult37);
  var call39 = callmethod(call38,"not", [0]);
  lineNumber = 30
  var block40 = Grace_allocObject();
  block40.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block40.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block40.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block40.receiver = this;
  block40.className = 'block<genjava:30>';
  block40.real = function(
) {
  lineNumber = 1
  lineNumber = 30
  var string41 = new GraceString("");
  var opresult43 = callmethod(string41, "++", [1], var_name);
  var string44 = new GraceString(".java");
  var opresult46 = callmethod(opresult43, "++", [1], string44);
  var string47 = new GraceString("");
  var opresult49 = callmethod(string47, "++", [1], var_name);
  var string50 = new GraceString(".grace");
  var opresult52 = callmethod(opresult49, "++", [1], string50);
  var call53 = callmethod(var_io,"newer", [2], opresult46, opresult52);
  var call54 = callmethod(call53,"not", [0]);
  return call54;
};
  var opresult56 = callmethod(call39, "||", [1], block40);
  return opresult56;
};
  var opresult58 = callmethod(call30, "&&", [1], block31);
  return opresult58;
};
  var opresult60 = callmethod(opresult20, "&&", [1], block21);
  return opresult60;
};
  lineNumber = 36
  var call61 = callmethod(this,"filter()with", [1, 1], var_nodes, block16);
  var var_imports = call61;
  lineNumber = 53
  lineNumber = 36
  lineNumber = 53
  var block62 = Grace_allocObject();
  block62.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block62.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block62.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block62.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block62.receiver = this;
  block62.className = 'block<genjava:53>';
  block62.real = function(
var_node
) {
  lineNumber = 39
  lineNumber = 1
  lineNumber = 39
  lineNumber = 1
  lineNumber = 37
  var call63 = callmethod(var_node,"value", [0]);
  var call64 = callmethod(call63,"value", [0]);
  var var_name = call64;
  lineNumber = 42
  lineNumber = 39
  var string65 = new GraceString("");
  lineNumber = 42
  lineNumber = 1
  lineNumber = 42
  lineNumber = 1
  lineNumber = 39
  var call66 = callmethod(var_sys,"argv", [0]);
  var call67 = callmethod(call66,"first", [0]);
  var opresult69 = callmethod(string65, "++", [1], call67);
  var string70 = new GraceString(" --target java --make ");
  var opresult72 = callmethod(opresult69, "++", [1], string70);
  lineNumber = 42
  lineNumber = 40
  var string73 = new GraceString("");
  var opresult75 = callmethod(string73, "++", [1], var_name);
  var string76 = new GraceString(".grace --gracelib \"");
  var opresult78 = callmethod(opresult75, "++", [1], string76);
  lineNumber = 42
  lineNumber = 1
  lineNumber = 40
  var call79 = callmethod(var_util,"gracelibPath", [0]);
  var opresult81 = callmethod(opresult78, "++", [1], call79);
  var string82 = new GraceString("\"");
  var opresult84 = callmethod(opresult81, "++", [1], string82);
  var opresult86 = callmethod(opresult72, "++", [1], opresult84);
  var var_cmd = opresult86;
  lineNumber = 44
  lineNumber = 46
  lineNumber = 1
  lineNumber = 42
  var call88 = callmethod(var_util,"verbosity", [0]);
  var opresult90 = callmethod(call88, ">", [1], new GraceNum(30));
  if (Grace_isTrue(opresult90)) {
  lineNumber = 44
  lineNumber = 43
  var string91 = new GraceString("");
  var opresult93 = callmethod(string91, "++", [1], var_cmd);
  var string94 = new GraceString(" --verbose");
  var opresult96 = callmethod(opresult93, "++", [1], string94);
  var_cmd = opresult96;
  var if87 = opresult96;
}
  lineNumber = 48
  lineNumber = 50
  lineNumber = 1
  lineNumber = 46
  var call98 = callmethod(var_util,"vtag", [0]);
  if (Grace_isTrue(call98)) {
  lineNumber = 48
  lineNumber = 47
  var string99 = new GraceString("");
  var opresult101 = callmethod(string99, "++", [1], var_cmd);
  var string102 = new GraceString(" --vtag ");
  var opresult104 = callmethod(opresult101, "++", [1], string102);
  lineNumber = 48
  lineNumber = 1
  lineNumber = 47
  var call105 = callmethod(var_util,"vtag", [0]);
  var opresult107 = callmethod(opresult104, "++", [1], call105);
  var_cmd = opresult107;
  var if97 = opresult107;
}
  lineNumber = 52
  lineNumber = 50
  var string108 = new GraceString("");
  var opresult110 = callmethod(string108, "++", [1], var_cmd);
  var string111 = new GraceString(" --noexec");
  var opresult113 = callmethod(opresult110, "++", [1], string111);
  var_cmd = opresult113;
  lineNumber = 53
  lineNumber = 52
  lineNumber = 1
  lineNumber = 52
  var call115 = callmethod(var_io,"system", [1], var_cmd);
  var call116 = callmethod(call115,"not", [0]);
  if (Grace_isTrue(call116)) {
  lineNumber = 53
  var string117 = new GraceString("failed processing import of ");
  var opresult119 = callmethod(string117, "++", [1], var_name);
  var string120 = new GraceString(".");
  var opresult122 = callmethod(opresult119, "++", [1], string120);
  var call123 = callmethod(var_util,"syntax_error", [1], opresult122);
  var if114 = call123;
}
  return if114;
};
  var call124 = callmethod(Grace_prelude,"for()do", [1, 1], var_imports, block62);
  var if10 = call124;
}
  lineNumber = 58
  var string125 = new GraceString("compiling to Java.");
  var call126 = callmethod(var_util,"log_verbose", [1], string125);
  lineNumber = 60
  lineNumber = 62
  var call127 = callmethod(this,"compileModule", [2], var_nodes, var_modName);
  var var_output = call127;
  var string128 = new GraceString("writing file.");
  var call129 = callmethod(var_util,"log_verbose", [1], string128);
  lineNumber = 64
  lineNumber = 65
  lineNumber = 1
  lineNumber = 64
  var call130 = callmethod(var_util,"outfile", [0]);
  var call131 = callmethod(call130,"write", [1], var_output);
  lineNumber = 65
  lineNumber = 1
  lineNumber = 65
  lineNumber = 1
  lineNumber = 65
  var call132 = callmethod(var_util,"outfile", [0]);
  var call133 = callmethod(call132,"close", [0]);
  lineNumber = 72
  lineNumber = 76
  lineNumber = 67
  var string135 = new GraceString("make");
  var opresult137 = callmethod(var_runMode, "==", [1], string135);
  if (Grace_isTrue(opresult137)) {
  lineNumber = 68
  var string138 = new GraceString("compiling Java code.");
  var call139 = callmethod(var_util,"log_verbose", [1], string138);
  lineNumber = 71
  lineNumber = 70
  var string140 = new GraceString("javac -cp \".:");
  lineNumber = 71
  lineNumber = 1
  lineNumber = 70
  var call141 = callmethod(var_util,"gracelibPath", [0]);
  var opresult143 = callmethod(string140, "++", [1], call141);
  var string144 = new GraceString("\" ");
  var opresult146 = callmethod(opresult143, "++", [1], string144);
  var opresult148 = callmethod(opresult146, "++", [1], var_modName);
  var string149 = new GraceString(".java");
  var opresult151 = callmethod(opresult148, "++", [1], string149);
  var var_cmd = opresult151;
  lineNumber = 72
  lineNumber = 71
  lineNumber = 1
  lineNumber = 71
  var call153 = callmethod(var_io,"system", [1], var_cmd);
  var call154 = callmethod(call153,"not", [0]);
  if (Grace_isTrue(call154)) {
  lineNumber = 72
  var string155 = new GraceString("failed Java compilation of ");
  var opresult157 = callmethod(string155, "++", [1], var_modName);
  var string158 = new GraceString(".");
  var opresult160 = callmethod(opresult157, "++", [1], string158);
  var call161 = callmethod(var_util,"syntax_error", [1], opresult160);
  var if152 = call161;
}
  var if134 = if152;
}
  lineNumber = 76
  var string162 = new GraceString("done.");
  var call163 = callmethod(var_util,"log_verbose", [1], string162);
  lineNumber = 79
  lineNumber = 81
  lineNumber = 78
  var string165 = new GraceString("run");
  var opresult167 = callmethod(var_buildType, "==", [1], string165);
  if (Grace_isTrue(opresult167)) {
  lineNumber = 79
  var string168 = new GraceString("java -cp \".:");
  lineNumber = 1
  lineNumber = 79
  var call169 = callmethod(var_util,"gracelibPath", [0]);
  var opresult171 = callmethod(string168, "++", [1], call169);
  var string172 = new GraceString("\" ");
  var opresult174 = callmethod(opresult171, "++", [1], string172);
  var opresult176 = callmethod(opresult174, "++", [1], var_modName);
  var string177 = new GraceString("");
  var opresult179 = callmethod(opresult176, "++", [1], string177);
  var call180 = callmethod(var_io,"system", [1], opresult179);
  var if164 = call180;
}
  return if164
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func9.paramTypes = [];
func9.paramTypes.push([]);
func9.paramTypes.push([]);
func9.paramTypes.push([type_String, "modName"]);
func9.paramTypes.push([type_String, "runMode"]);
func9.paramTypes.push([type_String, "buildType"]);
func9.paramTypes.push([]);
  this.methods["compile"] = func9;
  lineNumber = 141
var func181 = function(argcv) {
  var curarg = 1;
  var var_nodes = arguments[curarg];
  curarg++;
  var var_modName = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 85
  var array182 = new GraceList([
]);

  var var_packages = array182;
  lineNumber = 86
  lineNumber = 85
  var string183 = new GraceString("");
  var var_name = string183;
  lineNumber = 92
  lineNumber = 86
  lineNumber = 92
  var block184 = Grace_allocObject();
  block184.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block184.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block184.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block184.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block184.receiver = this;
  block184.className = 'block<genjava:92>';
  block184.real = function(
var_c
) {
  lineNumber = 93
  lineNumber = 87
  var string186 = new GraceString("/");
  var opresult188 = callmethod(var_c, "==", [1], string186);
  if (Grace_isTrue(opresult188)) {
  lineNumber = 88
  var call189 = callmethod(var_packages,"push", [1], var_name);
  lineNumber = 90
  lineNumber = 89
  var string190 = new GraceString("");
  var_name = string190;
  var if185 = string190;
  } else {
  lineNumber = 92
  lineNumber = 91
  var string191 = new GraceString("");
  var opresult193 = callmethod(string191, "++", [1], var_name);
  var string194 = new GraceString("");
  var opresult196 = callmethod(opresult193, "++", [1], string194);
  var opresult198 = callmethod(opresult196, "++", [1], var_c);
  var string199 = new GraceString("");
  var opresult201 = callmethod(opresult198, "++", [1], string199);
  var_name = opresult201;
  var if185 = opresult201;
}
  return if185;
};
  var call202 = callmethod(Grace_prelude,"for()do", [1, 1], var_modName, block184);
  lineNumber = 96
  var call203 = callmethod(this,"moduleScope", [0]);
  var var_scope = call203;
  lineNumber = 97
  lineNumber = 96
  var string204 = new GraceString("$module");
  var var_mod = string204;
  lineNumber = 100
  lineNumber = 97
  var string205 = new GraceString("StandardPrelude");
  var var_std = string205;
  lineNumber = 141
  lineNumber = 104
  lineNumber = 103
  lineNumber = 102
  lineNumber = 101
  lineNumber = 142
  lineNumber = 1
  lineNumber = 100
  var call207 = callmethod(var_packages,"size", [0]);
  var opresult209 = callmethod(call207, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult209)) {
  var string210 = new GraceString("");
  var if206 = string210;
  } else {
  lineNumber = 101
  var string211 = new GraceString("package ");
  var string212 = new GraceString(".");
  var call213 = callmethod(this,"join()separatedBy", [1, 1], var_packages, string212);
  var opresult215 = callmethod(string211, "++", [1], call213);
  var string216 = new GraceString("");
  var opresult218 = callmethod(opresult215, "++", [1], string216);
  var call219 = callmethod(var_scope,"line", [1], opresult218);
  var if206 = call219;
}
  lineNumber = 102
  var string220 = new GraceString("import grace.lang.*");
  var call221 = callmethod(var_scope,"line", [1], string220);
  var opresult223 = callmethod(if206, "++", [1], call221);
  lineNumber = 103
  var string224 = new GraceString("import grace.lib.*");
  var call225 = callmethod(var_scope,"line", [1], string224);
  var opresult227 = callmethod(opresult223, "++", [1], call225);
  lineNumber = 104
  var string228 = new GraceString("import java.lang.reflect.Method");
  var call229 = callmethod(var_scope,"line", [1], string228);
  var opresult231 = callmethod(opresult227, "++", [1], call229);
  lineNumber = 141
  lineNumber = 108
  lineNumber = 107
  var string232 = new GraceString("public final class ");
  lineNumber = 108
  var string233 = new GraceString("");
  var opresult235 = callmethod(string233, "++", [1], var_name);
  var string236 = new GraceString(" extends Prelude {");
  var opresult238 = callmethod(opresult235, "++", [1], string236);
  var opresult240 = callmethod(string232, "++", [1], opresult238);
  lineNumber = 140
  var block241 = Grace_allocObject();
  block241.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block241.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block241.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block241.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block241.receiver = this;
  block241.className = 'block<genjava:140>';
  block241.real = function(
var_scope__39__
) {
  lineNumber = 129
  lineNumber = 123
  lineNumber = 119
  lineNumber = 118
  lineNumber = 116
  lineNumber = 114
  lineNumber = 110
  lineNumber = 109
  var string242 = new GraceString("private static final ");
  var opresult244 = callmethod(string242, "++", [1], var_obj);
  var string245 = new GraceString(" prelude = ");
  var opresult247 = callmethod(opresult244, "++", [1], string245);
  var opresult249 = callmethod(opresult247, "++", [1], var_std);
  var string250 = new GraceString(".");
  var opresult252 = callmethod(opresult249, "++", [1], string250);
  var opresult254 = callmethod(opresult252, "++", [1], var_mod);
  var string255 = new GraceString("()");
  var opresult257 = callmethod(opresult254, "++", [1], string255);
  var call258 = callmethod(var_scope__39__,"line", [1], opresult257);
  lineNumber = 110
  var string259 = new GraceString("private static ");
  var opresult261 = callmethod(string259, "++", [1], var_name);
  var string262 = new GraceString(" ");
  var opresult264 = callmethod(opresult261, "++", [1], string262);
  var opresult266 = callmethod(opresult264, "++", [1], var_mod);
  var string267 = new GraceString("");
  var opresult269 = callmethod(opresult266, "++", [1], string267);
  var call270 = callmethod(var_scope__39__,"line", [1], opresult269);
  var opresult272 = callmethod(call258, "++", [1], call270);
  lineNumber = 114
  lineNumber = 111
  var string273 = new GraceString("public static ");
  var opresult275 = callmethod(string273, "++", [1], var_name);
  var string276 = new GraceString(" ");
  var opresult278 = callmethod(opresult275, "++", [1], string276);
  var opresult280 = callmethod(opresult278, "++", [1], var_mod);
  var string281 = new GraceString("() {");
  var opresult283 = callmethod(opresult280, "++", [1], string281);
  lineNumber = 113
  var block284 = Grace_allocObject();
  block284.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block284.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block284.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block284.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block284.receiver = this;
  block284.className = 'block<genjava:113>';
  block284.real = function(
var_scope__39____39__
) {
  lineNumber = 112
  var string285 = new GraceString("return ");
  var opresult287 = callmethod(string285, "++", [1], var_mod);
  var string288 = new GraceString(" == null ? ");
  var opresult290 = callmethod(opresult287, "++", [1], string288);
  var opresult292 = callmethod(opresult290, "++", [1], var_mod);
  var string293 = new GraceString(" = ");
  var opresult295 = callmethod(opresult292, "++", [1], string293);
  lineNumber = 113
  var string296 = new GraceString("new ");
  var opresult298 = callmethod(string296, "++", [1], var_name);
  var string299 = new GraceString("() : ");
  var opresult301 = callmethod(opresult298, "++", [1], string299);
  var opresult303 = callmethod(opresult301, "++", [1], var_mod);
  var string304 = new GraceString("");
  var opresult306 = callmethod(opresult303, "++", [1], string304);
  var opresult308 = callmethod(opresult295, "++", [1], opresult306);
  lineNumber = 112
  var call309 = callmethod(var_scope__39____39__,"line", [1], opresult308);
  return call309;
};
  lineNumber = 114
  var string310 = new GraceString("}");
  lineNumber = 111
  var call311 = callmethod(var_scope__39__,"stbl", [3], opresult283, block284, string310);
  var opresult313 = callmethod(opresult272, "++", [1], call311);
  lineNumber = 116
  var string314 = new GraceString("private static int $ret = 0");
  var call315 = callmethod(var_scope__39__,"line", [1], string314);
  var opresult317 = callmethod(opresult313, "++", [1], call315);
  lineNumber = 118
  var string318 = new GraceString("private final ");
  var opresult320 = callmethod(string318, "++", [1], var_obj);
  var string321 = new GraceString(" $self = this");
  var opresult323 = callmethod(opresult320, "++", [1], string321);
  var call324 = callmethod(var_scope__39__,"line", [1], opresult323);
  var opresult326 = callmethod(opresult317, "++", [1], call324);
  lineNumber = 119
  var string327 = new GraceString("private final ");
  var opresult329 = callmethod(string327, "++", [1], var_obj);
  var string330 = new GraceString(" $closure = this");
  var opresult332 = callmethod(opresult329, "++", [1], string330);
  var call333 = callmethod(var_scope__39__,"line", [1], opresult332);
  var opresult335 = callmethod(opresult326, "++", [1], call333);
  lineNumber = 123
  lineNumber = 119
  var call336 = callmethod(this,"compileDeclarations", [2], var_nodes, var_scope__39__);
  var opresult338 = callmethod(opresult335, "++", [1], call336);
  lineNumber = 129
  lineNumber = 126
  var string339 = new GraceString("private ");
  var opresult341 = callmethod(string339, "++", [1], var_name);
  var string342 = new GraceString("() {");
  var opresult344 = callmethod(opresult341, "++", [1], string342);
  lineNumber = 128
  var block345 = Grace_allocObject();
  block345.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block345.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block345.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block345.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block345.receiver = this;
  block345.className = 'block<genjava:128>';
  block345.real = function(
var_scope__39____39__
) {
  lineNumber = 127
  var string346 = new GraceString("final ");
  var opresult348 = callmethod(string346, "++", [1], var_obj);
  var string349 = new GraceString(" self = this");
  var opresult351 = callmethod(opresult348, "++", [1], string349);
  var call352 = callmethod(var_scope__39____39__,"line", [1], opresult351);
  lineNumber = 128
  lineNumber = 127
  var call353 = callmethod(this,"compileExecution", [2], var_nodes, var_scope__39____39__);
  var opresult355 = callmethod(call352, "++", [1], call353);
  return opresult355;
};
  lineNumber = 129
  var string356 = new GraceString("}");
  lineNumber = 126
  var call357 = callmethod(var_scope__39__,"stbl", [3], opresult344, block345, string356);
  var opresult359 = callmethod(opresult338, "++", [1], call357);
  lineNumber = 140
  lineNumber = 133
  lineNumber = 132
  var string360 = new GraceString("public static void ");
  lineNumber = 133
  var string361 = new GraceString("main(String[] args) {");
  var opresult363 = callmethod(string360, "++", [1], string361);
  lineNumber = 139
  var block364 = Grace_allocObject();
  block364.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block364.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block364.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block364.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block364.receiver = this;
  block364.className = 'block<genjava:139>';
  block364.real = function(
var_scope__39____39__
) {
  lineNumber = 134
  var string365 = new GraceString("grace.lib.sys.setArgs(args, \"");
  var opresult367 = callmethod(string365, "++", [1], var_name);
  var string368 = new GraceString("\")");
  var opresult370 = callmethod(opresult367, "++", [1], string368);
  var call371 = callmethod(var_scope__39____39__,"line", [1], opresult370);
  lineNumber = 139
  lineNumber = 135
  var string372 = new GraceString("try {");
  lineNumber = 136
  var block373 = Grace_allocObject();
  block373.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block373.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block373.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block373.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block373.receiver = this;
  block373.className = 'block<genjava:136>';
  block373.real = function(
var_scope__39____39____39__
) {
  var string374 = new GraceString("$module()");
  var call375 = callmethod(var_scope__39____39____39__,"line", [1], string374);
  return call375;
};
  lineNumber = 139
  lineNumber = 137
  var string376 = new GraceString("} catch (Exception e) {");
  lineNumber = 138
  var block377 = Grace_allocObject();
  block377.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block377.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block377.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block377.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block377.receiver = this;
  block377.className = 'block<genjava:138>';
  block377.real = function(
var_s
) {
  var string378 = new GraceString("Prelude.printException(e)");
  var call379 = callmethod(var_s,"line", [1], string378);
  return call379;
};
  lineNumber = 139
  var string380 = new GraceString("}");
  lineNumber = 137
  var call381 = callmethod(var_scope__39____39__,"block", [3], string376, block377, string380);
  lineNumber = 135
  var call382 = callmethod(var_scope__39____39__,"stbl", [3], string372, block373, call381);
  var opresult384 = callmethod(call371, "++", [1], call382);
  return opresult384;
};
  lineNumber = 140
  var string385 = new GraceString("}");
  lineNumber = 132
  var call386 = callmethod(var_scope__39__,"stbl", [3], opresult363, block364, string385);
  var opresult388 = callmethod(opresult359, "++", [1], call386);
  return opresult388;
};
  lineNumber = 141
  var string389 = new GraceString("}");
  lineNumber = 107
  var call390 = callmethod(var_scope,"decl", [3], opresult240, block241, string389);
  var call391 = callmethod(var_scope,"stmt", [1], call390);
  var opresult393 = callmethod(opresult231, "++", [1], call391);
  return opresult393
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func181.paramTypes = [];
func181.paramTypes.push([]);
func181.paramTypes.push([type_String, "modName"]);
  this.methods["compileModule"] = func181;
  lineNumber = 172
var func394 = function(argcv) {
  var curarg = 1;
  var var_nodes = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 170
  lineNumber = 165
  var string395 = new GraceString("for");
  lineNumber = 170
  var block396 = Grace_allocObject();
  block396.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block396.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block396.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block396.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block396.receiver = this;
  block396.className = 'block<genjava:170>';
  block396.real = function(
var_node
) {
  lineNumber = 167
  lineNumber = 1
  lineNumber = 167
  lineNumber = 1
  lineNumber = 166
  var call397 = callmethod(var_node,"body", [0]);
  var call398 = callmethod(call397,"params", [0]);
  var var_params = call398;
  lineNumber = 170
  lineNumber = 172
  lineNumber = 1
  lineNumber = 167
  var call400 = callmethod(var_params,"size", [0]);
  var opresult402 = callmethod(call400, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult402)) {
  var string403 = new GraceString("");
  var if399 = string403;
  } else {
  lineNumber = 168
  var idxres405 = var_params.methods["[]"].call(var_params, [1], new GraceNum(1));
  var call406 = callmethod(var_ast,"astdefdec", [3], idxres405, var_nothing, var_nothing);
  var array404 = new GraceList([
call406,
]);

  var var_param = array404;
  lineNumber = 170
  lineNumber = 169
  lineNumber = 171
  var call407 = callmethod(this,"compileDeclarations", [2], var_param, var_scope);
  lineNumber = 170
  lineNumber = 1
  lineNumber = 170
  lineNumber = 1
  lineNumber = 170
  var call408 = callmethod(var_node,"body", [0]);
  var call409 = callmethod(call408,"body", [0]);
  lineNumber = 169
  var call410 = callmethod(this,"compileDeclarations", [2], call409, var_scope);
  var opresult412 = callmethod(call407, "++", [1], call410);
  var if399 = opresult412;
}
  return if399;
};
  lineNumber = 164
  lineNumber = 163
  var string413 = new GraceString("while");
  lineNumber = 164
  var block414 = Grace_allocObject();
  block414.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block414.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block414.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block414.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block414.receiver = this;
  block414.className = 'block<genjava:164>';
  block414.real = function(
var_node
) {
  lineNumber = 1
  lineNumber = 164
  var call415 = callmethod(var_node,"body", [0]);
  lineNumber = 165
  var call416 = callmethod(this,"compileDeclarations", [2], call415, var_scope);
  return call416;
};
  lineNumber = 162
  lineNumber = 160
  var string417 = new GraceString("if");
  lineNumber = 162
  var block418 = Grace_allocObject();
  block418.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block418.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block418.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block418.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block418.receiver = this;
  block418.className = 'block<genjava:162>';
  block418.real = function(
var_node
) {
  lineNumber = 161
  lineNumber = 1
  lineNumber = 161
  var call419 = callmethod(var_node,"thenblock", [0]);
  lineNumber = 163
  var call420 = callmethod(this,"compileDeclarations", [2], call419, var_scope);
  lineNumber = 162
  lineNumber = 1
  lineNumber = 162
  var call421 = callmethod(var_node,"elseblock", [0]);
  lineNumber = 161
  var call422 = callmethod(this,"compileDeclarations", [2], call421, var_scope);
  var opresult424 = callmethod(call420, "++", [1], call422);
  return opresult424;
};
  lineNumber = 159
  lineNumber = 158
  var string425 = new GraceString("method");
  lineNumber = 159
  var block426 = Grace_allocObject();
  block426.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block426.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block426.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block426.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block426.receiver = this;
  block426.className = 'block<genjava:159>';
  block426.real = function(
var_node
) {
  lineNumber = 160
  var call427 = callmethod(this,"compileMethod", [2], var_node, var_scope);
  return call427;
};
  lineNumber = 154
  lineNumber = 147
  var string429 = new GraceString("vardec");
  var string430 = new GraceString("defdec");
  var string431 = new GraceString("class");
  var string432 = new GraceString("type");
  var array428 = new GraceList([
string429,
string430,
string431,
string432,
]);

  lineNumber = 154
  var block433 = Grace_allocObject();
  block433.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block433.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block433.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block433.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block433.receiver = this;
  block433.className = 'block<genjava:154>';
  block433.real = function(
var_node
) {
  lineNumber = 148
  lineNumber = 149
  var call434 = callmethod(this,"compileFieldName", [1], var_node);
  var var_name = call434;
  lineNumber = 154
  lineNumber = 149
  lineNumber = 1
  lineNumber = 149
  var call435 = callmethod(var_scope,"hasVariable", [1], var_name);
  var call436 = callmethod(call435,"not", [0]);
  lineNumber = 154
  var block437 = Grace_allocObject();
  block437.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block437.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block437.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block437.receiver = this;
  block437.className = 'block<genjava:154>';
  block437.real = function(
) {
  lineNumber = 150
  var call438 = callmethod(var_scope,"addVariable", [1], var_name);
  lineNumber = 154
  lineNumber = 151
  var call439 = callmethod(this,"compileField", [2], var_node, var_scope);
  var call440 = callmethod(var_scope,"line", [1], call439);
  lineNumber = 154
  lineNumber = 151
  lineNumber = 1
  lineNumber = 151
  var call441 = callmethod(var_scope,"isDecl", [0]);
  lineNumber = 154
  var block442 = Grace_allocObject();
  block442.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block442.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block442.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block442.receiver = this;
  block442.className = 'block<genjava:154>';
  block442.real = function(
) {
  lineNumber = 152
  lineNumber = 156
  lineNumber = 1
  lineNumber = 152
  var call443 = callmethod(var_scope,"indent", [0]);
  lineNumber = 156
  var call444 = callmethod(this,"compileGetter", [2], var_node, var_scope);
  var opresult446 = callmethod(call443, "++", [1], call444);
  lineNumber = 154
  lineNumber = 153
  lineNumber = 1
  lineNumber = 153
  var call447 = callmethod(var_node,"kind", [0]);
  var string448 = new GraceString("vardec");
  var opresult450 = callmethod(call447, "==", [1], string448);
  lineNumber = 154
  var block451 = Grace_allocObject();
  block451.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block451.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block451.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block451.receiver = this;
  block451.className = 'block<genjava:154>';
  block451.real = function(
) {
  lineNumber = 155
  lineNumber = 1
  lineNumber = 154
  var call452 = callmethod(var_scope,"indent", [0]);
  lineNumber = 155
  var call453 = callmethod(this,"compileSetter", [2], var_node, var_scope);
  var opresult455 = callmethod(call452, "++", [1], call453);
  return opresult455;
};
  lineNumber = 152
  var call456 = callmethod(this,"strIf()then", [1, 1], opresult450, block451);
  var opresult458 = callmethod(opresult446, "++", [1], call456);
  return opresult458;
};
  lineNumber = 151
  var call459 = callmethod(this,"strIf()then", [1, 1], call441, block442);
  var opresult461 = callmethod(call440, "++", [1], call459);
  return opresult461;
};
  lineNumber = 158
  var call462 = callmethod(this,"strIf()then", [1, 1], call436, block437);
  return call462;
};
  lineNumber = 146
  lineNumber = 145
  var string463 = new GraceString("import");
  lineNumber = 146
  var block464 = Grace_allocObject();
  block464.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block464.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block464.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block464.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block464.receiver = this;
  block464.className = 'block<genjava:146>';
  block464.real = function(
var_node
) {
  var call465 = callmethod(this,"compileImportDecl", [2], var_node, var_scope);
  var call466 = callmethod(var_scope,"line", [1], call465);
  return call466;
};
  lineNumber = 172
  var call467 = callmethod(this,"kind()do", [1, 1], string463, block464);
  var call468 = callmethod(call467,"kinds()do", [1, 1], array428, block433);
  var call469 = callmethod(call468,"kind()do", [1, 1], string425, block426);
  var call470 = callmethod(call469,"kind()do", [1, 1], string417, block418);
  var call471 = callmethod(call470,"kind()do", [1, 1], string413, block414);
  var call472 = callmethod(call471,"kind()do", [1, 1], string395, block396);
  var call473 = callmethod(call472,"in", [1], var_nodes);
  lineNumber = 173
  var call474 = callmethod(this,"join", [1], call473);
  return call474
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func394.paramTypes = [];
func394.paramTypes.push([]);
func394.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileDeclarations"] = func394;
  lineNumber = 216
var func475 = function(argcv) {
  var curarg = 1;
  var var_nodes = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 212
  var block476 = Grace_allocObject();
  block476.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block476.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block476.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block476.receiver = this;
  block476.className = 'block<genjava:212>';
  block476.real = function(
var_node
,
var_continue
) {
  lineNumber = 208
  lineNumber = 1
  lineNumber = 208
  lineNumber = 1
  lineNumber = 208
  var call478 = callmethod(var_node,"kind", [0]);
  var string480 = new GraceString("method");
  var string481 = new GraceString("type");
  var string482 = new GraceString("inherits");
  var array479 = new GraceList([
string480,
string481,
string482,
]);

  var call483 = callmethod(array479,"contains", [1], call478);
  var call484 = callmethod(call483,"not", [0]);
  if (Grace_isTrue(call484)) {
  lineNumber = 209
  var string485 = new GraceString("Unknown statement: ");
  lineNumber = 1
  lineNumber = 209
  var call486 = callmethod(var_node,"kind", [0]);
  var opresult488 = callmethod(string485, "++", [1], call486);
  var string489 = new GraceString("");
  var opresult491 = callmethod(opresult488, "++", [1], string489);
  var call492 = callmethod(var_util,"log_verbose", [1], opresult491);
  lineNumber = 210
  var string493 = new GraceString("/* ");
  lineNumber = 1
  lineNumber = 210
  var call494 = callmethod(var_node,"kind", [0]);
  var opresult496 = callmethod(string493, "++", [1], call494);
  var string497 = new GraceString(" */");
  var opresult499 = callmethod(opresult496, "++", [1], string497);
  var call500 = callmethod(var_scope,"stmt", [1], opresult499);
  var if477 = call500;
  } else {
  lineNumber = 212
  lineNumber = 1
  lineNumber = 212
  var call501 = callmethod(var_continue,"apply", [0]);
  var if477 = call501;
}
  return if477;
};
  lineNumber = 206
  lineNumber = 205
  var string502 = new GraceString("inherits");
  lineNumber = 206
  var block503 = Grace_allocObject();
  block503.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block503.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block503.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block503.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block503.receiver = this;
  block503.className = 'block<genjava:206>';
  block503.real = function(
var_node
) {
  var call504 = callmethod(this,"compileInherits", [2], var_node, var_scope);
  var call505 = callmethod(var_scope,"line", [1], call504);
  return call505;
};
  lineNumber = 204
  lineNumber = 203
  var string506 = new GraceString("matchcase");
  lineNumber = 204
  var block507 = Grace_allocObject();
  block507.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block507.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block507.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block507.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block507.receiver = this;
  block507.className = 'block<genjava:204>';
  block507.real = function(
var_node
) {
  var call508 = callmethod(this,"compileMatch", [2], var_node, var_scope);
  var call509 = callmethod(var_scope,"stmt", [1], call508);
  return call509;
};
  lineNumber = 202
  lineNumber = 201
  var string510 = new GraceString("object");
  lineNumber = 202
  var block511 = Grace_allocObject();
  block511.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block511.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block511.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block511.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block511.receiver = this;
  block511.className = 'block<genjava:202>';
  block511.real = function(
var_node
) {
  var call512 = callmethod(this,"compileObject", [2], var_node, var_scope);
  var call513 = callmethod(var_scope,"line", [1], call512);
  return call513;
};
  lineNumber = 200
  lineNumber = 199
  var string514 = new GraceString("class");
  lineNumber = 200
  var block515 = Grace_allocObject();
  block515.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block515.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block515.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block515.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block515.receiver = this;
  block515.className = 'block<genjava:200>';
  block515.real = function(
var_node
) {
  lineNumber = 201
  var call516 = callmethod(this,"compileClass", [2], var_node, var_scope);
  return call516;
};
  lineNumber = 198
  lineNumber = 197
  var string517 = new GraceString("op");
  lineNumber = 198
  var block518 = Grace_allocObject();
  block518.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block518.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block518.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block518.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block518.receiver = this;
  block518.className = 'block<genjava:198>';
  block518.real = function(
var_node
) {
  var call519 = callmethod(this,"compileOp", [2], var_node, var_scope);
  var call520 = callmethod(var_scope,"line", [1], call519);
  return call520;
};
  lineNumber = 196
  lineNumber = 195
  var string521 = new GraceString("call");
  lineNumber = 196
  var block522 = Grace_allocObject();
  block522.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block522.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block522.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block522.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block522.receiver = this;
  block522.className = 'block<genjava:196>';
  block522.real = function(
var_node
) {
  var call523 = callmethod(this,"compileCall", [2], var_node, var_scope);
  var call524 = callmethod(var_scope,"line", [1], call523);
  return call524;
};
  lineNumber = 194
  lineNumber = 193
  var string525 = new GraceString("member");
  lineNumber = 194
  var block526 = Grace_allocObject();
  block526.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block526.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block526.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block526.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block526.receiver = this;
  block526.className = 'block<genjava:194>';
  block526.real = function(
var_node
) {
  var call527 = callmethod(this,"compileMember", [2], var_node, var_scope);
  var call528 = callmethod(var_scope,"line", [1], call527);
  return call528;
};
  lineNumber = 192
  lineNumber = 191
  var string529 = new GraceString("if");
  lineNumber = 192
  var block530 = Grace_allocObject();
  block530.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block530.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block530.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block530.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block530.receiver = this;
  block530.className = 'block<genjava:192>';
  block530.real = function(
var_node
) {
  var call531 = callmethod(this,"compileIf", [2], var_node, var_scope);
  var call532 = callmethod(var_scope,"line", [1], call531);
  return call532;
};
  lineNumber = 190
  lineNumber = 189
  var string533 = new GraceString("bind");
  lineNumber = 190
  var block534 = Grace_allocObject();
  block534.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block534.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block534.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block534.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block534.receiver = this;
  block534.className = 'block<genjava:190>';
  block534.real = function(
var_node
) {
  var call535 = callmethod(this,"compileBind", [2], var_node, var_scope);
  var call536 = callmethod(var_scope,"line", [1], call535);
  return call536;
};
  lineNumber = 188
  lineNumber = 187
  var string537 = new GraceString("type");
  lineNumber = 188
  var block538 = Grace_allocObject();
  block538.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block538.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block538.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block538.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block538.receiver = this;
  block538.className = 'block<genjava:188>';
  block538.real = function(
var_node
) {
  var call539 = callmethod(this,"compileType", [2], var_node, var_scope);
  var call540 = callmethod(var_scope,"line", [1], call539);
  return call540;
};
  lineNumber = 186
  lineNumber = 185
  var string541 = new GraceString("defdec");
  lineNumber = 186
  var block542 = Grace_allocObject();
  block542.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block542.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block542.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block542.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block542.receiver = this;
  block542.className = 'block<genjava:186>';
  block542.real = function(
var_node
) {
  var call543 = callmethod(this,"compileBindDecl", [2], var_node, var_scope);
  var call544 = callmethod(var_scope,"line", [1], call543);
  return call544;
};
  lineNumber = 184
  lineNumber = 181
  var string545 = new GraceString("vardec");
  lineNumber = 184
  var block546 = Grace_allocObject();
  block546.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block546.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block546.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block546.receiver = this;
  block546.className = 'block<genjava:184>';
  block546.real = function(
var_node
,
var_continue
) {
  lineNumber = 185
  lineNumber = 1
  lineNumber = 182
  var call548 = callmethod(var_node,"value", [0]);
  var bool549 = new GraceBoolean(false)
  var opresult551 = callmethod(call548, "/=", [1], bool549);
  if (Grace_isTrue(opresult551)) {
  lineNumber = 183
  var call552 = callmethod(this,"compileBindDecl", [2], var_node, var_scope);
  var call553 = callmethod(var_scope,"line", [1], call552);
  var if547 = call553;
  } else {
  lineNumber = 184
  lineNumber = 1
  lineNumber = 184
  var call554 = callmethod(var_continue,"apply", [0]);
  var if547 = call554;
}
  return if547;
};
  lineNumber = 180
  lineNumber = 178
  var string555 = new GraceString("return");
  lineNumber = 180
  var block556 = Grace_allocObject();
  block556.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block556.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block556.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block556.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block556.receiver = this;
  block556.className = 'block<genjava:180>';
  block556.real = function(
var_node
) {
  lineNumber = 179
  lineNumber = 1
  lineNumber = 179
  var call557 = callmethod(var_k,"stop", [0]);
  lineNumber = 180
  var call558 = callmethod(this,"compileReturn", [2], var_node, var_scope);
  var call559 = callmethod(var_scope,"line", [1], call558);
  return call559;
};
  lineNumber = 177
  lineNumber = 176
  var string560 = new GraceString("import");
  lineNumber = 177
  var block561 = Grace_allocObject();
  block561.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block561.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block561.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block561.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block561.receiver = this;
  block561.className = 'block<genjava:177>';
  block561.real = function(
var_node
) {
  var call562 = callmethod(this,"compileImportExec", [2], var_node, var_scope);
  var call563 = callmethod(var_scope,"stmt", [1], call562);
  return call563;
};
  lineNumber = 216
  var call564 = callmethod(this,"kind()do", [1, 1], string560, block561);
  var call565 = callmethod(call564,"kind()do", [1, 1], string555, block556);
  var call566 = callmethod(call565,"kind()do", [1, 1], string545, block546);
  var call567 = callmethod(call566,"kind()do", [1, 1], string541, block542);
  var call568 = callmethod(call567,"kind()do", [1, 1], string537, block538);
  var call569 = callmethod(call568,"kind()do", [1, 1], string533, block534);
  var call570 = callmethod(call569,"kind()do", [1, 1], string529, block530);
  var call571 = callmethod(call570,"kind()do", [1, 1], string525, block526);
  var call572 = callmethod(call571,"kind()do", [1, 1], string521, block522);
  var call573 = callmethod(call572,"kind()do", [1, 1], string517, block518);
  var call574 = callmethod(call573,"kind()do", [1, 1], string514, block515);
  var call575 = callmethod(call574,"kind()do", [1, 1], string510, block511);
  var call576 = callmethod(call575,"kind()do", [1, 1], string506, block507);
  var call577 = callmethod(call576,"kind()do", [1, 1], string502, block503);
  var call578 = callmethod(call577,"else", [1], block476);
  var var_k = call578;
  var call579 = callmethod(var_k,"in", [1], var_nodes);
  lineNumber = 217
  var call580 = callmethod(this,"join", [1], call579);
  return call580
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func475.paramTypes = [];
func475.paramTypes.push([]);
func475.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileExecution"] = func475;
  lineNumber = 253
var func581 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 252
  var block582 = Grace_allocObject();
  block582.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block582.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block582.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block582.receiver = this;
  block582.className = 'block<genjava:252>';
  block582.real = function(
) {
  lineNumber = 251
  var string583 = new GraceString("Unknown expression: ");
  lineNumber = 1
  lineNumber = 251
  var call584 = callmethod(var_node,"kind", [0]);
  var opresult586 = callmethod(string583, "++", [1], call584);
  var string587 = new GraceString("");
  var opresult589 = callmethod(opresult586, "++", [1], string587);
  var call590 = callmethod(var_util,"log_verbose", [1], opresult589);
  lineNumber = 252
  var string591 = new GraceString("/* ");
  lineNumber = 1
  lineNumber = 252
  var call592 = callmethod(var_node,"kind", [0]);
  var opresult594 = callmethod(string591, "++", [1], call592);
  var string595 = new GraceString(" */ nothing");
  var opresult597 = callmethod(opresult594, "++", [1], string595);
  return opresult597;
};
  lineNumber = 249
  lineNumber = 248
  var string598 = new GraceString("literal");
  lineNumber = 249
  var block599 = Grace_allocObject();
  block599.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block599.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block599.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block599.receiver = this;
  block599.className = 'block<genjava:249>';
  block599.real = function(
) {
  lineNumber = 1
  lineNumber = 249
  var call600 = callmethod(var_node,"value", [0]);
  return call600;
};
  lineNumber = 247
  lineNumber = 246
  var string601 = new GraceString("generic");
  lineNumber = 247
  var block602 = Grace_allocObject();
  block602.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block602.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block602.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block602.receiver = this;
  block602.className = 'block<genjava:247>';
  block602.real = function(
) {
  lineNumber = 1
  lineNumber = 247
  var call603 = callmethod(var_node,"value", [0]);
  lineNumber = 248
  var call604 = callmethod(this,"compileIdentifier", [2], call603, var_scope);
  return call604;
};
  lineNumber = 245
  lineNumber = 244
  var string605 = new GraceString("matchcase");
  lineNumber = 245
  var block606 = Grace_allocObject();
  block606.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block606.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block606.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block606.receiver = this;
  block606.className = 'block<genjava:245>';
  block606.real = function(
) {
  lineNumber = 246
  var call607 = callmethod(this,"compileMatch", [2], var_node, var_scope);
  return call607;
};
  lineNumber = 243
  lineNumber = 242
  var string608 = new GraceString("object");
  lineNumber = 243
  var block609 = Grace_allocObject();
  block609.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block609.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block609.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block609.receiver = this;
  block609.className = 'block<genjava:243>';
  block609.real = function(
) {
  lineNumber = 244
  var call610 = callmethod(this,"compileObject", [2], var_node, var_scope);
  return call610;
};
  lineNumber = 241
  lineNumber = 240
  var string611 = new GraceString("block");
  lineNumber = 241
  var block612 = Grace_allocObject();
  block612.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block612.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block612.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block612.receiver = this;
  block612.className = 'block<genjava:241>';
  block612.real = function(
) {
  lineNumber = 242
  var call613 = callmethod(this,"compileBlock", [2], var_node, var_scope);
  return call613;
};
  lineNumber = 239
  lineNumber = 238
  var string614 = new GraceString("array");
  lineNumber = 239
  var block615 = Grace_allocObject();
  block615.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block615.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block615.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block615.receiver = this;
  block615.className = 'block<genjava:239>';
  block615.real = function(
) {
  lineNumber = 240
  var call616 = callmethod(this,"compileArray", [2], var_node, var_scope);
  return call616;
};
  lineNumber = 237
  lineNumber = 236
  var string617 = new GraceString("op");
  lineNumber = 237
  var block618 = Grace_allocObject();
  block618.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block618.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block618.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block618.receiver = this;
  block618.className = 'block<genjava:237>';
  block618.real = function(
) {
  lineNumber = 238
  var call619 = callmethod(this,"compileOp", [2], var_node, var_scope);
  return call619;
};
  lineNumber = 235
  lineNumber = 234
  var string620 = new GraceString("index");
  lineNumber = 235
  var block621 = Grace_allocObject();
  block621.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block621.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block621.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block621.receiver = this;
  block621.className = 'block<genjava:235>';
  block621.real = function(
) {
  lineNumber = 236
  var call622 = callmethod(this,"compileIndex", [2], var_node, var_scope);
  return call622;
};
  lineNumber = 233
  lineNumber = 232
  var string623 = new GraceString("if");
  lineNumber = 233
  var block624 = Grace_allocObject();
  block624.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block624.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block624.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block624.receiver = this;
  block624.className = 'block<genjava:233>';
  block624.real = function(
) {
  lineNumber = 234
  var call625 = callmethod(this,"compileTernary", [2], var_node, var_scope);
  return call625;
};
  lineNumber = 231
  lineNumber = 230
  var string626 = new GraceString("call");
  lineNumber = 231
  var block627 = Grace_allocObject();
  block627.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block627.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block627.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block627.receiver = this;
  block627.className = 'block<genjava:231>';
  block627.real = function(
) {
  lineNumber = 232
  var call628 = callmethod(this,"compileCall", [2], var_node, var_scope);
  return call628;
};
  lineNumber = 229
  lineNumber = 228
  var string629 = new GraceString("member");
  lineNumber = 229
  var block630 = Grace_allocObject();
  block630.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block630.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block630.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block630.receiver = this;
  block630.className = 'block<genjava:229>';
  block630.real = function(
) {
  lineNumber = 230
  var call631 = callmethod(this,"compileMember", [2], var_node, var_scope);
  return call631;
};
  lineNumber = 227
  lineNumber = 226
  var string632 = new GraceString("bind");
  lineNumber = 227
  var block633 = Grace_allocObject();
  block633.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block633.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block633.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block633.receiver = this;
  block633.className = 'block<genjava:227>';
  block633.real = function(
) {
  var string634 = new GraceString("(");
  var call635 = callmethod(this,"compileBind", [2], var_node, var_scope);
  var opresult637 = callmethod(string634, "++", [1], call635);
  var string638 = new GraceString(")");
  var opresult640 = callmethod(opresult637, "++", [1], string638);
  return opresult640;
};
  lineNumber = 225
  lineNumber = 224
  var string641 = new GraceString("string");
  lineNumber = 225
  var block642 = Grace_allocObject();
  block642.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block642.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block642.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block642.receiver = this;
  block642.className = 'block<genjava:225>';
  block642.real = function(
) {
  lineNumber = 226
  var call643 = callmethod(this,"compileString", [2], var_node, var_scope);
  return call643;
};
  lineNumber = 223
  lineNumber = 222
  var string644 = new GraceString("num");
  lineNumber = 223
  var block645 = Grace_allocObject();
  block645.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block645.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block645.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block645.receiver = this;
  block645.className = 'block<genjava:223>';
  block645.real = function(
) {
  lineNumber = 224
  var call646 = callmethod(this,"compileNumber", [2], var_node, var_scope);
  return call646;
};
  lineNumber = 221
  lineNumber = 220
  var string647 = new GraceString("identifier");
  lineNumber = 221
  var block648 = Grace_allocObject();
  block648.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block648.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block648.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block648.receiver = this;
  block648.className = 'block<genjava:221>';
  block648.real = function(
) {
  lineNumber = 222
  var call649 = callmethod(this,"compileIdentifier", [2], var_node, var_scope);
  return call649;
};
  lineNumber = 254
  var call650 = callmethod(this,"kind()do", [1, 1], string647, block648);
  var call651 = callmethod(call650,"kind()do", [1, 1], string644, block645);
  var call652 = callmethod(call651,"kind()do", [1, 1], string641, block642);
  var call653 = callmethod(call652,"kind()do", [1, 1], string632, block633);
  var call654 = callmethod(call653,"kind()do", [1, 1], string629, block630);
  var call655 = callmethod(call654,"kind()do", [1, 1], string626, block627);
  var call656 = callmethod(call655,"kind()do", [1, 1], string623, block624);
  var call657 = callmethod(call656,"kind()do", [1, 1], string620, block621);
  var call658 = callmethod(call657,"kind()do", [1, 1], string617, block618);
  var call659 = callmethod(call658,"kind()do", [1, 1], string614, block615);
  var call660 = callmethod(call659,"kind()do", [1, 1], string611, block612);
  var call661 = callmethod(call660,"kind()do", [1, 1], string608, block609);
  var call662 = callmethod(call661,"kind()do", [1, 1], string605, block606);
  var call663 = callmethod(call662,"kind()do", [1, 1], string601, block602);
  var call664 = callmethod(call663,"kind()do", [1, 1], string598, block599);
  var call665 = callmethod(call664,"else", [1], block582);
  var call666 = callmethod(call665,"of", [1], var_node);
  return call666
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func581.paramTypes = [];
func581.paramTypes.push([]);
func581.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileExpression"] = func581;
  lineNumber = 259
var func667 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 257
  lineNumber = 1
  lineNumber = 257
  lineNumber = 1
  lineNumber = 257
  var call668 = callmethod(var_node,"value", [0]);
  var call669 = callmethod(call668,"value", [0]);
  lineNumber = 259
  var call670 = callmethod(this,"escape", [1], call669);
  var var_name = call670;
  var string671 = new GraceString("private ");
  var opresult673 = callmethod(string671, "++", [1], var_obj);
  var string674 = new GraceString(" ");
  var opresult676 = callmethod(opresult673, "++", [1], string674);
  var opresult678 = callmethod(opresult676, "++", [1], var_name);
  var string679 = new GraceString("");
  var opresult681 = callmethod(opresult678, "++", [1], string679);
  return opresult681
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func667.paramTypes = [];
func667.paramTypes.push([]);
func667.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileImportDecl"] = func667;
  lineNumber = 266
var func682 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 263
  lineNumber = 1
  lineNumber = 263
  lineNumber = 1
  lineNumber = 263
  var call683 = callmethod(var_node,"value", [0]);
  var call684 = callmethod(call683,"value", [0]);
  lineNumber = 264
  var call685 = callmethod(this,"escape", [1], call684);
  var var_name = call685;
  lineNumber = 266
  lineNumber = 264
  var string686 = new GraceString("");
  var opresult688 = callmethod(string686, "++", [1], var_name);
  var string689 = new GraceString(".class.getMethod(\"$module\").invoke(null);");
  var opresult691 = callmethod(opresult688, "++", [1], string689);
  var var_expr = opresult691;
  lineNumber = 266
  var string692 = new GraceString("try { ");
  var opresult694 = callmethod(string692, "++", [1], var_name);
  var string695 = new GraceString(" = (");
  var opresult697 = callmethod(opresult694, "++", [1], string695);
  var opresult699 = callmethod(opresult697, "++", [1], var_obj);
  var string700 = new GraceString(") ");
  var opresult702 = callmethod(opresult699, "++", [1], string700);
  var opresult704 = callmethod(opresult702, "++", [1], var_expr);
  var string705 = new GraceString(" } catch (Exception e) {}");
  var opresult707 = callmethod(opresult704, "++", [1], string705);
  return opresult707
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func682.paramTypes = [];
func682.paramTypes.push([]);
func682.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileImportExec"] = func682;
  lineNumber = 276
var func708 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 274
  lineNumber = 1
  lineNumber = 274
  var call709 = callmethod(var_scope,"isDecl", [0]);
  var string710 = new GraceString("private ");
  lineNumber = 276
  var call711 = callmethod(this,"strIf()then", [1, 1], call709, string710);
  var var_acc = call711;
  var string712 = new GraceString("");
  var opresult714 = callmethod(string712, "++", [1], var_acc);
  var string715 = new GraceString("");
  var opresult717 = callmethod(opresult714, "++", [1], string715);
  var opresult719 = callmethod(opresult717, "++", [1], var_obj);
  var string720 = new GraceString(" ");
  var opresult722 = callmethod(opresult719, "++", [1], string720);
  var call723 = callmethod(this,"compileFieldName", [1], var_node);
  var opresult725 = callmethod(opresult722, "++", [1], call723);
  var string726 = new GraceString("");
  var opresult728 = callmethod(opresult725, "++", [1], string726);
  return opresult728
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func708.paramTypes = [];
func708.paramTypes.push([]);
func708.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileField"] = func708;
  lineNumber = 286
var func729 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 282
  lineNumber = 284
  var call730 = callmethod(this,"compileFieldName", [1], var_node);
  var var_name = call730;
  lineNumber = 286
  lineNumber = 284
  var string731 = new GraceString("public ");
  var opresult733 = callmethod(string731, "++", [1], var_obj);
  var string734 = new GraceString(" ");
  var opresult736 = callmethod(opresult733, "++", [1], string734);
  var opresult738 = callmethod(opresult736, "++", [1], var_name);
  var string739 = new GraceString("(");
  var opresult741 = callmethod(opresult738, "++", [1], string739);
  var opresult743 = callmethod(opresult741, "++", [1], var_obj);
  var string744 = new GraceString(" self) {");
  var opresult746 = callmethod(opresult743, "++", [1], string744);
  lineNumber = 285
  var block747 = Grace_allocObject();
  block747.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block747.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block747.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block747.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block747.receiver = this;
  block747.className = 'block<genjava:285>';
  block747.real = function(
var_scope__39__
) {
  var string748 = new GraceString("return ");
  var opresult750 = callmethod(string748, "++", [1], var_name);
  var string751 = new GraceString("");
  var opresult753 = callmethod(opresult750, "++", [1], string751);
  var call754 = callmethod(var_scope__39__,"line", [1], opresult753);
  return call754;
};
  lineNumber = 286
  var string755 = new GraceString("}\n");
  lineNumber = 284
  var call756 = callmethod(var_scope,"block", [3], opresult746, block747, string755);
  return call756
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func729.paramTypes = [];
func729.paramTypes.push([]);
func729.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileGetter"] = func729;
  lineNumber = 296
var func757 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 290
  lineNumber = 292
  var call758 = callmethod(this,"compileFieldName", [1], var_node);
  var var_name = call758;
  lineNumber = 296
  lineNumber = 293
  lineNumber = 292
  var string759 = new GraceString("public ");
  var opresult761 = callmethod(string759, "++", [1], var_obj);
  var string762 = new GraceString(" ");
  var opresult764 = callmethod(opresult761, "++", [1], string762);
  var opresult766 = callmethod(opresult764, "++", [1], var_name);
  var string767 = new GraceString("$58$61");
  var opresult769 = callmethod(opresult766, "++", [1], string767);
  lineNumber = 293
  var string770 = new GraceString("(");
  var opresult772 = callmethod(string770, "++", [1], var_obj);
  var string773 = new GraceString(" self, ");
  var opresult775 = callmethod(opresult772, "++", [1], string773);
  var opresult777 = callmethod(opresult775, "++", [1], var_obj);
  var string778 = new GraceString(" value) {");
  var opresult780 = callmethod(opresult777, "++", [1], string778);
  var opresult782 = callmethod(opresult769, "++", [1], opresult780);
  lineNumber = 295
  var block783 = Grace_allocObject();
  block783.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block783.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block783.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block783.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block783.receiver = this;
  block783.className = 'block<genjava:295>';
  block783.real = function(
var_scope__39__
) {
  lineNumber = 294
  var string784 = new GraceString("this.");
  var opresult786 = callmethod(string784, "++", [1], var_name);
  var string787 = new GraceString(" = value");
  var opresult789 = callmethod(opresult786, "++", [1], string787);
  var call790 = callmethod(var_scope__39__,"line", [1], opresult789);
  lineNumber = 295
  var string791 = new GraceString("return nothing");
  var call792 = callmethod(var_scope__39__,"line", [1], string791);
  var opresult794 = callmethod(call790, "++", [1], call792);
  return opresult794;
};
  lineNumber = 296
  var string795 = new GraceString("}\n");
  lineNumber = 292
  var call796 = callmethod(var_scope,"block", [3], opresult782, block783, string795);
  return call796
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func757.paramTypes = [];
func757.paramTypes.push([]);
func757.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileSetter"] = func757;
  lineNumber = 306
var func797 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 307
  lineNumber = 1
  lineNumber = 301
  var call799 = callmethod(var_node,"kind", [0]);
  var string800 = new GraceString("type");
  var opresult802 = callmethod(call799, "==", [1], string800);
  if (Grace_isTrue(opresult802)) {
  lineNumber = 302
  lineNumber = 1
  lineNumber = 302
  var call803 = callmethod(var_node,"value", [0]);
  var if798 = call803;
  } else {
  lineNumber = 306
  lineNumber = 305
  lineNumber = 1
  lineNumber = 305
  lineNumber = 1
  lineNumber = 303
  var call805 = callmethod(var_node,"name", [0]);
  var call806 = callmethod(call805,"kind", [0]);
  var string807 = new GraceString("generic");
  var opresult809 = callmethod(call806, "==", [1], string807);
  if (Grace_isTrue(opresult809)) {
  lineNumber = 304
  lineNumber = 1
  lineNumber = 304
  lineNumber = 1
  lineNumber = 304
  lineNumber = 1
  lineNumber = 304
  var call810 = callmethod(var_node,"name", [0]);
  var call811 = callmethod(call810,"value", [0]);
  var call812 = callmethod(call811,"value", [0]);
  var if804 = call812;
  } else {
  lineNumber = 306
  lineNumber = 1
  lineNumber = 306
  lineNumber = 1
  lineNumber = 306
  var call813 = callmethod(var_node,"name", [0]);
  var call814 = callmethod(call813,"value", [0]);
  var if804 = call814;
}
  var if798 = if804;
}
  lineNumber = 308
  var call815 = callmethod(this,"escape", [1], if798);
  return call815
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileFieldName"] = func797;
  lineNumber = 338
var func816 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 311
  lineNumber = 1
  lineNumber = 311
  lineNumber = 1
  lineNumber = 311
  var call817 = callmethod(var_node,"value", [0]);
  var call818 = callmethod(call817,"value", [0]);
  lineNumber = 312
  var call819 = callmethod(this,"escape", [1], call818);
  var var_name = call819;
  lineNumber = 315
  lineNumber = 318
  lineNumber = 312
  var string820 = new GraceString("final ");
  var opresult822 = callmethod(string820, "++", [1], var_obj);
  var string823 = new GraceString(" self");
  var opresult825 = callmethod(opresult822, "++", [1], string823);
  lineNumber = 315
  lineNumber = 312
  lineNumber = 1
  lineNumber = 312
  lineNumber = 1
  lineNumber = 312
  var call826 = callmethod(var_node,"params", [0]);
  var call827 = callmethod(call826,"size", [0]);
  var opresult829 = callmethod(call827, ">", [1], new GraceNum(0));
  lineNumber = 315
  var block830 = Grace_allocObject();
  block830.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block830.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block830.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block830.receiver = this;
  block830.className = 'block<genjava:315>';
  block830.real = function(
) {
  lineNumber = 313
  var string831 = new GraceString(", ");
  lineNumber = 315
  lineNumber = 314
  lineNumber = 313
  lineNumber = 1
  lineNumber = 313
  var call832 = callmethod(var_node,"params", [0]);
  lineNumber = 314
  var block833 = Grace_allocObject();
  block833.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block833.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block833.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block833.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block833.receiver = this;
  block833.className = 'block<genjava:314>';
  block833.real = function(
var_param
) {
  var string834 = new GraceString("final ");
  var opresult836 = callmethod(string834, "++", [1], var_obj);
  var string837 = new GraceString(" _");
  var opresult839 = callmethod(opresult836, "++", [1], string837);
  lineNumber = 1
  lineNumber = 314
  var call840 = callmethod(var_param,"value", [0]);
  var call841 = callmethod(this,"escape", [1], call840);
  var opresult843 = callmethod(opresult839, "++", [1], call841);
  var string844 = new GraceString("");
  var opresult846 = callmethod(opresult843, "++", [1], string844);
  return opresult846;
};
  lineNumber = 315
  var call847 = callmethod(this,"map()with", [1, 1], call832, block833);
  var string848 = new GraceString(", ");
  lineNumber = 316
  var call849 = callmethod(this,"join()separatedBy", [1, 1], call847, string848);
  var opresult851 = callmethod(string831, "++", [1], call849);
  lineNumber = 315
  lineNumber = 1
  lineNumber = 315
  var call852 = callmethod(var_node,"varargs", [0]);
  var string853 = new GraceString(", final ");
  var opresult855 = callmethod(string853, "++", [1], var_obj);
  var string856 = new GraceString("... _");
  var opresult858 = callmethod(opresult855, "++", [1], string856);
  var call859 = callmethod(this,"strIf()then", [1, 1], call852, opresult858);
  var opresult861 = callmethod(opresult851, "++", [1], call859);
  return opresult861;
};
  lineNumber = 318
  var call862 = callmethod(this,"strIf()then", [1, 1], opresult829, block830);
  var opresult864 = callmethod(opresult825, "++", [1], call862);
  var var_params = opresult864;
  lineNumber = 338
  lineNumber = 318
  var string865 = new GraceString("public ");
  var opresult867 = callmethod(string865, "++", [1], var_obj);
  var string868 = new GraceString(" ");
  var opresult870 = callmethod(opresult867, "++", [1], string868);
  var opresult872 = callmethod(opresult870, "++", [1], var_name);
  var string873 = new GraceString("(");
  var opresult875 = callmethod(opresult872, "++", [1], string873);
  var opresult877 = callmethod(opresult875, "++", [1], var_params);
  var string878 = new GraceString(") {");
  var opresult880 = callmethod(opresult877, "++", [1], string878);
  lineNumber = 336
  var block881 = Grace_allocObject();
  block881.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block881.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block881.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block881.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block881.receiver = this;
  block881.className = 'block<genjava:336>';
  block881.real = function(
var_scope__39__
) {
  lineNumber = 338
  lineNumber = 1
  lineNumber = 338
  lineNumber = 1
  lineNumber = 321
  var call883 = callmethod(var_node,"body", [0]);
  var call884 = callmethod(call883,"size", [0]);
  var opresult886 = callmethod(call884, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult886)) {
  lineNumber = 322
  var string887 = new GraceString("return nothing");
  var call888 = callmethod(var_scope__39__,"line", [1], string887);
  var if882 = call888;
  } else {
  lineNumber = 336
  lineNumber = 329
  lineNumber = 324
  var string889 = new GraceString("final int $scope = $ret++");
  var call890 = callmethod(var_scope__39__,"line", [1], string889);
  lineNumber = 329
  lineNumber = 325
  var string891 = new GraceString("class $Return extends ");
  var opresult893 = callmethod(string891, "++", [1], var_ret);
  var string894 = new GraceString(" {");
  var opresult896 = callmethod(opresult893, "++", [1], string894);
  lineNumber = 328
  var block897 = Grace_allocObject();
  block897.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block897.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block897.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block897.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block897.receiver = this;
  block897.className = 'block<genjava:328>';
  block897.real = function(
var_scope__39____39__
) {
  lineNumber = 326
  var string898 = new GraceString("public $Return(");
  var opresult900 = callmethod(string898, "++", [1], var_obj);
  var string901 = new GraceString(" value) {");
  var opresult903 = callmethod(opresult900, "++", [1], string901);
  lineNumber = 327
  var block904 = Grace_allocObject();
  block904.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block904.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block904.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block904.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block904.receiver = this;
  block904.className = 'block<genjava:327>';
  block904.real = function(
var_scope__39____39____39__
) {
  var string905 = new GraceString("super($scope, value)");
  var call906 = callmethod(var_scope__39____39____39__,"line", [1], string905);
  return call906;
};
  lineNumber = 328
  var string907 = new GraceString("}");
  lineNumber = 326
  var call908 = callmethod(var_scope__39____39__,"stbl", [3], opresult903, block904, string907);
  return call908;
};
  lineNumber = 329
  var string909 = new GraceString("}");
  lineNumber = 325
  var call910 = callmethod(var_scope__39__,"stbl", [3], opresult896, block897, string909);
  var opresult912 = callmethod(call890, "++", [1], call910);
  lineNumber = 336
  lineNumber = 330
  var string913 = new GraceString("try {");
  lineNumber = 331
  var block914 = Grace_allocObject();
  block914.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block914.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block914.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block914.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block914.receiver = this;
  block914.className = 'block<genjava:331>';
  block914.real = function(
var_scope__39____39__
) {
  var string915 = new GraceString("return ");
  var call916 = callmethod(this,"compileParamClosure", [2], var_node, var_scope__39____39__);
  var opresult918 = callmethod(string915, "++", [1], call916);
  var string919 = new GraceString("");
  var opresult921 = callmethod(opresult918, "++", [1], string919);
  var call922 = callmethod(var_scope__39____39__,"line", [1], opresult921);
  return call922;
};
  lineNumber = 336
  lineNumber = 332
  var string923 = new GraceString("} catch ($Return $return) {");
  lineNumber = 335
  var block924 = Grace_allocObject();
  block924.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block924.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block924.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block924.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block924.receiver = this;
  block924.className = 'block<genjava:335>';
  block924.real = function(
var_scope__39____39__
) {
  lineNumber = 333
  var string925 = new GraceString("if ($return.scope != $scope) {");
  lineNumber = 334
  var block926 = Grace_allocObject();
  block926.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block926.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block926.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block926.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block926.receiver = this;
  block926.className = 'block<genjava:334>';
  block926.real = function(
var_scope__39____39____39__
) {
  var string927 = new GraceString("throw $return");
  var call928 = callmethod(var_scope__39____39____39__,"line", [1], string927);
  return call928;
};
  lineNumber = 335
  var string929 = new GraceString("}");
  lineNumber = 333
  var call930 = callmethod(var_scope__39____39__,"stbl", [3], string925, block926, string929);
  lineNumber = 335
  var string931 = new GraceString("return $return.value");
  var call932 = callmethod(var_scope__39____39__,"line", [1], string931);
  var opresult934 = callmethod(call930, "++", [1], call932);
  return opresult934;
};
  lineNumber = 336
  var string935 = new GraceString("}");
  lineNumber = 332
  var call936 = callmethod(var_scope__39__,"block", [3], string923, block924, string935);
  lineNumber = 330
  var call937 = callmethod(var_scope__39__,"stbl", [3], string913, block914, call936);
  var opresult939 = callmethod(opresult912, "++", [1], call937);
  var if882 = opresult939;
}
  return if882;
};
  lineNumber = 338
  var string940 = new GraceString("}");
  lineNumber = 318
  var call941 = callmethod(var_scope,"stbl", [3], opresult880, block881, string940);
  return call941
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func816.paramTypes = [];
func816.paramTypes.push([]);
func816.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileMethod"] = func816;
  lineNumber = 344
var func942 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 345
  lineNumber = 342
  var string943 = new GraceString("");
  lineNumber = 345
  lineNumber = 1
  lineNumber = 342
  var call944 = callmethod(var_node,"value", [0]);
  var opresult946 = callmethod(string943, "++", [1], call944);
  var string947 = new GraceString(" = new Type(");
  var opresult949 = callmethod(opresult946, "++", [1], string947);
  lineNumber = 344
  lineNumber = 343
  lineNumber = 342
  lineNumber = 1
  lineNumber = 342
  var call950 = callmethod(var_node,"methods", [0]);
  lineNumber = 343
  var block951 = Grace_allocObject();
  block951.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block951.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block951.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block951.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block951.receiver = this;
  block951.className = 'block<genjava:343>';
  block951.real = function(
var_meth
) {
  var string952 = new GraceString("\"");
  lineNumber = 1
  lineNumber = 343
  var call953 = callmethod(var_meth,"value", [0]);
  var opresult955 = callmethod(string952, "++", [1], call953);
  var string956 = new GraceString("\"");
  var opresult958 = callmethod(opresult955, "++", [1], string956);
  return opresult958;
};
  lineNumber = 344
  var call959 = callmethod(this,"map()with", [1, 1], call950, block951);
  var string960 = new GraceString(", ");
  lineNumber = 345
  var call961 = callmethod(this,"join()separatedBy", [1, 1], call959, string960);
  var opresult963 = callmethod(opresult949, "++", [1], call961);
  lineNumber = 344
  var string964 = new GraceString(")");
  var opresult966 = callmethod(opresult963, "++", [1], string964);
  return opresult966
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func942.paramTypes = [];
func942.paramTypes.push([]);
func942.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileType"] = func942;
  lineNumber = 366
var func967 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 352
  lineNumber = 348
  lineNumber = 1
  lineNumber = 348
  var call968 = callmethod(var_node,"params", [0]);
  lineNumber = 352
  var block969 = Grace_allocObject();
  block969.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block969.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block969.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block969.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block969.receiver = this;
  block969.className = 'block<genjava:352>';
  block969.real = function(
var_param
) {
  lineNumber = 349
  lineNumber = 1
  lineNumber = 349
  var call970 = callmethod(var_param,"value", [0]);
  lineNumber = 351
  var call971 = callmethod(this,"escape", [1], call970);
  var var_name = call971;
  lineNumber = 352
  lineNumber = 351
  var call972 = callmethod(var_ast,"astidentifier", [2], var_name, var_nothing);
  lineNumber = 352
  var string973 = new GraceString("_");
  var opresult975 = callmethod(string973, "++", [1], var_name);
  var string976 = new GraceString("");
  var opresult978 = callmethod(opresult975, "++", [1], string976);
  var call979 = callmethod(var_ast,"astidentifier", [2], opresult978, var_nothing);
  lineNumber = 351
  var call980 = callmethod(var_ast,"astvardec", [3], call972, call979, var_nothing);
  return call980;
};
  lineNumber = 355
  var call981 = callmethod(this,"map()with", [1, 1], call968, block969);
  var var_body = call981;
  lineNumber = 359
  lineNumber = 355
  lineNumber = 362
  lineNumber = 1
  lineNumber = 355
  var call983 = callmethod(var_node,"kind", [0]);
  var string984 = new GraceString("method");
  var opresult986 = callmethod(call983, "==", [1], string984);
  var block987 = Grace_allocObject();
  block987.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block987.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block987.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block987.receiver = this;
  block987.className = 'block<genjava:355>';
  block987.real = function(
) {
  lineNumber = 1
  lineNumber = 355
  var call988 = callmethod(var_node,"varargs", [0]);
  return call988;
};
  var opresult990 = callmethod(opresult986, "&&", [1], block987);
  if (Grace_isTrue(opresult990)) {
  lineNumber = 356
  lineNumber = 1
  lineNumber = 356
  lineNumber = 1
  lineNumber = 356
  var call991 = callmethod(var_node,"vararg", [0]);
  var call992 = callmethod(call991,"value", [0]);
  lineNumber = 358
  var call993 = callmethod(this,"escape", [1], call992);
  var var_name = call993;
  lineNumber = 359
  lineNumber = 358
  var call994 = callmethod(var_ast,"astidentifier", [2], var_name, var_nothing);
  lineNumber = 359
  var string996 = new GraceString("_");
  var call997 = callmethod(var_ast,"astidentifier", [2], string996, var_nothing);
  var array995 = new GraceList([
call997,
]);

  var call998 = callmethod(var_ast,"astarray", [1], array995);
  lineNumber = 358
  var call999 = callmethod(var_ast,"astvardec", [3], call994, call998, var_nothing);
  var call1000 = callmethod(var_body,"push", [1], call999);
  var if982 = call1000;
}
  lineNumber = 363
  lineNumber = 362
  lineNumber = 1
  lineNumber = 362
  var call1001 = callmethod(var_node,"body", [0]);
  lineNumber = 363
  var block1002 = Grace_allocObject();
  block1002.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1002.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1002.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1002.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1002.receiver = this;
  block1002.className = 'block<genjava:363>';
  block1002.real = function(
var_node__39__
) {
  var call1003 = callmethod(var_body,"push", [1], var_node__39__);
  return call1003;
};
  var call1004 = callmethod(Grace_prelude,"for()do", [1, 1], call1001, block1002);
  lineNumber = 366
  lineNumber = 367
  var call1005 = callmethod(this,"compileClosure", [2], var_body, var_scope);
  return call1005
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func967.paramTypes = [];
func967.paramTypes.push([]);
func967.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileParamClosure"] = func967;
  lineNumber = 376
var func1006 = function(argcv) {
  var curarg = 1;
  var var_body = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 370
  var string1007 = new GraceString("new ");
  var opresult1009 = callmethod(string1007, "++", [1], var_obj);
  var string1010 = new GraceString("($self, $closure) {");
  var opresult1012 = callmethod(opresult1009, "++", [1], string1010);
  lineNumber = 375
  var block1013 = Grace_allocObject();
  block1013.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1013.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1013.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1013.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1013.receiver = this;
  block1013.className = 'block<genjava:375>';
  block1013.real = function(
var_scope__39__
) {
  lineNumber = 372
  lineNumber = 371
  var string1014 = new GraceString("final ");
  var opresult1016 = callmethod(string1014, "++", [1], var_obj);
  var string1017 = new GraceString(" $closure = this");
  var opresult1019 = callmethod(opresult1016, "++", [1], string1017);
  var call1020 = callmethod(var_scope__39__,"line", [1], opresult1019);
  lineNumber = 372
  lineNumber = 371
  var call1021 = callmethod(this,"compileDeclarations", [2], var_body, var_scope__39__);
  var opresult1023 = callmethod(call1020, "++", [1], call1021);
  lineNumber = 375
  lineNumber = 373
  var string1024 = new GraceString("");
  var opresult1026 = callmethod(string1024, "++", [1], var_obj);
  var string1027 = new GraceString(" execute() {");
  var opresult1029 = callmethod(opresult1026, "++", [1], string1027);
  lineNumber = 374
  var block1030 = Grace_allocObject();
  block1030.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1030.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1030.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1030.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1030.receiver = this;
  block1030.className = 'block<genjava:374>';
  block1030.real = function(
var_scope__39____39__
) {
  var call1031 = callmethod(this,"forceReturn", [1], var_body);
  var call1032 = callmethod(this,"compileExecution", [2], call1031, var_scope__39____39__);
  lineNumber = 375
  var call1033 = callmethod(this,"join", [1], call1032);
  return call1033;
};
  var string1034 = new GraceString("}");
  lineNumber = 373
  var call1035 = callmethod(var_scope__39__,"stbl", [3], opresult1029, block1030, string1034);
  var opresult1037 = callmethod(opresult1023, "++", [1], call1035);
  return opresult1037;
};
  lineNumber = 376
  var string1038 = new GraceString("}.execute()");
  lineNumber = 370
  var call1039 = callmethod(var_scope,"block", [3], opresult1012, block1013, string1038);
  return call1039
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1006.paramTypes = [];
func1006.paramTypes.push([]);
func1006.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileClosure"] = func1006;
  lineNumber = 391
var func1040 = function(argcv) {
  var curarg = 1;
  var var_body = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 382
  lineNumber = 385
  lineNumber = 1
  lineNumber = 381
  var call1042 = callmethod(var_body,"size", [0]);
  var opresult1044 = callmethod(call1042, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1044)) {
  lineNumber = 382
  var string1046 = new GraceString("nothing");
  var call1047 = callmethod(this,"literal", [1], string1046);
  var call1048 = callmethod(this,"generateReturn", [1], call1047);
  var array1045 = new GraceList([
call1048,
]);

  return array1045
  var if1041 = undefined;
}
  lineNumber = 387
  lineNumber = 385
  lineNumber = 387
  lineNumber = 1
  lineNumber = 385
  var call1049 = callmethod(var_body,"size", [0]);
  var idxres1050 = var_body.methods["[]"].call(var_body, [1], call1049);
  var var_last = idxres1050;
  lineNumber = 388
  lineNumber = 391
  lineNumber = 1
  lineNumber = 387
  var call1052 = callmethod(var_last,"kind", [0]);
  var string1053 = new GraceString("return");
  var opresult1055 = callmethod(call1052, "/=", [1], string1053);
  if (Grace_isTrue(opresult1055)) {
  lineNumber = 388
  lineNumber = 1
  lineNumber = 389
  lineNumber = 1
  lineNumber = 388
  var call1056 = callmethod(var_body,"size", [0]);
  lineNumber = 389
  var call1057 = callmethod(this,"generateReturn", [1], var_last);
  lineNumber = 388
  var call1058 = callmethod(var_body,"[]:=", [2], call1056, call1057);
  var if1051 = call1058;
}
  lineNumber = 391
  return var_body
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1040.paramTypes = [];
func1040.paramTypes.push([]);
  this.methods["forceReturn"] = func1040;
  lineNumber = 397
var func1059 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 395
  var call1060 = callmethod(var_ast,"astreturn", [1], var_node);
  var_node = call1060;
  lineNumber = 397
  lineNumber = 1
  lineNumber = 396
  var string1061 = new GraceString("generated");
  var call1062 = callmethod(var_node,"register:=", [1], string1061);
  lineNumber = 397
  return var_node
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["generateReturn"] = func1059;
  lineNumber = 405
var func1063 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 407
  lineNumber = 1
  lineNumber = 402
  var call1065 = callmethod(var_node,"register", [0]);
  var string1066 = new GraceString("generated");
  var opresult1068 = callmethod(call1065, "==", [1], string1066);
  if (Grace_isTrue(opresult1068)) {
  lineNumber = 403
  var string1069 = new GraceString("return ");
  lineNumber = 1
  lineNumber = 403
  var call1070 = callmethod(var_node,"value", [0]);
  var call1071 = callmethod(this,"compileExpression", [2], call1070, var_scope);
  var opresult1073 = callmethod(string1069, "++", [1], call1071);
  var string1074 = new GraceString("");
  var opresult1076 = callmethod(opresult1073, "++", [1], string1074);
  var if1064 = opresult1076;
  } else {
  lineNumber = 405
  var string1077 = new GraceString("throw new $Return(");
  lineNumber = 1
  lineNumber = 405
  var call1078 = callmethod(var_node,"value", [0]);
  var call1079 = callmethod(this,"compileExpression", [2], call1078, var_scope);
  var opresult1081 = callmethod(string1077, "++", [1], call1079);
  var string1082 = new GraceString(")");
  var opresult1084 = callmethod(opresult1081, "++", [1], string1082);
  var if1064 = opresult1084;
}
  return if1064
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1063.paramTypes = [];
func1063.paramTypes.push([]);
func1063.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileReturn"] = func1063;
  lineNumber = 413
var func1085 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 410
  lineNumber = 411
  var call1086 = callmethod(this,"compileFieldName", [1], var_node);
  var var_name = call1086;
  lineNumber = 1
  lineNumber = 411
  var call1087 = callmethod(var_node,"value", [0]);
  lineNumber = 413
  var call1088 = callmethod(this,"compileExpression", [2], call1087, var_scope);
  var var_value = call1088;
  var string1089 = new GraceString("");
  var opresult1091 = callmethod(string1089, "++", [1], var_name);
  var string1092 = new GraceString(" = ");
  var opresult1094 = callmethod(opresult1091, "++", [1], string1092);
  var opresult1096 = callmethod(opresult1094, "++", [1], var_value);
  var string1097 = new GraceString("");
  var opresult1099 = callmethod(opresult1096, "++", [1], string1097);
  return opresult1099
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1085.paramTypes = [];
func1085.paramTypes.push([]);
func1085.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileBindDecl"] = func1085;
  lineNumber = 433
var func1100 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 418
  lineNumber = 1
  lineNumber = 417
  var call1101 = callmethod(var_node,"dest", [0]);
  var var_dest = call1101;
  lineNumber = 418
  lineNumber = 1
  lineNumber = 418
  var call1102 = callmethod(var_node,"value", [0]);
  lineNumber = 420
  var call1103 = callmethod(this,"compileExpression", [2], call1102, var_scope);
  var var_value = call1103;
  lineNumber = 433
  lineNumber = 435
  lineNumber = 1
  lineNumber = 420
  var call1105 = callmethod(var_dest,"kind", [0]);
  var string1106 = new GraceString("member");
  var opresult1108 = callmethod(call1105, "==", [1], string1106);
  if (Grace_isTrue(opresult1108)) {
  lineNumber = 422
  lineNumber = 1
  lineNumber = 421
  var call1109 = callmethod(var_dest,"value", [0]);
  var var_name = call1109;
  lineNumber = 422
  lineNumber = 1
  lineNumber = 422
  var call1110 = callmethod(var_dest,"in", [0]);
  lineNumber = 424
  var call1111 = callmethod(this,"compileExpression", [2], call1110, var_scope);
  var var_on = call1111;
  var string1112 = new GraceString("");
  var opresult1114 = callmethod(string1112, "++", [1], var_on);
  var string1115 = new GraceString(".invoke(\"");
  var opresult1117 = callmethod(opresult1114, "++", [1], string1115);
  var opresult1119 = callmethod(opresult1117, "++", [1], var_name);
  var string1120 = new GraceString(":=\", ");
  var opresult1122 = callmethod(opresult1119, "++", [1], string1120);
  var opresult1124 = callmethod(opresult1122, "++", [1], var_value);
  var string1125 = new GraceString(")");
  var opresult1127 = callmethod(opresult1124, "++", [1], string1125);
  var if1104 = opresult1127;
  } else {
  lineNumber = 433
  lineNumber = 430
  lineNumber = 1
  lineNumber = 425
  var call1129 = callmethod(var_dest,"kind", [0]);
  var string1130 = new GraceString("index");
  var opresult1132 = callmethod(call1129, "==", [1], string1130);
  if (Grace_isTrue(opresult1132)) {
  lineNumber = 426
  lineNumber = 1
  lineNumber = 426
  var call1133 = callmethod(var_dest,"value", [0]);
  lineNumber = 427
  var call1134 = callmethod(this,"compileExpression", [2], call1133, var_scope);
  var var_on = call1134;
  lineNumber = 1
  lineNumber = 427
  var call1135 = callmethod(var_dest,"index", [0]);
  lineNumber = 429
  var call1136 = callmethod(this,"compileExpression", [2], call1135, var_scope);
  var var_in = call1136;
  var string1137 = new GraceString("");
  var opresult1139 = callmethod(string1137, "++", [1], var_on);
  var string1140 = new GraceString(".invoke(\"[]:=\", ");
  var opresult1142 = callmethod(opresult1139, "++", [1], string1140);
  var opresult1144 = callmethod(opresult1142, "++", [1], var_in);
  var string1145 = new GraceString(", ");
  var opresult1147 = callmethod(opresult1144, "++", [1], string1145);
  var opresult1149 = callmethod(opresult1147, "++", [1], var_value);
  var string1150 = new GraceString(")");
  var opresult1152 = callmethod(opresult1149, "++", [1], string1150);
  var if1128 = opresult1152;
  } else {
  lineNumber = 431
  lineNumber = 433
  var call1153 = callmethod(this,"compileExpression", [2], var_dest, var_scope);
  var var_name = call1153;
  var string1154 = new GraceString("");
  var opresult1156 = callmethod(string1154, "++", [1], var_name);
  var string1157 = new GraceString(" = ");
  var opresult1159 = callmethod(opresult1156, "++", [1], string1157);
  var opresult1161 = callmethod(opresult1159, "++", [1], var_value);
  var string1162 = new GraceString("");
  var opresult1164 = callmethod(opresult1161, "++", [1], string1162);
  var if1128 = opresult1164;
}
  var if1104 = if1128;
}
  return if1104
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1100.paramTypes = [];
func1100.paramTypes.push([]);
func1100.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileBind"] = func1100;
  lineNumber = 449
var func1165 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 438
  lineNumber = 1
  lineNumber = 438
  var call1166 = callmethod(var_node,"value", [0]);
  lineNumber = 440
  var call1167 = callmethod(this,"compileExpression", [2], call1166, var_scope);
  var var_condition = call1167;
  lineNumber = 449
  lineNumber = 440
  var string1168 = new GraceString("if (");
  var opresult1170 = callmethod(string1168, "++", [1], var_bln);
  var string1171 = new GraceString("(");
  var opresult1173 = callmethod(opresult1170, "++", [1], string1171);
  var opresult1175 = callmethod(opresult1173, "++", [1], var_condition);
  var string1176 = new GraceString(")) {");
  var opresult1178 = callmethod(opresult1175, "++", [1], string1176);
  lineNumber = 441
  var block1179 = Grace_allocObject();
  block1179.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1179.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1179.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1179.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1179.receiver = this;
  block1179.className = 'block<genjava:441>';
  block1179.real = function(
var_scope__39__
) {
  lineNumber = 1
  lineNumber = 441
  var call1180 = callmethod(var_node,"thenblock", [0]);
  lineNumber = 442
  var call1181 = callmethod(this,"compileExecution", [2], call1180, var_scope__39__);
  return call1181;
};
  lineNumber = 449
  lineNumber = 442
  var string1182 = new GraceString("}");
  lineNumber = 449
  lineNumber = 442
  lineNumber = 1
  lineNumber = 442
  lineNumber = 1
  lineNumber = 442
  var call1183 = callmethod(var_node,"elseblock", [0]);
  var call1184 = callmethod(call1183,"size", [0]);
  var opresult1186 = callmethod(call1184, ">", [1], new GraceNum(0));
  lineNumber = 449
  var block1187 = Grace_allocObject();
  block1187.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1187.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1187.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1187.receiver = this;
  block1187.className = 'block<genjava:449>';
  block1187.real = function(
) {
  lineNumber = 451
  lineNumber = 1
  lineNumber = 451
  lineNumber = 1
  lineNumber = 443
  var call1189 = callmethod(var_node,"elseblock", [0]);
  var call1190 = callmethod(call1189,"size", [0]);
  var opresult1192 = callmethod(call1190, "==", [1], new GraceNum(1));
  lineNumber = 451
  lineNumber = 1
  lineNumber = 451
  lineNumber = 1
  lineNumber = 444
  var call1193 = callmethod(var_node,"elseblock", [0]);
  var idxres1194 = call1193.methods["[]"].call(call1193, [1], new GraceNum(1));
  var call1195 = callmethod(idxres1194,"kind", [0]);
  var string1196 = new GraceString("if");
  var opresult1198 = callmethod(call1195, "==", [1], string1196);
  var opresult1200 = callmethod(opresult1192, "&", [1], opresult1198);
  if (Grace_isTrue(opresult1200)) {
  lineNumber = 445
  var string1201 = new GraceString(" else ");
  lineNumber = 1
  lineNumber = 445
  var call1202 = callmethod(var_node,"elseblock", [0]);
  var idxres1203 = call1202.methods["[]"].call(call1202, [1], new GraceNum(1));
  lineNumber = 446
  var call1204 = callmethod(this,"compileIf", [2], idxres1203, var_scope);
  var opresult1206 = callmethod(string1201, "++", [1], call1204);
  var if1188 = opresult1206;
  } else {
  lineNumber = 449
  lineNumber = 447
  var string1207 = new GraceString(" else {");
  lineNumber = 448
  var block1208 = Grace_allocObject();
  block1208.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1208.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1208.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1208.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1208.receiver = this;
  block1208.className = 'block<genjava:448>';
  block1208.real = function(
var_scope__39__
) {
  lineNumber = 1
  lineNumber = 448
  var call1209 = callmethod(var_node,"elseblock", [0]);
  lineNumber = 449
  var call1210 = callmethod(this,"compileExecution", [2], call1209, var_scope__39__);
  return call1210;
};
  var string1211 = new GraceString("}");
  lineNumber = 447
  var call1212 = callmethod(var_scope,"block", [3], string1207, block1208, string1211);
  var if1188 = call1212;
}
  return if1188;
};
  lineNumber = 451
  var call1213 = callmethod(this,"strIf()then", [1, 1], opresult1186, block1187);
  var opresult1215 = callmethod(string1182, "++", [1], call1213);
  lineNumber = 440
  var call1216 = callmethod(var_scope,"block", [3], opresult1178, block1179, opresult1215);
  return call1216
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1165.paramTypes = [];
func1165.paramTypes.push([]);
func1165.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileIf"] = func1165;
  lineNumber = 459
var func1217 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 455
  lineNumber = 1
  lineNumber = 455
  var call1218 = callmethod(var_node,"value", [0]);
  lineNumber = 456
  var call1219 = callmethod(this,"compileExpression", [2], call1218, var_scope);
  var var_condition = call1219;
  lineNumber = 1
  lineNumber = 456
  var call1220 = callmethod(var_node,"thenblock", [0]);
  lineNumber = 457
  var call1221 = callmethod(this,"compileBlockExpression", [2], call1220, var_scope);
  var var_then = call1221;
  lineNumber = 1
  lineNumber = 457
  var call1222 = callmethod(var_node,"elseblock", [0]);
  lineNumber = 459
  var call1223 = callmethod(this,"compileBlockExpression", [2], call1222, var_scope);
  var var_else = call1223;
  var string1224 = new GraceString("(");
  var opresult1226 = callmethod(string1224, "++", [1], var_bln);
  var string1227 = new GraceString("(");
  var opresult1229 = callmethod(opresult1226, "++", [1], string1227);
  var opresult1231 = callmethod(opresult1229, "++", [1], var_condition);
  var string1232 = new GraceString(") ? ");
  var opresult1234 = callmethod(opresult1231, "++", [1], string1232);
  var opresult1236 = callmethod(opresult1234, "++", [1], var_then);
  var string1237 = new GraceString(" : ");
  var opresult1239 = callmethod(opresult1236, "++", [1], string1237);
  var opresult1241 = callmethod(opresult1239, "++", [1], var_else);
  var string1242 = new GraceString(")");
  var opresult1244 = callmethod(opresult1241, "++", [1], string1242);
  return opresult1244
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1217.paramTypes = [];
func1217.paramTypes.push([]);
func1217.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileTernary"] = func1217;
  lineNumber = 479
var func1245 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 481
  lineNumber = 1
  lineNumber = 463
  var call1247 = callmethod(var_node,"value", [0]);
  var string1248 = new GraceString("outer");
  var opresult1250 = callmethod(call1247, "==", [1], string1248);
  if (Grace_isTrue(opresult1250)) {
  lineNumber = 476
  lineNumber = 466
  lineNumber = 478
  lineNumber = 1
  lineNumber = 478
  lineNumber = 1
  lineNumber = 464
  var call1252 = callmethod(var_node,"in", [0]);
  var call1253 = callmethod(call1252,"kind", [0]);
  var string1254 = new GraceString("identifier");
  var opresult1256 = callmethod(call1253, "==", [1], string1254);
  lineNumber = 466
  var block1257 = Grace_allocObject();
  block1257.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1257.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1257.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1257.receiver = this;
  block1257.className = 'block<genjava:466>';
  block1257.real = function(
) {
  lineNumber = 1
  lineNumber = 466
  lineNumber = 1
  lineNumber = 465
  var call1258 = callmethod(var_node,"in", [0]);
  var call1259 = callmethod(call1258,"value", [0]);
  var string1260 = new GraceString("self");
  var opresult1262 = callmethod(call1259, "==", [1], string1260);
  return opresult1262;
};
  var opresult1264 = callmethod(opresult1256, "&&", [1], block1257);
  if (Grace_isTrue(opresult1264)) {
  lineNumber = 474
  var string1265 = new GraceString("$self.outer");
  var if1251 = string1265;
  } else {
  lineNumber = 476
  var string1266 = new GraceString("");
  lineNumber = 1
  lineNumber = 476
  var call1267 = callmethod(var_node,"in", [0]);
  var call1268 = callmethod(this,"compileExpression", [2], call1267, var_scope);
  var opresult1270 = callmethod(string1266, "++", [1], call1268);
  var string1271 = new GraceString(".outer");
  var opresult1273 = callmethod(opresult1270, "++", [1], string1271);
  var if1251 = opresult1273;
}
  var if1246 = if1251;
  } else {
  lineNumber = 479
  var array1274 = new GraceList([
]);

  var call1275 = callmethod(var_ast,"astcall", [2], var_node, array1274);
  lineNumber = 480
  var call1276 = callmethod(this,"compileCall", [2], call1275, var_scope);
  var if1246 = call1276;
}
  return if1246
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1245.paramTypes = [];
func1245.paramTypes.push([]);
func1245.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileMember"] = func1245;
  lineNumber = 495
var func1277 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 484
  lineNumber = 1
  lineNumber = 484
  lineNumber = 1
  lineNumber = 484
  var call1278 = callmethod(var_node,"value", [0]);
  var call1279 = callmethod(call1278,"value", [0]);
  lineNumber = 485
  var call1280 = callmethod(this,"escape", [1], call1279);
  var var_name = call1280;
  lineNumber = 1
  lineNumber = 485
  var call1281 = callmethod(var_node,"with", [0]);
  var block1282 = Grace_allocObject();
  block1282.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1282.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1282.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1282.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1282.receiver = this;
  block1282.className = 'block<genjava:485>';
  block1282.real = function(
var_a
) {
  var call1283 = callmethod(this,"compileExpression", [2], var_a, var_scope);
  return call1283;
};
  lineNumber = 486
  var call1284 = callmethod(this,"map()with", [1, 1], call1281, block1282);
  var var_args = call1284;
  lineNumber = 1
  lineNumber = 486
  var call1285 = callmethod(var_args,"size", [0]);
  var opresult1287 = callmethod(call1285, ">", [1], new GraceNum(0));
  var string1288 = new GraceString(", ");
  lineNumber = 487
  var call1289 = callmethod(this,"strIf()then", [1, 1], opresult1287, string1288);
  var var_comma = call1289;
  var string1290 = new GraceString(", ");
  lineNumber = 488
  var call1291 = callmethod(this,"join()separatedBy", [1, 1], var_args, string1290);
  var var_rest = call1291;
  lineNumber = 490
  lineNumber = 1
  lineNumber = 490
  lineNumber = 1
  lineNumber = 488
  var call1292 = callmethod(var_node,"value", [0]);
  var call1293 = callmethod(call1292,"kind", [0]);
  var string1294 = new GraceString("member");
  var opresult1296 = callmethod(call1293, "/=", [1], string1294);
  lineNumber = 490
  lineNumber = 488
  var string1297 = new GraceString("print");
  var opresult1299 = callmethod(var_name, "==", [1], string1297);
  var opresult1301 = callmethod(opresult1296, "|", [1], opresult1299);
  var var_direct = opresult1301;
  lineNumber = 495
  lineNumber = 490
  if (Grace_isTrue(var_direct)) {
  lineNumber = 491
  var string1303 = new GraceString("");
  var opresult1305 = callmethod(string1303, "++", [1], var_name);
  var string1306 = new GraceString("(self");
  var opresult1308 = callmethod(opresult1305, "++", [1], string1306);
  var opresult1310 = callmethod(opresult1308, "++", [1], var_comma);
  var string1311 = new GraceString("");
  var opresult1313 = callmethod(opresult1310, "++", [1], string1311);
  var opresult1315 = callmethod(opresult1313, "++", [1], var_rest);
  var string1316 = new GraceString(")");
  var opresult1318 = callmethod(opresult1315, "++", [1], string1316);
  var if1302 = opresult1318;
  } else {
  lineNumber = 493
  lineNumber = 1
  lineNumber = 493
  lineNumber = 1
  lineNumber = 493
  var call1319 = callmethod(var_node,"value", [0]);
  var call1320 = callmethod(call1319,"in", [0]);
  lineNumber = 495
  var call1321 = callmethod(this,"compileExpression", [2], call1320, var_scope);
  var var_in = call1321;
  var string1322 = new GraceString("");
  var opresult1324 = callmethod(string1322, "++", [1], var_in);
  var string1325 = new GraceString(".invoke(\"");
  var opresult1327 = callmethod(opresult1324, "++", [1], string1325);
  var opresult1329 = callmethod(opresult1327, "++", [1], var_name);
  var string1330 = new GraceString("\"");
  var opresult1332 = callmethod(opresult1329, "++", [1], string1330);
  var opresult1334 = callmethod(opresult1332, "++", [1], var_comma);
  var string1335 = new GraceString("");
  var opresult1337 = callmethod(opresult1334, "++", [1], string1335);
  var opresult1339 = callmethod(opresult1337, "++", [1], var_rest);
  var string1340 = new GraceString(")");
  var opresult1342 = callmethod(opresult1339, "++", [1], string1340);
  var if1302 = opresult1342;
}
  return if1302
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1277.paramTypes = [];
func1277.paramTypes.push([]);
func1277.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileCall"] = func1277;
  lineNumber = 513
var func1343 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 503
  lineNumber = 504
  lineNumber = 1
  lineNumber = 504
  lineNumber = 1
  lineNumber = 500
  var call1345 = callmethod(var_node,"name", [0]);
  var call1346 = callmethod(call1345,"kind", [0]);
  var string1347 = new GraceString("generic");
  var opresult1349 = callmethod(call1346, "==", [1], string1347);
  if (Grace_isTrue(opresult1349)) {
  lineNumber = 501
  lineNumber = 1
  lineNumber = 501
  lineNumber = 1
  lineNumber = 501
  lineNumber = 1
  lineNumber = 501
  var call1350 = callmethod(var_node,"name", [0]);
  var call1351 = callmethod(call1350,"value", [0]);
  var call1352 = callmethod(call1351,"value", [0]);
  var if1344 = call1352;
  } else {
  lineNumber = 503
  lineNumber = 1
  lineNumber = 503
  lineNumber = 1
  lineNumber = 503
  var call1353 = callmethod(var_node,"name", [0]);
  var call1354 = callmethod(call1353,"value", [0]);
  var if1344 = call1354;
}
  lineNumber = 506
  var call1355 = callmethod(this,"escape", [1], if1344);
  var var_name = call1355;
  lineNumber = 1
  lineNumber = 506
  var call1357 = callmethod(var_node,"value", [0]);
  var call1358 = callmethod(var_ast,"astobject", [2], call1357, var_nothing);
  var array1356 = new GraceList([
call1358,
]);

  var var_body = array1356;
  lineNumber = 507
  lineNumber = 1
  lineNumber = 507
  var call1359 = callmethod(var_node,"constructor", [0]);
  lineNumber = 1
  lineNumber = 507
  var call1360 = callmethod(var_node,"params", [0]);
  var call1361 = callmethod(var_ast,"astmethod", [4], call1359, call1360, var_body, var_nothing);
  var var_meth = call1361;
  lineNumber = 513
  lineNumber = 509
  var string1362 = new GraceString("");
  var opresult1364 = callmethod(string1362, "++", [1], var_name);
  var string1365 = new GraceString(" = new ");
  var opresult1367 = callmethod(opresult1364, "++", [1], string1365);
  var opresult1369 = callmethod(opresult1367, "++", [1], var_obj);
  var string1370 = new GraceString("($self, $closure) {");
  var opresult1372 = callmethod(opresult1369, "++", [1], string1370);
  lineNumber = 512
  var block1373 = Grace_allocObject();
  block1373.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1373.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1373.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1373.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1373.receiver = this;
  block1373.className = 'block<genjava:512>';
  block1373.real = function(
var_s__39__
) {
  lineNumber = 511
  var string1374 = new GraceString("private final ");
  var opresult1376 = callmethod(string1374, "++", [1], var_obj);
  var string1377 = new GraceString(" $self = this");
  var opresult1379 = callmethod(opresult1376, "++", [1], string1377);
  var call1380 = callmethod(var_s__39__,"line", [1], opresult1379);
  lineNumber = 512
  lineNumber = 511
  var call1381 = callmethod(this,"compileMethod", [2], var_meth, var_s__39__);
  var opresult1383 = callmethod(call1380, "++", [1], call1381);
  lineNumber = 512
  var call1384 = callmethod(this,"makeInvoke", [1], var_s__39__);
  var opresult1386 = callmethod(opresult1383, "++", [1], call1384);
  return opresult1386;
};
  lineNumber = 513
  var string1387 = new GraceString("}");
  lineNumber = 509
  var call1388 = callmethod(var_scope,"block", [3], opresult1372, block1373, string1387);
  var call1389 = callmethod(var_scope,"line", [1], call1388);
  return call1389
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1343.paramTypes = [];
func1343.paramTypes.push([]);
func1343.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileClass"] = func1343;
  lineNumber = 517
var func1390 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var string1391 = new GraceString("self.inherits(");
  lineNumber = 1
  lineNumber = 517
  var call1392 = callmethod(var_node,"value", [0]);
  var call1393 = callmethod(this,"compileExpression", [2], call1392, var_scope);
  var opresult1395 = callmethod(string1391, "++", [1], call1393);
  var string1396 = new GraceString(")");
  var opresult1398 = callmethod(opresult1395, "++", [1], string1396);
  return opresult1398
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1390.paramTypes = [];
func1390.paramTypes.push([]);
func1390.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileInherits"] = func1390;
  lineNumber = 521
var func1399 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var string1400 = new GraceString("$number(");
  lineNumber = 1
  lineNumber = 521
  var call1401 = callmethod(var_node,"value", [0]);
  var opresult1403 = callmethod(string1400, "++", [1], call1401);
  var string1404 = new GraceString(")");
  var opresult1406 = callmethod(opresult1403, "++", [1], string1404);
  return opresult1406
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1399.paramTypes = [];
func1399.paramTypes.push([]);
func1399.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileNumber"] = func1399;
  lineNumber = 544
var func1407 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 540
  lineNumber = 529
  var string1408 = new GraceString("\u000d");
  var string1409 = new GraceString("\\r");
  lineNumber = 528
  var string1410 = new GraceString("\n");
  var string1411 = new GraceString("\\n");
  lineNumber = 527
  var string1412 = new GraceString("\"");
  var string1413 = new GraceString("\\\"");
  lineNumber = 526
  var string1414 = new GraceString("\\");
  var string1415 = new GraceString("\\\\");
  lineNumber = 529
  lineNumber = 1
  lineNumber = 525
  var call1416 = callmethod(var_node,"value", [0]);
  var call1417 = callmethod(call1416,"replace()with", [1, 1], string1414, string1415);
  var call1418 = callmethod(call1417,"replace()with", [1, 1], string1412, string1413);
  var call1419 = callmethod(call1418,"replace()with", [1, 1], string1410, string1411);
  var call1420 = callmethod(call1419,"replace()with", [1, 1], string1408, string1409);
  lineNumber = 540
  var block1421 = Grace_allocObject();
  block1421.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1421.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1421.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1421.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1421.receiver = this;
  block1421.className = 'block<genjava:540>';
  block1421.real = function(
var_char
) {
  lineNumber = 532
  lineNumber = 1
  lineNumber = 530
  var call1422 = callmethod(var_char,"ord", [0]);
  var var_ord = call1422;
  lineNumber = 540
  lineNumber = 542
  lineNumber = 532
  var opresult1425 = callmethod(var_ord, "<", [1], new GraceNum(31));
  lineNumber = 542
  lineNumber = 532
  var opresult1427 = callmethod(var_ord, ">", [1], new GraceNum(126));
  var opresult1429 = callmethod(opresult1425, "|", [1], opresult1427);
  if (Grace_isTrue(opresult1429)) {
  lineNumber = 533
  var call1430 = callmethod(var_util,"hex", [1], var_ord);
  var var_hex = call1430;
  lineNumber = 536
  lineNumber = 534
  var block1431 = Grace_allocObject();
  block1431.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1431.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1431.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1431.receiver = this;
  block1431.className = 'block<genjava:534>';
  block1431.real = function(
) {
  lineNumber = 1
  lineNumber = 534
  var call1432 = callmethod(var_hex,"size", [0]);
  var opresult1434 = callmethod(call1432, "<", [1], new GraceNum(4));
  return opresult1434;
};
  lineNumber = 536
  var block1435 = Grace_allocObject();
  block1435.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1435.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1435.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1435.receiver = this;
  block1435.className = 'block<genjava:536>';
  block1435.real = function(
) {
  lineNumber = 535
  var string1436 = new GraceString("0");
  var opresult1438 = callmethod(string1436, "++", [1], var_hex);
  var_hex = opresult1438;
  return opresult1438;
};
  var call1439 = callmethod(Grace_prelude,"while()do", [1, 1], block1431, block1435);
  lineNumber = 539
  lineNumber = 538
  var string1440 = new GraceString("\\u");
  var opresult1442 = callmethod(string1440, "++", [1], var_hex);
  var if1423 = opresult1442;
  } else {
  lineNumber = 540
  var if1423 = var_char;
}
  return if1423;
};
  lineNumber = 542
  var call1443 = callmethod(this,"map()with", [1, 1], call1420, block1421);
  lineNumber = 544
  var call1444 = callmethod(this,"join", [1], call1443);
  var var_value = call1444;
  var string1445 = new GraceString("$string(\"");
  var opresult1447 = callmethod(string1445, "++", [1], var_value);
  var string1448 = new GraceString("\")");
  var opresult1450 = callmethod(opresult1447, "++", [1], string1448);
  return opresult1450
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1407.paramTypes = [];
func1407.paramTypes.push([]);
func1407.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileString"] = func1407;
  lineNumber = 552
var func1451 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1452 = Grace_allocObject();
  obj1452.outer = this;
    var reader_genjava_outer1453 = function() {
    return this.outer;
  }
  obj1452.methods["outer"] = reader_genjava_outer1453;
function obj_init_1452() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 549
  var string1454 = new GraceString("member");
  obj1452.data["kind"] = string1454;
    var reader_genjava_kind1455 = function() {
    return this.data["kind"];
  }
  reader_genjava_kind1455.def = true;
  obj1452.methods["kind"] = reader_genjava_kind1455;
  lineNumber = 550
  var string1456 = new GraceString("[]");
  obj1452.data["value"] = string1456;
    var reader_genjava_value1457 = function() {
    return this.data["value"];
  }
  reader_genjava_value1457.def = true;
  obj1452.methods["value"] = reader_genjava_value1457;
  lineNumber = 552
  lineNumber = 1
  lineNumber = 551
  var call1458 = callmethod(var_node,"value", [0]);
  obj1452.data["in"] = call1458;
    var reader_genjava_in1459 = function() {
    return this.data["in"];
  }
  reader_genjava_in1459.def = true;
  obj1452.methods["in"] = reader_genjava_in1459;
  superDepth = origSuperDepth;
}
obj_init_1452.apply(obj1452, []);
  lineNumber = 552
  lineNumber = 1
  lineNumber = 552
  var call1461 = callmethod(var_node,"index", [0]);
  var array1460 = new GraceList([
call1461,
]);

  lineNumber = 548
  var call1462 = callmethod(var_ast,"astcall", [2], obj1452, array1460);
  lineNumber = 552
  lineNumber = 553
  var call1463 = callmethod(this,"compileCall", [2], call1462, var_scope);
  return call1463
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1451.paramTypes = [];
func1451.paramTypes.push([]);
func1451.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileIndex"] = func1451;
  lineNumber = 559
var func1464 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 556
  lineNumber = 1
  lineNumber = 556
  var call1465 = callmethod(var_node,"left", [0]);
  lineNumber = 557
  var call1466 = callmethod(this,"compileExpression", [2], call1465, var_scope);
  var var_left = call1466;
  lineNumber = 1
  lineNumber = 557
  var call1467 = callmethod(var_node,"right", [0]);
  lineNumber = 559
  var call1468 = callmethod(this,"compileExpression", [2], call1467, var_scope);
  var var_right = call1468;
  var string1469 = new GraceString("");
  var opresult1471 = callmethod(string1469, "++", [1], var_left);
  var string1472 = new GraceString(".binop(\"");
  var opresult1474 = callmethod(opresult1471, "++", [1], string1472);
  lineNumber = 1
  lineNumber = 559
  var call1475 = callmethod(var_node,"value", [0]);
  var opresult1477 = callmethod(opresult1474, "++", [1], call1475);
  var string1478 = new GraceString("\", ");
  var opresult1480 = callmethod(opresult1477, "++", [1], string1478);
  var opresult1482 = callmethod(opresult1480, "++", [1], var_right);
  var string1483 = new GraceString(")");
  var opresult1485 = callmethod(opresult1482, "++", [1], string1483);
  return opresult1485
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1464.paramTypes = [];
func1464.paramTypes.push([]);
func1464.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileOp"] = func1464;
  lineNumber = 581
var func1486 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 563
  lineNumber = 1
  lineNumber = 563
  var call1487 = callmethod(var_node,"body", [0]);
  lineNumber = 564
  var call1488 = callmethod(this,"forceReturn", [1], call1487);
  var var_body = call1488;
  lineNumber = 1
  lineNumber = 564
  var call1489 = callmethod(var_node,"params", [0]);
  var block1490 = Grace_allocObject();
  block1490.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1490.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1490.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1490.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1490.receiver = this;
  block1490.className = 'block<genjava:564>';
  block1490.real = function(
var_param
) {
  lineNumber = 1
  lineNumber = 564
  var call1491 = callmethod(var_param,"value", [0]);
  var call1492 = callmethod(this,"escape", [1], call1491);
  return call1492;
};
  lineNumber = 566
  var call1493 = callmethod(this,"map()with", [1, 1], call1489, block1490);
  var var_params = call1493;
  lineNumber = 581
  lineNumber = 566
  var string1494 = new GraceString("new ");
  var opresult1496 = callmethod(string1494, "++", [1], var_blk);
  var string1497 = new GraceString("(");
  var opresult1499 = callmethod(opresult1496, "++", [1], string1497);
  lineNumber = 1
  lineNumber = 566
  var call1500 = callmethod(var_params,"size", [0]);
  var opresult1502 = callmethod(opresult1499, "++", [1], call1500);
  var string1503 = new GraceString(", $self, $closure) {");
  var opresult1505 = callmethod(opresult1502, "++", [1], string1503);
  lineNumber = 580
  var block1506 = Grace_allocObject();
  block1506.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1506.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1506.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1506.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1506.receiver = this;
  block1506.className = 'block<genjava:580>';
  block1506.real = function(
var_scope__39__
) {
  lineNumber = 574
  lineNumber = 568
  lineNumber = 567
  var block1507 = Grace_allocObject();
  block1507.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1507.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1507.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1507.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1507.receiver = this;
  block1507.className = 'block<genjava:567>';
  block1507.real = function(
var_param
) {
  var string1508 = new GraceString("");
  var opresult1510 = callmethod(string1508, "++", [1], var_obj);
  var string1511 = new GraceString(" ");
  var opresult1513 = callmethod(opresult1510, "++", [1], string1511);
  var opresult1515 = callmethod(opresult1513, "++", [1], var_param);
  var string1516 = new GraceString("");
  var opresult1518 = callmethod(opresult1515, "++", [1], string1516);
  var call1519 = callmethod(var_scope__39__,"line", [1], opresult1518);
  return call1519;
};
  var call1520 = callmethod(this,"map()with", [1, 1], var_params, block1507);
  lineNumber = 581
  var call1521 = callmethod(this,"join", [1], call1520);
  lineNumber = 568
  lineNumber = 567
  var call1522 = callmethod(this,"compileDeclarations", [2], var_body, var_scope__39__);
  var opresult1524 = callmethod(call1521, "++", [1], call1522);
  lineNumber = 574
  lineNumber = 569
  var bool1525 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 569
  var call1526 = callmethod(var_node,"matchingPattern", [0]);
  var opresult1528 = callmethod(bool1525, "/=", [1], call1526);
  lineNumber = 574
  var block1529 = Grace_allocObject();
  block1529.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1529.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1529.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1529.receiver = this;
  block1529.className = 'block<genjava:574>';
  block1529.real = function(
) {
  lineNumber = 571
  lineNumber = 570
  var string1530 = new GraceString("public ");
  var opresult1532 = callmethod(string1530, "++", [1], var_obj);
  var string1533 = new GraceString(" match");
  var opresult1535 = callmethod(opresult1532, "++", [1], string1533);
  lineNumber = 571
  var string1536 = new GraceString("(");
  var opresult1538 = callmethod(string1536, "++", [1], var_obj);
  var string1539 = new GraceString(" _, ");
  var opresult1541 = callmethod(opresult1538, "++", [1], string1539);
  var opresult1543 = callmethod(opresult1541, "++", [1], var_obj);
  var string1544 = new GraceString("... $args) {");
  var opresult1546 = callmethod(opresult1543, "++", [1], string1544);
  var opresult1548 = callmethod(opresult1535, "++", [1], opresult1546);
  lineNumber = 573
  var block1549 = Grace_allocObject();
  block1549.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1549.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1549.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1549.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1549.receiver = this;
  block1549.className = 'block<genjava:573>';
  block1549.real = function(
var_scope__39____39__
) {
  lineNumber = 572
  lineNumber = 1
  lineNumber = 572
  var call1550 = callmethod(var_node,"matchingPattern", [0]);
  lineNumber = 573
  var call1551 = callmethod(this,"compileExpression", [2], call1550, var_scope__39____39__);
  var var_patt = call1551;
  var string1552 = new GraceString("return $match(self, ");
  var opresult1554 = callmethod(string1552, "++", [1], var_patt);
  var string1555 = new GraceString(", $args)");
  var opresult1557 = callmethod(opresult1554, "++", [1], string1555);
  var call1558 = callmethod(var_scope__39____39__,"line", [1], opresult1557);
  return call1558;
};
  lineNumber = 574
  var string1559 = new GraceString("}");
  lineNumber = 570
  var call1560 = callmethod(var_scope__39__,"stbl", [3], opresult1548, block1549, string1559);
  return call1560;
};
  lineNumber = 568
  var call1561 = callmethod(this,"strIf()then", [1, 1], opresult1528, block1529);
  var opresult1563 = callmethod(opresult1524, "++", [1], call1561);
  lineNumber = 580
  lineNumber = 576
  lineNumber = 575
  var string1564 = new GraceString("public ");
  var opresult1566 = callmethod(string1564, "++", [1], var_obj);
  var string1567 = new GraceString(" $apply");
  var opresult1569 = callmethod(opresult1566, "++", [1], string1567);
  lineNumber = 576
  var string1570 = new GraceString("(");
  var opresult1572 = callmethod(string1570, "++", [1], var_obj);
  var string1573 = new GraceString(" _, ");
  var opresult1575 = callmethod(opresult1572, "++", [1], string1573);
  var opresult1577 = callmethod(opresult1575, "++", [1], var_obj);
  var string1578 = new GraceString("... $args) {");
  var opresult1580 = callmethod(opresult1577, "++", [1], string1578);
  var opresult1582 = callmethod(opresult1569, "++", [1], opresult1580);
  lineNumber = 579
  var block1583 = Grace_allocObject();
  block1583.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1583.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1583.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1583.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1583.receiver = this;
  block1583.className = 'block<genjava:579>';
  block1583.real = function(
var_scope__39____39__
) {
  lineNumber = 578
  lineNumber = 577
  lineNumber = 578
  var block1584 = Grace_allocObject();
  block1584.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1584.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1584.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1584.receiver = this;
  block1584.className = 'block<genjava:578>';
  block1584.real = function(
var_param
,
var_i
) {
  var string1585 = new GraceString("");
  var opresult1587 = callmethod(string1585, "++", [1], var_param);
  var string1588 = new GraceString(" = $args[");
  var opresult1590 = callmethod(opresult1587, "++", [1], string1588);
  var diff1592 = callmethod(var_i, "-", [1], new GraceNum(1));
  var opresult1594 = callmethod(opresult1590, "++", [1], diff1592);
  var string1595 = new GraceString("]");
  var opresult1597 = callmethod(opresult1594, "++", [1], string1595);
  var call1598 = callmethod(var_scope__39____39__,"line", [1], opresult1597);
  return call1598;
};
  lineNumber = 579
  var call1599 = callmethod(this,"map()with", [1, 1], var_params, block1584);
  lineNumber = 580
  var call1600 = callmethod(this,"join", [1], call1599);
  lineNumber = 579
  lineNumber = 578
  var call1601 = callmethod(this,"compileExecution", [2], var_body, var_scope__39____39__);
  var opresult1603 = callmethod(call1600, "++", [1], call1601);
  return opresult1603;
};
  lineNumber = 580
  var string1604 = new GraceString("}");
  lineNumber = 575
  var call1605 = callmethod(var_scope__39__,"stbl", [3], opresult1582, block1583, string1604);
  var opresult1607 = callmethod(opresult1563, "++", [1], call1605);
  lineNumber = 580
  var call1608 = callmethod(this,"makeInvoke", [1], var_scope__39__);
  var opresult1610 = callmethod(opresult1607, "++", [1], call1608);
  return opresult1610;
};
  lineNumber = 581
  var string1611 = new GraceString("}");
  lineNumber = 566
  var call1612 = callmethod(var_scope,"block", [3], opresult1505, block1506, string1611);
  return call1612
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1486.paramTypes = [];
func1486.paramTypes.push([]);
func1486.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileBlock"] = func1486;
  lineNumber = 589
var func1613 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 587
  lineNumber = 586
  lineNumber = 585
  lineNumber = 1
  lineNumber = 585
  var call1614 = callmethod(var_node,"value", [0]);
  lineNumber = 586
  var block1615 = Grace_allocObject();
  block1615.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1615.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1615.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1615.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1615.receiver = this;
  block1615.className = 'block<genjava:586>';
  block1615.real = function(
var_value
) {
  lineNumber = 587
  var call1616 = callmethod(this,"compileExpression", [2], var_value, var_scope);
  return call1616;
};
  var call1617 = callmethod(this,"map()with", [1, 1], call1614, block1615);
  var string1618 = new GraceString(", ");
  lineNumber = 589
  var call1619 = callmethod(this,"join()separatedBy", [1, 1], call1617, string1618);
  var var_values = call1619;
  var string1620 = new GraceString("$list(");
  var opresult1622 = callmethod(string1620, "++", [1], var_values);
  var string1623 = new GraceString(")");
  var opresult1625 = callmethod(opresult1622, "++", [1], string1623);
  return opresult1625
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1613.paramTypes = [];
func1613.paramTypes.push([]);
func1613.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileArray"] = func1613;
  lineNumber = 604
var func1626 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 593
  lineNumber = 1
  lineNumber = 593
  var call1627 = callmethod(var_node,"value", [0]);
  lineNumber = 594
  var call1628 = callmethod(this,"compileEgal", [1], call1627);
  var var_egal = call1628;
  lineNumber = 596
  lineNumber = 1
  lineNumber = 594
  var call1629 = callmethod(var_node,"value", [0]);
  var var_body = call1629;
  lineNumber = 604
  lineNumber = 596
  var string1630 = new GraceString("new ");
  var opresult1632 = callmethod(string1630, "++", [1], var_obj);
  var string1633 = new GraceString("(");
  var opresult1635 = callmethod(opresult1632, "++", [1], string1633);
  var opresult1637 = callmethod(opresult1635, "++", [1], var_egal);
  var string1638 = new GraceString(", $self, $closure) {");
  var opresult1640 = callmethod(opresult1637, "++", [1], string1638);
  lineNumber = 603
  var block1641 = Grace_allocObject();
  block1641.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1641.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1641.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1641.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1641.receiver = this;
  block1641.className = 'block<genjava:603>';
  block1641.real = function(
var_scope__39__
) {
  lineNumber = 599
  lineNumber = 598
  lineNumber = 597
  var string1642 = new GraceString("private final ");
  var opresult1644 = callmethod(string1642, "++", [1], var_obj);
  var string1645 = new GraceString(" $self = this");
  var opresult1647 = callmethod(opresult1644, "++", [1], string1645);
  var call1648 = callmethod(var_scope__39__,"line", [1], opresult1647);
  lineNumber = 598
  var string1649 = new GraceString("private final ");
  var opresult1651 = callmethod(string1649, "++", [1], var_obj);
  var string1652 = new GraceString(" $closure = this");
  var opresult1654 = callmethod(opresult1651, "++", [1], string1652);
  var call1655 = callmethod(var_scope__39__,"line", [1], opresult1654);
  var opresult1657 = callmethod(call1648, "++", [1], call1655);
  lineNumber = 599
  lineNumber = 1
  lineNumber = 599
  var call1658 = callmethod(var_node,"value", [0]);
  lineNumber = 598
  var call1659 = callmethod(this,"compileDeclarations", [2], call1658, var_scope__39__);
  var opresult1661 = callmethod(opresult1657, "++", [1], call1659);
  lineNumber = 603
  lineNumber = 600
  var string1662 = new GraceString("{");
  lineNumber = 602
  var block1663 = Grace_allocObject();
  block1663.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1663.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1663.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1663.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1663.receiver = this;
  block1663.className = 'block<genjava:602>';
  block1663.real = function(
var_scope__39____39__
) {
  lineNumber = 601
  var string1664 = new GraceString("final ");
  var opresult1666 = callmethod(string1664, "++", [1], var_obj);
  var string1667 = new GraceString(" self = this");
  var opresult1669 = callmethod(opresult1666, "++", [1], string1667);
  var call1670 = callmethod(var_scope__39____39__,"line", [1], opresult1669);
  lineNumber = 602
  lineNumber = 1
  lineNumber = 602
  var call1671 = callmethod(var_node,"value", [0]);
  lineNumber = 601
  var call1672 = callmethod(this,"compileExecution", [2], call1671, var_scope__39____39__);
  var opresult1674 = callmethod(call1670, "++", [1], call1672);
  return opresult1674;
};
  lineNumber = 603
  var string1675 = new GraceString("}");
  lineNumber = 600
  var call1676 = callmethod(var_scope__39__,"stbl", [3], string1662, block1663, string1675);
  var opresult1678 = callmethod(opresult1661, "++", [1], call1676);
  lineNumber = 603
  var call1679 = callmethod(this,"makeInvoke", [1], var_scope__39__);
  var opresult1681 = callmethod(opresult1678, "++", [1], call1679);
  return opresult1681;
};
  lineNumber = 604
  var string1682 = new GraceString("}");
  lineNumber = 596
  var call1683 = callmethod(var_scope,"decl", [3], opresult1640, block1641, string1682);
  return call1683
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1626.paramTypes = [];
func1626.paramTypes.push([]);
func1626.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileObject"] = func1626;
  lineNumber = 618
var func1684 = function(argcv) {
  var curarg = 1;
  var var_body = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 610
  lineNumber = 608
  var bool1685 = new GraceBoolean(false)
  var var_closure = bool1685;
  lineNumber = 615
  lineNumber = 610
  lineNumber = 615
  var block1686 = Grace_allocObject();
  block1686.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1686.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1686.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1686.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1686.receiver = this;
  block1686.className = 'block<genjava:615>';
  block1686.real = function(
var_node
) {
  lineNumber = 616
  lineNumber = 1
  lineNumber = 611
  var call1688 = callmethod(var_node,"kind", [0]);
  var string1689 = new GraceString("vardec");
  var opresult1691 = callmethod(call1688, "==", [1], string1689);
  if (Grace_isTrue(opresult1691)) {
  lineNumber = 613
  lineNumber = 612
  var string1692 = new GraceString("Egal.Pointer");
  throw new ReturnException(string1692, returnTarget);
  var if1687 = undefined;
  } else {
  lineNumber = 615
  lineNumber = 616
  lineNumber = 1
  lineNumber = 613
  var call1694 = callmethod(var_node,"kind", [0]);
  var string1695 = new GraceString("method");
  var opresult1697 = callmethod(call1694, "==", [1], string1695);
  if (Grace_isTrue(opresult1697)) {
  lineNumber = 615
  lineNumber = 614
  var bool1698 = new GraceBoolean(true)
  var_closure = bool1698;
  var if1693 = bool1698;
}
  var if1687 = if1693;
}
  return if1687;
};
  var call1699 = callmethod(Grace_prelude,"for()do", [1, 1], var_body, block1686);
  lineNumber = 618
  if (Grace_isTrue(var_closure)) {
  var string1701 = new GraceString("Egal.Closure");
  var if1700 = string1701;
  } else {
  var string1702 = new GraceString("Egal.Value");
  var if1700 = string1702;
}
  return if1700
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1684.paramTypes = [];
func1684.paramTypes.push([]);
  this.methods["compileEgal"] = func1684;
  lineNumber = 630
var func1703 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 622
  lineNumber = 1
  lineNumber = 622
  var call1704 = callmethod(var_node,"value", [0]);
  lineNumber = 623
  var call1705 = callmethod(this,"compileExpression", [2], call1704, var_scope);
  var var_matchee = call1705;
  lineNumber = 625
  lineNumber = 624
  lineNumber = 623
  lineNumber = 1
  lineNumber = 623
  var call1706 = callmethod(var_node,"cases", [0]);
  lineNumber = 624
  var block1707 = Grace_allocObject();
  block1707.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1707.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1707.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1707.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1707.receiver = this;
  block1707.className = 'block<genjava:624>';
  block1707.real = function(
var_case
) {
  lineNumber = 625
  var call1708 = callmethod(this,"compileExpression", [2], var_case, var_scope);
  return call1708;
};
  var call1709 = callmethod(this,"map()with", [1, 1], call1706, block1707);
  var string1710 = new GraceString(", ");
  lineNumber = 626
  var call1711 = callmethod(this,"join()separatedBy", [1, 1], call1709, string1710);
  var var_params = call1711;
  lineNumber = 628
  lineNumber = 630
  lineNumber = 1
  lineNumber = 626
  var call1713 = callmethod(var_node,"elsecase", [0]);
  var bool1714 = new GraceBoolean(false)
  var opresult1716 = callmethod(call1713, "/=", [1], bool1714);
  if (Grace_isTrue(opresult1716)) {
  lineNumber = 627
  lineNumber = 1
  lineNumber = 627
  var call1717 = callmethod(var_node,"elsecase", [0]);
  lineNumber = 628
  var call1718 = callmethod(this,"compileExpression", [2], call1717, var_scope);
  var if1712 = call1718;
  } else {
  var string1719 = new GraceString("null");
  var if1712 = string1719;
}
  var var_else = if1712;
  lineNumber = 630
  var string1720 = new GraceString("$matchCase(");
  var opresult1722 = callmethod(string1720, "++", [1], var_matchee);
  var string1723 = new GraceString(", ");
  var opresult1725 = callmethod(opresult1722, "++", [1], string1723);
  var opresult1727 = callmethod(opresult1725, "++", [1], var_else);
  var string1728 = new GraceString(", ");
  var opresult1730 = callmethod(opresult1727, "++", [1], string1728);
  var opresult1732 = callmethod(opresult1730, "++", [1], var_params);
  var string1733 = new GraceString(")");
  var opresult1735 = callmethod(opresult1732, "++", [1], string1733);
  return opresult1735
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1703.paramTypes = [];
func1703.paramTypes.push([]);
func1703.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileMatch"] = func1703;
  lineNumber = 645
var func1736 = function(argcv) {
  var curarg = 1;
  var var_block = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 639
  lineNumber = 647
  lineNumber = 1
  lineNumber = 637
  var call1738 = callmethod(var_block,"size", [0]);
  var opresult1740 = callmethod(call1738, "==", [1], new GraceNum(1));
  lineNumber = 639
  var block1741 = Grace_allocObject();
  block1741.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1741.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1741.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1741.receiver = this;
  block1741.className = 'block<genjava:639>';
  block1741.real = function(
) {
  lineNumber = 1
  lineNumber = 638
  var idxres1742 = var_block.methods["[]"].call(var_block, [1], new GraceNum(1));
  var call1743 = callmethod(idxres1742,"kind", [0]);
  var string1744 = new GraceString("return");
  var opresult1746 = callmethod(call1743, "/=", [1], string1744);
  return opresult1746;
};
  var opresult1748 = callmethod(opresult1740, "&&", [1], block1741);
  if (Grace_isTrue(opresult1748)) {
  lineNumber = 640
  var idxres1749 = var_block.methods["[]"].call(var_block, [1], new GraceNum(1));
  lineNumber = 641
  var call1750 = callmethod(this,"compileExpression", [2], idxres1749, var_scope);
  var if1737 = call1750;
  } else {
  lineNumber = 645
  lineNumber = 644
  lineNumber = 1
  lineNumber = 641
  var call1752 = callmethod(var_block,"size", [0]);
  var opresult1754 = callmethod(call1752, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1754)) {
  lineNumber = 642
  var array1755 = new GraceList([
]);

  var call1756 = callmethod(var_ast,"astblock", [2], array1755, var_block);
  var var_expr = call1756;
  lineNumber = 643
  var string1757 = new GraceString("apply");
  var call1758 = callmethod(var_ast,"astmember", [2], string1757, var_expr);
  lineNumber = 644
  var call1759 = callmethod(this,"compileExpression", [2], call1758, var_scope);
  var if1751 = call1759;
  } else {
  lineNumber = 645
  var string1760 = new GraceString("nothing");
  var if1751 = string1760;
}
  var if1737 = if1751;
}
  return if1737
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1736.paramTypes = [];
func1736.paramTypes.push([]);
func1736.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileBlockExpression"] = func1736;
  lineNumber = 658
var func1761 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 654
  lineNumber = 1
  lineNumber = 652
  var call1762 = callmethod(var_node,"value", [0]);
  var var_name = call1762;
  lineNumber = 656
  lineNumber = 658
  lineNumber = 654
  var string1764 = new GraceString("super");
  var opresult1766 = callmethod(var_name, "==", [1], string1764);
  if (Grace_isTrue(opresult1766)) {
  lineNumber = 656
  lineNumber = 655
  var string1767 = new GraceString("self.getSuper()");
  return string1767
  var if1763 = undefined;
}
  lineNumber = 658
  lineNumber = 659
  var call1768 = callmethod(this,"escape", [1], var_name);
  return call1768
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1761.paramTypes = [];
func1761.paramTypes.push([]);
func1761.paramTypes.push([type_Scope, "scope"]);
  this.methods["compileIdentifier"] = func1761;
  lineNumber = 665
var func1769 = function(argcv) {
  var curarg = 1;
  var var_scope = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 663
  lineNumber = 662
  var string1770 = new GraceString("protected Object invoke(Method method, ");
  lineNumber = 663
  var string1771 = new GraceString("Object[] args) throws Exception {");
  var opresult1773 = callmethod(string1770, "++", [1], string1771);
  lineNumber = 664
  var block1774 = Grace_allocObject();
  block1774.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1774.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1774.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1774.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1774.receiver = this;
  block1774.className = 'block<genjava:664>';
  block1774.real = function(
var_scope__39__
) {
  var string1775 = new GraceString("return method.invoke(this, args)");
  var call1776 = callmethod(var_scope__39__,"line", [1], string1775);
  return call1776;
};
  lineNumber = 665
  var string1777 = new GraceString("}");
  lineNumber = 662
  var call1778 = callmethod(var_scope,"stbl", [3], opresult1773, block1774, string1777);
  return call1778
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1769.paramTypes = [];
func1769.paramTypes.push([type_Scope, "scope"]);
  this.methods["makeInvoke"] = func1769;
  lineNumber = 712
var var_Scope = new GraceType("Scope");
var_Scope.typeMethods.push("up");
var_Scope.typeMethods.push("isDecl");
var_Scope.typeMethods.push("addVariable");
var_Scope.typeMethods.push("hasVariable");
var_Scope.typeMethods.push("newVariable");
var_Scope.typeMethods.push("indent");
var_Scope.typeMethods.push("block");
var_Scope.typeMethods.push("decl");
var_Scope.typeMethods.push("stmt");
var_Scope.typeMethods.push("line");
var_Scope.typeMethods.push("stbl");
var type_Scope = var_Scope;
  lineNumber = 713
var func1780 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var bool1781 = new GraceBoolean(true)
  var call1782 = callmethod(var_ScopeFactory,"new", [3], new GraceNum(0), var_nothing, bool1781);
  return call1782
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["moduleScope"] = func1780;
  lineNumber = 716
  lineNumber = 1
var func1783 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 716
  return var_ScopeFactory
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["ScopeFactory"] = func1783;
  lineNumber = 1
  var obj1784 = Grace_allocObject();
  obj1784.outer = this;
    var reader_genjava_outer1785 = function() {
    return this.outer;
  }
  obj1784.methods["outer"] = reader_genjava_outer1785;
function obj_init_1784() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1786 = function(argcv) {
  var curarg = 1;
  var var_ind = arguments[curarg];
  curarg++;
  var var_outer__39__ = arguments[curarg];
  curarg++;
  var var_decl__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1787 = Grace_allocObject();
  obj1787.outer = this;
    var reader_genjava_outer1788 = function() {
    return this.outer;
  }
  obj1787.methods["outer"] = reader_genjava_outer1788;
function obj_init_1787() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 718
  obj1787.data["isDecl"] = var_decl__39__;
    var reader_genjava_isDecl1789 = function() {
    return this.data["isDecl"];
  }
  reader_genjava_isDecl1789.def = true;
  obj1787.methods["isDecl"] = reader_genjava_isDecl1789;
  lineNumber = 719
  obj1787.data["up"] = var_outer__39__;
    var reader_genjava_up1790 = function() {
    return this.data["up"];
  }
  reader_genjava_up1790.def = true;
  obj1787.methods["up"] = reader_genjava_up1790;
  lineNumber = 723
  var array1791 = new GraceList([
]);

  obj1787.data["variables"] = array1791;
    var reader_genjava_variables1792 = function() {
    return this.data["variables"];
  }
  reader_genjava_variables1792.def = true;
  obj1787.methods["variables"] = reader_genjava_variables1792;
var func1793 = function(argcv) {
  var curarg = 1;
  var var_name = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 725
  lineNumber = 724
  lineNumber = 1
  lineNumber = 724
  lineNumber = 727
  var call1795 = callmethod(this,"variables", [0]);
  var call1796 = callmethod(call1795,"contains", [1], var_name);
  var call1797 = callmethod(call1796,"not", [0]);
  if (Grace_isTrue(call1797)) {
  lineNumber = 725
  lineNumber = 726
  var call1798 = callmethod(this,"variables", [0]);
  var call1799 = callmethod(call1798,"push", [1], var_name);
  var if1794 = call1799;
}
  return if1794
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1793.paramTypes = [];
func1793.paramTypes.push([type_String, "name"]);
  obj1787.methods["addVariable"] = func1793;
var func1800 = function(argcv) {
  var curarg = 1;
  var var_name = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 730
  lineNumber = 731
  var call1801 = callmethod(this,"variables", [0]);
  var call1802 = callmethod(call1801,"contains", [1], var_name);
  return call1802
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1800.paramTypes = [];
func1800.paramTypes.push([type_String, "name"]);
  obj1787.methods["hasVariable"] = func1800;
var func1803 = function(argcv) {
  var curarg = 1;
  var var_prefix = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 736
  lineNumber = 734
  var var_i = new GraceNum(1);
  lineNumber = 738
  lineNumber = 736
  var block1804 = Grace_allocObject();
  block1804.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1804.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1804.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1804.receiver = this;
  block1804.className = 'block<genjava:736>';
  block1804.real = function(
) {
  var opresult1806 = callmethod(var_prefix, "++", [1], var_i);
  var call1807 = callmethod(this,"hasVariable", [1], opresult1806);
  return call1807;
};
  lineNumber = 738
  var block1808 = Grace_allocObject();
  block1808.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1808.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1808.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1808.receiver = this;
  block1808.className = 'block<genjava:738>';
  block1808.real = function(
) {
  lineNumber = 737
  var opresult1810 = callmethod(var_i, "+=", [1], new GraceNum(1));
  return opresult1810;
};
  var call1811 = callmethod(Grace_prelude,"while()do", [1, 1], block1804, block1808);
  lineNumber = 742
  lineNumber = 740
  var opresult1813 = callmethod(var_prefix, "++", [1], var_i);
  var var_name = opresult1813;
  lineNumber = 742
  lineNumber = 744
  var call1814 = callmethod(this,"addVariable", [1], var_name);
  return var_name
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1803.paramTypes = [];
func1803.paramTypes.push([type_String, "prefix"]);
  obj1787.methods["newVariable"] = func1803;
  lineNumber = 747
  obj1787.data["indentAmount"] = var_ind;
    var reader_genjava_indentAmount1815 = function() {
    return this.data["indentAmount"];
  }
  reader_genjava_indentAmount1815.def = true;
  obj1787.methods["indentAmount"] = reader_genjava_indentAmount1815;
  lineNumber = 749
  var bool1816 = new GraceBoolean(false)
  obj1787.data["indent'"] = bool1816;
    var reader_genjava_indent__39__1817 = function() {
    return this.data["indent'"];
  }
  obj1787.methods["indent'"] = reader_genjava_indent__39__1817;
  obj1787.data["indent'"] = bool1816;
  var writer_genjava_indent__39__1817 = function(argcv, o) {
    this.data["indent'"] = o;
  }
  obj1787.methods["indent':="] = writer_genjava_indent__39__1817;
obj1787.mutable = true;
var func1818 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 761
  lineNumber = 763
  var call1820 = callmethod(this,"indent'", [0]);
  lineNumber = 751
  var bool1821 = new GraceBoolean(false)
  var opresult1823 = callmethod(call1820, "==", [1], bool1821);
  if (Grace_isTrue(opresult1823)) {
  lineNumber = 753
  lineNumber = 752
  var string1824 = new GraceString("");
  var var_string = string1824;
  lineNumber = 755
  lineNumber = 753
  var var_i = new GraceNum(0);
  lineNumber = 758
  lineNumber = 755
  var block1825 = Grace_allocObject();
  block1825.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1825.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1825.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1825.receiver = this;
  block1825.className = 'block<genjava:755>';
  block1825.real = function(
) {
  var call1826 = callmethod(this,"indentAmount", [0]);
  var opresult1828 = callmethod(var_i, "<", [1], call1826);
  return opresult1828;
};
  lineNumber = 758
  var block1829 = Grace_allocObject();
  block1829.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1829.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1829.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1829.receiver = this;
  block1829.className = 'block<genjava:758>';
  block1829.real = function(
) {
  lineNumber = 757
  lineNumber = 756
  var string1830 = new GraceString("  ");
  var opresult1832 = callmethod(var_string, "++", [1], string1830);
  var_string = opresult1832;
  lineNumber = 758
  lineNumber = 757
  var opresult1834 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult1834;
  return opresult1834;
};
  var call1835 = callmethod(Grace_prelude,"while()do", [1, 1], block1825, block1829);
  lineNumber = 761
  lineNumber = 1
  lineNumber = 760
  lineNumber = 761
  var call1836 = callmethod(this,"indent':=", [1], var_string);
  var if1819 = call1836;
}
  lineNumber = 763
  var call1837 = callmethod(this,"indent'", [0]);
  return call1837
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1787.methods["indent"] = func1818;
var func1838 = function(argcv) {
  var curarg = 1;
  var var_left = arguments[curarg];
  curarg++;
  var var_inner = arguments[curarg];
  curarg++;
  var var_right = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 767
  var call1839 = callmethod(this,"indentAmount", [0]);
  var opresult1841 = callmethod(call1839, "+", [1], new GraceNum(1));
  var bool1842 = new GraceBoolean(false)
  var call1843 = callmethod(var_ScopeFactory,"new", [3], opresult1841, this, bool1842);
  var var_scope = call1843;
  lineNumber = 768
  lineNumber = 769
  lineNumber = 768
  var string1844 = new GraceString("\n");
  var opresult1846 = callmethod(var_left, "++", [1], string1844);
  var call1847 = callmethod(var_inner,"apply", [1], var_scope);
  var opresult1849 = callmethod(opresult1846, "++", [1], call1847);
  var call1850 = callmethod(this,"indent", [0]);
  var opresult1852 = callmethod(opresult1849, "++", [1], call1850);
  var opresult1854 = callmethod(opresult1852, "++", [1], var_right);
  return opresult1854
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1838.paramTypes = [];
func1838.paramTypes.push([type_String, "left"]);
func1838.paramTypes.push([type_Block, "inner"]);
func1838.paramTypes.push([type_String, "right"]);
  obj1787.methods["block"] = func1838;
var func1855 = function(argcv) {
  var curarg = 1;
  var var_left = arguments[curarg];
  curarg++;
  var var_inner = arguments[curarg];
  curarg++;
  var var_right = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 772
  var call1856 = callmethod(this,"indentAmount", [0]);
  var opresult1858 = callmethod(call1856, "+", [1], new GraceNum(1));
  var bool1859 = new GraceBoolean(true)
  var call1860 = callmethod(var_ScopeFactory,"new", [3], opresult1858, this, bool1859);
  var var_scope = call1860;
  lineNumber = 773
  lineNumber = 774
  lineNumber = 773
  var string1861 = new GraceString("\n");
  var opresult1863 = callmethod(var_left, "++", [1], string1861);
  var call1864 = callmethod(var_inner,"apply", [1], var_scope);
  var opresult1866 = callmethod(opresult1863, "++", [1], call1864);
  var call1867 = callmethod(this,"indent", [0]);
  var opresult1869 = callmethod(opresult1866, "++", [1], call1867);
  var opresult1871 = callmethod(opresult1869, "++", [1], var_right);
  return opresult1871
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1855.paramTypes = [];
func1855.paramTypes.push([type_String, "left"]);
func1855.paramTypes.push([type_Block, "inner"]);
func1855.paramTypes.push([type_String, "right"]);
  obj1787.methods["decl"] = func1855;
var func1872 = function(argcv) {
  var curarg = 1;
  var var_string = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 777
  var string1873 = new GraceString("");
  var call1874 = callmethod(this,"indent", [0]);
  var opresult1876 = callmethod(string1873, "++", [1], call1874);
  var string1877 = new GraceString("");
  var opresult1879 = callmethod(opresult1876, "++", [1], string1877);
  var opresult1881 = callmethod(opresult1879, "++", [1], var_string);
  var string1882 = new GraceString("\n");
  var opresult1884 = callmethod(opresult1881, "++", [1], string1882);
  return opresult1884
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1872.paramTypes = [];
func1872.paramTypes.push([type_String, "string"]);
  obj1787.methods["stmt"] = func1872;
var func1885 = function(argcv) {
  var curarg = 1;
  var var_string = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 781
  var string1886 = new GraceString("");
  var call1887 = callmethod(this,"indent", [0]);
  var opresult1889 = callmethod(string1886, "++", [1], call1887);
  var string1890 = new GraceString("");
  var opresult1892 = callmethod(opresult1889, "++", [1], string1890);
  var opresult1894 = callmethod(opresult1892, "++", [1], var_string);
  var string1895 = new GraceString(";\n");
  var opresult1897 = callmethod(opresult1894, "++", [1], string1895);
  return opresult1897
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1885.paramTypes = [];
func1885.paramTypes.push([type_String, "string"]);
  obj1787.methods["line"] = func1885;
var func1898 = function(argcv) {
  var curarg = 1;
  var var_left = arguments[curarg];
  curarg++;
  var var_inner = arguments[curarg];
  curarg++;
  var var_right = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 785
  var call1899 = callmethod(this,"block", [3], var_left, var_inner, var_right);
  lineNumber = 786
  var call1900 = callmethod(this,"stmt", [1], call1899);
  return call1900
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1898.paramTypes = [];
func1898.paramTypes.push([type_String, "left"]);
func1898.paramTypes.push([type_Block, "inner"]);
func1898.paramTypes.push([type_String, "right"]);
  obj1787.methods["stbl"] = func1898;
  superDepth = origSuperDepth;
}
obj_init_1787.apply(obj1787, []);
  return obj1787
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1786.paramTypes = [];
func1786.paramTypes.push([type_Number, "ind"]);
func1786.paramTypes.push([]);
func1786.paramTypes.push([type_Boolean, "decl'"]);
  obj1784.methods["new"] = func1786;
  superDepth = origSuperDepth;
}
obj_init_1784.apply(obj1784, []);
  var var_ScopeFactory = obj1784;
  lineNumber = 795
var func1901 = function(argcv) {
  var curarg = 1;
  var var_kind__39__ = arguments[curarg];
  curarg++;
  var var_block = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 796
  lineNumber = 1
  lineNumber = 795
  var call1902 = callmethod(var_Kinds,"new", [0]);
  var call1903 = callmethod(call1902,"kind()do", [1, 1], var_kind__39__, var_block);
  return call1903
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1901.paramTypes = [];
func1901.paramTypes.push([type_String, "kind'"]);
func1901.paramTypes.push([type_Block, "block"]);
  this.methods["kind()do"] = func1901;
  lineNumber = 799
var func1904 = function(argcv) {
  var curarg = 1;
  var var_kinds__39__ = arguments[curarg];
  curarg++;
  var var_block = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 800
  lineNumber = 1
  lineNumber = 799
  var call1905 = callmethod(var_Kinds,"new", [0]);
  var call1906 = callmethod(call1905,"kinds()do", [1, 1], var_kinds__39__, var_block);
  return call1906
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1904.paramTypes = [];
func1904.paramTypes.push([]);
func1904.paramTypes.push([type_Block, "block"]);
  this.methods["kinds()do"] = func1904;
  lineNumber = 847
  lineNumber = 1
var func1907 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 802
  return var_Kinds
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["Kinds"] = func1907;
  lineNumber = 1
  var obj1908 = Grace_allocObject();
  obj1908.outer = this;
    var reader_genjava_outer1909 = function() {
    return this.outer;
  }
  obj1908.methods["outer"] = reader_genjava_outer1909;
function obj_init_1908() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func1910 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj1911 = Grace_allocObject();
  obj1911.outer = this;
    var reader_genjava_outer1912 = function() {
    return this.outer;
  }
  obj1911.methods["outer"] = reader_genjava_outer1912;
function obj_init_1911() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 805
  lineNumber = 1
  lineNumber = 804
  var call1913 = callmethod(var_HashMap,"new", [0]);
  obj1911.data["map"] = call1913;
    var reader_genjava_map1914 = function() {
    return this.data["map"];
  }
  reader_genjava_map1914.def = true;
  obj1911.methods["map"] = reader_genjava_map1914;
  lineNumber = 805
  var bool1915 = new GraceBoolean(false)
  obj1911.data["elseBlock"] = bool1915;
    var reader_genjava_elseBlock1916 = function() {
    return this.data["elseBlock"];
  }
  obj1911.methods["elseBlock"] = reader_genjava_elseBlock1916;
  obj1911.data["elseBlock"] = bool1915;
  var writer_genjava_elseBlock1916 = function(argcv, o) {
    this.data["elseBlock"] = o;
  }
  obj1911.methods["elseBlock:="] = writer_genjava_elseBlock1916;
obj1911.mutable = true;
  lineNumber = 806
  var bool1917 = new GraceBoolean(false)
  obj1911.data["stopped"] = bool1917;
    var reader_genjava_stopped1918 = function() {
    return this.data["stopped"];
  }
  obj1911.methods["stopped"] = reader_genjava_stopped1918;
  obj1911.data["stopped"] = bool1917;
  var writer_genjava_stopped1918 = function(argcv, o) {
    this.data["stopped"] = o;
  }
  obj1911.methods["stopped:="] = writer_genjava_stopped1918;
obj1911.mutable = true;
var func1919 = function(argcv) {
  var curarg = 1;
  var var_kind__39__ = arguments[curarg];
  curarg++;
  var var_block = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 809
  lineNumber = 810
  var call1920 = callmethod(this,"map", [0]);
  var call1921 = callmethod(call1920,"put", [2], var_kind__39__, var_block);
  return this
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1919.paramTypes = [];
func1919.paramTypes.push([type_String, "kind'"]);
func1919.paramTypes.push([type_Block, "block"]);
  obj1911.methods["kind()do"] = func1919;
var func1922 = function(argcv) {
  var curarg = 1;
  var var_kinds__39__ = arguments[curarg];
  curarg++;
  var var_block = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 815
  lineNumber = 814
  lineNumber = 815
  var block1923 = Grace_allocObject();
  block1923.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1923.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1923.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1923.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1923.receiver = this;
  block1923.className = 'block<genjava:815>';
  block1923.real = function(
var_kind__39__
) {
  lineNumber = 816
  var call1924 = callmethod(this,"map", [0]);
  var call1925 = callmethod(call1924,"put", [2], var_kind__39__, var_block);
  return call1925;
};
  var call1926 = callmethod(Grace_prelude,"for()do", [1, 1], var_kinds__39__, block1923);
  lineNumber = 817
  return this
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1922.paramTypes = [];
func1922.paramTypes.push([]);
func1922.paramTypes.push([type_Block, "block"]);
  obj1911.methods["kinds()do"] = func1922;
var func1927 = function(argcv) {
  var curarg = 1;
  var var_block = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 822
  lineNumber = 1
  lineNumber = 821
  lineNumber = 822
  var call1928 = callmethod(this,"elseBlock:=", [1], var_block);
  return this
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1927.paramTypes = [];
func1927.paramTypes.push([type_Block, "block"]);
  obj1911.methods["else"] = func1927;
var func1929 = function(argcv) {
  var curarg = 1;
  var var_nodes = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 828
  var call1930 = callmethod(this,"elseBlock", [0]);
  lineNumber = 826
  var bool1931 = new GraceBoolean(false)
  var opresult1933 = callmethod(call1930, "/=", [1], bool1931);
  var var_else__39__ = opresult1933;
  lineNumber = 836
  lineNumber = 829
  lineNumber = 828
  if (Grace_isTrue(var_else__39__)) {
  var if1934 = var_nodes;
  } else {
  lineNumber = 829
  var block1935 = Grace_allocObject();
  block1935.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1935.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1935.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1935.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1935.receiver = this;
  block1935.className = 'block<genjava:829>';
  block1935.real = function(
var_node
) {
  lineNumber = 1
  lineNumber = 829
  var call1936 = callmethod(var_node,"kind", [0]);
  var call1937 = callmethod(this,"map", [0]);
  var call1938 = callmethod(call1937,"contains", [1], call1936);
  return call1938;
};
  lineNumber = 830
  lineNumber = 1
  lineNumber = 830
  lineNumber = 1
  var call1939 = callmethod(superDepth, "outer", [0]);
  var call1940 = callmethod(call1939,"outer", [0]);
  var call1941 = callmethod(call1940,"filter()with", [1, 1], var_nodes, block1935);
  var if1934 = call1941;
}
  lineNumber = 836
  var block1942 = Grace_allocObject();
  block1942.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1942.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1942.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1942.receiver = this;
  block1942.className = 'block<genjava:836>';
  block1942.real = function(
var_node
,
var___95____95__2
,
var_break
,
var_continue
) {
  lineNumber = 838
  var call1944 = callmethod(this,"stopped", [0]);
  if (Grace_isTrue(call1944)) {
  lineNumber = 832
  lineNumber = 1
  lineNumber = 832
  var call1945 = callmethod(var_break,"apply", [0]);
  var if1943 = call1945;
  } else {
  lineNumber = 836
  lineNumber = 833
  lineNumber = 1
  lineNumber = 833
  var call1947 = callmethod(var_node,"kind", [0]);
  lineNumber = 835
  var call1948 = callmethod(this,"map", [0]);
  var call1949 = callmethod(call1948,"contains", [1], call1947);
  if (Grace_isTrue(call1949)) {
  lineNumber = 834
  lineNumber = 1
  lineNumber = 834
  var call1950 = callmethod(var_node,"kind", [0]);
  lineNumber = 835
  var call1951 = callmethod(this,"map", [0]);
  var call1952 = callmethod(call1951,"get", [1], call1950);
  var call1953 = callmethod(call1952,"apply", [2], var_node, var_continue);
  var if1946 = call1953;
  } else {
  lineNumber = 836
  lineNumber = 837
  var call1954 = callmethod(this,"elseBlock", [0]);
  var call1955 = callmethod(call1954,"apply", [2], var_node, var_continue);
  var if1946 = call1955;
}
  var if1943 = if1946;
}
  return if1943;
};
  lineNumber = 839
  lineNumber = 1
  lineNumber = 839
  lineNumber = 1
  var call1956 = callmethod(superDepth, "outer", [0]);
  var call1957 = callmethod(call1956,"outer", [0]);
  var call1958 = callmethod(call1957,"map()with", [1, 1], if1934, block1942);
  return call1958
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func1929.paramTypes = [];
func1929.paramTypes.push([]);
  obj1911.methods["in"] = func1929;
var func1959 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 842
  var array1960 = new GraceList([
var_node,
]);

  lineNumber = 843
  var call1961 = callmethod(this,"in", [1], array1960);
  lineNumber = 842
  var idxres1962 = call1961.methods["[]"].call(call1961, [1], new GraceNum(1));
  return idxres1962
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1911.methods["of"] = func1959;
var func1963 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 847
  lineNumber = 1
  lineNumber = 846
  var bool1964 = new GraceBoolean(true)
  lineNumber = 847
  var call1965 = callmethod(this,"stopped:=", [1], bool1964);
  return call1965
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1911.methods["stop"] = func1963;
  superDepth = origSuperDepth;
}
obj_init_1911.apply(obj1911, []);
  return obj1911
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj1908.methods["new"] = func1910;
  superDepth = origSuperDepth;
}
obj_init_1908.apply(obj1908, []);
  var var_Kinds = obj1908;
  lineNumber = 856
  lineNumber = 851
  var string1967 = new GraceString("package");
  var string1968 = new GraceString("import");
  var string1969 = new GraceString("class");
  var string1970 = new GraceString("this");
  var string1971 = new GraceString("super");
  var string1972 = new GraceString("null");
  var string1973 = new GraceString("new");
  lineNumber = 852
  var string1974 = new GraceString("void");
  var string1975 = new GraceString("int");
  var string1976 = new GraceString("float");
  var string1977 = new GraceString("double");
  var string1978 = new GraceString("boolean");
  var string1979 = new GraceString("char");
  var string1980 = new GraceString("byte");
  lineNumber = 853
  var string1981 = new GraceString("public");
  var string1982 = new GraceString("protected");
  var string1983 = new GraceString("private");
  var string1984 = new GraceString("static");
  var string1985 = new GraceString("final");
  var string1986 = new GraceString("extends");
  lineNumber = 854
  var string1987 = new GraceString("if");
  var string1988 = new GraceString("else");
  var string1989 = new GraceString("for");
  var string1990 = new GraceString("while");
  var string1991 = new GraceString("do");
  var string1992 = new GraceString("switch");
  var string1993 = new GraceString("case");
  lineNumber = 855
  var string1994 = new GraceString("default");
  var string1995 = new GraceString("synchronized");
  var string1996 = new GraceString("volatile");
  var string1997 = new GraceString("return");
  var string1998 = new GraceString("wait");
  lineNumber = 856
  var string1999 = new GraceString("true");
  var string2000 = new GraceString("false");
  var string2001 = new GraceString("break");
  var string2002 = new GraceString("continue");
  var array1966 = new GraceList([
string1967,
string1968,
string1969,
string1970,
string1971,
string1972,
string1973,
string1974,
string1975,
string1976,
string1977,
string1978,
string1979,
string1980,
string1981,
string1982,
string1983,
string1984,
string1985,
string1986,
string1987,
string1988,
string1989,
string1990,
string1991,
string1992,
string1993,
string1994,
string1995,
string1996,
string1997,
string1998,
string1999,
string2000,
string2001,
string2002,
var_obj,
var_blk,
var_ret,
]);

  var var_keywords = array1966;
  lineNumber = 1
var func2003 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 851
  return var_keywords
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["keywords"] = func2003;
  lineNumber = 888
var func2004 = function(argcv) {
  var curarg = 1;
  var var_ident = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 861
  lineNumber = 859
  var call2006 = callmethod(var_keywords,"contains", [1], var_ident);
  if (Grace_isTrue(call2006)) {
  lineNumber = 861
  lineNumber = 860
  var string2007 = new GraceString("$");
  var opresult2009 = callmethod(string2007, "++", [1], var_ident);
  return opresult2009
  var if2005 = undefined;
}
  lineNumber = 866
  lineNumber = 868
  lineNumber = 864
  var idxres2011 = var_ident.methods["[]"].call(var_ident, [1], new GraceNum(1));
  var string2012 = new GraceString("_");
  var opresult2014 = callmethod(idxres2011, "==", [1], string2012);
  if (Grace_isTrue(opresult2014)) {
  lineNumber = 866
  lineNumber = 865
  return var_ident
  var if2010 = undefined;
}
  lineNumber = 888
  lineNumber = 868
  var idxres2016 = var_ident.methods["[]"].call(var_ident, [1], new GraceNum(1));
  var call2017 = callmethod(var_unicode,"isLetter", [1], idxres2016);
  if (Grace_isTrue(call2017)) {
  lineNumber = 869
  var string2019 = new GraceString("$");
  var string2020 = new GraceString("_");
  var array2018 = new GraceList([
string2019,
string2020,
]);

  var var_ignore = array2018;
  lineNumber = 872
  lineNumber = 870
  var bool2021 = new GraceBoolean(false)
  var var_inParens = bool2021;
  lineNumber = 884
  lineNumber = 872
  lineNumber = 884
  var block2022 = Grace_allocObject();
  block2022.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2022.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2022.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2022.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2022.receiver = this;
  block2022.className = 'block<genjava:884>';
  block2022.real = function(
var_c
) {
  lineNumber = 873
  if (Grace_isTrue(var_inParens)) {
  lineNumber = 875
  lineNumber = 874
  var string2024 = new GraceString(")");
  var opresult2026 = callmethod(var_c, "/=", [1], string2024);
  var_inParens = opresult2026;
  lineNumber = 875
  var string2027 = new GraceString("");
  var if2023 = string2027;
  } else {
  lineNumber = 884
  lineNumber = 879
  lineNumber = 876
  var string2029 = new GraceString("(");
  var opresult2031 = callmethod(var_c, "==", [1], string2029);
  if (Grace_isTrue(opresult2031)) {
  lineNumber = 878
  lineNumber = 877
  var bool2032 = new GraceBoolean(true)
  var_inParens = bool2032;
  lineNumber = 878
  var string2033 = new GraceString("$");
  var if2028 = string2033;
  } else {
  lineNumber = 884
  lineNumber = 881
  lineNumber = 879
  var string2035 = new GraceString("'");
  var opresult2037 = callmethod(var_c, "==", [1], string2035);
  if (Grace_isTrue(opresult2037)) {
  lineNumber = 880
  var string2038 = new GraceString("_");
  var if2034 = string2038;
  } else {
  lineNumber = 884
  lineNumber = 881
  lineNumber = 883
  var call2040 = callmethod(this,"isValidIdentifierCharacter", [1], var_c);
  if (Grace_isTrue(call2040)) {
  lineNumber = 882
  var if2039 = var_c;
  } else {
  lineNumber = 884
  var string2041 = new GraceString("$");
  lineNumber = 1
  lineNumber = 884
  var call2042 = callmethod(var_c,"ord", [0]);
  var opresult2044 = callmethod(string2041, "++", [1], call2042);
  var string2045 = new GraceString("");
  var opresult2047 = callmethod(opresult2044, "++", [1], string2045);
  var if2039 = opresult2047;
}
  var if2034 = if2039;
}
  var if2028 = if2034;
}
  var if2023 = if2028;
}
  return if2023;
};
  lineNumber = 886
  var call2048 = callmethod(this,"map()with", [1, 1], var_ident, block2022);
  lineNumber = 887
  var call2049 = callmethod(this,"join", [1], call2048);
  var if2015 = call2049;
  } else {
  lineNumber = 888
  var string2050 = new GraceString("bin");
  var block2051 = Grace_allocObject();
  block2051.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2051.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2051.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2051.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2051.receiver = this;
  block2051.className = 'block<genjava:888>';
  block2051.real = function(
var_c
) {
  var string2052 = new GraceString("$");
  lineNumber = 1
  lineNumber = 888
  var call2053 = callmethod(var_c,"ord", [0]);
  var opresult2055 = callmethod(string2052, "++", [1], call2053);
  var string2056 = new GraceString("");
  var opresult2058 = callmethod(opresult2055, "++", [1], string2056);
  return opresult2058;
};
  var call2059 = callmethod(this,"map()with", [1, 1], var_ident, block2051);
  lineNumber = 889
  var call2060 = callmethod(this,"join", [1], call2059);
  var opresult2062 = callmethod(string2050, "++", [1], call2060);
  var if2015 = opresult2062;
}
  return if2015
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func2004.paramTypes = [];
func2004.paramTypes.push([type_String, "ident"]);
  this.methods["escape"] = func2004;
  lineNumber = 893
var func2063 = function(argcv) {
  var curarg = 1;
  var var_c = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call2064 = callmethod(var_unicode,"isLetter", [1], var_c);
  var call2065 = callmethod(var_unicode,"isNumber", [1], var_c);
  var opresult2067 = callmethod(call2064, "|", [1], call2065);
  var string2068 = new GraceString("$");
  var opresult2070 = callmethod(var_c, "==", [1], string2068);
  var opresult2072 = callmethod(opresult2067, "|", [1], opresult2070);
  var string2073 = new GraceString("_");
  var opresult2075 = callmethod(var_c, "==", [1], string2073);
  var opresult2077 = callmethod(opresult2072, "|", [1], opresult2075);
  return opresult2077
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func2063.paramTypes = [];
func2063.paramTypes.push([type_String, "c"]);
  this.methods["isValidIdentifierCharacter"] = func2063;
  lineNumber = 901
var func2078 = function(argcv) {
  var curarg = 1;
  var var_value__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj2079 = Grace_allocObject();
  obj2079.outer = this;
    var reader_genjava_outer2080 = function() {
    return this.outer;
  }
  obj2079.methods["outer"] = reader_genjava_outer2080;
function obj_init_2079() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 899
  obj2079.data["value"] = var_value__39__;
    var reader_genjava_value2081 = function() {
    return this.data["value"];
  }
  reader_genjava_value2081.def = true;
  obj2079.methods["value"] = reader_genjava_value2081;
  lineNumber = 900
  var string2082 = new GraceString("literal");
  obj2079.data["kind"] = string2082;
    var reader_genjava_kind2083 = function() {
    return this.data["kind"];
  }
  reader_genjava_kind2083.def = true;
  obj2079.methods["kind"] = reader_genjava_kind2083;
  superDepth = origSuperDepth;
}
obj_init_2079.apply(obj2079, []);
  return obj2079
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func2078.paramTypes = [];
func2078.paramTypes.push([type_String, "value'"]);
  this.methods["literal"] = func2078;
  lineNumber = 921
var func2084 = function(argcv) {
  var curarg = 1;
  var var_list = arguments[curarg];
  curarg++;
  var var_with = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 910
  var array2085 = new GraceList([
]);

  var var_list__39__ = array2085;
  lineNumber = 911
  lineNumber = 910
  var var_index = new GraceNum(1);
  lineNumber = 911
  var block2086 = Grace_allocObject();
  block2086.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2086.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2086.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2086.receiver = this;
  block2086.className = 'block<genjava:911>';
  block2086.real = function(
) {
  throw new ReturnException(var_list__39__, returnTarget);
  return undefined;
};
  var var_break = block2086;
  lineNumber = 919
  lineNumber = 912
  lineNumber = 919
  var block2087 = Grace_allocObject();
  block2087.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2087.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2087.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2087.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2087.receiver = this;
  block2087.className = 'block<genjava:919>';
  block2087.real = function(
var_e
) {
  lineNumber = 914
  lineNumber = 913
  var bool2088 = new GraceBoolean(true)
  var var_add = bool2088;
  lineNumber = 914
  var block2089 = Grace_allocObject();
  block2089.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2089.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2089.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2089.receiver = this;
  block2089.className = 'block<genjava:914>';
  block2089.real = function(
) {
  var bool2090 = new GraceBoolean(false)
  var_add = bool2090;
  return bool2090;
};
  var call2091 = callmethod(var_with,"apply", [4], var_e, var_index, var_break, block2089);
  var var_result = call2091;
  lineNumber = 916
  lineNumber = 915
  if (Grace_isTrue(var_add)) {
  lineNumber = 916
  var call2093 = callmethod(var_list__39__,"push", [1], var_result);
  var if2092 = call2093;
}
  lineNumber = 919
  lineNumber = 918
  var opresult2095 = callmethod(var_index, "+", [1], new GraceNum(1));
  var_index = opresult2095;
  return opresult2095;
};
  var call2096 = callmethod(Grace_prelude,"for()do", [1, 1], var_list, block2087);
  lineNumber = 921
  return var_list__39__
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func2084.paramTypes = [];
func2084.paramTypes.push([type_ImmutableIndexedCollection, "list"]);
func2084.paramTypes.push([type_Block, "with"]);
  this.methods["map()with"] = func2084;
  lineNumber = 934
var func2097 = function(argcv) {
  var curarg = 1;
  var var_list = arguments[curarg];
  curarg++;
  var var_choice = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 927
  var array2098 = new GraceList([
]);

  var var_list__39__ = array2098;
  var block2099 = Grace_allocObject();
  block2099.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2099.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2099.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2099.receiver = this;
  block2099.className = 'block<genjava:927>';
  block2099.real = function(
) {
  throw new ReturnException(var_list__39__, returnTarget);
  return undefined;
};
  var var_break = block2099;
  lineNumber = 930
  lineNumber = 928
  lineNumber = 930
  var block2100 = Grace_allocObject();
  block2100.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2100.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2100.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2100.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2100.receiver = this;
  block2100.className = 'block<genjava:930>';
  block2100.real = function(
var_e
) {
  lineNumber = 929
  var call2102 = callmethod(var_choice,"apply", [2], var_e, var_break);
  if (Grace_isTrue(call2102)) {
  lineNumber = 930
  var call2103 = callmethod(var_list__39__,"push", [1], var_e);
  var if2101 = call2103;
}
  return if2101;
};
  var call2104 = callmethod(Grace_prelude,"for()do", [1, 1], var_list, block2100);
  lineNumber = 934
  return var_list__39__
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func2097.paramTypes = [];
func2097.paramTypes.push([]);
func2097.paramTypes.push([type_Block, "choice"]);
  this.methods["filter()with"] = func2097;
  lineNumber = 952
var func2105 = function(argcv) {
  var curarg = 1;
  var var_list = arguments[curarg];
  curarg++;
  var var_with = arguments[curarg];
  curarg++;
  var var_filter = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 941
  var array2106 = new GraceList([
]);

  var var_list__39__ = array2106;
  lineNumber = 942
  lineNumber = 941
  var var_index = new GraceNum(1);
  lineNumber = 942
  var block2107 = Grace_allocObject();
  block2107.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2107.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2107.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2107.receiver = this;
  block2107.className = 'block<genjava:942>';
  block2107.real = function(
) {
  throw new ReturnException(var_list__39__, returnTarget);
  return undefined;
};
  var var_break = block2107;
  lineNumber = 950
  lineNumber = 943
  lineNumber = 950
  var block2108 = Grace_allocObject();
  block2108.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2108.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2108.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2108.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2108.receiver = this;
  block2108.className = 'block<genjava:950>';
  block2108.real = function(
var_e
) {
  lineNumber = 945
  lineNumber = 944
  var bool2109 = new GraceBoolean(true)
  var var_add = bool2109;
  lineNumber = 945
  var block2110 = Grace_allocObject();
  block2110.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2110.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2110.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2110.receiver = this;
  block2110.className = 'block<genjava:945>';
  block2110.real = function(
) {
  var bool2111 = new GraceBoolean(false)
  var_add = bool2111;
  return bool2111;
};
  var call2112 = callmethod(var_with,"apply", [4], var_e, var_index, var_break, block2110);
  var var_result = call2112;
  lineNumber = 947
  lineNumber = 946
  var call2114 = callmethod(var_filter,"apply", [1], var_result);
  var opresult2116 = callmethod(var_add, "&", [1], call2114);
  if (Grace_isTrue(opresult2116)) {
  lineNumber = 947
  var call2117 = callmethod(var_list__39__,"push", [1], var_result);
  var if2113 = call2117;
}
  lineNumber = 950
  lineNumber = 949
  var opresult2119 = callmethod(var_index, "+", [1], new GraceNum(1));
  var_index = opresult2119;
  return opresult2119;
};
  var call2120 = callmethod(Grace_prelude,"for()do", [1, 1], var_list, block2108);
  lineNumber = 952
  return var_list__39__
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func2105.paramTypes = [];
func2105.paramTypes.push([]);
func2105.paramTypes.push([type_Block, "with"]);
func2105.paramTypes.push([type_Block, "filter"]);
  this.methods["map()with()filter"] = func2105;
  lineNumber = 957
var func2121 = function(argcv) {
  var curarg = 1;
  var var_list = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var string2122 = new GraceString("");
  lineNumber = 958
  var call2123 = callmethod(this,"join()separatedBy", [1, 1], var_list, string2122);
  return call2123
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func2121.paramTypes = [];
func2121.paramTypes.push([type_ImmutableIndexedCollection, "list"]);
  this.methods["join"] = func2121;
  lineNumber = 972
var func2124 = function(argcv) {
  var curarg = 1;
  var var_list = arguments[curarg];
  curarg++;
  var var_by = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 963
  lineNumber = 962
  var bool2125 = new GraceBoolean(false)
  var var_once = bool2125;
  lineNumber = 964
  lineNumber = 963
  var string2126 = new GraceString("");
  var var_string = string2126;
  lineNumber = 970
  lineNumber = 964
  lineNumber = 970
  var block2127 = Grace_allocObject();
  block2127.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2127.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2127.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2127.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2127.receiver = this;
  block2127.className = 'block<genjava:970>';
  block2127.real = function(
var_val
) {
  lineNumber = 967
  lineNumber = 965
  if (Grace_isTrue(var_once)) {
  lineNumber = 967
  lineNumber = 966
  var opresult2130 = callmethod(var_string, "++", [1], var_by);
  var_string = opresult2130;
  var if2128 = opresult2130;
}
  lineNumber = 969
  lineNumber = 968
  var opresult2132 = callmethod(var_string, "++", [1], var_val);
  var_string = opresult2132;
  lineNumber = 970
  lineNumber = 969
  var bool2133 = new GraceBoolean(true)
  var_once = bool2133;
  return bool2133;
};
  var call2134 = callmethod(Grace_prelude,"for()do", [1, 1], var_list, block2127);
  lineNumber = 972
  return var_string
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func2124.paramTypes = [];
func2124.paramTypes.push([type_ImmutableIndexedCollection, "list"]);
func2124.paramTypes.push([type_String, "by"]);
  this.methods["join()separatedBy"] = func2124;
  lineNumber = 983
var func2135 = function(argcv) {
  var curarg = 1;
  var var_list = arguments[curarg];
  curarg++;
  var var_attach = new GraceList(Array.prototype.slice.call(arguments, curarg, curarg + argcv[0] - 1));
  curarg += argcv[0] - 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 979
  lineNumber = 977
  lineNumber = 979
  var block2136 = Grace_allocObject();
  block2136.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2136.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2136.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2136.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2136.receiver = this;
  block2136.className = 'block<genjava:979>';
  block2136.real = function(
var_list__39__
) {
  lineNumber = 978
  lineNumber = 979
  var block2137 = Grace_allocObject();
  block2137.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2137.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2137.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2137.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2137.receiver = this;
  block2137.className = 'block<genjava:979>';
  block2137.real = function(
var_el
) {
  var call2138 = callmethod(var_list,"push", [1], var_el);
  return call2138;
};
  var call2139 = callmethod(Grace_prelude,"for()do", [1, 1], var_list__39__, block2137);
  return call2139;
};
  var call2140 = callmethod(Grace_prelude,"for()do", [1, 1], var_attach, block2136);
  lineNumber = 983
  return var_list
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func2135.paramTypes = [];
func2135.paramTypes.push([]);
  this.methods["concat"] = func2135;
  lineNumber = 990
var func2141 = function(argcv) {
  var curarg = 1;
  var var_condition = arguments[curarg];
  curarg++;
  var var_result = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 988
  if (Grace_isTrue(var_condition)) {
  lineNumber = 989
  var call2144 = callmethod(var_String,"match", [1], var_result);
  if (Grace_isTrue(call2144)) {
  var if2143 = var_result;
  } else {
  lineNumber = 1
  lineNumber = 989
  var call2145 = callmethod(var_result,"apply", [0]);
  var if2143 = call2145;
}
  var if2142 = if2143;
  } else {
  lineNumber = 990
  var string2146 = new GraceString("");
  var if2142 = string2146;
}
  return if2142
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
func2141.paramTypes = [];
func2141.paramTypes.push([type_Boolean, "condition"]);
func2141.paramTypes.push([]);
  this.methods["strIf()then"] = func2141;
  return this;
}
function gracecode_genjs() {
  lineNumber = 2
// Import of io
  var var_io = do_import("io", gracecode_io);
  lineNumber = 3
// Import of sys
  var var_sys = do_import("sys", gracecode_sys);
  lineNumber = 4
// Import of ast
  var var_ast = do_import("ast", gracecode_ast);
  lineNumber = 6
// Import of util
  var var_util = do_import("util", gracecode_util);
  lineNumber = 7
  var var_tmp;
  lineNumber = 1
var func0 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 6
  return var_tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tmp"] = func0;
  lineNumber = 1
var func1 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_tmp = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tmp:="] = func1;
  lineNumber = 8
  lineNumber = 7
  var var_verbosity = new GraceNum(30);
  lineNumber = 1
var func2 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 7
  return var_verbosity
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["verbosity"] = func2;
  lineNumber = 1
var func3 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_verbosity = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["verbosity:="] = func3;
  lineNumber = 9
  lineNumber = 8
  var var_pad1 = new GraceNum(1);
  lineNumber = 1
var func4 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 8
  return var_pad1
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pad1"] = func4;
  lineNumber = 1
var func5 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_pad1 = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pad1:="] = func5;
  lineNumber = 10
  lineNumber = 9
  var var_auto__95__count = new GraceNum(0);
  lineNumber = 1
var func6 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 9
  return var_auto__95__count
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["auto_count"] = func6;
  lineNumber = 1
var func7 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_auto__95__count = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["auto_count:="] = func7;
  lineNumber = 11
  var array8 = new GraceList([
]);

  var var_constants = array8;
  lineNumber = 1
var func9 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 10
  return var_constants
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["constants"] = func9;
  lineNumber = 1
var func10 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_constants = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["constants:="] = func10;
  lineNumber = 12
  var array11 = new GraceList([
]);

  var var_output = array11;
  lineNumber = 1
var func12 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 11
  return var_output
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["output"] = func12;
  lineNumber = 1
var func13 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_output = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["output:="] = func13;
  lineNumber = 13
  var array14 = new GraceList([
]);

  var var_usedvars = array14;
  lineNumber = 1
var func15 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 12
  return var_usedvars
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["usedvars"] = func15;
  lineNumber = 1
var func16 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_usedvars = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["usedvars:="] = func16;
  lineNumber = 14
  var array17 = new GraceList([
]);

  var var_declaredvars = array17;
  lineNumber = 1
var func18 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 13
  return var_declaredvars
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["declaredvars"] = func18;
  lineNumber = 1
var func19 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_declaredvars = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["declaredvars:="] = func19;
  lineNumber = 15
  lineNumber = 14
  var string20 = new GraceString("entry");
  var var_bblock = string20;
  lineNumber = 1
var func21 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 14
  return var_bblock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bblock"] = func21;
  lineNumber = 1
var func22 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_bblock = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bblock:="] = func22;
  lineNumber = 16
  lineNumber = 15
  var var_linenum = new GraceNum(0);
  lineNumber = 1
var func23 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 15
  return var_linenum
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["linenum"] = func23;
  lineNumber = 1
var func24 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_linenum = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["linenum:="] = func24;
  lineNumber = 17
  var array25 = new GraceList([
]);

  var var_modules = array25;
  lineNumber = 1
var func26 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 16
  return var_modules
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modules"] = func26;
  lineNumber = 1
var func27 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_modules = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modules:="] = func27;
  lineNumber = 18
  var array28 = new GraceList([
]);

  var var_staticmodules = array28;
  lineNumber = 1
var func29 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 17
  return var_staticmodules
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["staticmodules"] = func29;
  lineNumber = 1
var func30 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_staticmodules = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["staticmodules:="] = func30;
  lineNumber = 19
  var array31 = new GraceList([
]);

  var var_values = array31;
  lineNumber = 1
var func32 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 18
  return var_values
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["values"] = func32;
  lineNumber = 1
var func33 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_values = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["values:="] = func33;
  lineNumber = 20
  var var_outfile;
  lineNumber = 1
var func34 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 19
  return var_outfile
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outfile"] = func34;
  lineNumber = 1
var func35 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_outfile = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outfile:="] = func35;
  lineNumber = 21
  lineNumber = 20
  var string36 = new GraceString("main");
  var var_modname = string36;
  lineNumber = 1
var func37 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 20
  return var_modname
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modname"] = func37;
  lineNumber = 1
var func38 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_modname = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modname:="] = func38;
  lineNumber = 22
  lineNumber = 21
  var string39 = new GraceString("build");
  var var_runmode = string39;
  lineNumber = 1
var func40 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 21
  return var_runmode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["runmode"] = func40;
  lineNumber = 1
var func41 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_runmode = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["runmode:="] = func41;
  lineNumber = 23
  lineNumber = 22
  var string42 = new GraceString("bc");
  var var_buildtype = string42;
  lineNumber = 1
var func43 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 22
  return var_buildtype
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["buildtype"] = func43;
  lineNumber = 1
var func44 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_buildtype = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["buildtype:="] = func44;
  lineNumber = 24
  lineNumber = 23
  var string45 = new GraceString("gracelib.o");
  var var_gracelibPath = string45;
  lineNumber = 1
var func46 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 23
  return var_gracelibPath
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["gracelibPath"] = func46;
  lineNumber = 1
var func47 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_gracelibPath = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["gracelibPath:="] = func47;
  lineNumber = 25
  lineNumber = 24
  var bool48 = new GraceBoolean(false)
  var var_inBlock = bool48;
  lineNumber = 1
var func49 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 24
  return var_inBlock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["inBlock"] = func49;
  lineNumber = 1
var func50 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_inBlock = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["inBlock:="] = func50;
  lineNumber = 26
  lineNumber = 25
  var var_compilationDepth = new GraceNum(0);
  lineNumber = 1
var func51 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 25
  return var_compilationDepth
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilationDepth"] = func51;
  lineNumber = 1
var func52 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_compilationDepth = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilationDepth:="] = func52;
  lineNumber = 28
  lineNumber = 1
  lineNumber = 26
  var call53 = callmethod(var_HashMap,"new", [0]);
  var var_topLevelTypes = call53;
  lineNumber = 1
var func54 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 26
  return var_topLevelTypes
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["topLevelTypes"] = func54;
  lineNumber = 29
var func55 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call56 = callmethod(var_output,"push", [1], var_s);
  return call56
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["out"] = func55;
  lineNumber = 32
var func57 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call58 = callmethod(var_util,"outprint", [1], var_s);
  return call58
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outprint"] = func57;
  lineNumber = 35
var func59 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call60 = callmethod(var_util,"log_verbose", [1], var_s);
  return call60
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["log_verbose"] = func59;
  lineNumber = 48
var func61 = function(argcv) {
  var curarg = 1;
  var var_vn = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 39
  lineNumber = 38
  var string62 = new GraceString("");
  var var_nm = string62;
  lineNumber = 46
  lineNumber = 39
  lineNumber = 46
  var block63 = Grace_allocObject();
  block63.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block63.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block63.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block63.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block63.receiver = this;
  block63.className = 'block<genjs:46>';
  block63.real = function(
var_c
) {
  lineNumber = 41
  lineNumber = 1
  lineNumber = 40
  var call64 = callmethod(var_c,"ord", [0]);
  var var_o = call64;
  lineNumber = 46
  lineNumber = 47
  lineNumber = 41
  var opresult67 = callmethod(var_o, ">=", [1], new GraceNum(97));
  lineNumber = 47
  lineNumber = 41
  var opresult69 = callmethod(var_o, "<=", [1], new GraceNum(122));
  var opresult71 = callmethod(opresult67, "&", [1], opresult69);
  lineNumber = 47
  lineNumber = 41
  var opresult73 = callmethod(var_o, ">=", [1], new GraceNum(65));
  lineNumber = 47
  lineNumber = 41
  var opresult75 = callmethod(var_o, "<=", [1], new GraceNum(90));
  var opresult77 = callmethod(opresult73, "&", [1], opresult75);
  var opresult79 = callmethod(opresult71, "|", [1], opresult77);
  lineNumber = 47
  lineNumber = 42
  var opresult81 = callmethod(var_o, ">=", [1], new GraceNum(48));
  lineNumber = 47
  lineNumber = 42
  var opresult83 = callmethod(var_o, "<=", [1], new GraceNum(57));
  var opresult85 = callmethod(opresult81, "&", [1], opresult83);
  var opresult87 = callmethod(opresult79, "|", [1], opresult85);
  if (Grace_isTrue(opresult87)) {
  lineNumber = 44
  lineNumber = 43
  var opresult89 = callmethod(var_nm, "++", [1], var_c);
  var_nm = opresult89;
  var if65 = opresult89;
  } else {
  lineNumber = 46
  lineNumber = 45
  var string90 = new GraceString("__");
  var opresult92 = callmethod(var_nm, "++", [1], string90);
  var opresult94 = callmethod(opresult92, "++", [1], var_o);
  var string95 = new GraceString("__");
  var opresult97 = callmethod(opresult94, "++", [1], string95);
  var_nm = opresult97;
  var if65 = opresult97;
}
  return if65;
};
  var call98 = callmethod(Grace_prelude,"for()do", [1, 1], var_vn, block63);
  lineNumber = 48
  return var_nm
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["escapeident"] = func61;
  lineNumber = 51
var func99 = function(argcv) {
  var curarg = 1;
  var var_vn = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var string100 = new GraceString("var_");
  lineNumber = 52
  var call101 = callmethod(this,"escapeident", [1], var_vn);
  var opresult103 = callmethod(string100, "++", [1], call101);
  return opresult103
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["varf"] = func99;
  lineNumber = 55
var func104 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 54
  var string105 = new GraceString("%");
  var opresult107 = callmethod(string105, "++", [1], var_s);
  var_bblock = opresult107;
  lineNumber = 55
  var string108 = new GraceString(":");
  var opresult110 = callmethod(var_s, "++", [1], string108);
  lineNumber = 56
  var call111 = callmethod(this,"out", [1], opresult110);
  return call111
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["beginblock"] = func104;
  lineNumber = 72
var func112 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 59
  lineNumber = 58
  var var_myc = var_auto__95__count;
  lineNumber = 60
  lineNumber = 59
  var opresult114 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult114;
  lineNumber = 61
  var var_r;
  lineNumber = 62
  var array115 = new GraceList([
]);

  var var_vals = array115;
  lineNumber = 64
  lineNumber = 62
  lineNumber = 1
  lineNumber = 62
  var call116 = callmethod(var_o,"value", [0]);
  lineNumber = 64
  var block117 = Grace_allocObject();
  block117.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block117.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block117.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block117.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block117.receiver = this;
  block117.className = 'block<genjs:64>';
  block117.real = function(
var_a
) {
  lineNumber = 63
  lineNumber = 64
  var call118 = callmethod(this,"compilenode", [1], var_a);
  var_r = call118;
  var call119 = callmethod(var_vals,"push", [1], var_r);
  return call119;
};
  var call120 = callmethod(Grace_prelude,"for()do", [1, 1], call116, block117);
  lineNumber = 66
  var string121 = new GraceString("  var array");
  var opresult123 = callmethod(string121, "++", [1], var_myc);
  var string124 = new GraceString(" = new GraceList([");
  var opresult126 = callmethod(opresult123, "++", [1], string124);
  lineNumber = 67
  var call127 = callmethod(this,"out", [1], opresult126);
  lineNumber = 68
  lineNumber = 67
  lineNumber = 68
  var block128 = Grace_allocObject();
  block128.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block128.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block128.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block128.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block128.receiver = this;
  block128.className = 'block<genjs:68>';
  block128.real = function(
var_v
) {
  var string129 = new GraceString(",");
  var opresult131 = callmethod(var_v, "++", [1], string129);
  lineNumber = 69
  var call132 = callmethod(this,"out", [1], opresult131);
  return call132;
};
  var call133 = callmethod(Grace_prelude,"for()do", [1, 1], var_vals, block128);
  lineNumber = 70
  var string134 = new GraceString("]);\n");
  lineNumber = 71
  var call135 = callmethod(this,"out", [1], string134);
  lineNumber = 72
  lineNumber = 1
  lineNumber = 72
  lineNumber = 71
  var string136 = new GraceString("array");
  var opresult138 = callmethod(string136, "++", [1], var_myc);
  var call139 = callmethod(var_o,"register:=", [1], opresult138);
  return call139
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilearray"] = func112;
  lineNumber = 78
var func140 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 75
  lineNumber = 1
  lineNumber = 75
  var call142 = callmethod(var_o,"value", [0]);
  lineNumber = 1
  lineNumber = 75
  var call143 = callmethod(var_ast,"callWithPart", [0]);
  var call144 = callmethod(call143,"new", [1], call142);
  var array141 = new GraceList([
call144,
]);

  lineNumber = 76
  lineNumber = 1
  lineNumber = 75
  var call145 = callmethod(var_ast,"callNode", [0]);
  var call146 = callmethod(call145,"new", [2], var_o, array141);
  var var_c = call146;
  lineNumber = 76
  lineNumber = 77
  var call147 = callmethod(this,"compilenode", [1], var_c);
  var var_r = call147;
  lineNumber = 78
  lineNumber = 1
  lineNumber = 77
  var call148 = callmethod(var_o,"register:=", [1], var_r);
  return call148
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilemember"] = func140;
  lineNumber = 89
var func149 = function(argcv) {
  var curarg = 1;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_outerRef = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 81
  lineNumber = 80
  var var_myc = var_auto__95__count;
  lineNumber = 82
  lineNumber = 81
  var opresult151 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult151;
  lineNumber = 82
  lineNumber = 1
  lineNumber = 82
  var string152 = new GraceString("outer");
  var call153 = callmethod(string152,"_escape", [0]);
  var var_nm = call153;
  lineNumber = 83
  var string154 = new GraceString("outer");
  lineNumber = 84
  var call155 = callmethod(this,"escapeident", [1], string154);
  var var_nmi = call155;
  var string156 = new GraceString("  ");
  var opresult158 = callmethod(string156, "++", [1], var_selfr);
  var string159 = new GraceString(".outer = ");
  var opresult161 = callmethod(opresult158, "++", [1], string159);
  var opresult163 = callmethod(opresult161, "++", [1], var_outerRef);
  var string164 = new GraceString(";");
  var opresult166 = callmethod(opresult163, "++", [1], string164);
  lineNumber = 85
  var call167 = callmethod(this,"out", [1], opresult166);
  var string168 = new GraceString("    var reader_");
  var opresult170 = callmethod(string168, "++", [1], var_modname);
  var string171 = new GraceString("_");
  var opresult173 = callmethod(opresult170, "++", [1], string171);
  var opresult175 = callmethod(opresult173, "++", [1], var_nmi);
  var opresult177 = callmethod(opresult175, "++", [1], var_myc);
  var string178 = new GraceString(" = function() {");
  var opresult180 = callmethod(opresult177, "++", [1], string178);
  lineNumber = 86
  var call181 = callmethod(this,"out", [1], opresult180);
  var string182 = new GraceString("    return this.outer;");
  lineNumber = 87
  var call183 = callmethod(this,"out", [1], string182);
  var string184 = new GraceString("  }");
  lineNumber = 88
  var call185 = callmethod(this,"out", [1], string184);
  lineNumber = 89
  lineNumber = 88
  var string186 = new GraceString("  ");
  var opresult188 = callmethod(string186, "++", [1], var_selfr);
  var string189 = new GraceString(".methods[\"");
  var opresult191 = callmethod(opresult188, "++", [1], string189);
  var opresult193 = callmethod(opresult191, "++", [1], var_nm);
  var string194 = new GraceString("\"] = reader_");
  var opresult196 = callmethod(opresult193, "++", [1], string194);
  var opresult198 = callmethod(opresult196, "++", [1], var_modname);
  lineNumber = 89
  var string199 = new GraceString("_");
  var opresult201 = callmethod(opresult198, "++", [1], string199);
  var opresult203 = callmethod(opresult201, "++", [1], var_nmi);
  var opresult205 = callmethod(opresult203, "++", [1], var_myc);
  var string206 = new GraceString(";");
  var opresult208 = callmethod(opresult205, "++", [1], string206);
  lineNumber = 90
  var call209 = callmethod(this,"out", [1], opresult208);
  return call209
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjouter"] = func149;
  lineNumber = 111
var func210 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 93
  lineNumber = 92
  var string211 = new GraceString("undefined");
  var var_val = string211;
  lineNumber = 98
  lineNumber = 101
  lineNumber = 93
  var bool213 = new GraceBoolean(false)
  lineNumber = 101
  lineNumber = 1
  lineNumber = 93
  var call214 = callmethod(var_o,"value", [0]);
  var opresult216 = callmethod(bool213, "!=", [1], call214);
  if (Grace_isTrue(opresult216)) {
  lineNumber = 98
  lineNumber = 100
  lineNumber = 1
  lineNumber = 100
  lineNumber = 1
  lineNumber = 94
  var call218 = callmethod(var_o,"value", [0]);
  var call219 = callmethod(call218,"kind", [0]);
  var string220 = new GraceString("object");
  var opresult222 = callmethod(call219, "==", [1], string220);
  if (Grace_isTrue(opresult222)) {
  lineNumber = 95
  lineNumber = 1
  lineNumber = 95
  var call223 = callmethod(var_o,"value", [0]);
  lineNumber = 96
  var call224 = callmethod(this,"compileobject", [2], call223, var_selfr);
  lineNumber = 97
  lineNumber = 1
  lineNumber = 97
  lineNumber = 1
  lineNumber = 96
  var call225 = callmethod(var_o,"value", [0]);
  var call226 = callmethod(call225,"register", [0]);
  var_val = call226;
  var if217 = call226;
  } else {
  lineNumber = 98
  lineNumber = 1
  lineNumber = 98
  var call227 = callmethod(var_o,"value", [0]);
  lineNumber = 99
  var call228 = callmethod(this,"compilenode", [1], call227);
  var_val = call228;
  var if217 = call228;
}
  var if212 = if217;
}
  lineNumber = 102
  lineNumber = 101
  var var_myc = var_auto__95__count;
  lineNumber = 103
  lineNumber = 102
  var opresult230 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult230;
  lineNumber = 103
  lineNumber = 1
  lineNumber = 103
  lineNumber = 1
  lineNumber = 103
  lineNumber = 1
  lineNumber = 103
  var call231 = callmethod(var_o,"name", [0]);
  var call232 = callmethod(call231,"value", [0]);
  var call233 = callmethod(call232,"_escape", [0]);
  var var_nm = call233;
  lineNumber = 104
  lineNumber = 1
  lineNumber = 104
  lineNumber = 1
  lineNumber = 104
  var call234 = callmethod(var_o,"name", [0]);
  var call235 = callmethod(call234,"value", [0]);
  lineNumber = 105
  var call236 = callmethod(this,"escapeident", [1], call235);
  var var_nmi = call236;
  var string237 = new GraceString("  ");
  var opresult239 = callmethod(string237, "++", [1], var_selfr);
  var string240 = new GraceString(".data[\"");
  var opresult242 = callmethod(opresult239, "++", [1], string240);
  var opresult244 = callmethod(opresult242, "++", [1], var_nm);
  var string245 = new GraceString("\"] = ");
  var opresult247 = callmethod(opresult244, "++", [1], string245);
  var opresult249 = callmethod(opresult247, "++", [1], var_val);
  var string250 = new GraceString(";");
  var opresult252 = callmethod(opresult249, "++", [1], string250);
  lineNumber = 106
  var call253 = callmethod(this,"out", [1], opresult252);
  var string254 = new GraceString("    var reader_");
  var opresult256 = callmethod(string254, "++", [1], var_modname);
  var string257 = new GraceString("_");
  var opresult259 = callmethod(opresult256, "++", [1], string257);
  var opresult261 = callmethod(opresult259, "++", [1], var_nmi);
  var opresult263 = callmethod(opresult261, "++", [1], var_myc);
  var string264 = new GraceString(" = function() {");
  var opresult266 = callmethod(opresult263, "++", [1], string264);
  lineNumber = 107
  var call267 = callmethod(this,"out", [1], opresult266);
  var string268 = new GraceString("    return this.data[\"");
  var opresult270 = callmethod(string268, "++", [1], var_nm);
  var string271 = new GraceString("\"];");
  var opresult273 = callmethod(opresult270, "++", [1], string271);
  lineNumber = 108
  var call274 = callmethod(this,"out", [1], opresult273);
  var string275 = new GraceString("  }");
  lineNumber = 109
  var call276 = callmethod(this,"out", [1], string275);
  var string277 = new GraceString("  reader_");
  var opresult279 = callmethod(string277, "++", [1], var_modname);
  var string280 = new GraceString("_");
  var opresult282 = callmethod(opresult279, "++", [1], string280);
  var opresult284 = callmethod(opresult282, "++", [1], var_nmi);
  var string285 = new GraceString("");
  var opresult287 = callmethod(opresult284, "++", [1], string285);
  var opresult289 = callmethod(opresult287, "++", [1], var_myc);
  var string290 = new GraceString(".def = true;");
  var opresult292 = callmethod(opresult289, "++", [1], string290);
  lineNumber = 110
  var call293 = callmethod(this,"out", [1], opresult292);
  lineNumber = 111
  lineNumber = 110
  var string294 = new GraceString("  ");
  var opresult296 = callmethod(string294, "++", [1], var_selfr);
  var string297 = new GraceString(".methods[\"");
  var opresult299 = callmethod(opresult296, "++", [1], string297);
  var opresult301 = callmethod(opresult299, "++", [1], var_nm);
  var string302 = new GraceString("\"] = reader_");
  var opresult304 = callmethod(opresult301, "++", [1], string302);
  var opresult306 = callmethod(opresult304, "++", [1], var_modname);
  lineNumber = 111
  var string307 = new GraceString("_");
  var opresult309 = callmethod(opresult306, "++", [1], string307);
  var opresult311 = callmethod(opresult309, "++", [1], var_nmi);
  var opresult313 = callmethod(opresult311, "++", [1], var_myc);
  var string314 = new GraceString(";");
  var opresult316 = callmethod(opresult313, "++", [1], string314);
  lineNumber = 112
  var call317 = callmethod(this,"out", [1], opresult316);
  return call317
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjdefdec"] = func210;
  lineNumber = 133
var func318 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 115
  lineNumber = 114
  var string319 = new GraceString("undefined");
  var var_val = string319;
  lineNumber = 116
  lineNumber = 118
  lineNumber = 115
  var bool321 = new GraceBoolean(false)
  lineNumber = 118
  lineNumber = 1
  lineNumber = 115
  var call322 = callmethod(var_o,"value", [0]);
  var opresult324 = callmethod(bool321, "!=", [1], call322);
  if (Grace_isTrue(opresult324)) {
  lineNumber = 116
  lineNumber = 1
  lineNumber = 116
  var call325 = callmethod(var_o,"value", [0]);
  lineNumber = 117
  var call326 = callmethod(this,"compilenode", [1], call325);
  var_val = call326;
  var if320 = call326;
}
  lineNumber = 119
  lineNumber = 118
  var var_myc = var_auto__95__count;
  lineNumber = 120
  lineNumber = 119
  var opresult328 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult328;
  lineNumber = 120
  lineNumber = 1
  lineNumber = 120
  lineNumber = 1
  lineNumber = 120
  lineNumber = 1
  lineNumber = 120
  var call329 = callmethod(var_o,"name", [0]);
  var call330 = callmethod(call329,"value", [0]);
  var call331 = callmethod(call330,"_escape", [0]);
  var var_nm = call331;
  lineNumber = 121
  lineNumber = 1
  lineNumber = 121
  lineNumber = 1
  lineNumber = 121
  var call332 = callmethod(var_o,"name", [0]);
  var call333 = callmethod(call332,"value", [0]);
  lineNumber = 122
  var call334 = callmethod(this,"escapeident", [1], call333);
  var var_nmi = call334;
  var string335 = new GraceString("  ");
  var opresult337 = callmethod(string335, "++", [1], var_selfr);
  var string338 = new GraceString(".data[\"");
  var opresult340 = callmethod(opresult337, "++", [1], string338);
  var opresult342 = callmethod(opresult340, "++", [1], var_nm);
  var string343 = new GraceString("\"] = ");
  var opresult345 = callmethod(opresult342, "++", [1], string343);
  var opresult347 = callmethod(opresult345, "++", [1], var_val);
  var string348 = new GraceString(";");
  var opresult350 = callmethod(opresult347, "++", [1], string348);
  lineNumber = 123
  var call351 = callmethod(this,"out", [1], opresult350);
  var string352 = new GraceString("    var reader_");
  var opresult354 = callmethod(string352, "++", [1], var_modname);
  var string355 = new GraceString("_");
  var opresult357 = callmethod(opresult354, "++", [1], string355);
  var opresult359 = callmethod(opresult357, "++", [1], var_nmi);
  var opresult361 = callmethod(opresult359, "++", [1], var_myc);
  var string362 = new GraceString(" = function() {");
  var opresult364 = callmethod(opresult361, "++", [1], string362);
  lineNumber = 124
  var call365 = callmethod(this,"out", [1], opresult364);
  var string366 = new GraceString("    return this.data[\"");
  var opresult368 = callmethod(string366, "++", [1], var_nm);
  var string369 = new GraceString("\"];");
  var opresult371 = callmethod(opresult368, "++", [1], string369);
  lineNumber = 125
  var call372 = callmethod(this,"out", [1], opresult371);
  var string373 = new GraceString("  }");
  lineNumber = 126
  var call374 = callmethod(this,"out", [1], string373);
  lineNumber = 127
  lineNumber = 126
  var string375 = new GraceString("  ");
  var opresult377 = callmethod(string375, "++", [1], var_selfr);
  var string378 = new GraceString(".methods[\"");
  var opresult380 = callmethod(opresult377, "++", [1], string378);
  var opresult382 = callmethod(opresult380, "++", [1], var_nm);
  var string383 = new GraceString("\"] = reader_");
  var opresult385 = callmethod(opresult382, "++", [1], string383);
  var opresult387 = callmethod(opresult385, "++", [1], var_modname);
  lineNumber = 127
  var string388 = new GraceString("_");
  var opresult390 = callmethod(opresult387, "++", [1], string388);
  var opresult392 = callmethod(opresult390, "++", [1], var_nmi);
  var opresult394 = callmethod(opresult392, "++", [1], var_myc);
  var string395 = new GraceString(";");
  var opresult397 = callmethod(opresult394, "++", [1], string395);
  lineNumber = 128
  var call398 = callmethod(this,"out", [1], opresult397);
  var string399 = new GraceString("  ");
  var opresult401 = callmethod(string399, "++", [1], var_selfr);
  var string402 = new GraceString(".data[\"");
  var opresult404 = callmethod(opresult401, "++", [1], string402);
  var opresult406 = callmethod(opresult404, "++", [1], var_nm);
  var string407 = new GraceString("\"] = ");
  var opresult409 = callmethod(opresult406, "++", [1], string407);
  var opresult411 = callmethod(opresult409, "++", [1], var_val);
  var string412 = new GraceString(";");
  var opresult414 = callmethod(opresult411, "++", [1], string412);
  lineNumber = 129
  var call415 = callmethod(this,"out", [1], opresult414);
  var string416 = new GraceString("  var writer_");
  var opresult418 = callmethod(string416, "++", [1], var_modname);
  var string419 = new GraceString("_");
  var opresult421 = callmethod(opresult418, "++", [1], string419);
  var opresult423 = callmethod(opresult421, "++", [1], var_nmi);
  var opresult425 = callmethod(opresult423, "++", [1], var_myc);
  var string426 = new GraceString(" = function(argcv, o) {");
  var opresult428 = callmethod(opresult425, "++", [1], string426);
  lineNumber = 130
  var call429 = callmethod(this,"out", [1], opresult428);
  var string430 = new GraceString("    this.data[\"");
  var opresult432 = callmethod(string430, "++", [1], var_nm);
  var string433 = new GraceString("\"] = o;");
  var opresult435 = callmethod(opresult432, "++", [1], string433);
  lineNumber = 131
  var call436 = callmethod(this,"out", [1], opresult435);
  var string437 = new GraceString("  }");
  lineNumber = 132
  var call438 = callmethod(this,"out", [1], string437);
  lineNumber = 133
  lineNumber = 132
  var string439 = new GraceString("  ");
  var opresult441 = callmethod(string439, "++", [1], var_selfr);
  var string442 = new GraceString(".methods[\"");
  var opresult444 = callmethod(opresult441, "++", [1], string442);
  var opresult446 = callmethod(opresult444, "++", [1], var_nm);
  var string447 = new GraceString(":=\"] = writer_");
  var opresult449 = callmethod(opresult446, "++", [1], string447);
  var opresult451 = callmethod(opresult449, "++", [1], var_modname);
  lineNumber = 133
  var string452 = new GraceString("_");
  var opresult454 = callmethod(opresult451, "++", [1], string452);
  var opresult456 = callmethod(opresult454, "++", [1], var_nmi);
  var opresult458 = callmethod(opresult456, "++", [1], var_myc);
  var string459 = new GraceString(";");
  var opresult461 = callmethod(opresult458, "++", [1], string459);
  lineNumber = 134
  var call462 = callmethod(this,"out", [1], opresult461);
  return call462
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjvardec"] = func318;
  lineNumber = 148
var func463 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 137
  lineNumber = 1
  lineNumber = 136
  var call464 = callmethod(var_o,"signature", [0]);
  var var_signature = call464;
  lineNumber = 137
  lineNumber = 1
  lineNumber = 137
  var call466 = callmethod(var_o,"value", [0]);
  lineNumber = 1
  lineNumber = 137
  var call467 = callmethod(var_o,"superclass", [0]);
  lineNumber = 1
  lineNumber = 137
  var call468 = callmethod(var_ast,"objectNode", [0]);
  var call469 = callmethod(call468,"new", [2], call466, call467);
  var array465 = new GraceList([
call469,
]);

  var var_mbody = array465;
  lineNumber = 139
  lineNumber = 138
  lineNumber = 1
  lineNumber = 138
  var call470 = callmethod(var_o,"constructor", [0]);
  lineNumber = 139
  var bool471 = new GraceBoolean(false)
  lineNumber = 140
  lineNumber = 1
  lineNumber = 138
  var call472 = callmethod(var_ast,"methodNode", [0]);
  var call473 = callmethod(call472,"new", [4], call470, var_signature, var_mbody, bool471);
  var var_newmeth = call473;
  lineNumber = 140
  var array474 = new GraceList([
var_newmeth,
]);

  var var_obody = array474;
  lineNumber = 141
  var bool475 = new GraceBoolean(false)
  lineNumber = 142
  lineNumber = 1
  lineNumber = 141
  var call476 = callmethod(var_ast,"objectNode", [0]);
  var call477 = callmethod(call476,"new", [2], var_obody, bool475);
  var var_cobj = call477;
  lineNumber = 142
  lineNumber = 1
  lineNumber = 142
  var call478 = callmethod(var_o,"name", [0]);
  var bool479 = new GraceBoolean(false)
  lineNumber = 143
  lineNumber = 1
  lineNumber = 142
  var call480 = callmethod(var_ast,"defDecNode", [0]);
  var call481 = callmethod(call480,"new", [3], call478, var_cobj, bool479);
  var var_con = call481;
  lineNumber = 146
  lineNumber = 143
  lineNumber = 148
  lineNumber = 143
  var opresult484 = callmethod(var_compilationDepth, "==", [1], new GraceNum(1));
  var block485 = Grace_allocObject();
  block485.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block485.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block485.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block485.receiver = this;
  block485.className = 'block<genjs:143>';
  block485.real = function(
) {
  lineNumber = 1
  lineNumber = 143
  lineNumber = 1
  lineNumber = 143
  var call486 = callmethod(var_o,"name", [0]);
  var call487 = callmethod(call486,"kind", [0]);
  var string488 = new GraceString("generic");
  var opresult490 = callmethod(call487, "!=", [1], string488);
  return opresult490;
};
  var opresult492 = callmethod(opresult484, "&&", [1], block485);
  if (Grace_isTrue(opresult492)) {
  lineNumber = 145
  lineNumber = 144
  lineNumber = 1
  lineNumber = 144
  var call493 = callmethod(var_o,"name", [0]);
  lineNumber = 1
  lineNumber = 144
  lineNumber = 1
  lineNumber = 144
  var call495 = callmethod(var_o,"name", [0]);
  var call496 = callmethod(call495,"value", [0]);
  lineNumber = 1
  lineNumber = 144
  var call497 = callmethod(var_ast,"signaturePart", [0]);
  var call498 = callmethod(call497,"new", [1], call496);
  var array494 = new GraceList([
call498,
]);

  lineNumber = 145
  lineNumber = 1
  lineNumber = 145
  var call500 = callmethod(var_o,"name", [0]);
  var array499 = new GraceList([
call500,
]);

  var bool501 = new GraceBoolean(false)
  lineNumber = 146
  lineNumber = 1
  lineNumber = 144
  var call502 = callmethod(var_ast,"methodNode", [0]);
  var call503 = callmethod(call502,"new", [4], call493, array494, array499, bool501);
  var var_meth = call503;
  lineNumber = 146
  lineNumber = 147
  var call504 = callmethod(this,"compilenode", [1], var_meth);
  var if482 = call504;
}
  lineNumber = 148
  lineNumber = 1
  lineNumber = 148
  lineNumber = 149
  var call505 = callmethod(this,"compilenode", [1], var_con);
  lineNumber = 148
  var call506 = callmethod(var_o,"register:=", [1], call505);
  return call506
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileclass"] = func463;
  lineNumber = 198
var func507 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_outerRef = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 152
  lineNumber = 151
  var var_origInBlock = var_inBlock;
  lineNumber = 153
  lineNumber = 152
  var bool508 = new GraceBoolean(false)
  var_inBlock = bool508;
  lineNumber = 154
  lineNumber = 153
  var var_myc = var_auto__95__count;
  lineNumber = 155
  lineNumber = 154
  var opresult510 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult510;
  lineNumber = 156
  lineNumber = 155
  var string511 = new GraceString("obj");
  var opresult513 = callmethod(string511, "++", [1], var_myc);
  var var_selfr = opresult513;
  lineNumber = 157
  lineNumber = 156
  var bool514 = new GraceBoolean(false)
  var var_superobj = bool514;
  lineNumber = 160
  lineNumber = 157
  lineNumber = 1
  lineNumber = 157
  var call515 = callmethod(var_o,"value", [0]);
  lineNumber = 160
  var block516 = Grace_allocObject();
  block516.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block516.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block516.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block516.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block516.receiver = this;
  block516.className = 'block<genjs:160>';
  block516.real = function(
var_e
) {
  lineNumber = 161
  lineNumber = 1
  lineNumber = 158
  var call518 = callmethod(var_e,"kind", [0]);
  var string519 = new GraceString("inherits");
  var opresult521 = callmethod(call518, "==", [1], string519);
  if (Grace_isTrue(opresult521)) {
  lineNumber = 160
  lineNumber = 1
  lineNumber = 159
  var call522 = callmethod(var_e,"value", [0]);
  var_superobj = call522;
  var if517 = call522;
}
  return if517;
};
  var call523 = callmethod(Grace_prelude,"for()do", [1, 1], call515, block516);
  lineNumber = 170
  lineNumber = 172
  lineNumber = 162
  var bool525 = new GraceBoolean(false)
  var opresult527 = callmethod(var_superobj, "/=", [1], bool525);
  if (Grace_isTrue(opresult527)) {
  lineNumber = 163
  lineNumber = 164
  var call528 = callmethod(this,"compilenode", [1], var_superobj);
  var var_sup = call528;
  var string529 = new GraceString("  var ");
  var opresult531 = callmethod(string529, "++", [1], var_selfr);
  var string532 = new GraceString(" = Grace_allocObject();");
  var opresult534 = callmethod(opresult531, "++", [1], string532);
  lineNumber = 165
  var call535 = callmethod(this,"out", [1], opresult534);
  var string536 = new GraceString("  ");
  var opresult538 = callmethod(string536, "++", [1], var_selfr);
  var string539 = new GraceString(".superobj = ");
  var opresult541 = callmethod(opresult538, "++", [1], string539);
  var opresult543 = callmethod(opresult541, "++", [1], var_sup);
  var string544 = new GraceString(";");
  var opresult546 = callmethod(opresult543, "++", [1], string544);
  lineNumber = 166
  var call547 = callmethod(this,"out", [1], opresult546);
  var string548 = new GraceString("  if (");
  var opresult550 = callmethod(string548, "++", [1], var_sup);
  var string551 = new GraceString(".data)");
  var opresult553 = callmethod(opresult550, "++", [1], string551);
  lineNumber = 167
  var call554 = callmethod(this,"out", [1], opresult553);
  var string555 = new GraceString("    ");
  var opresult557 = callmethod(string555, "++", [1], var_selfr);
  var string558 = new GraceString(".data = ");
  var opresult560 = callmethod(opresult557, "++", [1], string558);
  var opresult562 = callmethod(opresult560, "++", [1], var_sup);
  var string563 = new GraceString(".data;");
  var opresult565 = callmethod(opresult562, "++", [1], string563);
  lineNumber = 168
  var call566 = callmethod(this,"out", [1], opresult565);
  var string567 = new GraceString("  ");
  var opresult569 = callmethod(string567, "++", [1], var_selfr);
  var string570 = new GraceString("._value = ");
  var opresult572 = callmethod(opresult569, "++", [1], string570);
  var opresult574 = callmethod(opresult572, "++", [1], var_sup);
  var string575 = new GraceString("._value;");
  var opresult577 = callmethod(opresult574, "++", [1], string575);
  lineNumber = 169
  var call578 = callmethod(this,"out", [1], opresult577);
  var if524 = call578;
  } else {
  lineNumber = 170
  var string579 = new GraceString("  var ");
  var opresult581 = callmethod(string579, "++", [1], var_selfr);
  var string582 = new GraceString(" = Grace_allocObject();");
  var opresult584 = callmethod(opresult581, "++", [1], string582);
  lineNumber = 171
  var call585 = callmethod(this,"out", [1], opresult584);
  var if524 = call585;
}
  lineNumber = 172
  lineNumber = 173
  var call586 = callmethod(this,"compileobjouter", [2], var_selfr, var_outerRef);
  var string587 = new GraceString("function obj_init_");
  var opresult589 = callmethod(string587, "++", [1], var_myc);
  var string590 = new GraceString("() {");
  var opresult592 = callmethod(opresult589, "++", [1], string590);
  lineNumber = 174
  var call593 = callmethod(this,"out", [1], opresult592);
  var string594 = new GraceString("  var origSuperDepth = superDepth;");
  lineNumber = 175
  var call595 = callmethod(this,"out", [1], string594);
  var string596 = new GraceString("  superDepth = this;");
  lineNumber = 176
  var call597 = callmethod(this,"out", [1], string596);
  lineNumber = 177
  lineNumber = 176
  var var_pos = new GraceNum(0);
  lineNumber = 190
  lineNumber = 177
  lineNumber = 1
  lineNumber = 177
  var call598 = callmethod(var_o,"value", [0]);
  lineNumber = 190
  var block599 = Grace_allocObject();
  block599.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block599.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block599.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block599.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block599.receiver = this;
  block599.className = 'block<genjs:190>';
  block599.real = function(
var_e
) {
  lineNumber = 192
  lineNumber = 1
  lineNumber = 178
  var call601 = callmethod(var_e,"kind", [0]);
  var string602 = new GraceString("method");
  var opresult604 = callmethod(call601, "==", [1], string602);
  if (Grace_isTrue(opresult604)) {
  lineNumber = 179
  lineNumber = 180
  var call605 = callmethod(this,"compilemethod", [2], var_e, var_selfr);
  var if600 = call605;
  } else {
  lineNumber = 190
  lineNumber = 184
  lineNumber = 1
  lineNumber = 180
  var call607 = callmethod(var_e,"kind", [0]);
  var string608 = new GraceString("vardec");
  var opresult610 = callmethod(call607, "==", [1], string608);
  if (Grace_isTrue(opresult610)) {
  lineNumber = 181
  lineNumber = 182
  var call611 = callmethod(this,"compileobjvardec", [3], var_e, var_selfr, var_pos);
  var string612 = new GraceString("");
  var opresult614 = callmethod(string612, "++", [1], var_selfr);
  var string615 = new GraceString(".mutable = true;");
  var opresult617 = callmethod(opresult614, "++", [1], string615);
  lineNumber = 183
  var call618 = callmethod(this,"out", [1], opresult617);
  lineNumber = 184
  lineNumber = 183
  var opresult620 = callmethod(var_pos, "+", [1], new GraceNum(1));
  var_pos = opresult620;
  var if606 = opresult620;
  } else {
  lineNumber = 190
  lineNumber = 187
  lineNumber = 1
  lineNumber = 184
  var call622 = callmethod(var_e,"kind", [0]);
  var string623 = new GraceString("defdec");
  var opresult625 = callmethod(call622, "==", [1], string623);
  if (Grace_isTrue(opresult625)) {
  lineNumber = 185
  lineNumber = 186
  var call626 = callmethod(this,"compileobjdefdec", [3], var_e, var_selfr, var_pos);
  lineNumber = 187
  lineNumber = 186
  var opresult628 = callmethod(var_pos, "+", [1], new GraceNum(1));
  var_pos = opresult628;
  var if621 = opresult628;
  } else {
  lineNumber = 190
  lineNumber = 189
  lineNumber = 1
  lineNumber = 187
  var call630 = callmethod(var_e,"kind", [0]);
  var string631 = new GraceString("object");
  var opresult633 = callmethod(call630, "==", [1], string631);
  if (Grace_isTrue(opresult633)) {
  lineNumber = 188
  lineNumber = 189
  var call634 = callmethod(this,"compileobject", [2], var_e, var_selfr);
  var if629 = call634;
  } else {
  lineNumber = 190
  lineNumber = 191
  var call635 = callmethod(this,"compilenode", [1], var_e);
  var if629 = call635;
}
  var if621 = if629;
}
  var if606 = if621;
}
  var if600 = if606;
}
  return if600;
};
  var call636 = callmethod(Grace_prelude,"for()do", [1, 1], call598, block599);
  lineNumber = 193
  var string637 = new GraceString("  superDepth = origSuperDepth;");
  lineNumber = 194
  var call638 = callmethod(this,"out", [1], string637);
  var string639 = new GraceString("}");
  lineNumber = 195
  var call640 = callmethod(this,"out", [1], string639);
  var string641 = new GraceString("obj_init_");
  var opresult643 = callmethod(string641, "++", [1], var_myc);
  var string644 = new GraceString(".apply(");
  var opresult646 = callmethod(opresult643, "++", [1], string644);
  var opresult648 = callmethod(opresult646, "++", [1], var_selfr);
  var string649 = new GraceString(", []);");
  var opresult651 = callmethod(opresult648, "++", [1], string649);
  lineNumber = 196
  var call652 = callmethod(this,"out", [1], opresult651);
  lineNumber = 197
  lineNumber = 1
  lineNumber = 196
  var call653 = callmethod(var_o,"register:=", [1], var_selfr);
  lineNumber = 198
  lineNumber = 197
  var_inBlock = var_origInBlock;
  return var_origInBlock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobject"] = func507;
  lineNumber = 256
var func654 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 201
  lineNumber = 200
  var var_origInBlock = var_inBlock;
  lineNumber = 202
  lineNumber = 201
  var bool655 = new GraceBoolean(true)
  var_inBlock = bool655;
  lineNumber = 203
  lineNumber = 202
  var var_myc = var_auto__95__count;
  lineNumber = 204
  lineNumber = 203
  var opresult657 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult657;
  lineNumber = 204
  var string658 = new GraceString("  var block");
  var opresult660 = callmethod(string658, "++", [1], var_myc);
  var string661 = new GraceString(" = Grace_allocObject();");
  var opresult663 = callmethod(opresult660, "++", [1], string661);
  lineNumber = 205
  var call664 = callmethod(this,"out", [1], opresult663);
  var string665 = new GraceString("  block");
  var opresult667 = callmethod(string665, "++", [1], var_myc);
  var string668 = new GraceString(".methods[\"apply\"] = function() {");
  var opresult670 = callmethod(opresult667, "++", [1], string668);
  lineNumber = 206
  var call671 = callmethod(this,"out", [1], opresult670);
  var string672 = new GraceString("    var args = Array.prototype.slice.call(arguments, 1);");
  lineNumber = 207
  var call673 = callmethod(this,"out", [1], string672);
  var string674 = new GraceString("    return this.real.apply(this.receiver, args);");
  lineNumber = 208
  var call675 = callmethod(this,"out", [1], string674);
  var string676 = new GraceString("  }");
  lineNumber = 209
  var call677 = callmethod(this,"out", [1], string676);
  var string678 = new GraceString("  block");
  var opresult680 = callmethod(string678, "++", [1], var_myc);
  var string681 = new GraceString(".methods[\"applyIndirectly\"] = function(argcv, a) {");
  var opresult683 = callmethod(opresult680, "++", [1], string681);
  lineNumber = 210
  var call684 = callmethod(this,"out", [1], opresult683);
  var string685 = new GraceString("    return this.real.apply(this.receiver, a._value);");
  lineNumber = 211
  var call686 = callmethod(this,"out", [1], string685);
  var string687 = new GraceString("  }");
  lineNumber = 212
  var call688 = callmethod(this,"out", [1], string687);
  var string689 = new GraceString("  block");
  var opresult691 = callmethod(string689, "++", [1], var_myc);
  var string692 = new GraceString(".methods[\"outer\"] = function() {");
  var opresult694 = callmethod(opresult691, "++", [1], string692);
  lineNumber = 213
  var call695 = callmethod(this,"out", [1], opresult694);
  var string696 = new GraceString("    return callmethod(this.receiver, 'outer', [0]);");
  lineNumber = 214
  var call697 = callmethod(this,"out", [1], string696);
  var string698 = new GraceString("  }");
  lineNumber = 215
  var call699 = callmethod(this,"out", [1], string698);
  lineNumber = 233
  lineNumber = 236
  lineNumber = 215
  var bool701 = new GraceBoolean(false)
  lineNumber = 236
  lineNumber = 1
  lineNumber = 215
  var call702 = callmethod(var_o,"matchingPattern", [0]);
  var opresult704 = callmethod(bool701, "!=", [1], call702);
  if (Grace_isTrue(opresult704)) {
  lineNumber = 216
  lineNumber = 1
  lineNumber = 216
  var call705 = callmethod(var_o,"matchingPattern", [0]);
  lineNumber = 217
  var call706 = callmethod(this,"compilenode", [1], call705);
  var var_pat = call706;
  var string707 = new GraceString("  block");
  var opresult709 = callmethod(string707, "++", [1], var_myc);
  var string710 = new GraceString(".pattern = ");
  var opresult712 = callmethod(opresult709, "++", [1], string710);
  var opresult714 = callmethod(opresult712, "++", [1], var_pat);
  var string715 = new GraceString(";");
  var opresult717 = callmethod(opresult714, "++", [1], string715);
  lineNumber = 218
  var call718 = callmethod(this,"out", [1], opresult717);
  var string719 = new GraceString("  block");
  var opresult721 = callmethod(string719, "++", [1], var_myc);
  var string722 = new GraceString(".methods[\"match\"] = function(argcv, o) {");
  var opresult724 = callmethod(opresult721, "++", [1], string722);
  lineNumber = 219
  var call725 = callmethod(this,"out", [1], opresult724);
  var string726 = new GraceString("    var match = callmethod(this.pattern, \"match\", [1], o);");
  lineNumber = 220
  var call727 = callmethod(this,"out", [1], string726);
  var string728 = new GraceString("    if (Grace_isTrue(match)) {");
  lineNumber = 221
  var call729 = callmethod(this,"out", [1], string728);
  var string730 = new GraceString("      var bindings = callmethod(match, \"bindings\", [0]);");
  lineNumber = 222
  var call731 = callmethod(this,"out", [1], string730);
  var string732 = new GraceString("      var rv = callmethod(this, \"applyIndirectly\", [1], bindings);");
  lineNumber = 223
  var call733 = callmethod(this,"out", [1], string732);
  var string734 = new GraceString("      return new GraceSuccessfulMatch(rv, []);");
  lineNumber = 224
  var call735 = callmethod(this,"out", [1], string734);
  var string736 = new GraceString("    }");
  lineNumber = 225
  var call737 = callmethod(this,"out", [1], string736);
  var string738 = new GraceString("    return new GraceFailedMatch(rv);");
  lineNumber = 226
  var call739 = callmethod(this,"out", [1], string738);
  var string740 = new GraceString("  }");
  lineNumber = 227
  var call741 = callmethod(this,"out", [1], string740);
  var if700 = call741;
  } else {
  lineNumber = 233
  lineNumber = 235
  lineNumber = 1
  lineNumber = 235
  lineNumber = 1
  lineNumber = 228
  var call743 = callmethod(var_o,"params", [0]);
  var call744 = callmethod(call743,"size", [0]);
  var opresult746 = callmethod(call744, "==", [1], new GraceNum(1));
  if (Grace_isTrue(opresult746)) {
  lineNumber = 229
  var string747 = new GraceString("  block");
  var opresult749 = callmethod(string747, "++", [1], var_myc);
  var string750 = new GraceString(".methods[\"match\"] = function(argcv, o) {");
  var opresult752 = callmethod(opresult749, "++", [1], string750);
  lineNumber = 230
  var call753 = callmethod(this,"out", [1], opresult752);
  var string754 = new GraceString("    var args = Array.prototype.slice.call(arguments, 1);");
  lineNumber = 231
  var call755 = callmethod(this,"out", [1], string754);
  var string756 = new GraceString("    var r = this.real.apply(this.receiver, args);");
  lineNumber = 232
  var call757 = callmethod(this,"out", [1], string756);
  var string758 = new GraceString("    return new GraceSuccessfulMatch(r, []);");
  lineNumber = 233
  var call759 = callmethod(this,"out", [1], string758);
  var string760 = new GraceString("  }");
  lineNumber = 234
  var call761 = callmethod(this,"out", [1], string760);
  var if742 = call761;
}
  var if700 = if742;
}
  lineNumber = 236
  var string762 = new GraceString("  block");
  var opresult764 = callmethod(string762, "++", [1], var_myc);
  var string765 = new GraceString(".receiver = this;");
  var opresult767 = callmethod(opresult764, "++", [1], string765);
  lineNumber = 237
  var call768 = callmethod(this,"out", [1], opresult767);
  var string769 = new GraceString("  block");
  var opresult771 = callmethod(string769, "++", [1], var_myc);
  var string772 = new GraceString(".className = 'block<");
  var opresult774 = callmethod(opresult771, "++", [1], string772);
  var opresult776 = callmethod(opresult774, "++", [1], var_modname);
  var string777 = new GraceString(":");
  var opresult779 = callmethod(opresult776, "++", [1], string777);
  lineNumber = 1
  lineNumber = 237
  var call780 = callmethod(var_o,"line", [0]);
  var opresult782 = callmethod(opresult779, "++", [1], call780);
  var string783 = new GraceString(">';");
  var opresult785 = callmethod(opresult782, "++", [1], string783);
  lineNumber = 238
  var call786 = callmethod(this,"out", [1], opresult785);
  var string787 = new GraceString("  block");
  var opresult789 = callmethod(string787, "++", [1], var_myc);
  var string790 = new GraceString(".real = function(");
  var opresult792 = callmethod(opresult789, "++", [1], string790);
  lineNumber = 239
  var call793 = callmethod(this,"out", [1], opresult792);
  lineNumber = 240
  lineNumber = 239
  var bool794 = new GraceBoolean(true)
  var var_first = bool794;
  lineNumber = 245
  lineNumber = 240
  lineNumber = 1
  lineNumber = 240
  var call795 = callmethod(var_o,"params", [0]);
  lineNumber = 245
  var block796 = Grace_allocObject();
  block796.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block796.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block796.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block796.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block796.receiver = this;
  block796.className = 'block<genjs:245>';
  block796.real = function(
var_p
) {
  lineNumber = 242
  lineNumber = 244
  lineNumber = 1
  lineNumber = 241
  var call798 = callmethod(var_first,"not", [0]);
  if (Grace_isTrue(call798)) {
  lineNumber = 242
  var string799 = new GraceString(",");
  lineNumber = 243
  var call800 = callmethod(this,"out", [1], string799);
  var if797 = call800;
}
  lineNumber = 245
  lineNumber = 244
  var bool801 = new GraceBoolean(false)
  var_first = bool801;
  lineNumber = 245
  lineNumber = 1
  lineNumber = 245
  var call802 = callmethod(var_p,"value", [0]);
  var call803 = callmethod(this,"varf", [1], call802);
  lineNumber = 246
  var call804 = callmethod(this,"out", [1], call803);
  return call804;
};
  var call805 = callmethod(Grace_prelude,"for()do", [1, 1], call795, block796);
  lineNumber = 247
  var string806 = new GraceString(") {");
  lineNumber = 248
  var call807 = callmethod(this,"out", [1], string806);
  lineNumber = 249
  lineNumber = 248
  var string808 = new GraceString("undefined");
  var var_ret = string808;
  lineNumber = 250
  lineNumber = 249
  lineNumber = 1
  lineNumber = 249
  var call809 = callmethod(var_o,"body", [0]);
  lineNumber = 250
  var block810 = Grace_allocObject();
  block810.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block810.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block810.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block810.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block810.receiver = this;
  block810.className = 'block<genjs:250>';
  block810.real = function(
var_l
) {
  lineNumber = 251
  var call811 = callmethod(this,"compilenode", [1], var_l);
  var_ret = call811;
  return call811;
};
  var call812 = callmethod(Grace_prelude,"for()do", [1, 1], call809, block810);
  lineNumber = 252
  var string813 = new GraceString("  return ");
  var opresult815 = callmethod(string813, "++", [1], var_ret);
  var string816 = new GraceString(";");
  var opresult818 = callmethod(opresult815, "++", [1], string816);
  lineNumber = 253
  var call819 = callmethod(this,"out", [1], opresult818);
  var string820 = new GraceString("};");
  lineNumber = 254
  var call821 = callmethod(this,"out", [1], string820);
  lineNumber = 255
  lineNumber = 1
  lineNumber = 255
  lineNumber = 254
  var string822 = new GraceString("block");
  var opresult824 = callmethod(string822, "++", [1], var_myc);
  var call825 = callmethod(var_o,"register:=", [1], opresult824);
  lineNumber = 256
  lineNumber = 255
  var_inBlock = var_origInBlock;
  return var_origInBlock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileblock"] = func654;
  lineNumber = 268
var func826 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 259
  lineNumber = 258
  var var_myc = var_auto__95__count;
  lineNumber = 260
  lineNumber = 259
  var opresult828 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult828;
  lineNumber = 260
  lineNumber = 1
  lineNumber = 260
  lineNumber = 1
  lineNumber = 260
  var call829 = callmethod(var_o,"value", [0]);
  var call830 = callmethod(call829,"_escape", [0]);
  var var_escName = call830;
  lineNumber = 261
  lineNumber = 1
  lineNumber = 261
  var call831 = callmethod(var_o,"value", [0]);
  lineNumber = 262
  var call832 = callmethod(this,"escapeident", [1], call831);
  var var_idName = call832;
  var string833 = new GraceString("var var_");
  var opresult835 = callmethod(string833, "++", [1], var_idName);
  var string836 = new GraceString(" = new GraceType(\"");
  var opresult838 = callmethod(opresult835, "++", [1], string836);
  var opresult840 = callmethod(opresult838, "++", [1], var_escName);
  var string841 = new GraceString("\");");
  var opresult843 = callmethod(opresult840, "++", [1], string841);
  lineNumber = 263
  var call844 = callmethod(this,"out", [1], opresult843);
  lineNumber = 265
  lineNumber = 263
  lineNumber = 1
  lineNumber = 263
  var call845 = callmethod(var_o,"methods", [0]);
  lineNumber = 265
  var block846 = Grace_allocObject();
  block846.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block846.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block846.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block846.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block846.receiver = this;
  block846.className = 'block<genjs:265>';
  block846.real = function(
var_meth
) {
  lineNumber = 264
  lineNumber = 1
  lineNumber = 264
  lineNumber = 1
  lineNumber = 264
  var call847 = callmethod(var_meth,"value", [0]);
  var call848 = callmethod(call847,"_escape", [0]);
  var var_mnm = call848;
  lineNumber = 265
  var string849 = new GraceString("var_");
  var opresult851 = callmethod(string849, "++", [1], var_idName);
  var string852 = new GraceString(".typeMethods.push(\"");
  var opresult854 = callmethod(opresult851, "++", [1], string852);
  var opresult856 = callmethod(opresult854, "++", [1], var_mnm);
  var string857 = new GraceString("\");");
  var opresult859 = callmethod(opresult856, "++", [1], string857);
  lineNumber = 266
  var call860 = callmethod(this,"out", [1], opresult859);
  return call860;
};
  var call861 = callmethod(Grace_prelude,"for()do", [1, 1], call845, block846);
  lineNumber = 268
  lineNumber = 1
  lineNumber = 267
  var string862 = new GraceString("none");
  var call863 = callmethod(var_o,"register:=", [1], string862);
  return call863
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compiletype"] = func826;
  lineNumber = 285
var func864 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 271
  lineNumber = 270
  var var_myc = var_auto__95__count;
  lineNumber = 272
  lineNumber = 271
  var opresult866 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult866;
  lineNumber = 272
  lineNumber = 1
  lineNumber = 272
  var call867 = callmethod(var_o,"value", [0]);
  lineNumber = 273
  var call868 = callmethod(this,"compilenode", [1], call867);
  var var_over = call868;
  lineNumber = 274
  lineNumber = 1
  lineNumber = 273
  var call869 = callmethod(var_o,"body", [0]);
  var var_blk = call869;
  lineNumber = 274
  lineNumber = 275
  var call870 = callmethod(this,"compilenode", [1], var_blk);
  var var_blko = call870;
  lineNumber = 276
  lineNumber = 275
  var string871 = new GraceString("  var it");
  var opresult873 = callmethod(string871, "++", [1], var_myc);
  var string874 = new GraceString(" = ");
  var opresult876 = callmethod(opresult873, "++", [1], string874);
  var opresult878 = callmethod(opresult876, "++", [1], var_over);
  var string879 = new GraceString(".methods[\"iterator\"].call(");
  var opresult881 = callmethod(opresult878, "++", [1], string879);
  lineNumber = 276
  var opresult883 = callmethod(opresult881, "++", [1], var_over);
  var string884 = new GraceString(", [0]);");
  var opresult886 = callmethod(opresult883, "++", [1], string884);
  lineNumber = 277
  var call887 = callmethod(this,"out", [1], opresult886);
  lineNumber = 278
  lineNumber = 277
  var string888 = new GraceString("while (Grace_isTrue(it");
  var opresult890 = callmethod(string888, "++", [1], var_myc);
  var string891 = new GraceString(".methods[\"havemore\"].call(");
  var opresult893 = callmethod(opresult890, "++", [1], string891);
  lineNumber = 278
  var string894 = new GraceString("it");
  var opresult896 = callmethod(opresult893, "++", [1], string894);
  var opresult898 = callmethod(opresult896, "++", [1], var_myc);
  var string899 = new GraceString(", [0]))) {");
  var opresult901 = callmethod(opresult898, "++", [1], string899);
  lineNumber = 279
  var call902 = callmethod(this,"out", [1], opresult901);
  lineNumber = 280
  lineNumber = 279
  var string903 = new GraceString("    var fv");
  var opresult905 = callmethod(string903, "++", [1], var_myc);
  var string906 = new GraceString(" = it");
  var opresult908 = callmethod(opresult905, "++", [1], string906);
  var opresult910 = callmethod(opresult908, "++", [1], var_myc);
  var string911 = new GraceString(".methods[\"next\"].call(");
  var opresult913 = callmethod(opresult910, "++", [1], string911);
  lineNumber = 280
  var string914 = new GraceString("it");
  var opresult916 = callmethod(opresult913, "++", [1], string914);
  var opresult918 = callmethod(opresult916, "++", [1], var_myc);
  var string919 = new GraceString(", [0]);");
  var opresult921 = callmethod(opresult918, "++", [1], string919);
  lineNumber = 281
  var call922 = callmethod(this,"out", [1], opresult921);
  lineNumber = 282
  lineNumber = 281
  var string923 = new GraceString("    ");
  var opresult925 = callmethod(string923, "++", [1], var_blko);
  var string926 = new GraceString(".methods[\"apply\"].call(");
  var opresult928 = callmethod(opresult925, "++", [1], string926);
  lineNumber = 282
  var opresult930 = callmethod(opresult928, "++", [1], var_blko);
  var string931 = new GraceString(", [1], fv");
  var opresult933 = callmethod(opresult930, "++", [1], string931);
  var opresult935 = callmethod(opresult933, "++", [1], var_myc);
  var string936 = new GraceString(");");
  var opresult938 = callmethod(opresult935, "++", [1], string936);
  lineNumber = 283
  var call939 = callmethod(this,"out", [1], opresult938);
  var string940 = new GraceString("  }");
  lineNumber = 284
  var call941 = callmethod(this,"out", [1], string940);
  lineNumber = 285
  lineNumber = 1
  lineNumber = 284
  var call942 = callmethod(var_o,"register:=", [1], var_over);
  return call942
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilefor"] = func864;
  lineNumber = 344
var func943 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfobj = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 288
  lineNumber = 287
  var var_oldusedvars = var_usedvars;
  lineNumber = 289
  lineNumber = 288
  var var_olddeclaredvars = var_declaredvars;
  lineNumber = 290
  var array944 = new GraceList([
]);

  var_usedvars = array944;
  lineNumber = 291
  var array945 = new GraceList([
]);

  var_declaredvars = array945;
  lineNumber = 292
  lineNumber = 291
  var var_myc = var_auto__95__count;
  lineNumber = 293
  lineNumber = 292
  var opresult947 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult947;
  lineNumber = 293
  lineNumber = 1
  lineNumber = 293
  lineNumber = 1
  lineNumber = 293
  lineNumber = 1
  lineNumber = 293
  var call948 = callmethod(var_o,"value", [0]);
  var call949 = callmethod(call948,"value", [0]);
  var call950 = callmethod(call949,"_escape", [0]);
  var var_name = call950;
  lineNumber = 295
  lineNumber = 294
  var opresult952 = callmethod(var_name, "++", [1], var_myc);
  var var_nm = opresult952;
  lineNumber = 296
  var array953 = new GraceList([
]);

  var var_closurevars = array953;
  lineNumber = 297
  lineNumber = 296
  var bool954 = new GraceBoolean(false)
  var var_haveTypedParams = bool954;
  lineNumber = 304
  lineNumber = 297
  lineNumber = 1
  lineNumber = 297
  var call955 = callmethod(var_o,"signature", [0]);
  lineNumber = 304
  var block956 = Grace_allocObject();
  block956.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block956.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block956.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block956.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block956.receiver = this;
  block956.className = 'block<genjs:304>';
  block956.real = function(
var_part
) {
  lineNumber = 298
  lineNumber = 1
  lineNumber = 298
  var call957 = callmethod(var_part,"params", [0]);
  lineNumber = 304
  var block958 = Grace_allocObject();
  block958.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block958.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block958.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block958.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block958.receiver = this;
  block958.className = 'block<genjs:304>';
  block958.real = function(
var_p
) {
  lineNumber = 306
  lineNumber = 1
  lineNumber = 299
  var call960 = callmethod(var_p,"dtype", [0]);
  var bool961 = new GraceBoolean(false)
  var opresult963 = callmethod(call960, "!=", [1], bool961);
  if (Grace_isTrue(opresult963)) {
  lineNumber = 304
  lineNumber = 305
  lineNumber = 1
  lineNumber = 305
  lineNumber = 1
  lineNumber = 300
  var call965 = callmethod(var_p,"dtype", [0]);
  var call966 = callmethod(call965,"value", [0]);
  var string967 = new GraceString("Dynamic");
  var opresult969 = callmethod(call966, "!=", [1], string967);
  lineNumber = 305
  lineNumber = 1
  lineNumber = 305
  lineNumber = 1
  lineNumber = 301
  var call970 = callmethod(var_p,"dtype", [0]);
  var call971 = callmethod(call970,"kind", [0]);
  var string972 = new GraceString("identifier");
  var opresult974 = callmethod(call971, "==", [1], string972);
  lineNumber = 305
  lineNumber = 1
  lineNumber = 305
  lineNumber = 1
  lineNumber = 302
  var call975 = callmethod(var_p,"dtype", [0]);
  var call976 = callmethod(call975,"kind", [0]);
  var string977 = new GraceString("type");
  var opresult979 = callmethod(call976, "==", [1], string977);
  var opresult981 = callmethod(opresult974, "||", [1], opresult979);
  var opresult983 = callmethod(opresult969, "&&", [1], opresult981);
  if (Grace_isTrue(opresult983)) {
  lineNumber = 304
  lineNumber = 303
  var bool984 = new GraceBoolean(true)
  var_haveTypedParams = bool984;
  var if964 = bool984;
}
  var if959 = if964;
}
  return if959;
};
  var call985 = callmethod(Grace_prelude,"for()do", [1, 1], call957, block958);
  return call985;
};
  var call986 = callmethod(Grace_prelude,"for()do", [1, 1], call955, block956);
  lineNumber = 308
  var string987 = new GraceString("var func");
  var opresult989 = callmethod(string987, "++", [1], var_myc);
  var string990 = new GraceString(" = function(argcv) {");
  var opresult992 = callmethod(opresult989, "++", [1], string990);
  lineNumber = 309
  var call993 = callmethod(this,"out", [1], opresult992);
  var string994 = new GraceString("  var curarg = 1;");
  lineNumber = 310
  var call995 = callmethod(this,"out", [1], string994);
  lineNumber = 320
  lineNumber = 310
  lineNumber = 1
  lineNumber = 310
  lineNumber = 1
  lineNumber = 310
  var call996 = callmethod(var_o,"signature", [0]);
  var call997 = callmethod(call996,"indices", [0]);
  lineNumber = 320
  var block998 = Grace_allocObject();
  block998.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block998.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block998.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block998.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block998.receiver = this;
  block998.className = 'block<genjs:320>';
  block998.real = function(
var_partnr
) {
  lineNumber = 312
  lineNumber = 1
  lineNumber = 311
  var call999 = callmethod(var_o,"signature", [0]);
  var idxres1000 = call999.methods["[]"].call(call999, [1], var_partnr);
  var var_part = idxres1000;
  lineNumber = 314
  lineNumber = 312
  lineNumber = 1
  lineNumber = 312
  var call1001 = callmethod(var_part,"params", [0]);
  lineNumber = 314
  var block1002 = Grace_allocObject();
  block1002.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1002.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1002.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1002.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1002.receiver = this;
  block1002.className = 'block<genjs:314>';
  block1002.real = function(
var_p
) {
  lineNumber = 313
  var string1003 = new GraceString("  var ");
  lineNumber = 1
  lineNumber = 313
  var call1004 = callmethod(var_p,"value", [0]);
  var call1005 = callmethod(this,"varf", [1], call1004);
  var opresult1007 = callmethod(string1003, "++", [1], call1005);
  var string1008 = new GraceString(" = arguments[curarg];");
  var opresult1010 = callmethod(opresult1007, "++", [1], string1008);
  lineNumber = 314
  var call1011 = callmethod(this,"out", [1], opresult1010);
  var string1012 = new GraceString("  curarg++;");
  lineNumber = 315
  var call1013 = callmethod(this,"out", [1], string1012);
  return call1013;
};
  var call1014 = callmethod(Grace_prelude,"for()do", [1, 1], call1001, block1002);
  lineNumber = 320
  lineNumber = 322
  lineNumber = 1
  lineNumber = 316
  var call1016 = callmethod(var_part,"vararg", [0]);
  var bool1017 = new GraceBoolean(false)
  var opresult1019 = callmethod(call1016, "!=", [1], bool1017);
  if (Grace_isTrue(opresult1019)) {
  lineNumber = 317
  var string1020 = new GraceString("  var ");
  lineNumber = 1
  lineNumber = 317
  lineNumber = 1
  lineNumber = 317
  var call1021 = callmethod(var_part,"vararg", [0]);
  var call1022 = callmethod(call1021,"value", [0]);
  lineNumber = 319
  var call1023 = callmethod(this,"varf", [1], call1022);
  var opresult1025 = callmethod(string1020, "++", [1], call1023);
  lineNumber = 317
  var string1026 = new GraceString(" = new GraceList(");
  var opresult1028 = callmethod(opresult1025, "++", [1], string1026);
  lineNumber = 318
  var string1029 = new GraceString("Array.prototype.slice.call(arguments, curarg, ");
  var opresult1031 = callmethod(opresult1028, "++", [1], string1029);
  lineNumber = 317
  lineNumber = 319
  var string1032 = new GraceString("curarg + argcv[");
  lineNumber = 317
  lineNumber = 319
  var diff1034 = callmethod(var_partnr, "-", [1], new GraceNum(1));
  var opresult1036 = callmethod(string1032, "++", [1], diff1034);
  var string1037 = new GraceString("] - ");
  var opresult1039 = callmethod(opresult1036, "++", [1], string1037);
  lineNumber = 317
  lineNumber = 1
  lineNumber = 317
  lineNumber = 1
  lineNumber = 319
  var call1040 = callmethod(var_part,"params", [0]);
  var call1041 = callmethod(call1040,"size", [0]);
  var opresult1043 = callmethod(opresult1039, "++", [1], call1041);
  var string1044 = new GraceString("));");
  var opresult1046 = callmethod(opresult1043, "++", [1], string1044);
  var opresult1048 = callmethod(opresult1031, "++", [1], opresult1046);
  lineNumber = 320
  var call1049 = callmethod(this,"out", [1], opresult1048);
  var string1050 = new GraceString("  curarg += argcv[");
  var diff1052 = callmethod(var_partnr, "-", [1], new GraceNum(1));
  var opresult1054 = callmethod(string1050, "++", [1], diff1052);
  var string1055 = new GraceString("] - ");
  var opresult1057 = callmethod(opresult1054, "++", [1], string1055);
  lineNumber = 1
  lineNumber = 320
  lineNumber = 1
  lineNumber = 320
  var call1058 = callmethod(var_part,"params", [0]);
  var call1059 = callmethod(call1058,"size", [0]);
  var opresult1061 = callmethod(opresult1057, "++", [1], call1059);
  var string1062 = new GraceString(";");
  var opresult1064 = callmethod(opresult1061, "++", [1], string1062);
  lineNumber = 321
  var call1065 = callmethod(this,"out", [1], opresult1064);
  var if1015 = call1065;
}
  return if1015;
};
  var call1066 = callmethod(Grace_prelude,"for()do", [1, 1], call997, block998);
  lineNumber = 323
  var string1067 = new GraceString("  var returnTarget = invocationCount;");
  lineNumber = 324
  var call1068 = callmethod(this,"out", [1], string1067);
  var string1069 = new GraceString("  invocationCount++;");
  lineNumber = 325
  var call1070 = callmethod(this,"out", [1], string1069);
  var string1071 = new GraceString("  try {");
  lineNumber = 326
  var call1072 = callmethod(this,"out", [1], string1071);
  lineNumber = 327
  lineNumber = 326
  var string1073 = new GraceString("undefined");
  var var_ret = string1073;
  lineNumber = 328
  lineNumber = 327
  lineNumber = 1
  lineNumber = 327
  var call1074 = callmethod(var_o,"body", [0]);
  lineNumber = 328
  var block1075 = Grace_allocObject();
  block1075.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1075.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1075.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1075.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1075.receiver = this;
  block1075.className = 'block<genjs:328>';
  block1075.real = function(
var_l
) {
  lineNumber = 329
  var call1076 = callmethod(this,"compilenode", [1], var_l);
  var_ret = call1076;
  return call1076;
};
  var call1077 = callmethod(Grace_prelude,"for()do", [1, 1], call1074, block1075);
  lineNumber = 330
  var string1078 = new GraceString("  return ");
  var opresult1080 = callmethod(string1078, "++", [1], var_ret);
  lineNumber = 331
  var call1081 = callmethod(this,"out", [1], opresult1080);
  var string1082 = new GraceString("  } catch(e) {");
  lineNumber = 332
  var call1083 = callmethod(this,"out", [1], string1082);
  var string1084 = new GraceString("    if ((e.exctype == 'return') && (e.target == returnTarget)) {");
  lineNumber = 333
  var call1085 = callmethod(this,"out", [1], string1084);
  var string1086 = new GraceString("      return e.returnvalue;");
  lineNumber = 334
  var call1087 = callmethod(this,"out", [1], string1086);
  var string1088 = new GraceString("    } else {");
  lineNumber = 335
  var call1089 = callmethod(this,"out", [1], string1088);
  var string1090 = new GraceString("      throw e;");
  lineNumber = 336
  var call1091 = callmethod(this,"out", [1], string1090);
  var string1092 = new GraceString("    }");
  lineNumber = 337
  var call1093 = callmethod(this,"out", [1], string1092);
  var string1094 = new GraceString("  }");
  lineNumber = 338
  var call1095 = callmethod(this,"out", [1], string1094);
  var string1096 = new GraceString("}");
  lineNumber = 339
  var call1097 = callmethod(this,"out", [1], string1096);
  lineNumber = 340
  lineNumber = 339
  var_usedvars = var_oldusedvars;
  lineNumber = 341
  lineNumber = 340
  var_declaredvars = var_olddeclaredvars;
  lineNumber = 342
  lineNumber = 341
  if (Grace_isTrue(var_haveTypedParams)) {
  lineNumber = 342
  var string1099 = new GraceString("func");
  var opresult1101 = callmethod(string1099, "++", [1], var_myc);
  var string1102 = new GraceString("");
  var opresult1104 = callmethod(opresult1101, "++", [1], string1102);
  lineNumber = 343
  var call1105 = callmethod(this,"compilemethodtypes", [2], opresult1104, var_o);
  var if1098 = call1105;
}
  lineNumber = 344
  var string1106 = new GraceString("  ");
  var opresult1108 = callmethod(string1106, "++", [1], var_selfobj);
  var string1109 = new GraceString(".methods[\"");
  var opresult1111 = callmethod(opresult1108, "++", [1], string1109);
  var opresult1113 = callmethod(opresult1111, "++", [1], var_name);
  var string1114 = new GraceString("\"] = func");
  var opresult1116 = callmethod(opresult1113, "++", [1], string1114);
  var opresult1118 = callmethod(opresult1116, "++", [1], var_myc);
  var string1119 = new GraceString(";");
  var opresult1121 = callmethod(opresult1118, "++", [1], string1119);
  lineNumber = 345
  var call1122 = callmethod(this,"out", [1], opresult1121);
  return call1122
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilemethod"] = func943;
  lineNumber = 370
var func1123 = function(argcv) {
  var curarg = 1;
  var var_func = arguments[curarg];
  curarg++;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 347
  var string1124 = new GraceString("");
  var opresult1126 = callmethod(string1124, "++", [1], var_func);
  var string1127 = new GraceString(".paramTypes = [];");
  var opresult1129 = callmethod(opresult1126, "++", [1], string1127);
  lineNumber = 348
  var call1130 = callmethod(this,"out", [1], opresult1129);
  lineNumber = 349
  lineNumber = 348
  var var_pi = new GraceNum(0);
  lineNumber = 370
  lineNumber = 349
  lineNumber = 1
  lineNumber = 349
  var call1131 = callmethod(var_o,"signature", [0]);
  lineNumber = 370
  var block1132 = Grace_allocObject();
  block1132.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1132.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1132.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1132.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1132.receiver = this;
  block1132.className = 'block<genjs:370>';
  block1132.real = function(
var_part
) {
  lineNumber = 350
  lineNumber = 1
  lineNumber = 350
  var call1133 = callmethod(var_part,"params", [0]);
  lineNumber = 370
  var block1134 = Grace_allocObject();
  block1134.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1134.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1134.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1134.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1134.receiver = this;
  block1134.className = 'block<genjs:370>';
  block1134.real = function(
var_p
) {
  lineNumber = 367
  lineNumber = 369
  lineNumber = 353
  var bool1136 = new GraceBoolean(false)
  lineNumber = 369
  lineNumber = 1
  lineNumber = 353
  var call1137 = callmethod(var_p,"dtype", [0]);
  var opresult1139 = callmethod(bool1136, "!=", [1], call1137);
  if (Grace_isTrue(opresult1139)) {
  lineNumber = 364
  lineNumber = 366
  lineNumber = 1
  lineNumber = 366
  lineNumber = 1
  lineNumber = 354
  var call1141 = callmethod(var_p,"dtype", [0]);
  var call1142 = callmethod(call1141,"kind", [0]);
  var string1143 = new GraceString("identifier");
  var opresult1145 = callmethod(call1142, "==", [1], string1143);
  lineNumber = 366
  lineNumber = 1
  lineNumber = 366
  lineNumber = 1
  lineNumber = 355
  var call1146 = callmethod(var_p,"dtype", [0]);
  var call1147 = callmethod(call1146,"kind", [0]);
  var string1148 = new GraceString("type");
  var opresult1150 = callmethod(call1147, "==", [1], string1148);
  var opresult1152 = callmethod(opresult1145, "||", [1], opresult1150);
  if (Grace_isTrue(opresult1152)) {
  lineNumber = 356
  lineNumber = 1
  lineNumber = 356
  lineNumber = 1
  lineNumber = 356
  var call1153 = callmethod(var_p,"dtype", [0]);
  var call1154 = callmethod(call1153,"value", [0]);
  lineNumber = 357
  var call1155 = callmethod(this,"escapeident", [1], call1154);
  var var_typeid = call1155;
  lineNumber = 361
  lineNumber = 357
  var call1157 = callmethod(var_topLevelTypes,"contains", [1], var_typeid);
  if (Grace_isTrue(call1157)) {
  lineNumber = 359
  lineNumber = 358
  var string1158 = new GraceString("");
  var opresult1160 = callmethod(string1158, "++", [1], var_func);
  var string1161 = new GraceString(".paramTypes.push([");
  var opresult1163 = callmethod(opresult1160, "++", [1], string1161);
  lineNumber = 359
  var string1164 = new GraceString("type_");
  var opresult1166 = callmethod(string1164, "++", [1], var_typeid);
  var string1167 = new GraceString(", \"");
  var opresult1169 = callmethod(opresult1166, "++", [1], string1167);
  lineNumber = 1
  lineNumber = 359
  lineNumber = 1
  lineNumber = 359
  var call1170 = callmethod(var_p,"value", [0]);
  var call1171 = callmethod(call1170,"_escape", [0]);
  var opresult1173 = callmethod(opresult1169, "++", [1], call1171);
  var string1174 = new GraceString("\"]);");
  var opresult1176 = callmethod(opresult1173, "++", [1], string1174);
  var opresult1178 = callmethod(opresult1163, "++", [1], opresult1176);
  lineNumber = 360
  var call1179 = callmethod(this,"out", [1], opresult1178);
  var if1156 = call1179;
  } else {
  lineNumber = 361
  var string1180 = new GraceString("");
  var opresult1182 = callmethod(string1180, "++", [1], var_func);
  var string1183 = new GraceString(".paramTypes.push([]);");
  var opresult1185 = callmethod(opresult1182, "++", [1], string1183);
  lineNumber = 362
  var call1186 = callmethod(this,"out", [1], opresult1185);
  var if1156 = call1186;
}
  var if1140 = if1156;
  } else {
  lineNumber = 364
  var string1187 = new GraceString("");
  var opresult1189 = callmethod(string1187, "++", [1], var_func);
  var string1190 = new GraceString(".paramTypes.push([]);");
  var opresult1192 = callmethod(opresult1189, "++", [1], string1190);
  lineNumber = 365
  var call1193 = callmethod(this,"out", [1], opresult1192);
  var if1140 = call1193;
}
  var if1135 = if1140;
  } else {
  lineNumber = 367
  var string1194 = new GraceString("");
  var opresult1196 = callmethod(string1194, "++", [1], var_func);
  var string1197 = new GraceString(".paramTypes.push([]);");
  var opresult1199 = callmethod(opresult1196, "++", [1], string1197);
  lineNumber = 368
  var call1200 = callmethod(this,"out", [1], opresult1199);
  var if1135 = call1200;
}
  lineNumber = 370
  lineNumber = 369
  var opresult1202 = callmethod(var_pi, "+", [1], new GraceNum(1));
  var_pi = opresult1202;
  return opresult1202;
};
  var call1203 = callmethod(Grace_prelude,"for()do", [1, 1], call1133, block1134);
  return call1203;
};
  var call1204 = callmethod(Grace_prelude,"for()do", [1, 1], call1131, block1132);
  return call1204
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilemethodtypes"] = func1123;
  lineNumber = 387
var func1205 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 375
  lineNumber = 374
  var var_myc = var_auto__95__count;
  lineNumber = 376
  lineNumber = 375
  var opresult1207 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1207;
  lineNumber = 376
  lineNumber = 1
  lineNumber = 376
  var call1208 = callmethod(var_o,"value", [0]);
  lineNumber = 377
  var call1209 = callmethod(this,"compilenode", [1], call1208);
  var var_cond = call1209;
  var string1210 = new GraceString("  var wcond");
  var opresult1212 = callmethod(string1210, "++", [1], var_myc);
  var string1213 = new GraceString(" = Grace_isTrue(");
  var opresult1215 = callmethod(opresult1212, "++", [1], string1213);
  var opresult1217 = callmethod(opresult1215, "++", [1], var_cond);
  var string1218 = new GraceString(");");
  var opresult1220 = callmethod(opresult1217, "++", [1], string1218);
  lineNumber = 378
  var call1221 = callmethod(this,"out", [1], opresult1220);
  var string1222 = new GraceString("  while (wcond");
  var opresult1224 = callmethod(string1222, "++", [1], var_myc);
  var string1225 = new GraceString(") {");
  var opresult1227 = callmethod(opresult1224, "++", [1], string1225);
  lineNumber = 379
  var call1228 = callmethod(this,"out", [1], opresult1227);
  lineNumber = 380
  lineNumber = 379
  var string1229 = new GraceString("null");
  var var_tret = string1229;
  lineNumber = 381
  lineNumber = 380
  lineNumber = 1
  lineNumber = 380
  var call1230 = callmethod(var_o,"body", [0]);
  lineNumber = 381
  var block1231 = Grace_allocObject();
  block1231.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1231.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1231.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1231.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1231.receiver = this;
  block1231.className = 'block<genjs:381>';
  block1231.real = function(
var_l
) {
  lineNumber = 382
  var call1232 = callmethod(this,"compilenode", [1], var_l);
  var_tret = call1232;
  return call1232;
};
  var call1233 = callmethod(Grace_prelude,"for()do", [1, 1], call1230, block1231);
  lineNumber = 383
  lineNumber = 1
  lineNumber = 383
  var call1234 = callmethod(var_o,"value", [0]);
  lineNumber = 384
  var call1235 = callmethod(this,"compilenode", [1], call1234);
  var_cond = call1235;
  var string1236 = new GraceString("  wcond");
  var opresult1238 = callmethod(string1236, "++", [1], var_myc);
  var string1239 = new GraceString(" = Grace_isTrue(");
  var opresult1241 = callmethod(opresult1238, "++", [1], string1239);
  var opresult1243 = callmethod(opresult1241, "++", [1], var_cond);
  var string1244 = new GraceString(");");
  var opresult1246 = callmethod(opresult1243, "++", [1], string1244);
  lineNumber = 385
  var call1247 = callmethod(this,"out", [1], opresult1246);
  var string1248 = new GraceString("  }");
  lineNumber = 386
  var call1249 = callmethod(this,"out", [1], string1248);
  lineNumber = 387
  lineNumber = 1
  lineNumber = 386
  var call1250 = callmethod(var_o,"register:=", [1], var_cond);
  return call1250
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilewhile"] = func1205;
  lineNumber = 407
var func1251 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 390
  lineNumber = 389
  var var_myc = var_auto__95__count;
  lineNumber = 391
  lineNumber = 390
  var opresult1253 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1253;
  lineNumber = 391
  var string1254 = new GraceString("  if (Grace_isTrue(");
  lineNumber = 1
  lineNumber = 391
  var call1255 = callmethod(var_o,"value", [0]);
  var call1256 = callmethod(this,"compilenode", [1], call1255);
  var opresult1258 = callmethod(string1254, "++", [1], call1256);
  var string1259 = new GraceString(")) {");
  var opresult1261 = callmethod(opresult1258, "++", [1], string1259);
  lineNumber = 392
  var call1262 = callmethod(this,"out", [1], opresult1261);
  lineNumber = 393
  lineNumber = 392
  var string1263 = new GraceString("undefined");
  var var_tret = string1263;
  lineNumber = 394
  lineNumber = 393
  var string1264 = new GraceString("undefined");
  var var_fret = string1264;
  lineNumber = 395
  lineNumber = 394
  lineNumber = 1
  lineNumber = 394
  var call1265 = callmethod(var_o,"thenblock", [0]);
  lineNumber = 395
  var block1266 = Grace_allocObject();
  block1266.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1266.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1266.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1266.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1266.receiver = this;
  block1266.className = 'block<genjs:395>';
  block1266.real = function(
var_l
) {
  lineNumber = 396
  var call1267 = callmethod(this,"compilenode", [1], var_l);
  var_tret = call1267;
  return call1267;
};
  var call1268 = callmethod(Grace_prelude,"for()do", [1, 1], call1265, block1266);
  lineNumber = 397
  var string1269 = new GraceString("  var if");
  var opresult1271 = callmethod(string1269, "++", [1], var_myc);
  var string1272 = new GraceString(" = ");
  var opresult1274 = callmethod(opresult1271, "++", [1], string1272);
  var opresult1276 = callmethod(opresult1274, "++", [1], var_tret);
  var string1277 = new GraceString(";");
  var opresult1279 = callmethod(opresult1276, "++", [1], string1277);
  lineNumber = 398
  var call1280 = callmethod(this,"out", [1], opresult1279);
  lineNumber = 403
  lineNumber = 405
  lineNumber = 1
  lineNumber = 405
  lineNumber = 1
  lineNumber = 398
  var call1282 = callmethod(var_o,"elseblock", [0]);
  var call1283 = callmethod(call1282,"size", [0]);
  var opresult1285 = callmethod(call1283, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1285)) {
  lineNumber = 399
  var string1286 = new GraceString("  } else {");
  lineNumber = 400
  var call1287 = callmethod(this,"out", [1], string1286);
  lineNumber = 401
  lineNumber = 400
  lineNumber = 1
  lineNumber = 400
  var call1288 = callmethod(var_o,"elseblock", [0]);
  lineNumber = 401
  var block1289 = Grace_allocObject();
  block1289.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1289.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1289.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1289.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1289.receiver = this;
  block1289.className = 'block<genjs:401>';
  block1289.real = function(
var_l
) {
  lineNumber = 402
  var call1290 = callmethod(this,"compilenode", [1], var_l);
  var_fret = call1290;
  return call1290;
};
  var call1291 = callmethod(Grace_prelude,"for()do", [1, 1], call1288, block1289);
  lineNumber = 403
  var string1292 = new GraceString("  var if");
  var opresult1294 = callmethod(string1292, "++", [1], var_myc);
  var string1295 = new GraceString(" = ");
  var opresult1297 = callmethod(opresult1294, "++", [1], string1295);
  var opresult1299 = callmethod(opresult1297, "++", [1], var_fret);
  var string1300 = new GraceString(";");
  var opresult1302 = callmethod(opresult1299, "++", [1], string1300);
  lineNumber = 404
  var call1303 = callmethod(this,"out", [1], opresult1302);
  var if1281 = call1303;
}
  lineNumber = 405
  var string1304 = new GraceString("}");
  lineNumber = 406
  var call1305 = callmethod(this,"out", [1], string1304);
  lineNumber = 407
  lineNumber = 1
  lineNumber = 407
  lineNumber = 406
  var string1306 = new GraceString("if");
  var opresult1308 = callmethod(string1306, "++", [1], var_myc);
  var call1309 = callmethod(var_o,"register:=", [1], opresult1308);
  return call1309
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileif"] = func1251;
  lineNumber = 421
var func1310 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 410
  lineNumber = 1
  lineNumber = 409
  var call1311 = callmethod(var_o,"value", [0]);
  var var_name = call1311;
  lineNumber = 421
  lineNumber = 424
  lineNumber = 410
  var string1313 = new GraceString("self");
  var opresult1315 = callmethod(var_name, "==", [1], string1313);
  if (Grace_isTrue(opresult1315)) {
  lineNumber = 412
  lineNumber = 1
  lineNumber = 411
  var string1316 = new GraceString("this");
  var call1317 = callmethod(var_o,"register:=", [1], string1316);
  var if1312 = call1317;
  } else {
  lineNumber = 421
  lineNumber = 414
  lineNumber = 412
  var string1319 = new GraceString("...");
  var opresult1321 = callmethod(var_name, "==", [1], string1319);
  if (Grace_isTrue(opresult1321)) {
  lineNumber = 414
  lineNumber = 1
  lineNumber = 413
  var string1322 = new GraceString("ellipsis");
  var call1323 = callmethod(var_o,"register:=", [1], string1322);
  var if1318 = call1323;
  } else {
  lineNumber = 421
  lineNumber = 415
  var call1325 = callmethod(var_modules,"contains", [1], var_name);
  if (Grace_isTrue(call1325)) {
  lineNumber = 416
  var string1326 = new GraceString("  // WARNING: module support not implemented in JS backend");
  lineNumber = 417
  var call1327 = callmethod(this,"out", [1], string1326);
  lineNumber = 418
  lineNumber = 417
  var string1328 = new GraceString("  \"var_val_");
  var opresult1330 = callmethod(string1328, "++", [1], var_name);
  var opresult1332 = callmethod(opresult1330, "++", [1], var_auto__95__count);
  lineNumber = 418
  var string1333 = new GraceString("\" = load %object** @.module.");
  var opresult1335 = callmethod(opresult1332, "++", [1], string1333);
  var opresult1337 = callmethod(opresult1335, "++", [1], var_name);
  lineNumber = 419
  var call1338 = callmethod(this,"out", [1], opresult1337);
  var if1324 = call1338;
  } else {
  lineNumber = 420
  var call1339 = callmethod(var_usedvars,"push", [1], var_name);
  lineNumber = 421
  lineNumber = 1
  lineNumber = 421
  lineNumber = 422
  var call1340 = callmethod(this,"varf", [1], var_name);
  lineNumber = 421
  var call1341 = callmethod(var_o,"register:=", [1], call1340);
  var if1324 = call1341;
}
  var if1318 = if1324;
}
  var if1312 = if1318;
}
  return if1312
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileidentifier"] = func1310;
  lineNumber = 447
var func1342 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 427
  lineNumber = 1
  lineNumber = 426
  var call1343 = callmethod(var_o,"dest", [0]);
  var var_dest = call1343;
  lineNumber = 428
  lineNumber = 427
  var string1344 = new GraceString("");
  var var_val = string1344;
  lineNumber = 429
  lineNumber = 428
  var string1345 = new GraceString("");
  var var_c = string1345;
  lineNumber = 430
  lineNumber = 429
  var string1346 = new GraceString("");
  var var_r = string1346;
  lineNumber = 447
  lineNumber = 448
  lineNumber = 1
  lineNumber = 430
  var call1348 = callmethod(var_dest,"kind", [0]);
  var string1349 = new GraceString("identifier");
  var opresult1351 = callmethod(call1348, "==", [1], string1349);
  if (Grace_isTrue(opresult1351)) {
  lineNumber = 432
  lineNumber = 1
  lineNumber = 431
  var call1352 = callmethod(var_o,"value", [0]);
  var_val = call1352;
  lineNumber = 432
  lineNumber = 433
  var call1353 = callmethod(this,"compilenode", [1], var_val);
  var_val = call1353;
  lineNumber = 1
  lineNumber = 433
  lineNumber = 1
  lineNumber = 433
  var call1354 = callmethod(var_dest,"value", [0]);
  var call1355 = callmethod(call1354,"_escape", [0]);
  var var_nm = call1355;
  lineNumber = 434
  var call1356 = callmethod(var_usedvars,"push", [1], var_nm);
  lineNumber = 435
  var string1357 = new GraceString("  ");
  var call1358 = callmethod(this,"varf", [1], var_nm);
  var opresult1360 = callmethod(string1357, "++", [1], call1358);
  var string1361 = new GraceString(" = ");
  var opresult1363 = callmethod(opresult1360, "++", [1], string1361);
  var opresult1365 = callmethod(opresult1363, "++", [1], var_val);
  var string1366 = new GraceString(";");
  var opresult1368 = callmethod(opresult1365, "++", [1], string1366);
  lineNumber = 436
  var call1369 = callmethod(this,"out", [1], opresult1368);
  lineNumber = 437
  lineNumber = 1
  lineNumber = 436
  var call1370 = callmethod(var_o,"register:=", [1], var_val);
  var if1347 = call1370;
  } else {
  lineNumber = 447
  lineNumber = 442
  lineNumber = 1
  lineNumber = 437
  var call1372 = callmethod(var_dest,"kind", [0]);
  var string1373 = new GraceString("member");
  var opresult1375 = callmethod(call1372, "==", [1], string1373);
  if (Grace_isTrue(opresult1375)) {
  lineNumber = 439
  lineNumber = 1
  lineNumber = 439
  lineNumber = 1
  lineNumber = 438
  var call1376 = callmethod(var_dest,"value", [0]);
  var string1377 = new GraceString(":=");
  var opresult1379 = callmethod(call1376, "++", [1], string1377);
  var call1380 = callmethod(var_dest,"value:=", [1], opresult1379);
  lineNumber = 439
  lineNumber = 1
  lineNumber = 439
  var call1382 = callmethod(var_dest,"value", [0]);
  lineNumber = 1
  lineNumber = 439
  var call1384 = callmethod(var_o,"value", [0]);
  var array1383 = new GraceList([
call1384,
]);

  lineNumber = 1
  lineNumber = 439
  var call1385 = callmethod(var_ast,"callWithPart", [0]);
  var call1386 = callmethod(call1385,"new", [2], call1382, array1383);
  var array1381 = new GraceList([
call1386,
]);

  lineNumber = 440
  lineNumber = 1
  lineNumber = 439
  var call1387 = callmethod(var_ast,"callNode", [0]);
  var call1388 = callmethod(call1387,"new", [2], var_dest, array1381);
  var_c = call1388;
  lineNumber = 440
  lineNumber = 441
  var call1389 = callmethod(this,"compilenode", [1], var_c);
  var_r = call1389;
  lineNumber = 442
  lineNumber = 1
  lineNumber = 441
  var call1390 = callmethod(var_o,"register:=", [1], var_r);
  var if1371 = call1390;
  } else {
  lineNumber = 447
  lineNumber = 448
  lineNumber = 1
  lineNumber = 442
  var call1392 = callmethod(var_dest,"kind", [0]);
  var string1393 = new GraceString("index");
  var opresult1395 = callmethod(call1392, "==", [1], string1393);
  if (Grace_isTrue(opresult1395)) {
  lineNumber = 443
  var string1396 = new GraceString("[]:=");
  lineNumber = 1
  lineNumber = 443
  var call1397 = callmethod(var_dest,"value", [0]);
  lineNumber = 444
  lineNumber = 1
  lineNumber = 443
  var call1398 = callmethod(var_ast,"memberNode", [0]);
  var call1399 = callmethod(call1398,"new", [2], string1396, call1397);
  var var_imem = call1399;
  lineNumber = 444
  lineNumber = 1
  lineNumber = 444
  var call1401 = callmethod(var_imem,"value", [0]);
  lineNumber = 1
  lineNumber = 444
  var call1403 = callmethod(var_dest,"index", [0]);
  lineNumber = 1
  lineNumber = 444
  var call1404 = callmethod(var_o,"value", [0]);
  var array1402 = new GraceList([
call1403,
call1404,
]);

  lineNumber = 1
  lineNumber = 444
  var call1405 = callmethod(var_ast,"callWithPart", [0]);
  var call1406 = callmethod(call1405,"new", [2], call1401, array1402);
  var array1400 = new GraceList([
call1406,
]);

  lineNumber = 445
  lineNumber = 1
  lineNumber = 444
  var call1407 = callmethod(var_ast,"callNode", [0]);
  var call1408 = callmethod(call1407,"new", [2], var_imem, array1400);
  var_c = call1408;
  lineNumber = 445
  lineNumber = 446
  var call1409 = callmethod(this,"compilenode", [1], var_c);
  var_r = call1409;
  lineNumber = 447
  lineNumber = 1
  lineNumber = 446
  var call1410 = callmethod(var_o,"register:=", [1], var_r);
  var if1391 = call1410;
}
  var if1371 = if1391;
}
  var if1347 = if1371;
}
  return if1347
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilebind"] = func1342;
  lineNumber = 469
var func1411 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 451
  var var_nm;
  lineNumber = 454
  lineNumber = 456
  lineNumber = 1
  lineNumber = 456
  lineNumber = 1
  lineNumber = 451
  var call1413 = callmethod(var_o,"name", [0]);
  var call1414 = callmethod(call1413,"kind", [0]);
  var string1415 = new GraceString("generic");
  var opresult1417 = callmethod(call1414, "==", [1], string1415);
  if (Grace_isTrue(opresult1417)) {
  lineNumber = 452
  lineNumber = 1
  lineNumber = 452
  lineNumber = 1
  lineNumber = 452
  lineNumber = 1
  lineNumber = 452
  lineNumber = 1
  lineNumber = 452
  var call1418 = callmethod(var_o,"name", [0]);
  var call1419 = callmethod(call1418,"value", [0]);
  var call1420 = callmethod(call1419,"value", [0]);
  var call1421 = callmethod(call1420,"_escape", [0]);
  var_nm = call1421;
  var if1412 = call1421;
  } else {
  lineNumber = 454
  lineNumber = 1
  lineNumber = 454
  lineNumber = 1
  lineNumber = 454
  lineNumber = 1
  lineNumber = 454
  var call1422 = callmethod(var_o,"name", [0]);
  var call1423 = callmethod(call1422,"value", [0]);
  var call1424 = callmethod(call1423,"_escape", [0]);
  var_nm = call1424;
  var if1412 = call1424;
}
  lineNumber = 456
  var call1425 = callmethod(var_declaredvars,"push", [1], var_nm);
  lineNumber = 458
  lineNumber = 1
  lineNumber = 457
  var call1426 = callmethod(var_o,"value", [0]);
  var var_val = call1426;
  lineNumber = 461
  lineNumber = 463
  lineNumber = 458
  var bool1428 = new GraceBoolean(false)
  var opresult1430 = callmethod(bool1428, "!=", [1], var_val);
  if (Grace_isTrue(opresult1430)) {
  lineNumber = 459
  lineNumber = 460
  var call1431 = callmethod(this,"compilenode", [1], var_val);
  var_val = call1431;
  var if1427 = call1431;
  } else {
  lineNumber = 461
  var string1432 = new GraceString("const must have value bound.");
  var call1433 = callmethod(var_util,"syntax_error", [1], string1432);
  var if1427 = call1433;
}
  lineNumber = 463
  var string1434 = new GraceString("  var ");
  var call1435 = callmethod(this,"varf", [1], var_nm);
  var opresult1437 = callmethod(string1434, "++", [1], call1435);
  var string1438 = new GraceString(" = ");
  var opresult1440 = callmethod(opresult1437, "++", [1], string1438);
  var opresult1442 = callmethod(opresult1440, "++", [1], var_val);
  var string1443 = new GraceString(";");
  var opresult1445 = callmethod(opresult1442, "++", [1], string1443);
  lineNumber = 464
  var call1446 = callmethod(this,"out", [1], opresult1445);
  lineNumber = 466
  lineNumber = 468
  lineNumber = 464
  var opresult1449 = callmethod(var_compilationDepth, "==", [1], new GraceNum(1));
  if (Grace_isTrue(opresult1449)) {
  lineNumber = 466
  lineNumber = 465
  lineNumber = 1
  lineNumber = 465
  var call1450 = callmethod(var_o,"name", [0]);
  lineNumber = 1
  lineNumber = 465
  lineNumber = 1
  lineNumber = 465
  var call1452 = callmethod(var_o,"name", [0]);
  var call1453 = callmethod(call1452,"value", [0]);
  lineNumber = 1
  lineNumber = 465
  var call1454 = callmethod(var_ast,"signaturePart", [0]);
  var call1455 = callmethod(call1454,"new", [1], call1453);
  var array1451 = new GraceList([
call1455,
]);

  lineNumber = 466
  lineNumber = 1
  lineNumber = 466
  var call1457 = callmethod(var_o,"name", [0]);
  var array1456 = new GraceList([
call1457,
]);

  var bool1458 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 465
  var call1459 = callmethod(var_ast,"methodNode", [0]);
  var call1460 = callmethod(call1459,"new", [4], call1450, array1451, array1456, bool1458);
  lineNumber = 467
  var call1461 = callmethod(this,"compilenode", [1], call1460);
  var if1447 = call1461;
}
  lineNumber = 469
  lineNumber = 1
  lineNumber = 468
  var call1462 = callmethod(var_o,"register:=", [1], var_val);
  return call1462
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compiledefdec"] = func1411;
  lineNumber = 491
var func1463 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 471
  lineNumber = 1
  lineNumber = 471
  lineNumber = 1
  lineNumber = 471
  lineNumber = 1
  lineNumber = 471
  var call1464 = callmethod(var_o,"name", [0]);
  var call1465 = callmethod(call1464,"value", [0]);
  var call1466 = callmethod(call1465,"_escape", [0]);
  var var_nm = call1466;
  lineNumber = 472
  var call1467 = callmethod(var_declaredvars,"push", [1], var_nm);
  lineNumber = 474
  lineNumber = 1
  lineNumber = 473
  var call1468 = callmethod(var_o,"value", [0]);
  var var_val = call1468;
  lineNumber = 480
  lineNumber = 481
  lineNumber = 474
  var bool1470 = new GraceBoolean(false)
  var opresult1472 = callmethod(bool1470, "!=", [1], var_val);
  if (Grace_isTrue(opresult1472)) {
  lineNumber = 475
  lineNumber = 476
  var call1473 = callmethod(this,"compilenode", [1], var_val);
  var_val = call1473;
  var string1474 = new GraceString("  var ");
  var call1475 = callmethod(this,"varf", [1], var_nm);
  var opresult1477 = callmethod(string1474, "++", [1], call1475);
  var string1478 = new GraceString(" = ");
  var opresult1480 = callmethod(opresult1477, "++", [1], string1478);
  var opresult1482 = callmethod(opresult1480, "++", [1], var_val);
  var string1483 = new GraceString(";");
  var opresult1485 = callmethod(opresult1482, "++", [1], string1483);
  lineNumber = 477
  var call1486 = callmethod(this,"out", [1], opresult1485);
  var if1469 = call1486;
  } else {
  lineNumber = 478
  var string1487 = new GraceString("  var ");
  var call1488 = callmethod(this,"varf", [1], var_nm);
  var opresult1490 = callmethod(string1487, "++", [1], call1488);
  var string1491 = new GraceString(";");
  var opresult1493 = callmethod(opresult1490, "++", [1], string1491);
  lineNumber = 479
  var call1494 = callmethod(this,"out", [1], opresult1493);
  lineNumber = 480
  lineNumber = 479
  var string1495 = new GraceString("false");
  var_val = string1495;
  var if1469 = string1495;
}
  lineNumber = 488
  lineNumber = 490
  lineNumber = 481
  var opresult1498 = callmethod(var_compilationDepth, "==", [1], new GraceNum(1));
  if (Grace_isTrue(opresult1498)) {
  lineNumber = 483
  lineNumber = 482
  lineNumber = 1
  lineNumber = 482
  var call1499 = callmethod(var_o,"name", [0]);
  lineNumber = 1
  lineNumber = 482
  lineNumber = 1
  lineNumber = 482
  var call1501 = callmethod(var_o,"name", [0]);
  var call1502 = callmethod(call1501,"value", [0]);
  lineNumber = 1
  lineNumber = 482
  var call1503 = callmethod(var_ast,"signaturePart", [0]);
  var call1504 = callmethod(call1503,"new", [1], call1502);
  var array1500 = new GraceList([
call1504,
]);

  lineNumber = 483
  lineNumber = 1
  lineNumber = 483
  var call1506 = callmethod(var_o,"name", [0]);
  var array1505 = new GraceList([
call1506,
]);

  var bool1507 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 482
  var call1508 = callmethod(var_ast,"methodNode", [0]);
  var call1509 = callmethod(call1508,"new", [4], call1499, array1500, array1505, bool1507);
  lineNumber = 484
  var call1510 = callmethod(this,"compilenode", [1], call1509);
  lineNumber = 1
  lineNumber = 484
  lineNumber = 1
  lineNumber = 484
  var call1511 = callmethod(var_o,"name", [0]);
  var call1512 = callmethod(call1511,"value", [0]);
  var string1513 = new GraceString(":=");
  var opresult1515 = callmethod(call1512, "++", [1], string1513);
  var bool1516 = new GraceBoolean(false)
  lineNumber = 485
  lineNumber = 1
  lineNumber = 484
  var call1517 = callmethod(var_ast,"identifierNode", [0]);
  var call1518 = callmethod(call1517,"new", [2], opresult1515, bool1516);
  var var_assignID = call1518;
  lineNumber = 485
  var string1519 = new GraceString("_var_assign_tmp");
  var bool1520 = new GraceBoolean(false)
  lineNumber = 486
  lineNumber = 1
  lineNumber = 485
  var call1521 = callmethod(var_ast,"identifierNode", [0]);
  var call1522 = callmethod(call1521,"new", [2], string1519, bool1520);
  var var_tmpID = call1522;
  lineNumber = 488
  lineNumber = 486
  lineNumber = 487
  lineNumber = 1
  lineNumber = 487
  var call1524 = callmethod(var_assignID,"value", [0]);
  var array1525 = new GraceList([
var_tmpID,
]);

  lineNumber = 1
  lineNumber = 487
  var call1526 = callmethod(var_ast,"signaturePart", [0]);
  var call1527 = callmethod(call1526,"new", [2], call1524, array1525);
  var array1523 = new GraceList([
call1527,
]);

  lineNumber = 488
  lineNumber = 1
  lineNumber = 488
  var call1529 = callmethod(var_o,"name", [0]);
  lineNumber = 1
  lineNumber = 488
  var call1530 = callmethod(var_ast,"bindNode", [0]);
  var call1531 = callmethod(call1530,"new", [2], call1529, var_tmpID);
  var array1528 = new GraceList([
call1531,
]);

  var bool1532 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 486
  var call1533 = callmethod(var_ast,"methodNode", [0]);
  var call1534 = callmethod(call1533,"new", [4], var_assignID, array1523, array1528, bool1532);
  lineNumber = 489
  var call1535 = callmethod(this,"compilenode", [1], call1534);
  var if1496 = call1535;
}
  lineNumber = 491
  lineNumber = 1
  lineNumber = 490
  var call1536 = callmethod(var_o,"register:=", [1], var_val);
  return call1536
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilevardec"] = func1463;
  lineNumber = 499
var func1537 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 493
  lineNumber = 1
  lineNumber = 493
  var call1538 = callmethod(var_o,"value", [0]);
  lineNumber = 494
  var call1539 = callmethod(this,"compilenode", [1], call1538);
  var var_of = call1539;
  lineNumber = 1
  lineNumber = 494
  var call1540 = callmethod(var_o,"index", [0]);
  lineNumber = 495
  var call1541 = callmethod(this,"compilenode", [1], call1540);
  var var_index = call1541;
  lineNumber = 496
  lineNumber = 495
  var string1542 = new GraceString("  var idxres");
  var opresult1544 = callmethod(string1542, "++", [1], var_auto__95__count);
  var string1545 = new GraceString(" = ");
  var opresult1547 = callmethod(opresult1544, "++", [1], string1545);
  var opresult1549 = callmethod(opresult1547, "++", [1], var_of);
  var string1550 = new GraceString(".methods[\"[]\"]");
  var opresult1552 = callmethod(opresult1549, "++", [1], string1550);
  lineNumber = 496
  var string1553 = new GraceString(".call(");
  var opresult1555 = callmethod(opresult1552, "++", [1], string1553);
  var opresult1557 = callmethod(opresult1555, "++", [1], var_of);
  var string1558 = new GraceString(", [1], ");
  var opresult1560 = callmethod(opresult1557, "++", [1], string1558);
  var opresult1562 = callmethod(opresult1560, "++", [1], var_index);
  var string1563 = new GraceString(");");
  var opresult1565 = callmethod(opresult1562, "++", [1], string1563);
  lineNumber = 497
  var call1566 = callmethod(this,"out", [1], opresult1565);
  lineNumber = 498
  lineNumber = 1
  lineNumber = 498
  lineNumber = 497
  var string1567 = new GraceString("idxres");
  var opresult1569 = callmethod(string1567, "++", [1], var_auto__95__count);
  var call1570 = callmethod(var_o,"register:=", [1], opresult1569);
  lineNumber = 499
  lineNumber = 498
  var opresult1572 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1572;
  return opresult1572
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileindex"] = func1537;
  lineNumber = 516
var func1573 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 502
  lineNumber = 501
  var var_myc = var_auto__95__count;
  lineNumber = 503
  lineNumber = 502
  var opresult1575 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1575;
  lineNumber = 504
  lineNumber = 1
  lineNumber = 503
  var call1576 = callmethod(var_o,"cases", [0]);
  var var_cases = call1576;
  lineNumber = 504
  lineNumber = 1
  lineNumber = 504
  var call1577 = callmethod(var_o,"value", [0]);
  lineNumber = 505
  var call1578 = callmethod(this,"compilenode", [1], call1577);
  var var_matchee = call1578;
  var string1579 = new GraceString("  var cases");
  var opresult1581 = callmethod(string1579, "++", [1], var_myc);
  var string1582 = new GraceString(" = [];");
  var opresult1584 = callmethod(opresult1581, "++", [1], string1582);
  lineNumber = 506
  var call1585 = callmethod(this,"out", [1], opresult1584);
  lineNumber = 508
  lineNumber = 506
  lineNumber = 508
  var block1586 = Grace_allocObject();
  block1586.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1586.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1586.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1586.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1586.receiver = this;
  block1586.className = 'block<genjs:508>';
  block1586.real = function(
var_c
) {
  lineNumber = 507
  lineNumber = 508
  var call1587 = callmethod(this,"compilenode", [1], var_c);
  var var_e = call1587;
  var string1588 = new GraceString("  cases");
  var opresult1590 = callmethod(string1588, "++", [1], var_myc);
  var string1591 = new GraceString(".push(");
  var opresult1593 = callmethod(opresult1590, "++", [1], string1591);
  var opresult1595 = callmethod(opresult1593, "++", [1], var_e);
  var string1596 = new GraceString(");");
  var opresult1598 = callmethod(opresult1595, "++", [1], string1596);
  lineNumber = 509
  var call1599 = callmethod(this,"out", [1], opresult1598);
  return call1599;
};
  var call1600 = callmethod(Grace_prelude,"for()do", [1, 1], var_cases, block1586);
  lineNumber = 511
  lineNumber = 510
  var string1601 = new GraceString("false");
  var var_elsecase = string1601;
  lineNumber = 512
  lineNumber = 514
  lineNumber = 511
  var bool1603 = new GraceBoolean(false)
  lineNumber = 514
  lineNumber = 1
  lineNumber = 511
  var call1604 = callmethod(var_o,"elsecase", [0]);
  var opresult1606 = callmethod(bool1603, "!=", [1], call1604);
  if (Grace_isTrue(opresult1606)) {
  lineNumber = 512
  lineNumber = 1
  lineNumber = 512
  var call1607 = callmethod(var_o,"elsecase", [0]);
  lineNumber = 513
  var call1608 = callmethod(this,"compilenode", [1], call1607);
  var_elsecase = call1608;
  var if1602 = call1608;
}
  lineNumber = 514
  var string1609 = new GraceString("  var matchres");
  var opresult1611 = callmethod(string1609, "++", [1], var_myc);
  var string1612 = new GraceString(" = matchCase(");
  var opresult1614 = callmethod(opresult1611, "++", [1], string1612);
  var opresult1616 = callmethod(opresult1614, "++", [1], var_matchee);
  var string1617 = new GraceString(",cases");
  var opresult1619 = callmethod(opresult1616, "++", [1], string1617);
  var opresult1621 = callmethod(opresult1619, "++", [1], var_myc);
  var string1622 = new GraceString(",");
  var opresult1624 = callmethod(opresult1621, "++", [1], string1622);
  var opresult1626 = callmethod(opresult1624, "++", [1], var_elsecase);
  var string1627 = new GraceString(");");
  var opresult1629 = callmethod(opresult1626, "++", [1], string1627);
  lineNumber = 515
  var call1630 = callmethod(this,"out", [1], opresult1629);
  lineNumber = 516
  lineNumber = 1
  lineNumber = 516
  lineNumber = 515
  var string1631 = new GraceString("matchres");
  var opresult1633 = callmethod(string1631, "++", [1], var_myc);
  var call1634 = callmethod(var_o,"register:=", [1], opresult1633);
  return call1634
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilematchcase"] = func1573;
  lineNumber = 538
var func1635 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 518
  lineNumber = 1
  lineNumber = 518
  var call1636 = callmethod(var_o,"left", [0]);
  lineNumber = 519
  var call1637 = callmethod(this,"compilenode", [1], call1636);
  var var_left = call1637;
  lineNumber = 1
  lineNumber = 519
  var call1638 = callmethod(var_o,"right", [0]);
  lineNumber = 520
  var call1639 = callmethod(this,"compilenode", [1], call1638);
  var var_right = call1639;
  lineNumber = 521
  lineNumber = 520
  var opresult1641 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1641;
  lineNumber = 522
  lineNumber = 521
  var string1642 = new GraceString("opresult");
  var var_rnm = string1642;
  lineNumber = 524
  lineNumber = 525
  lineNumber = 1
  lineNumber = 522
  var call1644 = callmethod(var_o,"value", [0]);
  var string1645 = new GraceString("*");
  var opresult1647 = callmethod(call1644, "==", [1], string1645);
  if (Grace_isTrue(opresult1647)) {
  lineNumber = 524
  lineNumber = 523
  var string1648 = new GraceString("prod");
  var_rnm = string1648;
  var if1643 = string1648;
}
  lineNumber = 527
  lineNumber = 528
  lineNumber = 1
  lineNumber = 525
  var call1650 = callmethod(var_o,"value", [0]);
  var string1651 = new GraceString("/");
  var opresult1653 = callmethod(call1650, "==", [1], string1651);
  if (Grace_isTrue(opresult1653)) {
  lineNumber = 527
  lineNumber = 526
  var string1654 = new GraceString("quotient");
  var_rnm = string1654;
  var if1649 = string1654;
}
  lineNumber = 530
  lineNumber = 531
  lineNumber = 1
  lineNumber = 528
  var call1656 = callmethod(var_o,"value", [0]);
  var string1657 = new GraceString("-");
  var opresult1659 = callmethod(call1656, "==", [1], string1657);
  if (Grace_isTrue(opresult1659)) {
  lineNumber = 530
  lineNumber = 529
  var string1660 = new GraceString("diff");
  var_rnm = string1660;
  var if1655 = string1660;
}
  lineNumber = 533
  lineNumber = 534
  lineNumber = 1
  lineNumber = 531
  var call1662 = callmethod(var_o,"value", [0]);
  var string1663 = new GraceString("%");
  var opresult1665 = callmethod(call1662, "==", [1], string1663);
  if (Grace_isTrue(opresult1665)) {
  lineNumber = 533
  lineNumber = 532
  var string1666 = new GraceString("modulus");
  var_rnm = string1666;
  var if1661 = string1666;
}
  lineNumber = 535
  lineNumber = 534
  var string1667 = new GraceString("  var ");
  var opresult1669 = callmethod(string1667, "++", [1], var_rnm);
  var opresult1671 = callmethod(opresult1669, "++", [1], var_auto__95__count);
  var string1672 = new GraceString(" = callmethod(");
  var opresult1674 = callmethod(opresult1671, "++", [1], string1672);
  var opresult1676 = callmethod(opresult1674, "++", [1], var_left);
  lineNumber = 535
  var string1677 = new GraceString(", \"");
  var opresult1679 = callmethod(opresult1676, "++", [1], string1677);
  lineNumber = 1
  lineNumber = 535
  var call1680 = callmethod(var_o,"value", [0]);
  var opresult1682 = callmethod(opresult1679, "++", [1], call1680);
  var string1683 = new GraceString("\", [1], ");
  var opresult1685 = callmethod(opresult1682, "++", [1], string1683);
  var opresult1687 = callmethod(opresult1685, "++", [1], var_right);
  var string1688 = new GraceString(");");
  var opresult1690 = callmethod(opresult1687, "++", [1], string1688);
  lineNumber = 536
  var call1691 = callmethod(this,"out", [1], opresult1690);
  lineNumber = 537
  lineNumber = 1
  lineNumber = 537
  lineNumber = 536
  var opresult1693 = callmethod(var_rnm, "++", [1], var_auto__95__count);
  var call1694 = callmethod(var_o,"register:=", [1], opresult1693);
  lineNumber = 538
  lineNumber = 537
  var opresult1696 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1696;
  return opresult1696
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileop"] = func1635;
  lineNumber = 622
var func1697 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 541
  var array1698 = new GraceList([
]);

  var var_args = array1698;
  lineNumber = 542
  lineNumber = 541
  var string1699 = new GraceString("");
  var var_obj = string1699;
  lineNumber = 543
  lineNumber = 542
  var var_len = new GraceNum(0);
  lineNumber = 544
  lineNumber = 543
  var string1700 = new GraceString("");
  var var_con = string1700;
  lineNumber = 547
  lineNumber = 544
  lineNumber = 1
  lineNumber = 544
  var call1701 = callmethod(var_o,"with", [0]);
  lineNumber = 547
  var block1702 = Grace_allocObject();
  block1702.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1702.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1702.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1702.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1702.receiver = this;
  block1702.className = 'block<genjs:547>';
  block1702.real = function(
var_part
) {
  lineNumber = 545
  lineNumber = 1
  lineNumber = 545
  var call1703 = callmethod(var_part,"args", [0]);
  lineNumber = 547
  var block1704 = Grace_allocObject();
  block1704.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1704.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1704.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1704.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1704.receiver = this;
  block1704.className = 'block<genjs:547>';
  block1704.real = function(
var_p
) {
  lineNumber = 546
  lineNumber = 547
  var call1705 = callmethod(this,"compilenode", [1], var_p);
  var var_r = call1705;
  var call1706 = callmethod(var_args,"push", [1], var_r);
  return call1706;
};
  var call1707 = callmethod(Grace_prelude,"for()do", [1, 1], call1703, block1704);
  return call1707;
};
  var call1708 = callmethod(Grace_prelude,"for()do", [1, 1], call1701, block1702);
  lineNumber = 618
  lineNumber = 551
  lineNumber = 620
  lineNumber = 1
  lineNumber = 620
  lineNumber = 1
  lineNumber = 550
  var call1710 = callmethod(var_o,"value", [0]);
  var call1711 = callmethod(call1710,"kind", [0]);
  var string1712 = new GraceString("member");
  var opresult1714 = callmethod(call1711, "==", [1], string1712);
  lineNumber = 551
  var block1715 = Grace_allocObject();
  block1715.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1715.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1715.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1715.receiver = this;
  block1715.className = 'block<genjs:551>';
  block1715.real = function(
) {
  lineNumber = 1
  lineNumber = 551
  lineNumber = 1
  lineNumber = 551
  lineNumber = 1
  lineNumber = 550
  var call1716 = callmethod(var_o,"value", [0]);
  var call1717 = callmethod(call1716,"in", [0]);
  var call1718 = callmethod(call1717,"kind", [0]);
  var string1719 = new GraceString("identifier");
  var opresult1721 = callmethod(call1718, "==", [1], string1719);
  lineNumber = 551
  lineNumber = 1
  lineNumber = 551
  lineNumber = 1
  lineNumber = 551
  lineNumber = 1
  lineNumber = 551
  var call1722 = callmethod(var_o,"value", [0]);
  var call1723 = callmethod(call1722,"in", [0]);
  var call1724 = callmethod(call1723,"value", [0]);
  var string1725 = new GraceString("super");
  var opresult1727 = callmethod(call1724, "==", [1], string1725);
  var opresult1729 = callmethod(opresult1721, "&", [1], opresult1727);
  return opresult1729;
};
  var opresult1731 = callmethod(opresult1714, "&&", [1], block1715);
  if (Grace_isTrue(opresult1731)) {
  lineNumber = 553
  lineNumber = 554
  lineNumber = 552
  var string1732 = new GraceString("  var call");
  var opresult1734 = callmethod(string1732, "++", [1], var_auto__95__count);
  var string1735 = new GraceString(" = callmethodsuper(this");
  var opresult1737 = callmethod(opresult1734, "++", [1], string1735);
  lineNumber = 553
  var string1738 = new GraceString(", \"");
  var opresult1740 = callmethod(opresult1737, "++", [1], string1738);
  lineNumber = 1
  lineNumber = 553
  lineNumber = 1
  lineNumber = 553
  lineNumber = 1
  lineNumber = 553
  var call1741 = callmethod(var_o,"value", [0]);
  var call1742 = callmethod(call1741,"value", [0]);
  var call1743 = callmethod(call1742,"_escape", [0]);
  var opresult1745 = callmethod(opresult1740, "++", [1], call1743);
  var string1746 = new GraceString("\", [");
  var opresult1748 = callmethod(opresult1745, "++", [1], string1746);
  var var_call = opresult1748;
  lineNumber = 558
  lineNumber = 554
  lineNumber = 1
  lineNumber = 554
  lineNumber = 1
  lineNumber = 554
  var call1749 = callmethod(var_o,"with", [0]);
  var call1750 = callmethod(call1749,"indices", [0]);
  lineNumber = 558
  var block1751 = Grace_allocObject();
  block1751.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1751.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1751.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1751.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1751.receiver = this;
  block1751.className = 'block<genjs:558>';
  block1751.real = function(
var_partnr
) {
  lineNumber = 556
  lineNumber = 555
  lineNumber = 556
  lineNumber = 1
  lineNumber = 556
  lineNumber = 1
  lineNumber = 556
  lineNumber = 1
  lineNumber = 555
  var call1752 = callmethod(var_o,"with", [0]);
  var idxres1753 = call1752.methods["[]"].call(call1752, [1], var_partnr);
  var call1754 = callmethod(idxres1753,"args", [0]);
  var call1755 = callmethod(call1754,"size", [0]);
  var opresult1757 = callmethod(var_call, "++", [1], call1755);
  var_call = opresult1757;
  lineNumber = 558
  lineNumber = 559
  lineNumber = 556
  lineNumber = 559
  lineNumber = 1
  lineNumber = 559
  lineNumber = 1
  lineNumber = 556
  var call1759 = callmethod(var_o,"with", [0]);
  var call1760 = callmethod(call1759,"size", [0]);
  var opresult1762 = callmethod(var_partnr, "<", [1], call1760);
  if (Grace_isTrue(opresult1762)) {
  lineNumber = 558
  lineNumber = 557
  var string1763 = new GraceString(", ");
  var opresult1765 = callmethod(var_call, "++", [1], string1763);
  var_call = opresult1765;
  var if1758 = opresult1765;
}
  return if1758;
};
  var call1766 = callmethod(Grace_prelude,"for()do", [1, 1], call1750, block1751);
  lineNumber = 561
  lineNumber = 560
  var string1767 = new GraceString("]");
  var opresult1769 = callmethod(var_call, "++", [1], string1767);
  var_call = opresult1769;
  lineNumber = 563
  lineNumber = 561
  lineNumber = 563
  var block1770 = Grace_allocObject();
  block1770.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1770.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1770.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1770.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1770.receiver = this;
  block1770.className = 'block<genjs:563>';
  block1770.real = function(
var_arg
) {
  lineNumber = 562
  var string1771 = new GraceString(", ");
  var opresult1773 = callmethod(var_call, "++", [1], string1771);
  var opresult1775 = callmethod(opresult1773, "++", [1], var_arg);
  var_call = opresult1775;
  return opresult1775;
};
  var call1776 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block1770);
  lineNumber = 565
  lineNumber = 564
  var string1777 = new GraceString(");");
  var opresult1779 = callmethod(var_call, "++", [1], string1777);
  var_call = opresult1779;
  lineNumber = 565
  lineNumber = 566
  var call1780 = callmethod(this,"out", [1], var_call);
  var if1709 = call1780;
  } else {
  lineNumber = 618
  lineNumber = 567
  lineNumber = 571
  lineNumber = 1
  lineNumber = 571
  lineNumber = 1
  lineNumber = 566
  var call1782 = callmethod(var_o,"value", [0]);
  var call1783 = callmethod(call1782,"kind", [0]);
  var string1784 = new GraceString("member");
  var opresult1786 = callmethod(call1783, "==", [1], string1784);
  lineNumber = 567
  var block1787 = Grace_allocObject();
  block1787.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1787.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1787.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1787.receiver = this;
  block1787.className = 'block<genjs:567>';
  block1787.real = function(
) {
  lineNumber = 1
  lineNumber = 567
  lineNumber = 1
  lineNumber = 567
  lineNumber = 1
  lineNumber = 566
  var call1788 = callmethod(var_o,"value", [0]);
  var call1789 = callmethod(call1788,"in", [0]);
  var call1790 = callmethod(call1789,"kind", [0]);
  var string1791 = new GraceString("identifier");
  var opresult1793 = callmethod(call1790, "==", [1], string1791);
  lineNumber = 567
  lineNumber = 1
  lineNumber = 567
  lineNumber = 1
  lineNumber = 567
  lineNumber = 1
  lineNumber = 567
  var call1794 = callmethod(var_o,"value", [0]);
  var call1795 = callmethod(call1794,"in", [0]);
  var call1796 = callmethod(call1795,"value", [0]);
  var string1797 = new GraceString("self");
  var opresult1799 = callmethod(call1796, "==", [1], string1797);
  var opresult1801 = callmethod(opresult1793, "&", [1], opresult1799);
  lineNumber = 1
  lineNumber = 567
  lineNumber = 1
  lineNumber = 567
  var call1802 = callmethod(var_o,"value", [0]);
  var call1803 = callmethod(call1802,"value", [0]);
  var string1804 = new GraceString("outer");
  var opresult1806 = callmethod(call1803, "==", [1], string1804);
  var opresult1808 = callmethod(opresult1801, "&", [1], opresult1806);
  return opresult1808;
};
  var opresult1810 = callmethod(opresult1786, "&&", [1], block1787);
  if (Grace_isTrue(opresult1810)) {
  lineNumber = 570
  lineNumber = 569
  var string1811 = new GraceString("  var call");
  var opresult1813 = callmethod(string1811, "++", [1], var_auto__95__count);
  var string1814 = new GraceString(" = callmethod(superDepth, ");
  var opresult1816 = callmethod(opresult1813, "++", [1], string1814);
  lineNumber = 570
  var string1817 = new GraceString("\"outer\", [0]);");
  var opresult1819 = callmethod(opresult1816, "++", [1], string1817);
  lineNumber = 571
  var call1820 = callmethod(this,"out", [1], opresult1819);
  var if1781 = call1820;
  } else {
  lineNumber = 618
  lineNumber = 572
  lineNumber = 587
  lineNumber = 1
  lineNumber = 587
  lineNumber = 1
  lineNumber = 571
  var call1822 = callmethod(var_o,"value", [0]);
  var call1823 = callmethod(call1822,"kind", [0]);
  var string1824 = new GraceString("member");
  var opresult1826 = callmethod(call1823, "==", [1], string1824);
  lineNumber = 572
  var block1827 = Grace_allocObject();
  block1827.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1827.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1827.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1827.receiver = this;
  block1827.className = 'block<genjs:572>';
  block1827.real = function(
) {
  lineNumber = 1
  lineNumber = 572
  lineNumber = 1
  lineNumber = 572
  lineNumber = 1
  lineNumber = 571
  var call1828 = callmethod(var_o,"value", [0]);
  var call1829 = callmethod(call1828,"in", [0]);
  var call1830 = callmethod(call1829,"kind", [0]);
  var string1831 = new GraceString("identifier");
  var opresult1833 = callmethod(call1830, "==", [1], string1831);
  lineNumber = 572
  lineNumber = 1
  lineNumber = 572
  lineNumber = 1
  lineNumber = 572
  lineNumber = 1
  lineNumber = 572
  var call1834 = callmethod(var_o,"value", [0]);
  var call1835 = callmethod(call1834,"in", [0]);
  var call1836 = callmethod(call1835,"value", [0]);
  var string1837 = new GraceString("prelude");
  var opresult1839 = callmethod(call1836, "==", [1], string1837);
  var opresult1841 = callmethod(opresult1833, "&", [1], opresult1839);
  return opresult1841;
};
  var opresult1843 = callmethod(opresult1826, "&&", [1], block1827);
  if (Grace_isTrue(opresult1843)) {
  lineNumber = 574
  lineNumber = 575
  lineNumber = 573
  var string1844 = new GraceString("  var call");
  var opresult1846 = callmethod(string1844, "++", [1], var_auto__95__count);
  var string1847 = new GraceString(" = callmethod(Grace_prelude");
  var opresult1849 = callmethod(opresult1846, "++", [1], string1847);
  lineNumber = 574
  var string1850 = new GraceString(",\"");
  var opresult1852 = callmethod(opresult1849, "++", [1], string1850);
  lineNumber = 1
  lineNumber = 574
  lineNumber = 1
  lineNumber = 574
  lineNumber = 1
  lineNumber = 574
  var call1853 = callmethod(var_o,"value", [0]);
  var call1854 = callmethod(call1853,"value", [0]);
  var call1855 = callmethod(call1854,"_escape", [0]);
  var opresult1857 = callmethod(opresult1852, "++", [1], call1855);
  var string1858 = new GraceString("\", [");
  var opresult1860 = callmethod(opresult1857, "++", [1], string1858);
  var var_call = opresult1860;
  lineNumber = 579
  lineNumber = 575
  lineNumber = 1
  lineNumber = 575
  lineNumber = 1
  lineNumber = 575
  var call1861 = callmethod(var_o,"with", [0]);
  var call1862 = callmethod(call1861,"indices", [0]);
  lineNumber = 579
  var block1863 = Grace_allocObject();
  block1863.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1863.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1863.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1863.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1863.receiver = this;
  block1863.className = 'block<genjs:579>';
  block1863.real = function(
var_partnr
) {
  lineNumber = 577
  lineNumber = 576
  lineNumber = 577
  lineNumber = 1
  lineNumber = 577
  lineNumber = 1
  lineNumber = 577
  lineNumber = 1
  lineNumber = 576
  var call1864 = callmethod(var_o,"with", [0]);
  var idxres1865 = call1864.methods["[]"].call(call1864, [1], var_partnr);
  var call1866 = callmethod(idxres1865,"args", [0]);
  var call1867 = callmethod(call1866,"size", [0]);
  var opresult1869 = callmethod(var_call, "++", [1], call1867);
  var_call = opresult1869;
  lineNumber = 579
  lineNumber = 580
  lineNumber = 577
  lineNumber = 580
  lineNumber = 1
  lineNumber = 580
  lineNumber = 1
  lineNumber = 577
  var call1871 = callmethod(var_o,"with", [0]);
  var call1872 = callmethod(call1871,"size", [0]);
  var opresult1874 = callmethod(var_partnr, "<", [1], call1872);
  if (Grace_isTrue(opresult1874)) {
  lineNumber = 579
  lineNumber = 578
  var string1875 = new GraceString(", ");
  var opresult1877 = callmethod(var_call, "++", [1], string1875);
  var_call = opresult1877;
  var if1870 = opresult1877;
}
  return if1870;
};
  var call1878 = callmethod(Grace_prelude,"for()do", [1, 1], call1862, block1863);
  lineNumber = 582
  lineNumber = 581
  var string1879 = new GraceString("]");
  var opresult1881 = callmethod(var_call, "++", [1], string1879);
  var_call = opresult1881;
  lineNumber = 584
  lineNumber = 582
  lineNumber = 584
  var block1882 = Grace_allocObject();
  block1882.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1882.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1882.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1882.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1882.receiver = this;
  block1882.className = 'block<genjs:584>';
  block1882.real = function(
var_arg
) {
  lineNumber = 583
  var string1883 = new GraceString(", ");
  var opresult1885 = callmethod(var_call, "++", [1], string1883);
  var opresult1887 = callmethod(opresult1885, "++", [1], var_arg);
  var_call = opresult1887;
  return opresult1887;
};
  var call1888 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block1882);
  lineNumber = 586
  lineNumber = 585
  var string1889 = new GraceString(");");
  var opresult1891 = callmethod(var_call, "++", [1], string1889);
  var_call = opresult1891;
  lineNumber = 586
  lineNumber = 587
  var call1892 = callmethod(this,"out", [1], var_call);
  var if1821 = call1892;
  } else {
  lineNumber = 618
  lineNumber = 603
  lineNumber = 1
  lineNumber = 603
  lineNumber = 1
  lineNumber = 587
  var call1894 = callmethod(var_o,"value", [0]);
  var call1895 = callmethod(call1894,"kind", [0]);
  var string1896 = new GraceString("member");
  var opresult1898 = callmethod(call1895, "==", [1], string1896);
  if (Grace_isTrue(opresult1898)) {
  lineNumber = 588
  lineNumber = 1
  lineNumber = 588
  lineNumber = 1
  lineNumber = 588
  var call1899 = callmethod(var_o,"value", [0]);
  var call1900 = callmethod(call1899,"in", [0]);
  lineNumber = 589
  var call1901 = callmethod(this,"compilenode", [1], call1900);
  var_obj = call1901;
  lineNumber = 590
  lineNumber = 591
  lineNumber = 589
  var string1902 = new GraceString("  var call");
  var opresult1904 = callmethod(string1902, "++", [1], var_auto__95__count);
  var string1905 = new GraceString(" = callmethod(");
  var opresult1907 = callmethod(opresult1904, "++", [1], string1905);
  var opresult1909 = callmethod(opresult1907, "++", [1], var_obj);
  lineNumber = 590
  var string1910 = new GraceString(",\"");
  var opresult1912 = callmethod(opresult1909, "++", [1], string1910);
  lineNumber = 1
  lineNumber = 590
  lineNumber = 1
  lineNumber = 590
  lineNumber = 1
  lineNumber = 590
  var call1913 = callmethod(var_o,"value", [0]);
  var call1914 = callmethod(call1913,"value", [0]);
  var call1915 = callmethod(call1914,"_escape", [0]);
  var opresult1917 = callmethod(opresult1912, "++", [1], call1915);
  var string1918 = new GraceString("\", [");
  var opresult1920 = callmethod(opresult1917, "++", [1], string1918);
  var var_call = opresult1920;
  lineNumber = 595
  lineNumber = 591
  lineNumber = 1
  lineNumber = 591
  lineNumber = 1
  lineNumber = 591
  var call1921 = callmethod(var_o,"with", [0]);
  var call1922 = callmethod(call1921,"indices", [0]);
  lineNumber = 595
  var block1923 = Grace_allocObject();
  block1923.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1923.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1923.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1923.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1923.receiver = this;
  block1923.className = 'block<genjs:595>';
  block1923.real = function(
var_partnr
) {
  lineNumber = 593
  lineNumber = 592
  lineNumber = 593
  lineNumber = 1
  lineNumber = 593
  lineNumber = 1
  lineNumber = 593
  lineNumber = 1
  lineNumber = 592
  var call1924 = callmethod(var_o,"with", [0]);
  var idxres1925 = call1924.methods["[]"].call(call1924, [1], var_partnr);
  var call1926 = callmethod(idxres1925,"args", [0]);
  var call1927 = callmethod(call1926,"size", [0]);
  var opresult1929 = callmethod(var_call, "++", [1], call1927);
  var_call = opresult1929;
  lineNumber = 595
  lineNumber = 596
  lineNumber = 593
  lineNumber = 596
  lineNumber = 1
  lineNumber = 596
  lineNumber = 1
  lineNumber = 593
  var call1931 = callmethod(var_o,"with", [0]);
  var call1932 = callmethod(call1931,"size", [0]);
  var opresult1934 = callmethod(var_partnr, "<", [1], call1932);
  if (Grace_isTrue(opresult1934)) {
  lineNumber = 595
  lineNumber = 594
  var string1935 = new GraceString(", ");
  var opresult1937 = callmethod(var_call, "++", [1], string1935);
  var_call = opresult1937;
  var if1930 = opresult1937;
}
  return if1930;
};
  var call1938 = callmethod(Grace_prelude,"for()do", [1, 1], call1922, block1923);
  lineNumber = 598
  lineNumber = 597
  var string1939 = new GraceString("]");
  var opresult1941 = callmethod(var_call, "++", [1], string1939);
  var_call = opresult1941;
  lineNumber = 600
  lineNumber = 598
  lineNumber = 600
  var block1942 = Grace_allocObject();
  block1942.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1942.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1942.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1942.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1942.receiver = this;
  block1942.className = 'block<genjs:600>';
  block1942.real = function(
var_arg
) {
  lineNumber = 599
  var string1943 = new GraceString(", ");
  var opresult1945 = callmethod(var_call, "++", [1], string1943);
  var opresult1947 = callmethod(opresult1945, "++", [1], var_arg);
  var_call = opresult1947;
  return opresult1947;
};
  var call1948 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block1942);
  lineNumber = 602
  lineNumber = 601
  var string1949 = new GraceString(");");
  var opresult1951 = callmethod(var_call, "++", [1], string1949);
  var_call = opresult1951;
  lineNumber = 602
  lineNumber = 603
  var call1952 = callmethod(this,"out", [1], var_call);
  var if1893 = call1952;
  } else {
  lineNumber = 605
  lineNumber = 604
  var string1953 = new GraceString("this");
  var_obj = string1953;
  lineNumber = 606
  lineNumber = 607
  lineNumber = 605
  var string1954 = new GraceString("  var call");
  var opresult1956 = callmethod(string1954, "++", [1], var_auto__95__count);
  var string1957 = new GraceString(" = callmethod(this,");
  var opresult1959 = callmethod(opresult1956, "++", [1], string1957);
  lineNumber = 606
  var string1960 = new GraceString("\"");
  var opresult1962 = callmethod(opresult1959, "++", [1], string1960);
  lineNumber = 1
  lineNumber = 606
  lineNumber = 1
  lineNumber = 606
  lineNumber = 1
  lineNumber = 606
  var call1963 = callmethod(var_o,"value", [0]);
  var call1964 = callmethod(call1963,"value", [0]);
  var call1965 = callmethod(call1964,"_escape", [0]);
  var opresult1967 = callmethod(opresult1962, "++", [1], call1965);
  var string1968 = new GraceString("\", [");
  var opresult1970 = callmethod(opresult1967, "++", [1], string1968);
  var var_call = opresult1970;
  lineNumber = 611
  lineNumber = 607
  lineNumber = 1
  lineNumber = 607
  lineNumber = 1
  lineNumber = 607
  var call1971 = callmethod(var_o,"with", [0]);
  var call1972 = callmethod(call1971,"indices", [0]);
  lineNumber = 611
  var block1973 = Grace_allocObject();
  block1973.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1973.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1973.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1973.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1973.receiver = this;
  block1973.className = 'block<genjs:611>';
  block1973.real = function(
var_partnr
) {
  lineNumber = 609
  lineNumber = 608
  lineNumber = 609
  lineNumber = 1
  lineNumber = 609
  lineNumber = 1
  lineNumber = 609
  lineNumber = 1
  lineNumber = 608
  var call1974 = callmethod(var_o,"with", [0]);
  var idxres1975 = call1974.methods["[]"].call(call1974, [1], var_partnr);
  var call1976 = callmethod(idxres1975,"args", [0]);
  var call1977 = callmethod(call1976,"size", [0]);
  var opresult1979 = callmethod(var_call, "++", [1], call1977);
  var_call = opresult1979;
  lineNumber = 611
  lineNumber = 612
  lineNumber = 609
  lineNumber = 612
  lineNumber = 1
  lineNumber = 612
  lineNumber = 1
  lineNumber = 609
  var call1981 = callmethod(var_o,"with", [0]);
  var call1982 = callmethod(call1981,"size", [0]);
  var opresult1984 = callmethod(var_partnr, "<", [1], call1982);
  if (Grace_isTrue(opresult1984)) {
  lineNumber = 611
  lineNumber = 610
  var string1985 = new GraceString(", ");
  var opresult1987 = callmethod(var_call, "++", [1], string1985);
  var_call = opresult1987;
  var if1980 = opresult1987;
}
  return if1980;
};
  var call1988 = callmethod(Grace_prelude,"for()do", [1, 1], call1972, block1973);
  lineNumber = 614
  lineNumber = 613
  var string1989 = new GraceString("]");
  var opresult1991 = callmethod(var_call, "++", [1], string1989);
  var_call = opresult1991;
  lineNumber = 616
  lineNumber = 614
  lineNumber = 616
  var block1992 = Grace_allocObject();
  block1992.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1992.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1992.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1992.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1992.receiver = this;
  block1992.className = 'block<genjs:616>';
  block1992.real = function(
var_arg
) {
  lineNumber = 615
  var string1993 = new GraceString(", ");
  var opresult1995 = callmethod(var_call, "++", [1], string1993);
  var opresult1997 = callmethod(opresult1995, "++", [1], var_arg);
  var_call = opresult1997;
  return opresult1997;
};
  var call1998 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block1992);
  lineNumber = 618
  lineNumber = 617
  var string1999 = new GraceString(");");
  var opresult2001 = callmethod(var_call, "++", [1], string1999);
  var_call = opresult2001;
  lineNumber = 618
  lineNumber = 619
  var call2002 = callmethod(this,"out", [1], var_call);
  var if1893 = call2002;
}
  var if1821 = if1893;
}
  var if1781 = if1821;
}
  var if1709 = if1781;
}
  lineNumber = 621
  lineNumber = 1
  lineNumber = 621
  lineNumber = 620
  var string2003 = new GraceString("call");
  var opresult2005 = callmethod(string2003, "++", [1], var_auto__95__count);
  var call2006 = callmethod(var_o,"register:=", [1], opresult2005);
  lineNumber = 622
  lineNumber = 621
  var opresult2008 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2008;
  return opresult2008
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilecall"] = func1697;
  lineNumber = 666
var func2009 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 625
  lineNumber = 624
  var string2010 = new GraceString("");
  var var_escval = string2010;
  lineNumber = 625
  lineNumber = 1
  lineNumber = 625
  var call2011 = callmethod(var_o,"value", [0]);
  var call2012 = Grace_length(call2011);
  var quotient2014 = callmethod(call2012, "/", [1], new GraceNum(2));
  var var_l = quotient2014;
  lineNumber = 627
  lineNumber = 626
  var var_i = new GraceNum(0);
  lineNumber = 633
  lineNumber = 627
  lineNumber = 1
  lineNumber = 627
  var call2015 = callmethod(var_o,"value", [0]);
  lineNumber = 633
  var block2016 = Grace_allocObject();
  block2016.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2016.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2016.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2016.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2016.receiver = this;
  block2016.className = 'block<genjs:633>';
  block2016.real = function(
var_c
) {
  lineNumber = 630
  lineNumber = 631
  lineNumber = 628
  var modulus2019 = callmethod(var_i, "%", [1], new GraceNum(2));
  var opresult2021 = callmethod(modulus2019, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult2021)) {
  lineNumber = 630
  lineNumber = 629
  var string2022 = new GraceString("\\");
  var opresult2024 = callmethod(var_escval, "++", [1], string2022);
  var_escval = opresult2024;
  var if2017 = opresult2024;
}
  lineNumber = 632
  lineNumber = 631
  var opresult2026 = callmethod(var_escval, "++", [1], var_c);
  var_escval = opresult2026;
  lineNumber = 633
  lineNumber = 632
  var opresult2028 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult2028;
  return opresult2028;
};
  var call2029 = callmethod(Grace_prelude,"for()do", [1, 1], call2015, block2016);
  lineNumber = 635
  lineNumber = 634
  var string2030 = new GraceString("  %tmp");
  var opresult2032 = callmethod(string2030, "++", [1], var_auto__95__count);
  var string2033 = new GraceString(" = load %object** @.octlit");
  var opresult2035 = callmethod(opresult2032, "++", [1], string2033);
  lineNumber = 635
  var opresult2037 = callmethod(opresult2035, "++", [1], var_auto__95__count);
  lineNumber = 636
  var call2038 = callmethod(this,"out", [1], opresult2037);
  lineNumber = 637
  lineNumber = 636
  var string2039 = new GraceString("  %cmp");
  var opresult2041 = callmethod(string2039, "++", [1], var_auto__95__count);
  var string2042 = new GraceString(" = icmp ne %object* %tmp");
  var opresult2044 = callmethod(opresult2041, "++", [1], string2042);
  lineNumber = 637
  var opresult2046 = callmethod(opresult2044, "++", [1], var_auto__95__count);
  var string2047 = new GraceString(", null");
  var opresult2049 = callmethod(opresult2046, "++", [1], string2047);
  lineNumber = 638
  var call2050 = callmethod(this,"out", [1], opresult2049);
  lineNumber = 640
  lineNumber = 638
  var string2051 = new GraceString("  br i1 %cmp");
  var opresult2053 = callmethod(string2051, "++", [1], var_auto__95__count);
  var string2054 = new GraceString(", label %octlit");
  var opresult2056 = callmethod(opresult2053, "++", [1], string2054);
  lineNumber = 639
  var opresult2058 = callmethod(opresult2056, "++", [1], var_auto__95__count);
  var string2059 = new GraceString(".already, label %octlit");
  var opresult2061 = callmethod(opresult2058, "++", [1], string2059);
  lineNumber = 640
  var opresult2063 = callmethod(opresult2061, "++", [1], var_auto__95__count);
  var string2064 = new GraceString(".define");
  var opresult2066 = callmethod(opresult2063, "++", [1], string2064);
  lineNumber = 641
  var call2067 = callmethod(this,"out", [1], opresult2066);
  var string2068 = new GraceString("octlit");
  var opresult2070 = callmethod(string2068, "++", [1], var_auto__95__count);
  var string2071 = new GraceString(".already");
  var opresult2073 = callmethod(opresult2070, "++", [1], string2071);
  lineNumber = 642
  var call2074 = callmethod(this,"beginblock", [1], opresult2073);
  lineNumber = 643
  lineNumber = 642
  var string2075 = new GraceString("  %alreadyoctets");
  var opresult2077 = callmethod(string2075, "++", [1], var_auto__95__count);
  var string2078 = new GraceString(" = load %object** @.octlit");
  var opresult2080 = callmethod(opresult2077, "++", [1], string2078);
  lineNumber = 643
  var opresult2082 = callmethod(opresult2080, "++", [1], var_auto__95__count);
  lineNumber = 644
  var call2083 = callmethod(this,"out", [1], opresult2082);
  var string2084 = new GraceString("  br label %octlit");
  var opresult2086 = callmethod(string2084, "++", [1], var_auto__95__count);
  var string2087 = new GraceString(".end");
  var opresult2089 = callmethod(opresult2086, "++", [1], string2087);
  lineNumber = 645
  var call2090 = callmethod(this,"out", [1], opresult2089);
  var string2091 = new GraceString("octlit");
  var opresult2093 = callmethod(string2091, "++", [1], var_auto__95__count);
  var string2094 = new GraceString(".define");
  var opresult2096 = callmethod(opresult2093, "++", [1], string2094);
  lineNumber = 646
  var call2097 = callmethod(this,"beginblock", [1], opresult2096);
  var string2098 = new GraceString("  %oct");
  var opresult2100 = callmethod(string2098, "++", [1], var_auto__95__count);
  var string2101 = new GraceString(" = getelementptr [");
  var opresult2103 = callmethod(opresult2100, "++", [1], string2101);
  var opresult2105 = callmethod(opresult2103, "++", [1], var_l);
  var string2106 = new GraceString(" x i8]* @.oct");
  var opresult2108 = callmethod(opresult2105, "++", [1], string2106);
  lineNumber = 1
  lineNumber = 646
  var call2109 = callmethod(var_constants,"size", [0]);
  var opresult2111 = callmethod(opresult2108, "++", [1], call2109);
  var string2112 = new GraceString(", i32 0, i32 0");
  var opresult2114 = callmethod(opresult2111, "++", [1], string2112);
  lineNumber = 647
  var call2115 = callmethod(this,"out", [1], opresult2114);
  lineNumber = 649
  lineNumber = 647
  var string2116 = new GraceString("  %defoctets");
  var opresult2118 = callmethod(string2116, "++", [1], var_auto__95__count);
  var string2119 = new GraceString(" = call %object* ");
  var opresult2121 = callmethod(opresult2118, "++", [1], string2119);
  lineNumber = 648
  var string2122 = new GraceString("@alloc_Octets(i8* ");
  var opresult2124 = callmethod(opresult2121, "++", [1], string2122);
  lineNumber = 649
  var string2125 = new GraceString("%oct");
  var opresult2127 = callmethod(opresult2124, "++", [1], string2125);
  var opresult2129 = callmethod(opresult2127, "++", [1], var_auto__95__count);
  var string2130 = new GraceString(", i32 ");
  var opresult2132 = callmethod(opresult2129, "++", [1], string2130);
  var opresult2134 = callmethod(opresult2132, "++", [1], var_l);
  var string2135 = new GraceString(")");
  var opresult2137 = callmethod(opresult2134, "++", [1], string2135);
  lineNumber = 650
  var call2138 = callmethod(this,"out", [1], opresult2137);
  lineNumber = 651
  lineNumber = 650
  var string2139 = new GraceString("  store %object* %defoctets");
  var opresult2141 = callmethod(string2139, "++", [1], var_auto__95__count);
  var string2142 = new GraceString(", %object** ");
  var opresult2144 = callmethod(opresult2141, "++", [1], string2142);
  lineNumber = 651
  var string2145 = new GraceString("@.octlit");
  var opresult2147 = callmethod(opresult2144, "++", [1], string2145);
  var opresult2149 = callmethod(opresult2147, "++", [1], var_auto__95__count);
  lineNumber = 652
  var call2150 = callmethod(this,"out", [1], opresult2149);
  var string2151 = new GraceString("br label %octlit");
  var opresult2153 = callmethod(string2151, "++", [1], var_auto__95__count);
  var string2154 = new GraceString(".end");
  var opresult2156 = callmethod(opresult2153, "++", [1], string2154);
  lineNumber = 653
  var call2157 = callmethod(this,"out", [1], opresult2156);
  var string2158 = new GraceString("octlit");
  var opresult2160 = callmethod(string2158, "++", [1], var_auto__95__count);
  var string2161 = new GraceString(".end");
  var opresult2163 = callmethod(opresult2160, "++", [1], string2161);
  lineNumber = 654
  var call2164 = callmethod(this,"beginblock", [1], opresult2163);
  lineNumber = 657
  lineNumber = 654
  var string2165 = new GraceString(" %octets");
  var opresult2167 = callmethod(string2165, "++", [1], var_auto__95__count);
  var string2168 = new GraceString(" = phi %object* [%alreadyoctets");
  var opresult2170 = callmethod(opresult2167, "++", [1], string2168);
  lineNumber = 655
  var opresult2172 = callmethod(opresult2170, "++", [1], var_auto__95__count);
  var string2173 = new GraceString(", %octlit");
  var opresult2175 = callmethod(opresult2172, "++", [1], string2173);
  var opresult2177 = callmethod(opresult2175, "++", [1], var_auto__95__count);
  var string2178 = new GraceString(".already], ");
  var opresult2180 = callmethod(opresult2177, "++", [1], string2178);
  lineNumber = 656
  var string2181 = new GraceString("[%defoctets");
  var opresult2183 = callmethod(opresult2180, "++", [1], string2181);
  var opresult2185 = callmethod(opresult2183, "++", [1], var_auto__95__count);
  var string2186 = new GraceString(", %octlit");
  var opresult2188 = callmethod(opresult2185, "++", [1], string2186);
  var opresult2190 = callmethod(opresult2188, "++", [1], var_auto__95__count);
  lineNumber = 657
  var string2191 = new GraceString(".define]");
  var opresult2193 = callmethod(opresult2190, "++", [1], string2191);
  lineNumber = 658
  var call2194 = callmethod(this,"out", [1], opresult2193);
  lineNumber = 660
  lineNumber = 658
  var string2195 = new GraceString("@.oct");
  lineNumber = 660
  lineNumber = 1
  lineNumber = 658
  var call2196 = callmethod(var_constants,"size", [0]);
  var opresult2198 = callmethod(string2195, "++", [1], call2196);
  var string2199 = new GraceString(" = private unnamed_addr ");
  var opresult2201 = callmethod(opresult2198, "++", [1], string2199);
  lineNumber = 659
  var string2202 = new GraceString("constant [");
  var opresult2204 = callmethod(opresult2201, "++", [1], string2202);
  var opresult2206 = callmethod(opresult2204, "++", [1], var_l);
  var string2207 = new GraceString(" x i8] c\"");
  var opresult2209 = callmethod(opresult2206, "++", [1], string2207);
  var opresult2211 = callmethod(opresult2209, "++", [1], var_escval);
  var string2212 = new GraceString("\"");
  var opresult2214 = callmethod(opresult2211, "++", [1], string2212);
  var var_con = opresult2214;
  lineNumber = 660
  var call2215 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 663
  lineNumber = 661
  var string2216 = new GraceString("@.octlit");
  var opresult2218 = callmethod(string2216, "++", [1], var_auto__95__count);
  lineNumber = 662
  var string2219 = new GraceString(" = private global %object* null");
  var opresult2221 = callmethod(opresult2218, "++", [1], string2219);
  var_con = opresult2221;
  lineNumber = 663
  var call2222 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 665
  lineNumber = 1
  lineNumber = 665
  lineNumber = 664
  var string2223 = new GraceString("%octets");
  var opresult2225 = callmethod(string2223, "++", [1], var_auto__95__count);
  var call2226 = callmethod(var_o,"register:=", [1], opresult2225);
  lineNumber = 666
  lineNumber = 665
  var opresult2228 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2228;
  return opresult2228
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileoctets"] = func2009;
  lineNumber = 673
var func2229 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 668
  var string2230 = new GraceString("// Import of ");
  lineNumber = 1
  lineNumber = 668
  lineNumber = 1
  lineNumber = 668
  var call2231 = callmethod(var_o,"value", [0]);
  var call2232 = callmethod(call2231,"value", [0]);
  var opresult2234 = callmethod(string2230, "++", [1], call2232);
  lineNumber = 669
  var call2235 = callmethod(this,"out", [1], opresult2234);
  lineNumber = 670
  var var_con;
  lineNumber = 1
  lineNumber = 670
  lineNumber = 1
  lineNumber = 670
  lineNumber = 1
  lineNumber = 670
  var call2236 = callmethod(var_o,"value", [0]);
  var call2237 = callmethod(call2236,"value", [0]);
  var call2238 = callmethod(call2237,"_escape", [0]);
  var var_nm = call2238;
  lineNumber = 671
  var string2239 = new GraceString("  var ");
  var call2240 = callmethod(this,"varf", [1], var_nm);
  var opresult2242 = callmethod(string2239, "++", [1], call2240);
  var string2243 = new GraceString(" = do_import(\"");
  var opresult2245 = callmethod(string2243, "++", [1], var_nm);
  var string2246 = new GraceString("\", gracecode_");
  var opresult2248 = callmethod(opresult2245, "++", [1], string2246);
  var opresult2250 = callmethod(opresult2248, "++", [1], var_nm);
  var string2251 = new GraceString(");");
  var opresult2253 = callmethod(opresult2250, "++", [1], string2251);
  var opresult2255 = callmethod(opresult2242, "++", [1], opresult2253);
  lineNumber = 672
  var call2256 = callmethod(this,"out", [1], opresult2255);
  lineNumber = 673
  lineNumber = 1
  lineNumber = 672
  var string2257 = new GraceString("undefined");
  var call2258 = callmethod(var_o,"register:=", [1], string2257);
  return call2258
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileimport"] = func2229;
  lineNumber = 682
var func2259 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 675
  lineNumber = 1
  lineNumber = 675
  var call2260 = callmethod(var_o,"value", [0]);
  lineNumber = 676
  var call2261 = callmethod(this,"compilenode", [1], call2260);
  var var_reg = call2261;
  lineNumber = 679
  lineNumber = 676
  if (Grace_isTrue(var_inBlock)) {
  lineNumber = 677
  var string2263 = new GraceString("  throw new ReturnException(");
  var opresult2265 = callmethod(string2263, "++", [1], var_reg);
  var string2266 = new GraceString(", returnTarget);");
  var opresult2268 = callmethod(opresult2265, "++", [1], string2266);
  lineNumber = 678
  var call2269 = callmethod(this,"out", [1], opresult2268);
  var if2262 = call2269;
  } else {
  lineNumber = 679
  var string2270 = new GraceString("  return ");
  var opresult2272 = callmethod(string2270, "++", [1], var_reg);
  lineNumber = 680
  var call2273 = callmethod(this,"out", [1], opresult2272);
  var if2262 = call2273;
}
  lineNumber = 682
  lineNumber = 1
  lineNumber = 681
  var string2274 = new GraceString("undefined");
  var call2275 = callmethod(var_o,"register:=", [1], string2274);
  return call2275
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilereturn"] = func2259;
  lineNumber = 840
var func2276 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 685
  lineNumber = 684
  var opresult2278 = callmethod(var_compilationDepth, "+", [1], new GraceNum(1));
  var_compilationDepth = opresult2278;
  lineNumber = 687
  lineNumber = 689
  lineNumber = 685
  lineNumber = 689
  lineNumber = 1
  lineNumber = 685
  var call2280 = callmethod(var_o,"line", [0]);
  var opresult2282 = callmethod(var_linenum, "/=", [1], call2280);
  if (Grace_isTrue(opresult2282)) {
  lineNumber = 687
  lineNumber = 1
  lineNumber = 686
  var call2283 = callmethod(var_o,"line", [0]);
  var_linenum = call2283;
  lineNumber = 687
  var string2284 = new GraceString("  lineNumber = ");
  var opresult2286 = callmethod(string2284, "++", [1], var_linenum);
  var call2287 = callmethod(this,"out", [1], opresult2286);
  var if2279 = call2287;
}
  lineNumber = 691
  lineNumber = 692
  lineNumber = 1
  lineNumber = 689
  var call2289 = callmethod(var_o,"kind", [0]);
  var string2290 = new GraceString("num");
  var opresult2292 = callmethod(call2289, "==", [1], string2290);
  if (Grace_isTrue(opresult2292)) {
  lineNumber = 691
  lineNumber = 1
  lineNumber = 691
  lineNumber = 690
  var string2293 = new GraceString("new GraceNum(");
  lineNumber = 691
  lineNumber = 1
  lineNumber = 690
  var call2294 = callmethod(var_o,"value", [0]);
  var opresult2296 = callmethod(string2293, "++", [1], call2294);
  var string2297 = new GraceString(")");
  var opresult2299 = callmethod(opresult2296, "++", [1], string2297);
  var call2300 = callmethod(var_o,"register:=", [1], opresult2299);
  var if2288 = call2300;
}
  lineNumber = 693
  lineNumber = 692
  var string2301 = new GraceString("");
  var var_l = string2301;
  lineNumber = 722
  lineNumber = 723
  lineNumber = 1
  lineNumber = 693
  var call2303 = callmethod(var_o,"kind", [0]);
  var string2304 = new GraceString("string");
  var opresult2306 = callmethod(call2303, "==", [1], string2304);
  if (Grace_isTrue(opresult2306)) {
  lineNumber = 694
  lineNumber = 1
  lineNumber = 694
  var call2307 = callmethod(var_o,"value", [0]);
  var call2308 = Grace_length(call2307);
  var_l = call2308;
  lineNumber = 696
  lineNumber = 695
  var opresult2310 = callmethod(var_l, "+", [1], new GraceNum(1));
  var_l = opresult2310;
  lineNumber = 698
  lineNumber = 696
  var string2311 = new GraceString("");
  var var_os = string2311;
  lineNumber = 713
  lineNumber = 698
  lineNumber = 1
  lineNumber = 698
  var call2312 = callmethod(var_o,"value", [0]);
  lineNumber = 713
  var block2313 = Grace_allocObject();
  block2313.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2313.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2313.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2313.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2313.receiver = this;
  block2313.className = 'block<genjs:713>';
  block2313.real = function(
var_c
) {
  lineNumber = 714
  lineNumber = 699
  var string2315 = new GraceString("\"");
  var opresult2317 = callmethod(var_c, "==", [1], string2315);
  if (Grace_isTrue(opresult2317)) {
  lineNumber = 701
  lineNumber = 700
  var string2318 = new GraceString("\\\"");
  var opresult2320 = callmethod(var_os, "++", [1], string2318);
  var_os = opresult2320;
  var if2314 = opresult2320;
  } else {
  lineNumber = 713
  lineNumber = 703
  lineNumber = 701
  var string2322 = new GraceString("\\");
  var opresult2324 = callmethod(var_c, "==", [1], string2322);
  if (Grace_isTrue(opresult2324)) {
  lineNumber = 703
  lineNumber = 702
  var string2325 = new GraceString("\\\\");
  var opresult2327 = callmethod(var_os, "++", [1], string2325);
  var_os = opresult2327;
  var if2321 = opresult2327;
  } else {
  lineNumber = 713
  lineNumber = 705
  lineNumber = 703
  var string2329 = new GraceString("\n");
  var opresult2331 = callmethod(var_c, "==", [1], string2329);
  if (Grace_isTrue(opresult2331)) {
  lineNumber = 705
  lineNumber = 704
  var string2332 = new GraceString("\\n");
  var opresult2334 = callmethod(var_os, "++", [1], string2332);
  var_os = opresult2334;
  var if2328 = opresult2334;
  } else {
  lineNumber = 713
  lineNumber = 711
  lineNumber = 1
  lineNumber = 705
  var call2336 = callmethod(var_c,"ord", [0]);
  var opresult2338 = callmethod(call2336, "<", [1], new GraceNum(32));
  lineNumber = 711
  lineNumber = 1
  lineNumber = 705
  var call2339 = callmethod(var_c,"ord", [0]);
  var opresult2341 = callmethod(call2339, ">", [1], new GraceNum(126));
  var opresult2343 = callmethod(opresult2338, "|", [1], opresult2341);
  if (Grace_isTrue(opresult2343)) {
  lineNumber = 706
  lineNumber = 1
  lineNumber = 706
  var call2344 = callmethod(var_c,"ord", [0]);
  var call2345 = callmethod(var_util,"hex", [1], call2344);
  var var_uh = call2345;
  lineNumber = 709
  lineNumber = 707
  var block2346 = Grace_allocObject();
  block2346.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2346.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2346.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2346.receiver = this;
  block2346.className = 'block<genjs:707>';
  block2346.real = function(
) {
  lineNumber = 1
  lineNumber = 707
  var call2347 = callmethod(var_uh,"size", [0]);
  var opresult2349 = callmethod(call2347, "<", [1], new GraceNum(4));
  return opresult2349;
};
  lineNumber = 709
  var block2350 = Grace_allocObject();
  block2350.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2350.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2350.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2350.receiver = this;
  block2350.className = 'block<genjs:709>';
  block2350.real = function(
) {
  lineNumber = 708
  var string2351 = new GraceString("0");
  var opresult2353 = callmethod(string2351, "++", [1], var_uh);
  var_uh = opresult2353;
  return opresult2353;
};
  var call2354 = callmethod(Grace_prelude,"while()do", [1, 1], block2346, block2350);
  lineNumber = 711
  lineNumber = 710
  var string2355 = new GraceString("\\u");
  var opresult2357 = callmethod(var_os, "++", [1], string2355);
  var opresult2359 = callmethod(opresult2357, "++", [1], var_uh);
  var_os = opresult2359;
  var if2335 = opresult2359;
  } else {
  lineNumber = 713
  lineNumber = 712
  var opresult2361 = callmethod(var_os, "++", [1], var_c);
  var_os = opresult2361;
  var if2335 = opresult2361;
}
  var if2328 = if2335;
}
  var if2321 = if2328;
}
  var if2314 = if2321;
}
  return if2314;
};
  var call2362 = callmethod(Grace_prelude,"for()do", [1, 1], call2312, block2313);
  lineNumber = 715
  var string2363 = new GraceString("\\");
  var string2364 = new GraceString("\\\\");
  lineNumber = 716
  lineNumber = 1
  lineNumber = 715
  var call2365 = callmethod(var_o,"value", [0]);
  var call2366 = callmethod(call2365,"replace()with", [1, 1], string2363, string2364);
  var var_sval = call2366;
  lineNumber = 716
  var string2367 = new GraceString("\"");
  var string2368 = new GraceString("\\\"");
  var call2369 = callmethod(var_sval,"replace()with", [1, 1], string2367, string2368);
  var_sval = call2369;
  lineNumber = 717
  var string2370 = new GraceString("\n");
  var string2371 = new GraceString("\\n");
  var call2372 = callmethod(var_sval,"replace()with", [1, 1], string2370, string2371);
  var_sval = call2372;
  lineNumber = 719
  lineNumber = 718
  var string2373 = new GraceString("  var string");
  var opresult2375 = callmethod(string2373, "++", [1], var_auto__95__count);
  var string2376 = new GraceString(" = new GraceString(\"");
  var opresult2378 = callmethod(opresult2375, "++", [1], string2376);
  lineNumber = 719
  var opresult2380 = callmethod(opresult2378, "++", [1], var_os);
  var string2381 = new GraceString("\");");
  var opresult2383 = callmethod(opresult2380, "++", [1], string2381);
  lineNumber = 720
  var call2384 = callmethod(this,"out", [1], opresult2383);
  lineNumber = 721
  lineNumber = 1
  lineNumber = 721
  lineNumber = 720
  var string2385 = new GraceString("string");
  var opresult2387 = callmethod(string2385, "++", [1], var_auto__95__count);
  var call2388 = callmethod(var_o,"register:=", [1], opresult2387);
  lineNumber = 722
  lineNumber = 721
  var opresult2390 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2390;
  var if2302 = opresult2390;
}
  lineNumber = 724
  lineNumber = 726
  lineNumber = 1
  lineNumber = 723
  var call2392 = callmethod(var_o,"kind", [0]);
  var string2393 = new GraceString("index");
  var opresult2395 = callmethod(call2392, "==", [1], string2393);
  if (Grace_isTrue(opresult2395)) {
  lineNumber = 724
  lineNumber = 725
  var call2396 = callmethod(this,"compileindex", [1], var_o);
  var if2391 = call2396;
}
  lineNumber = 727
  lineNumber = 729
  lineNumber = 1
  lineNumber = 726
  var call2398 = callmethod(var_o,"kind", [0]);
  var string2399 = new GraceString("octets");
  var opresult2401 = callmethod(call2398, "==", [1], string2399);
  if (Grace_isTrue(opresult2401)) {
  lineNumber = 727
  lineNumber = 728
  var call2402 = callmethod(this,"compileoctets", [1], var_o);
  var if2397 = call2402;
}
  lineNumber = 730
  lineNumber = 732
  lineNumber = 1
  lineNumber = 729
  var call2404 = callmethod(var_o,"kind", [0]);
  var string2405 = new GraceString("import");
  var opresult2407 = callmethod(call2404, "==", [1], string2405);
  if (Grace_isTrue(opresult2407)) {
  lineNumber = 730
  lineNumber = 731
  var call2408 = callmethod(this,"compileimport", [1], var_o);
  var if2403 = call2408;
}
  lineNumber = 733
  lineNumber = 735
  lineNumber = 1
  lineNumber = 732
  var call2410 = callmethod(var_o,"kind", [0]);
  var string2411 = new GraceString("return");
  var opresult2413 = callmethod(call2410, "==", [1], string2411);
  if (Grace_isTrue(opresult2413)) {
  lineNumber = 733
  lineNumber = 734
  var call2414 = callmethod(this,"compilereturn", [1], var_o);
  var if2409 = call2414;
}
  lineNumber = 736
  lineNumber = 738
  lineNumber = 1
  lineNumber = 735
  var call2416 = callmethod(var_o,"kind", [0]);
  var string2417 = new GraceString("generic");
  var opresult2419 = callmethod(call2416, "==", [1], string2417);
  if (Grace_isTrue(opresult2419)) {
  lineNumber = 736
  lineNumber = 1
  lineNumber = 736
  lineNumber = 1
  lineNumber = 736
  var call2420 = callmethod(var_o,"value", [0]);
  lineNumber = 737
  var call2421 = callmethod(this,"compilenode", [1], call2420);
  lineNumber = 736
  var call2422 = callmethod(var_o,"register:=", [1], call2421);
  var if2415 = call2422;
}
  lineNumber = 748
  lineNumber = 750
  lineNumber = 1
  lineNumber = 738
  var call2424 = callmethod(var_o,"kind", [0]);
  var string2425 = new GraceString("identifier");
  var opresult2427 = callmethod(call2424, "==", [1], string2425);
  lineNumber = 750
  lineNumber = 1
  lineNumber = 739
  var call2428 = callmethod(var_o,"value", [0]);
  var string2429 = new GraceString("true");
  var opresult2431 = callmethod(call2428, "==", [1], string2429);
  lineNumber = 750
  lineNumber = 1
  lineNumber = 739
  var call2432 = callmethod(var_o,"value", [0]);
  var string2433 = new GraceString("false");
  var opresult2435 = callmethod(call2432, "==", [1], string2433);
  var opresult2437 = callmethod(opresult2431, "|", [1], opresult2435);
  var opresult2439 = callmethod(opresult2427, "&", [1], opresult2437);
  if (Grace_isTrue(opresult2439)) {
  lineNumber = 741
  lineNumber = 740
  var var_val = new GraceNum(0);
  lineNumber = 743
  lineNumber = 744
  lineNumber = 1
  lineNumber = 741
  var call2441 = callmethod(var_o,"value", [0]);
  var string2442 = new GraceString("true");
  var opresult2444 = callmethod(call2441, "==", [1], string2442);
  if (Grace_isTrue(opresult2444)) {
  lineNumber = 743
  lineNumber = 742
  var_val = new GraceNum(1);
  var if2440 = new GraceNum(1);
}
  lineNumber = 744
  var string2445 = new GraceString("  var bool");
  var opresult2447 = callmethod(string2445, "++", [1], var_auto__95__count);
  var string2448 = new GraceString(" = new GraceBoolean(");
  var opresult2450 = callmethod(opresult2447, "++", [1], string2448);
  lineNumber = 1
  lineNumber = 744
  var call2451 = callmethod(var_o,"value", [0]);
  var opresult2453 = callmethod(opresult2450, "++", [1], call2451);
  var string2454 = new GraceString(")");
  var opresult2456 = callmethod(opresult2453, "++", [1], string2454);
  lineNumber = 745
  var call2457 = callmethod(this,"out", [1], opresult2456);
  lineNumber = 746
  lineNumber = 1
  lineNumber = 746
  lineNumber = 745
  var string2458 = new GraceString("bool");
  var opresult2460 = callmethod(string2458, "++", [1], var_auto__95__count);
  var call2461 = callmethod(var_o,"register:=", [1], opresult2460);
  lineNumber = 747
  lineNumber = 746
  var opresult2463 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2463;
  var if2423 = opresult2463;
  } else {
  lineNumber = 748
  lineNumber = 750
  lineNumber = 1
  lineNumber = 747
  var call2465 = callmethod(var_o,"kind", [0]);
  var string2466 = new GraceString("identifier");
  var opresult2468 = callmethod(call2465, "==", [1], string2466);
  if (Grace_isTrue(opresult2468)) {
  lineNumber = 748
  lineNumber = 749
  var call2469 = callmethod(this,"compileidentifier", [1], var_o);
  var if2464 = call2469;
}
  var if2423 = if2464;
}
  lineNumber = 751
  lineNumber = 753
  lineNumber = 1
  lineNumber = 750
  var call2471 = callmethod(var_o,"kind", [0]);
  var string2472 = new GraceString("defdec");
  var opresult2474 = callmethod(call2471, "==", [1], string2472);
  if (Grace_isTrue(opresult2474)) {
  lineNumber = 751
  lineNumber = 752
  var call2475 = callmethod(this,"compiledefdec", [1], var_o);
  var if2470 = call2475;
}
  lineNumber = 754
  lineNumber = 756
  lineNumber = 1
  lineNumber = 753
  var call2477 = callmethod(var_o,"kind", [0]);
  var string2478 = new GraceString("vardec");
  var opresult2480 = callmethod(call2477, "==", [1], string2478);
  if (Grace_isTrue(opresult2480)) {
  lineNumber = 754
  lineNumber = 755
  var call2481 = callmethod(this,"compilevardec", [1], var_o);
  var if2476 = call2481;
}
  lineNumber = 757
  lineNumber = 759
  lineNumber = 1
  lineNumber = 756
  var call2483 = callmethod(var_o,"kind", [0]);
  var string2484 = new GraceString("block");
  var opresult2486 = callmethod(call2483, "==", [1], string2484);
  if (Grace_isTrue(opresult2486)) {
  lineNumber = 757
  lineNumber = 758
  var call2487 = callmethod(this,"compileblock", [1], var_o);
  var if2482 = call2487;
}
  lineNumber = 760
  lineNumber = 762
  lineNumber = 1
  lineNumber = 759
  var call2489 = callmethod(var_o,"kind", [0]);
  var string2490 = new GraceString("method");
  var opresult2492 = callmethod(call2489, "==", [1], string2490);
  if (Grace_isTrue(opresult2492)) {
  lineNumber = 760
  var string2493 = new GraceString("this");
  lineNumber = 761
  var call2494 = callmethod(this,"compilemethod", [2], var_o, string2493);
  var if2488 = call2494;
}
  lineNumber = 763
  lineNumber = 765
  lineNumber = 1
  lineNumber = 762
  var call2496 = callmethod(var_o,"kind", [0]);
  var string2497 = new GraceString("array");
  var opresult2499 = callmethod(call2496, "==", [1], string2497);
  if (Grace_isTrue(opresult2499)) {
  lineNumber = 763
  lineNumber = 764
  var call2500 = callmethod(this,"compilearray", [1], var_o);
  var if2495 = call2500;
}
  lineNumber = 766
  lineNumber = 768
  lineNumber = 1
  lineNumber = 765
  var call2502 = callmethod(var_o,"kind", [0]);
  var string2503 = new GraceString("bind");
  var opresult2505 = callmethod(call2502, "==", [1], string2503);
  if (Grace_isTrue(opresult2505)) {
  lineNumber = 766
  lineNumber = 767
  var call2506 = callmethod(this,"compilebind", [1], var_o);
  var if2501 = call2506;
}
  lineNumber = 769
  lineNumber = 771
  lineNumber = 1
  lineNumber = 768
  var call2508 = callmethod(var_o,"kind", [0]);
  var string2509 = new GraceString("while");
  var opresult2511 = callmethod(call2508, "==", [1], string2509);
  if (Grace_isTrue(opresult2511)) {
  lineNumber = 769
  lineNumber = 770
  var call2512 = callmethod(this,"compilewhile", [1], var_o);
  var if2507 = call2512;
}
  lineNumber = 772
  lineNumber = 774
  lineNumber = 1
  lineNumber = 771
  var call2514 = callmethod(var_o,"kind", [0]);
  var string2515 = new GraceString("if");
  var opresult2517 = callmethod(call2514, "==", [1], string2515);
  if (Grace_isTrue(opresult2517)) {
  lineNumber = 772
  lineNumber = 773
  var call2518 = callmethod(this,"compileif", [1], var_o);
  var if2513 = call2518;
}
  lineNumber = 775
  lineNumber = 777
  lineNumber = 1
  lineNumber = 774
  var call2520 = callmethod(var_o,"kind", [0]);
  var string2521 = new GraceString("matchcase");
  var opresult2523 = callmethod(call2520, "==", [1], string2521);
  if (Grace_isTrue(opresult2523)) {
  lineNumber = 775
  lineNumber = 776
  var call2524 = callmethod(this,"compilematchcase", [1], var_o);
  var if2519 = call2524;
}
  lineNumber = 778
  lineNumber = 780
  lineNumber = 1
  lineNumber = 777
  var call2526 = callmethod(var_o,"kind", [0]);
  var string2527 = new GraceString("class");
  var opresult2529 = callmethod(call2526, "==", [1], string2527);
  if (Grace_isTrue(opresult2529)) {
  lineNumber = 778
  lineNumber = 779
  var call2530 = callmethod(this,"compileclass", [1], var_o);
  var if2525 = call2530;
}
  lineNumber = 781
  lineNumber = 783
  lineNumber = 1
  lineNumber = 780
  var call2532 = callmethod(var_o,"kind", [0]);
  var string2533 = new GraceString("object");
  var opresult2535 = callmethod(call2532, "==", [1], string2533);
  if (Grace_isTrue(opresult2535)) {
  lineNumber = 781
  var string2536 = new GraceString("this");
  lineNumber = 782
  var call2537 = callmethod(this,"compileobject", [2], var_o, string2536);
  var if2531 = call2537;
}
  lineNumber = 784
  lineNumber = 786
  lineNumber = 1
  lineNumber = 783
  var call2539 = callmethod(var_o,"kind", [0]);
  var string2540 = new GraceString("type");
  var opresult2542 = callmethod(call2539, "==", [1], string2540);
  if (Grace_isTrue(opresult2542)) {
  lineNumber = 784
  lineNumber = 785
  var call2543 = callmethod(this,"compiletype", [1], var_o);
  var if2538 = call2543;
}
  lineNumber = 787
  lineNumber = 789
  lineNumber = 1
  lineNumber = 786
  var call2545 = callmethod(var_o,"kind", [0]);
  var string2546 = new GraceString("member");
  var opresult2548 = callmethod(call2545, "==", [1], string2546);
  if (Grace_isTrue(opresult2548)) {
  lineNumber = 787
  lineNumber = 788
  var call2549 = callmethod(this,"compilemember", [1], var_o);
  var if2544 = call2549;
}
  lineNumber = 790
  lineNumber = 792
  lineNumber = 1
  lineNumber = 789
  var call2551 = callmethod(var_o,"kind", [0]);
  var string2552 = new GraceString("for");
  var opresult2554 = callmethod(call2551, "==", [1], string2552);
  if (Grace_isTrue(opresult2554)) {
  lineNumber = 790
  lineNumber = 791
  var call2555 = callmethod(this,"compilefor", [1], var_o);
  var if2550 = call2555;
}
  lineNumber = 833
  lineNumber = 836
  lineNumber = 1
  lineNumber = 792
  var call2557 = callmethod(var_o,"kind", [0]);
  var string2558 = new GraceString("call");
  var opresult2560 = callmethod(call2557, "==", [1], string2558);
  if (Grace_isTrue(opresult2560)) {
  lineNumber = 833
  lineNumber = 835
  lineNumber = 1
  lineNumber = 835
  lineNumber = 1
  lineNumber = 793
  var call2562 = callmethod(var_o,"value", [0]);
  var call2563 = callmethod(call2562,"value", [0]);
  var string2564 = new GraceString("print");
  var opresult2566 = callmethod(call2563, "==", [1], string2564);
  if (Grace_isTrue(opresult2566)) {
  lineNumber = 795
  var array2567 = new GraceList([
]);

  var var_args = array2567;
  lineNumber = 798
  lineNumber = 795
  lineNumber = 1
  lineNumber = 795
  var call2568 = callmethod(var_o,"with", [0]);
  lineNumber = 798
  var block2569 = Grace_allocObject();
  block2569.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2569.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2569.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2569.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2569.receiver = this;
  block2569.className = 'block<genjs:798>';
  block2569.real = function(
var_part
) {
  lineNumber = 796
  lineNumber = 1
  lineNumber = 796
  var call2570 = callmethod(var_part,"args", [0]);
  lineNumber = 798
  var block2571 = Grace_allocObject();
  block2571.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2571.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2571.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2571.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2571.receiver = this;
  block2571.className = 'block<genjs:798>';
  block2571.real = function(
var_prm
) {
  lineNumber = 797
  lineNumber = 798
  var call2572 = callmethod(this,"compilenode", [1], var_prm);
  var var_r = call2572;
  var call2573 = callmethod(var_args,"push", [1], var_r);
  return call2573;
};
  var call2574 = callmethod(Grace_prelude,"for()do", [1, 1], call2570, block2571);
  return call2574;
};
  var call2575 = callmethod(Grace_prelude,"for()do", [1, 1], call2568, block2569);
  lineNumber = 801
  var string2576 = new GraceString("  var call");
  var opresult2578 = callmethod(string2576, "++", [1], var_auto__95__count);
  var string2579 = new GraceString(" = Grace_print(");
  var opresult2581 = callmethod(opresult2578, "++", [1], string2579);
  lineNumber = 1
  lineNumber = 801
  var call2582 = callmethod(var_args,"first", [0]);
  var opresult2584 = callmethod(opresult2581, "++", [1], call2582);
  var string2585 = new GraceString(");");
  var opresult2587 = callmethod(opresult2584, "++", [1], string2585);
  lineNumber = 802
  var call2588 = callmethod(this,"out", [1], opresult2587);
  lineNumber = 803
  lineNumber = 1
  lineNumber = 803
  lineNumber = 802
  var string2589 = new GraceString("call");
  var opresult2591 = callmethod(string2589, "++", [1], var_auto__95__count);
  var call2592 = callmethod(var_o,"register:=", [1], opresult2591);
  lineNumber = 804
  lineNumber = 803
  var opresult2594 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2594;
  var if2561 = opresult2594;
  } else {
  lineNumber = 833
  lineNumber = 807
  lineNumber = 812
  lineNumber = 1
  lineNumber = 812
  lineNumber = 1
  lineNumber = 804
  var call2596 = callmethod(var_o,"value", [0]);
  var call2597 = callmethod(call2596,"kind", [0]);
  var string2598 = new GraceString("member");
  var opresult2600 = callmethod(call2597, "==", [1], string2598);
  lineNumber = 807
  var block2601 = Grace_allocObject();
  block2601.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2601.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2601.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2601.receiver = this;
  block2601.className = 'block<genjs:807>';
  block2601.real = function(
) {
  lineNumber = 1
  lineNumber = 807
  lineNumber = 1
  lineNumber = 807
  lineNumber = 1
  lineNumber = 805
  var call2602 = callmethod(var_o,"value", [0]);
  var call2603 = callmethod(call2602,"in", [0]);
  var call2604 = callmethod(call2603,"kind", [0]);
  var string2605 = new GraceString("identifier");
  var opresult2607 = callmethod(call2604, "==", [1], string2605);
  lineNumber = 807
  lineNumber = 1
  lineNumber = 807
  lineNumber = 1
  lineNumber = 807
  lineNumber = 1
  lineNumber = 806
  var call2608 = callmethod(var_o,"value", [0]);
  var call2609 = callmethod(call2608,"in", [0]);
  var call2610 = callmethod(call2609,"value", [0]);
  var string2611 = new GraceString("self");
  var opresult2613 = callmethod(call2610, "==", [1], string2611);
  var opresult2615 = callmethod(opresult2607, "&", [1], opresult2613);
  lineNumber = 807
  lineNumber = 1
  lineNumber = 807
  lineNumber = 1
  lineNumber = 807
  var call2616 = callmethod(var_o,"value", [0]);
  var call2617 = callmethod(call2616,"value", [0]);
  var string2618 = new GraceString("length");
  var opresult2620 = callmethod(call2617, "==", [1], string2618);
  var opresult2622 = callmethod(opresult2615, "&", [1], opresult2620);
  return opresult2622;
};
  var opresult2624 = callmethod(opresult2600, "&&", [1], block2601);
  if (Grace_isTrue(opresult2624)) {
  lineNumber = 808
  lineNumber = 1
  lineNumber = 808
  lineNumber = 1
  lineNumber = 808
  lineNumber = 1
  lineNumber = 808
  lineNumber = 1
  lineNumber = 808
  var call2625 = callmethod(var_o,"with", [0]);
  var call2626 = callmethod(call2625,"first", [0]);
  var call2627 = callmethod(call2626,"args", [0]);
  var call2628 = callmethod(call2627,"first", [0]);
  lineNumber = 809
  var call2629 = callmethod(this,"compilenode", [1], call2628);
  var_tmp = call2629;
  var string2630 = new GraceString("  var call");
  var opresult2632 = callmethod(string2630, "++", [1], var_auto__95__count);
  var string2633 = new GraceString(" = Grace_length(");
  var opresult2635 = callmethod(opresult2632, "++", [1], string2633);
  var opresult2637 = callmethod(opresult2635, "++", [1], var_tmp);
  var string2638 = new GraceString(");");
  var opresult2640 = callmethod(opresult2637, "++", [1], string2638);
  lineNumber = 810
  var call2641 = callmethod(this,"out", [1], opresult2640);
  lineNumber = 811
  lineNumber = 1
  lineNumber = 811
  lineNumber = 810
  var string2642 = new GraceString("call");
  var opresult2644 = callmethod(string2642, "++", [1], var_auto__95__count);
  var call2645 = callmethod(var_o,"register:=", [1], opresult2644);
  lineNumber = 812
  lineNumber = 811
  var opresult2647 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2647;
  var if2595 = opresult2647;
  } else {
  lineNumber = 833
  lineNumber = 818
  lineNumber = 1
  lineNumber = 818
  lineNumber = 1
  lineNumber = 812
  var call2649 = callmethod(var_o,"value", [0]);
  var call2650 = callmethod(call2649,"kind", [0]);
  var string2651 = new GraceString("identifier");
  var opresult2653 = callmethod(call2650, "==", [1], string2651);
  lineNumber = 818
  lineNumber = 1
  lineNumber = 818
  lineNumber = 1
  lineNumber = 813
  var call2654 = callmethod(var_o,"value", [0]);
  var call2655 = callmethod(call2654,"value", [0]);
  var string2656 = new GraceString("length");
  var opresult2658 = callmethod(call2655, "==", [1], string2656);
  var opresult2660 = callmethod(opresult2653, "&", [1], opresult2658);
  if (Grace_isTrue(opresult2660)) {
  lineNumber = 814
  lineNumber = 1
  lineNumber = 814
  lineNumber = 1
  lineNumber = 814
  lineNumber = 1
  lineNumber = 814
  lineNumber = 1
  lineNumber = 814
  var call2661 = callmethod(var_o,"with", [0]);
  var call2662 = callmethod(call2661,"first", [0]);
  var call2663 = callmethod(call2662,"args", [0]);
  var call2664 = callmethod(call2663,"first", [0]);
  lineNumber = 815
  var call2665 = callmethod(this,"compilenode", [1], call2664);
  var_tmp = call2665;
  var string2666 = new GraceString("  var call");
  var opresult2668 = callmethod(string2666, "++", [1], var_auto__95__count);
  var string2669 = new GraceString(" = Grace_length(");
  var opresult2671 = callmethod(opresult2668, "++", [1], string2669);
  var opresult2673 = callmethod(opresult2671, "++", [1], var_tmp);
  var string2674 = new GraceString(");");
  var opresult2676 = callmethod(opresult2673, "++", [1], string2674);
  lineNumber = 816
  var call2677 = callmethod(this,"out", [1], opresult2676);
  lineNumber = 817
  lineNumber = 1
  lineNumber = 817
  lineNumber = 816
  var string2678 = new GraceString("call");
  var opresult2680 = callmethod(string2678, "++", [1], var_auto__95__count);
  var call2681 = callmethod(var_o,"register:=", [1], opresult2680);
  lineNumber = 818
  lineNumber = 817
  var opresult2683 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2683;
  var if2648 = opresult2683;
  } else {
  lineNumber = 833
  lineNumber = 821
  lineNumber = 826
  lineNumber = 1
  lineNumber = 826
  lineNumber = 1
  lineNumber = 818
  var call2685 = callmethod(var_o,"value", [0]);
  var call2686 = callmethod(call2685,"kind", [0]);
  var string2687 = new GraceString("member");
  var opresult2689 = callmethod(call2686, "==", [1], string2687);
  lineNumber = 821
  var block2690 = Grace_allocObject();
  block2690.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2690.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2690.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2690.receiver = this;
  block2690.className = 'block<genjs:821>';
  block2690.real = function(
) {
  lineNumber = 1
  lineNumber = 821
  lineNumber = 1
  lineNumber = 821
  lineNumber = 1
  lineNumber = 819
  var call2691 = callmethod(var_o,"value", [0]);
  var call2692 = callmethod(call2691,"in", [0]);
  var call2693 = callmethod(call2692,"kind", [0]);
  var string2694 = new GraceString("identifier");
  var opresult2696 = callmethod(call2693, "==", [1], string2694);
  lineNumber = 821
  lineNumber = 1
  lineNumber = 821
  lineNumber = 1
  lineNumber = 821
  lineNumber = 1
  lineNumber = 820
  var call2697 = callmethod(var_o,"value", [0]);
  var call2698 = callmethod(call2697,"in", [0]);
  var call2699 = callmethod(call2698,"value", [0]);
  var string2700 = new GraceString("self");
  var opresult2702 = callmethod(call2699, "==", [1], string2700);
  var opresult2704 = callmethod(opresult2696, "&", [1], opresult2702);
  lineNumber = 821
  lineNumber = 1
  lineNumber = 821
  lineNumber = 1
  lineNumber = 821
  var call2705 = callmethod(var_o,"value", [0]);
  var call2706 = callmethod(call2705,"value", [0]);
  var string2707 = new GraceString("escapestring");
  var opresult2709 = callmethod(call2706, "==", [1], string2707);
  var opresult2711 = callmethod(opresult2704, "&", [1], opresult2709);
  return opresult2711;
};
  var opresult2713 = callmethod(opresult2689, "&&", [1], block2690);
  if (Grace_isTrue(opresult2713)) {
  lineNumber = 823
  lineNumber = 1
  lineNumber = 823
  lineNumber = 1
  lineNumber = 823
  lineNumber = 1
  lineNumber = 823
  lineNumber = 1
  lineNumber = 822
  var call2714 = callmethod(var_o,"with", [0]);
  var call2715 = callmethod(call2714,"first", [0]);
  var call2716 = callmethod(call2715,"args", [0]);
  var call2717 = callmethod(call2716,"first", [0]);
  var_tmp = call2717;
  lineNumber = 823
  var string2718 = new GraceString("_escape");
  lineNumber = 824
  lineNumber = 1
  lineNumber = 823
  var call2719 = callmethod(var_ast,"memberNode", [0]);
  var call2720 = callmethod(call2719,"new", [2], string2718, var_tmp);
  var_tmp = call2720;
  lineNumber = 824
  lineNumber = 1
  lineNumber = 824
  var call2722 = callmethod(var_tmp,"value", [0]);
  lineNumber = 1
  lineNumber = 824
  var call2723 = callmethod(var_ast,"callWithPart", [0]);
  var call2724 = callmethod(call2723,"new", [1], call2722);
  var array2721 = new GraceList([
call2724,
]);

  lineNumber = 825
  lineNumber = 1
  lineNumber = 824
  var call2725 = callmethod(var_ast,"callNode", [0]);
  var call2726 = callmethod(call2725,"new", [2], var_tmp, array2721);
  var_tmp = call2726;
  lineNumber = 825
  lineNumber = 1
  lineNumber = 825
  lineNumber = 826
  var call2727 = callmethod(this,"compilenode", [1], var_tmp);
  lineNumber = 825
  var call2728 = callmethod(var_o,"register:=", [1], call2727);
  var if2684 = call2728;
  } else {
  lineNumber = 833
  lineNumber = 832
  lineNumber = 1
  lineNumber = 832
  lineNumber = 1
  lineNumber = 826
  var call2730 = callmethod(var_o,"value", [0]);
  var call2731 = callmethod(call2730,"kind", [0]);
  var string2732 = new GraceString("identifier");
  var opresult2734 = callmethod(call2731, "==", [1], string2732);
  lineNumber = 832
  lineNumber = 1
  lineNumber = 832
  lineNumber = 1
  lineNumber = 827
  var call2735 = callmethod(var_o,"value", [0]);
  var call2736 = callmethod(call2735,"value", [0]);
  var string2737 = new GraceString("escapestring");
  var opresult2739 = callmethod(call2736, "==", [1], string2737);
  var opresult2741 = callmethod(opresult2734, "&", [1], opresult2739);
  if (Grace_isTrue(opresult2741)) {
  lineNumber = 829
  lineNumber = 1
  lineNumber = 829
  lineNumber = 1
  lineNumber = 829
  lineNumber = 1
  lineNumber = 829
  lineNumber = 1
  lineNumber = 828
  var call2742 = callmethod(var_o,"with", [0]);
  var call2743 = callmethod(call2742,"first", [0]);
  var call2744 = callmethod(call2743,"args", [0]);
  var call2745 = callmethod(call2744,"first", [0]);
  var_tmp = call2745;
  lineNumber = 829
  var string2746 = new GraceString("_escape");
  lineNumber = 830
  lineNumber = 1
  lineNumber = 829
  var call2747 = callmethod(var_ast,"memberNode", [0]);
  var call2748 = callmethod(call2747,"new", [2], string2746, var_tmp);
  var_tmp = call2748;
  lineNumber = 830
  lineNumber = 1
  lineNumber = 830
  var call2750 = callmethod(var_tmp,"value", [0]);
  lineNumber = 1
  lineNumber = 830
  var call2751 = callmethod(var_ast,"callWithPart", [0]);
  var call2752 = callmethod(call2751,"new", [1], call2750);
  var array2749 = new GraceList([
call2752,
]);

  lineNumber = 831
  lineNumber = 1
  lineNumber = 830
  var call2753 = callmethod(var_ast,"callNode", [0]);
  var call2754 = callmethod(call2753,"new", [2], var_tmp, array2749);
  var_tmp = call2754;
  lineNumber = 831
  lineNumber = 1
  lineNumber = 831
  lineNumber = 832
  var call2755 = callmethod(this,"compilenode", [1], var_tmp);
  lineNumber = 831
  var call2756 = callmethod(var_o,"register:=", [1], call2755);
  var if2729 = call2756;
  } else {
  lineNumber = 833
  lineNumber = 834
  var call2757 = callmethod(this,"compilecall", [1], var_o);
  var if2729 = call2757;
}
  var if2684 = if2729;
}
  var if2648 = if2684;
}
  var if2595 = if2648;
}
  var if2561 = if2595;
}
  var if2556 = if2561;
}
  lineNumber = 837
  lineNumber = 839
  lineNumber = 1
  lineNumber = 836
  var call2759 = callmethod(var_o,"kind", [0]);
  var string2760 = new GraceString("op");
  var opresult2762 = callmethod(call2759, "==", [1], string2760);
  if (Grace_isTrue(opresult2762)) {
  lineNumber = 837
  lineNumber = 838
  var call2763 = callmethod(this,"compileop", [1], var_o);
  var if2758 = call2763;
}
  lineNumber = 840
  lineNumber = 839
  var diff2765 = callmethod(var_compilationDepth, "-", [1], new GraceNum(1));
  var_compilationDepth = diff2765;
  lineNumber = 840
  lineNumber = 1
  lineNumber = 840
  var call2766 = callmethod(var_o,"register", [0]);
  return call2766
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilenode"] = func2276;
  lineNumber = 895
var func2767 = function(argcv) {
  var curarg = 1;
  var var_vl = arguments[curarg];
  curarg++;
  var var_of = arguments[curarg];
  curarg++;
  var var_mn = arguments[curarg];
  curarg++;
  var var_rm = arguments[curarg];
  curarg++;
  var var_bt = arguments[curarg];
  curarg++;
  var var_glpath = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 844
  lineNumber = 1
  lineNumber = 843
  var call2768 = callmethod(var_sys,"argv", [0]);
  var var_argv = call2768;
  lineNumber = 845
  var var_cmd;
  lineNumber = 846
  lineNumber = 845
  var_values = var_vl;
  lineNumber = 847
  lineNumber = 846
  var_outfile = var_of;
  lineNumber = 848
  lineNumber = 847
  var_modname = var_mn;
  lineNumber = 849
  lineNumber = 848
  var_runmode = var_rm;
  lineNumber = 850
  lineNumber = 849
  var_buildtype = var_bt;
  lineNumber = 851
  lineNumber = 850
  var_gracelibPath = var_glpath;
  lineNumber = 851
  var string2769 = new GraceString("generating ECMAScript code.");
  var call2770 = callmethod(var_util,"log_verbose", [1], string2769);
  lineNumber = 852
  var string2771 = new GraceString("String");
  var bool2772 = new GraceBoolean(true)
  var call2773 = callmethod(var_topLevelTypes,"put", [2], string2771, bool2772);
  lineNumber = 853
  var string2774 = new GraceString("Number");
  var bool2775 = new GraceBoolean(true)
  var call2776 = callmethod(var_topLevelTypes,"put", [2], string2774, bool2775);
  lineNumber = 854
  var string2777 = new GraceString("Boolean");
  var bool2778 = new GraceBoolean(true)
  var call2779 = callmethod(var_topLevelTypes,"put", [2], string2777, bool2778);
  lineNumber = 855
  var string2780 = new GraceString("Block");
  var bool2781 = new GraceBoolean(true)
  var call2782 = callmethod(var_topLevelTypes,"put", [2], string2780, bool2781);
  lineNumber = 856
  var string2783 = new GraceString("None");
  var bool2784 = new GraceBoolean(true)
  var call2785 = callmethod(var_topLevelTypes,"put", [2], string2783, bool2784);
  lineNumber = 860
  lineNumber = 857
  lineNumber = 860
  var block2786 = Grace_allocObject();
  block2786.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2786.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2786.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2786.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2786.receiver = this;
  block2786.className = 'block<genjs:860>';
  block2786.real = function(
var_v
) {
  lineNumber = 862
  lineNumber = 1
  lineNumber = 858
  var call2788 = callmethod(var_v,"kind", [0]);
  var string2789 = new GraceString("type");
  var opresult2791 = callmethod(call2788, "==", [1], string2789);
  if (Grace_isTrue(opresult2791)) {
  lineNumber = 859
  lineNumber = 1
  lineNumber = 859
  var call2792 = callmethod(var_v,"value", [0]);
  lineNumber = 860
  var call2793 = callmethod(this,"escapeident", [1], call2792);
  var var_typeid = call2793;
  var bool2794 = new GraceBoolean(true)
  var call2795 = callmethod(var_topLevelTypes,"put", [2], var_typeid, bool2794);
  var if2787 = call2795;
}
  return if2787;
};
  var call2796 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block2786);
  lineNumber = 863
  var call2797 = callmethod(var_util,"setline", [1], new GraceNum(1));
  lineNumber = 864
  var string2798 = new GraceString("function gracecode_");
  var opresult2800 = callmethod(string2798, "++", [1], var_modname);
  var string2801 = new GraceString("() {");
  var opresult2803 = callmethod(opresult2800, "++", [1], string2801);
  lineNumber = 865
  var call2804 = callmethod(this,"out", [1], opresult2803);
  lineNumber = 866
  lineNumber = 865
  var string2806 = new GraceString("NativePrelude");
  lineNumber = 868
  lineNumber = 1
  lineNumber = 865
  var call2807 = callmethod(var_util,"extensions", [0]);
  var call2808 = callmethod(call2807,"contains", [1], string2806);
  if (Grace_isTrue(call2808)) {
  lineNumber = 866
  var string2809 = new GraceString("var Grace_prelude = window.Grace_native_prelude;");
  lineNumber = 867
  var call2810 = callmethod(this,"out", [1], string2809);
  var if2805 = call2810;
}
  lineNumber = 878
  lineNumber = 868
  lineNumber = 878
  var block2811 = Grace_allocObject();
  block2811.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2811.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2811.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2811.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2811.receiver = this;
  block2811.className = 'block<genjs:878>';
  block2811.real = function(
var_o
) {
  lineNumber = 873
  lineNumber = 875
  lineNumber = 1
  lineNumber = 869
  var call2813 = callmethod(var_o,"kind", [0]);
  var string2814 = new GraceString("inherits");
  var opresult2816 = callmethod(call2813, "==", [1], string2814);
  if (Grace_isTrue(opresult2816)) {
  lineNumber = 870
  lineNumber = 1
  lineNumber = 870
  var call2817 = callmethod(var_o,"value", [0]);
  lineNumber = 871
  var call2818 = callmethod(this,"compilenode", [1], call2817);
  var var_sup = call2818;
  var string2819 = new GraceString("  this.superobj = ");
  var opresult2821 = callmethod(string2819, "++", [1], var_sup);
  var string2822 = new GraceString(";");
  var opresult2824 = callmethod(opresult2821, "++", [1], string2822);
  lineNumber = 872
  var call2825 = callmethod(this,"out", [1], opresult2824);
  var string2826 = new GraceString("  this.data = ");
  var opresult2828 = callmethod(string2826, "++", [1], var_sup);
  var string2829 = new GraceString(".data;");
  var opresult2831 = callmethod(opresult2828, "++", [1], string2829);
  lineNumber = 873
  var call2832 = callmethod(this,"out", [1], opresult2831);
  var string2833 = new GraceString("  this._value = ");
  var opresult2835 = callmethod(string2833, "++", [1], var_sup);
  var string2836 = new GraceString("._value;");
  var opresult2838 = callmethod(opresult2835, "++", [1], string2836);
  lineNumber = 874
  var call2839 = callmethod(this,"out", [1], opresult2838);
  var if2812 = call2839;
}
  lineNumber = 875
  lineNumber = 876
  var call2840 = callmethod(this,"compilenode", [1], var_o);
  lineNumber = 878
  lineNumber = 880
  lineNumber = 1
  lineNumber = 876
  var call2842 = callmethod(var_o,"kind", [0]);
  var string2843 = new GraceString("type");
  var opresult2845 = callmethod(call2842, "==", [1], string2843);
  if (Grace_isTrue(opresult2845)) {
  lineNumber = 877
  lineNumber = 1
  lineNumber = 877
  var call2846 = callmethod(var_o,"value", [0]);
  lineNumber = 878
  var call2847 = callmethod(this,"escapeident", [1], call2846);
  var var_typeid = call2847;
  var string2848 = new GraceString("var type_");
  var opresult2850 = callmethod(string2848, "++", [1], var_typeid);
  var string2851 = new GraceString(" = var_");
  var opresult2853 = callmethod(opresult2850, "++", [1], string2851);
  var opresult2855 = callmethod(opresult2853, "++", [1], var_typeid);
  var string2856 = new GraceString(";");
  var opresult2858 = callmethod(opresult2855, "++", [1], string2856);
  lineNumber = 879
  var call2859 = callmethod(this,"out", [1], opresult2858);
  var if2841 = call2859;
}
  return if2841;
};
  var call2860 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block2811);
  lineNumber = 881
  var string2861 = new GraceString("  return this;");
  lineNumber = 882
  var call2862 = callmethod(this,"out", [1], string2861);
  var string2863 = new GraceString("}");
  lineNumber = 883
  var call2864 = callmethod(this,"out", [1], string2863);
  lineNumber = 884
  lineNumber = 883
  var bool2865 = new GraceBoolean(false)
  var var_lineOut = bool2865;
  lineNumber = 892
  lineNumber = 884
  lineNumber = 892
  var block2866 = Grace_allocObject();
  block2866.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2866.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2866.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2866.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2866.receiver = this;
  block2866.className = 'block<genjs:892>';
  block2866.real = function(
var_o
) {
  lineNumber = 885
  var string2868 = new GraceString("  lineNumber =");
  var call2869 = callmethod(var_o,"substringFrom()to", [1, 1], new GraceNum(0), new GraceNum(14));
  var opresult2871 = callmethod(string2868, "==", [1], call2869);
  if (Grace_isTrue(opresult2871)) {
  lineNumber = 887
  lineNumber = 886
  var_lineOut = var_o;
  var if2867 = var_o;
  } else {
  lineNumber = 891
  lineNumber = 892
  lineNumber = 888
  var bool2873 = new GraceBoolean(false)
  var opresult2875 = callmethod(bool2873, "/=", [1], var_lineOut);
  if (Grace_isTrue(opresult2875)) {
  lineNumber = 889
  lineNumber = 890
  var call2876 = callmethod(this,"outprint", [1], var_lineOut);
  lineNumber = 891
  lineNumber = 890
  var bool2877 = new GraceBoolean(false)
  var_lineOut = bool2877;
  var if2872 = bool2877;
}
  lineNumber = 892
  lineNumber = 893
  var call2878 = callmethod(this,"outprint", [1], var_o);
  var if2867 = call2878;
}
  return if2867;
};
  var call2879 = callmethod(Grace_prelude,"for()do", [1, 1], var_output, block2866);
  lineNumber = 895
  var string2880 = new GraceString("done.");
  lineNumber = 896
  var call2881 = callmethod(this,"log_verbose", [1], string2880);
  return call2881
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compile"] = func2767;
  return this;
}
function gracecode_genllvm29() {
  lineNumber = 2
// Import of io
  var var_io = do_import("io", gracecode_io);
  lineNumber = 3
// Import of sys
  var var_sys = do_import("sys", gracecode_sys);
  lineNumber = 4
// Import of ast
  var var_ast = do_import("ast", gracecode_ast);
  lineNumber = 5
// Import of util
  var var_util = do_import("util", gracecode_util);
  lineNumber = 6
// Import of buildinfo
  var var_buildinfo = do_import("buildinfo", gracecode_buildinfo);
  lineNumber = 14
// Import of subtype
  var var_subtype = do_import("subtype", gracecode_subtype);
  lineNumber = 15
  var var_tmp;
  lineNumber = 1
var func0 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 14
  return var_tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tmp"] = func0;
  lineNumber = 1
var func1 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_tmp = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tmp:="] = func1;
  lineNumber = 16
  lineNumber = 15
  var var_verbosity = new GraceNum(30);
  lineNumber = 1
var func2 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 15
  return var_verbosity
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["verbosity"] = func2;
  lineNumber = 1
var func3 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_verbosity = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["verbosity:="] = func3;
  lineNumber = 17
  lineNumber = 16
  var var_pad1 = new GraceNum(1);
  lineNumber = 1
var func4 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 16
  return var_pad1
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pad1"] = func4;
  lineNumber = 1
var func5 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_pad1 = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pad1:="] = func5;
  lineNumber = 18
  lineNumber = 17
  var var_auto__95__count = new GraceNum(0);
  lineNumber = 1
var func6 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 17
  return var_auto__95__count
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["auto_count"] = func6;
  lineNumber = 1
var func7 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_auto__95__count = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["auto_count:="] = func7;
  lineNumber = 19
  var array8 = new GraceList([
]);

  var var_constants = array8;
  lineNumber = 1
var func9 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 18
  return var_constants
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["constants"] = func9;
  lineNumber = 1
var func10 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_constants = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["constants:="] = func10;
  lineNumber = 20
  var array11 = new GraceList([
]);

  var var_output = array11;
  lineNumber = 1
var func12 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 19
  return var_output
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["output"] = func12;
  lineNumber = 1
var func13 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_output = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["output:="] = func13;
  lineNumber = 21
  var array14 = new GraceList([
]);

  var var_usedvars = array14;
  lineNumber = 1
var func15 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 20
  return var_usedvars
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["usedvars"] = func15;
  lineNumber = 1
var func16 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_usedvars = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["usedvars:="] = func16;
  lineNumber = 22
  var array17 = new GraceList([
]);

  var var_declaredvars = array17;
  lineNumber = 1
var func18 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 21
  return var_declaredvars
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["declaredvars"] = func18;
  lineNumber = 1
var func19 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_declaredvars = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["declaredvars:="] = func19;
  lineNumber = 23
  lineNumber = 22
  var string20 = new GraceString("entry");
  var var_bblock = string20;
  lineNumber = 1
var func21 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 22
  return var_bblock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bblock"] = func21;
  lineNumber = 1
var func22 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_bblock = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bblock:="] = func22;
  lineNumber = 24
  lineNumber = 23
  var var_linenum = new GraceNum(1);
  lineNumber = 1
var func23 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 23
  return var_linenum
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["linenum"] = func23;
  lineNumber = 1
var func24 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_linenum = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["linenum:="] = func24;
  lineNumber = 25
  var array25 = new GraceList([
]);

  var var_modules = array25;
  lineNumber = 1
var func26 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 24
  return var_modules
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modules"] = func26;
  lineNumber = 1
var func27 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_modules = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modules:="] = func27;
  lineNumber = 26
  var array28 = new GraceList([
]);

  var var_staticmodules = array28;
  lineNumber = 1
var func29 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 25
  return var_staticmodules
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["staticmodules"] = func29;
  lineNumber = 1
var func30 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_staticmodules = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["staticmodules:="] = func30;
  lineNumber = 27
  var array31 = new GraceList([
]);

  var var_values = array31;
  lineNumber = 1
var func32 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 26
  return var_values
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["values"] = func32;
  lineNumber = 1
var func33 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_values = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["values:="] = func33;
  lineNumber = 28
  var var_outfile;
  lineNumber = 1
var func34 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 27
  return var_outfile
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outfile"] = func34;
  lineNumber = 1
var func35 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_outfile = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outfile:="] = func35;
  lineNumber = 29
  lineNumber = 28
  var string36 = new GraceString("main");
  var var_modname = string36;
  lineNumber = 1
var func37 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 28
  return var_modname
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modname"] = func37;
  lineNumber = 1
var func38 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_modname = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modname:="] = func38;
  lineNumber = 30
  lineNumber = 29
  var string39 = new GraceString("build");
  var var_runmode = string39;
  lineNumber = 1
var func40 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 29
  return var_runmode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["runmode"] = func40;
  lineNumber = 1
var func41 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_runmode = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["runmode:="] = func41;
  lineNumber = 31
  lineNumber = 30
  var string42 = new GraceString("bc");
  var var_buildtype = string42;
  lineNumber = 1
var func43 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 30
  return var_buildtype
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["buildtype"] = func43;
  lineNumber = 1
var func44 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_buildtype = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["buildtype:="] = func44;
  lineNumber = 32
  lineNumber = 31
  var string45 = new GraceString("gracelib.bc");
  var var_gracelibPath = string45;
  lineNumber = 1
var func46 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 31
  return var_gracelibPath
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["gracelibPath"] = func46;
  lineNumber = 1
var func47 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_gracelibPath = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["gracelibPath:="] = func47;
  lineNumber = 33
  lineNumber = 32
  var bool48 = new GraceBoolean(false)
  var var_inBlock = bool48;
  lineNumber = 1
var func49 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 32
  return var_inBlock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["inBlock"] = func49;
  lineNumber = 1
var func50 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_inBlock = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["inBlock:="] = func50;
  lineNumber = 34
  lineNumber = 33
  var var_paramsUsed = new GraceNum(1);
  lineNumber = 1
var func51 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 33
  return var_paramsUsed
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["paramsUsed"] = func51;
  lineNumber = 1
var func52 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_paramsUsed = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["paramsUsed:="] = func52;
  lineNumber = 36
  lineNumber = 34
  var var_topLevelMethodPos = new GraceNum(1);
  lineNumber = 1
var func53 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 34
  return var_topLevelMethodPos
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["topLevelMethodPos"] = func53;
  lineNumber = 1
var func54 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_topLevelMethodPos = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["topLevelMethodPos:="] = func54;
  lineNumber = 37
var func55 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call56 = callmethod(var_output,"push", [1], var_s);
  return call56
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["out"] = func55;
  lineNumber = 40
var func57 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call58 = callmethod(var_util,"outprint", [1], var_s);
  return call58
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outprint"] = func57;
  lineNumber = 43
var func59 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call60 = callmethod(var_util,"log_verbose", [1], var_s);
  return call60
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["log_verbose"] = func59;
  lineNumber = 47
var func61 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 46
  var string62 = new GraceString("%");
  var opresult64 = callmethod(string62, "++", [1], var_s);
  var_bblock = opresult64;
  lineNumber = 47
  var string65 = new GraceString(":");
  var opresult67 = callmethod(var_s, "++", [1], string65);
  lineNumber = 48
  var call68 = callmethod(this,"out", [1], opresult67);
  return call68
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["beginblock"] = func61;
  lineNumber = 62
var func69 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 51
  lineNumber = 50
  var var_myc = var_auto__95__count;
  lineNumber = 52
  lineNumber = 51
  var opresult71 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult71;
  lineNumber = 53
  var var_r;
  var string72 = new GraceString("  %array");
  var opresult74 = callmethod(string72, "++", [1], var_myc);
  var string75 = new GraceString(" = call %object @alloc_List()");
  var opresult77 = callmethod(opresult74, "++", [1], string75);
  lineNumber = 54
  var call78 = callmethod(this,"out", [1], opresult77);
  lineNumber = 59
  lineNumber = 54
  lineNumber = 1
  lineNumber = 54
  var call79 = callmethod(var_o,"value", [0]);
  lineNumber = 59
  var block80 = Grace_allocObject();
  block80.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block80.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block80.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block80.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block80.receiver = this;
  block80.className = 'block<genllvm29:59>';
  block80.real = function(
var_a
) {
  lineNumber = 55
  lineNumber = 56
  var call81 = callmethod(this,"compilenode", [1], var_a);
  var_r = call81;
  var string82 = new GraceString("  store %object ");
  var opresult84 = callmethod(string82, "++", [1], var_r);
  var string85 = new GraceString(", %object* %params_0");
  var opresult87 = callmethod(opresult84, "++", [1], string85);
  lineNumber = 57
  var call88 = callmethod(this,"out", [1], opresult87);
  lineNumber = 59
  lineNumber = 57
  var string89 = new GraceString("  call %object @callmethod(%object %array");
  lineNumber = 58
  var opresult91 = callmethod(string89, "++", [1], var_myc);
  var string92 = new GraceString(", i8* getelementptr([5 x i8]* @.str._push");
  var opresult94 = callmethod(opresult91, "++", [1], string92);
  lineNumber = 59
  var string95 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult97 = callmethod(opresult94, "++", [1], string95);
  lineNumber = 60
  var call98 = callmethod(this,"out", [1], opresult97);
  return call98;
};
  var call99 = callmethod(Grace_prelude,"for()do", [1, 1], call79, block80);
  lineNumber = 62
  lineNumber = 1
  lineNumber = 62
  lineNumber = 61
  var string100 = new GraceString("%array");
  var opresult102 = callmethod(string100, "++", [1], var_myc);
  var call103 = callmethod(var_o,"register:=", [1], opresult102);
  return call103
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilearray"] = func69;
  lineNumber = 69
var func104 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 66
  var array105 = new GraceList([
]);

  var var_l = array105;
  var call106 = callmethod(var_ast,"astcall", [2], var_o, var_l);
  var var_c = call106;
  lineNumber = 67
  lineNumber = 68
  var call107 = callmethod(this,"compilenode", [1], var_c);
  var var_r = call107;
  lineNumber = 69
  lineNumber = 1
  lineNumber = 68
  var call108 = callmethod(var_o,"register:=", [1], var_r);
  return call108
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilemember"] = func104;
  lineNumber = 98
var func109 = function(argcv) {
  var curarg = 1;
  var var_selfr = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 72
  lineNumber = 71
  var var_myc = var_auto__95__count;
  lineNumber = 73
  lineNumber = 72
  var opresult111 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult111;
  lineNumber = 74
  lineNumber = 73
  var string112 = new GraceString("outer");
  var var_nm = string112;
  lineNumber = 74
  var call113 = Grace_length(var_nm);
  var opresult115 = callmethod(call113, "+", [1], new GraceNum(1));
  var var_len = opresult115;
  lineNumber = 75
  lineNumber = 1
  lineNumber = 75
  var call116 = callmethod(var_nm,"_escape", [0]);
  var var_enm = call116;
  lineNumber = 78
  lineNumber = 76
  var string117 = new GraceString("@.str.methname");
  var opresult119 = callmethod(string117, "++", [1], var_myc);
  var string120 = new GraceString(" = private unnamed_addr ");
  var opresult122 = callmethod(opresult119, "++", [1], string120);
  lineNumber = 77
  var string123 = new GraceString("constant [");
  var opresult125 = callmethod(opresult122, "++", [1], string123);
  var opresult127 = callmethod(opresult125, "++", [1], var_len);
  var string128 = new GraceString(" x i8] c\"");
  var opresult130 = callmethod(opresult127, "++", [1], string128);
  var opresult132 = callmethod(opresult130, "++", [1], var_enm);
  var string133 = new GraceString("\\00\"");
  var opresult135 = callmethod(opresult132, "++", [1], string133);
  var var_con = opresult135;
  lineNumber = 78
  var call136 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 79
  var string137 = new GraceString("; OBJECT OUTER DEC ");
  var opresult139 = callmethod(string137, "++", [1], var_enm);
  lineNumber = 80
  var call140 = callmethod(this,"out", [1], opresult139);
  var string141 = new GraceString("  call void @adddatum2(%object ");
  var opresult143 = callmethod(string141, "++", [1], var_selfr);
  var string144 = new GraceString(", %object %self, i32 0)");
  var opresult146 = callmethod(opresult143, "++", [1], string144);
  lineNumber = 81
  var call147 = callmethod(this,"out", [1], opresult146);
  lineNumber = 83
  lineNumber = 81
  var string148 = new GraceString("define private %object @\"reader_");
  var opresult150 = callmethod(string148, "++", [1], var_modname);
  var string151 = new GraceString("_");
  var opresult153 = callmethod(opresult150, "++", [1], string151);
  var opresult155 = callmethod(opresult153, "++", [1], var_enm);
  var string156 = new GraceString("_");
  var opresult158 = callmethod(opresult155, "++", [1], string156);
  var opresult160 = callmethod(opresult158, "++", [1], var_myc);
  lineNumber = 82
  var string161 = new GraceString("\"(%object %self, i32 %nparams, ");
  var opresult163 = callmethod(opresult160, "++", [1], string161);
  lineNumber = 83
  var string164 = new GraceString("%object* %args, i32 %flags) {");
  var opresult166 = callmethod(opresult163, "++", [1], string164);
  lineNumber = 84
  var call167 = callmethod(this,"outprint", [1], opresult166);
  var string168 = new GraceString("  %uo = bitcast %object %self to %UserObject*");
  lineNumber = 85
  var call169 = callmethod(this,"outprint", [1], string168);
  var string170 = new GraceString("  %fieldpp = getelementptr %UserObject* %uo, i32 0, i32 3");
  lineNumber = 86
  var call171 = callmethod(this,"outprint", [1], string170);
  var string172 = new GraceString("  %fieldpf = getelementptr [0 x %object]* %fieldpp, i32 0, i32 0");
  lineNumber = 87
  var call173 = callmethod(this,"outprint", [1], string172);
  var string174 = new GraceString("  %val = load %object* %fieldpf");
  lineNumber = 88
  var call175 = callmethod(this,"outprint", [1], string174);
  var string176 = new GraceString("  ret %object %val");
  lineNumber = 89
  var call177 = callmethod(this,"outprint", [1], string176);
  var string178 = new GraceString("}");
  lineNumber = 90
  var call179 = callmethod(this,"outprint", [1], string178);
  lineNumber = 98
  lineNumber = 90
  var string180 = new GraceString("  call void @addmethod2(%object ");
  var opresult182 = callmethod(string180, "++", [1], var_selfr);
  lineNumber = 91
  var string183 = new GraceString(", i8* getelementptr([");
  var opresult185 = callmethod(opresult182, "++", [1], string183);
  lineNumber = 92
  var opresult187 = callmethod(opresult185, "++", [1], var_len);
  var string188 = new GraceString(" x i8]* @.str.methname");
  var opresult190 = callmethod(opresult187, "++", [1], string188);
  var opresult192 = callmethod(opresult190, "++", [1], var_myc);
  var string193 = new GraceString(", i32 0, i32 0), ");
  var opresult195 = callmethod(opresult192, "++", [1], string193);
  lineNumber = 93
  var string196 = new GraceString("%object(%object, i32, %object*, i32)* ");
  var opresult198 = callmethod(opresult195, "++", [1], string196);
  lineNumber = 94
  var string199 = new GraceString("getelementptr(%object ");
  var opresult201 = callmethod(opresult198, "++", [1], string199);
  lineNumber = 95
  var string202 = new GraceString("(%object, i32, %object*, i32)* ");
  var opresult204 = callmethod(opresult201, "++", [1], string202);
  lineNumber = 96
  var string205 = new GraceString("@\"reader_");
  var opresult207 = callmethod(opresult204, "++", [1], string205);
  var opresult209 = callmethod(opresult207, "++", [1], var_modname);
  var string210 = new GraceString("_");
  var opresult212 = callmethod(opresult209, "++", [1], string210);
  var opresult214 = callmethod(opresult212, "++", [1], var_enm);
  lineNumber = 97
  var string215 = new GraceString("_");
  var opresult217 = callmethod(opresult214, "++", [1], string215);
  var opresult219 = callmethod(opresult217, "++", [1], var_myc);
  lineNumber = 98
  var string220 = new GraceString("\"))");
  var opresult222 = callmethod(opresult219, "++", [1], string220);
  lineNumber = 99
  var call223 = callmethod(this,"out", [1], opresult222);
  return call223
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjouter"] = func109;
  lineNumber = 132
var func224 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 102
  lineNumber = 101
  var string225 = new GraceString("%undefined");
  var var_val = string225;
  lineNumber = 103
  lineNumber = 105
  lineNumber = 102
  var bool227 = new GraceBoolean(false)
  lineNumber = 105
  lineNumber = 1
  lineNumber = 102
  var call228 = callmethod(var_o,"value", [0]);
  var opresult230 = callmethod(bool227, "!=", [1], call228);
  if (Grace_isTrue(opresult230)) {
  lineNumber = 103
  lineNumber = 1
  lineNumber = 103
  var call231 = callmethod(var_o,"value", [0]);
  lineNumber = 104
  var call232 = callmethod(this,"compilenode", [1], call231);
  var_val = call232;
  var if226 = call232;
}
  lineNumber = 106
  lineNumber = 105
  var var_myc = var_auto__95__count;
  lineNumber = 107
  lineNumber = 106
  var opresult234 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult234;
  lineNumber = 108
  lineNumber = 1
  lineNumber = 108
  lineNumber = 1
  lineNumber = 107
  var call235 = callmethod(var_o,"name", [0]);
  var call236 = callmethod(call235,"value", [0]);
  var var_nm = call236;
  lineNumber = 108
  var call237 = Grace_length(var_nm);
  var opresult239 = callmethod(call237, "+", [1], new GraceNum(1));
  var var_len = opresult239;
  lineNumber = 109
  lineNumber = 1
  lineNumber = 109
  var call240 = callmethod(var_nm,"_escape", [0]);
  var var_enm = call240;
  lineNumber = 112
  lineNumber = 110
  var string241 = new GraceString("@.str.methname");
  var opresult243 = callmethod(string241, "++", [1], var_myc);
  var string244 = new GraceString(" = private unnamed_addr ");
  var opresult246 = callmethod(opresult243, "++", [1], string244);
  lineNumber = 111
  var string247 = new GraceString("constant [");
  var opresult249 = callmethod(opresult246, "++", [1], string247);
  var opresult251 = callmethod(opresult249, "++", [1], var_len);
  var string252 = new GraceString(" x i8] c\"");
  var opresult254 = callmethod(opresult251, "++", [1], string252);
  var opresult256 = callmethod(opresult254, "++", [1], var_enm);
  var string257 = new GraceString("\\00\"");
  var opresult259 = callmethod(opresult256, "++", [1], string257);
  var var_con = opresult259;
  lineNumber = 112
  var call260 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 113
  var string261 = new GraceString("; OBJECT CONST DEC ");
  var opresult263 = callmethod(string261, "++", [1], var_enm);
  lineNumber = 114
  var call264 = callmethod(this,"out", [1], opresult263);
  var string265 = new GraceString("  call void @adddatum2(%object ");
  var opresult267 = callmethod(string265, "++", [1], var_selfr);
  var string268 = new GraceString(", %object ");
  var opresult270 = callmethod(opresult267, "++", [1], string268);
  var opresult272 = callmethod(opresult270, "++", [1], var_val);
  var string273 = new GraceString(", i32 ");
  var opresult275 = callmethod(opresult272, "++", [1], string273);
  var opresult277 = callmethod(opresult275, "++", [1], var_pos);
  var string278 = new GraceString(")");
  var opresult280 = callmethod(opresult277, "++", [1], string278);
  lineNumber = 115
  var call281 = callmethod(this,"out", [1], opresult280);
  lineNumber = 117
  lineNumber = 115
  var string282 = new GraceString("define private %object @\"reader_");
  var opresult284 = callmethod(string282, "++", [1], var_modname);
  var string285 = new GraceString("_");
  var opresult287 = callmethod(opresult284, "++", [1], string285);
  var opresult289 = callmethod(opresult287, "++", [1], var_enm);
  var string290 = new GraceString("_");
  var opresult292 = callmethod(opresult289, "++", [1], string290);
  var opresult294 = callmethod(opresult292, "++", [1], var_myc);
  lineNumber = 116
  var string295 = new GraceString("\"(%object %self, i32 %nparams, ");
  var opresult297 = callmethod(opresult294, "++", [1], string295);
  lineNumber = 117
  var string298 = new GraceString("%object* %args, i32 %flags) {");
  var opresult300 = callmethod(opresult297, "++", [1], string298);
  lineNumber = 118
  var call301 = callmethod(this,"outprint", [1], opresult300);
  var string302 = new GraceString("  %uo = bitcast %object %self to %UserObject*");
  lineNumber = 119
  var call303 = callmethod(this,"outprint", [1], string302);
  var string304 = new GraceString("  %fieldpp = getelementptr %UserObject* %uo, i32 0, i32 3");
  lineNumber = 120
  var call305 = callmethod(this,"outprint", [1], string304);
  var string306 = new GraceString("  %fieldpf = getelementptr [0 x %object]* %fieldpp, i32 0, i32 ");
  var opresult308 = callmethod(string306, "++", [1], var_pos);
  var string309 = new GraceString("");
  var opresult311 = callmethod(opresult308, "++", [1], string309);
  lineNumber = 121
  var call312 = callmethod(this,"outprint", [1], opresult311);
  var string313 = new GraceString("  %val = load %object* %fieldpf");
  lineNumber = 122
  var call314 = callmethod(this,"outprint", [1], string313);
  var string315 = new GraceString("  ret %object %val");
  lineNumber = 123
  var call316 = callmethod(this,"outprint", [1], string315);
  var string317 = new GraceString("}");
  lineNumber = 124
  var call318 = callmethod(this,"outprint", [1], string317);
  lineNumber = 132
  lineNumber = 124
  var string319 = new GraceString("  call void @addmethod2(%object ");
  var opresult321 = callmethod(string319, "++", [1], var_selfr);
  lineNumber = 125
  var string322 = new GraceString(", i8* getelementptr([");
  var opresult324 = callmethod(opresult321, "++", [1], string322);
  lineNumber = 126
  var opresult326 = callmethod(opresult324, "++", [1], var_len);
  var string327 = new GraceString(" x i8]* @.str.methname");
  var opresult329 = callmethod(opresult326, "++", [1], string327);
  var opresult331 = callmethod(opresult329, "++", [1], var_myc);
  var string332 = new GraceString(", i32 0, i32 0), ");
  var opresult334 = callmethod(opresult331, "++", [1], string332);
  lineNumber = 127
  var string335 = new GraceString("%object(%object, i32, %object*, i32)* ");
  var opresult337 = callmethod(opresult334, "++", [1], string335);
  lineNumber = 128
  var string338 = new GraceString("getelementptr(%object ");
  var opresult340 = callmethod(opresult337, "++", [1], string338);
  lineNumber = 129
  var string341 = new GraceString("(%object, i32, %object*, i32)* ");
  var opresult343 = callmethod(opresult340, "++", [1], string341);
  lineNumber = 130
  var string344 = new GraceString("@\"reader_");
  var opresult346 = callmethod(opresult343, "++", [1], string344);
  var opresult348 = callmethod(opresult346, "++", [1], var_modname);
  var string349 = new GraceString("_");
  var opresult351 = callmethod(opresult348, "++", [1], string349);
  var opresult353 = callmethod(opresult351, "++", [1], var_enm);
  lineNumber = 131
  var string354 = new GraceString("_");
  var opresult356 = callmethod(opresult353, "++", [1], string354);
  var opresult358 = callmethod(opresult356, "++", [1], var_myc);
  lineNumber = 132
  var string359 = new GraceString("\"))");
  var opresult361 = callmethod(opresult358, "++", [1], string359);
  lineNumber = 133
  var call362 = callmethod(this,"out", [1], opresult361);
  return call362
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjdefdec"] = func224;
  lineNumber = 193
var func363 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 136
  lineNumber = 135
  var string364 = new GraceString("%undefined");
  var var_val = string364;
  lineNumber = 137
  lineNumber = 139
  lineNumber = 136
  var bool366 = new GraceBoolean(false)
  lineNumber = 139
  lineNumber = 1
  lineNumber = 136
  var call367 = callmethod(var_o,"value", [0]);
  var opresult369 = callmethod(bool366, "!=", [1], call367);
  if (Grace_isTrue(opresult369)) {
  lineNumber = 137
  lineNumber = 1
  lineNumber = 137
  var call370 = callmethod(var_o,"value", [0]);
  lineNumber = 138
  var call371 = callmethod(this,"compilenode", [1], call370);
  var_val = call371;
  var if365 = call371;
}
  lineNumber = 140
  lineNumber = 139
  var var_myc = var_auto__95__count;
  lineNumber = 141
  lineNumber = 140
  var opresult373 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult373;
  lineNumber = 142
  lineNumber = 1
  lineNumber = 142
  lineNumber = 1
  lineNumber = 141
  var call374 = callmethod(var_o,"name", [0]);
  var call375 = callmethod(call374,"value", [0]);
  var var_nm = call375;
  lineNumber = 142
  var call376 = Grace_length(var_nm);
  var opresult378 = callmethod(call376, "+", [1], new GraceNum(1));
  var var_len = opresult378;
  lineNumber = 143
  lineNumber = 1
  lineNumber = 143
  var call379 = callmethod(var_nm,"_escape", [0]);
  var var_enm = call379;
  lineNumber = 146
  lineNumber = 144
  var string380 = new GraceString("@.str.methname");
  var opresult382 = callmethod(string380, "++", [1], var_myc);
  var string383 = new GraceString(" = private unnamed_addr ");
  var opresult385 = callmethod(opresult382, "++", [1], string383);
  lineNumber = 145
  var string386 = new GraceString("constant [");
  var opresult388 = callmethod(opresult385, "++", [1], string386);
  var opresult390 = callmethod(opresult388, "++", [1], var_len);
  var string391 = new GraceString(" x i8] c\"");
  var opresult393 = callmethod(opresult390, "++", [1], string391);
  var opresult395 = callmethod(opresult393, "++", [1], var_enm);
  var string396 = new GraceString("\\00\"");
  var opresult398 = callmethod(opresult395, "++", [1], string396);
  var var_con = opresult398;
  lineNumber = 146
  var call399 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 147
  var string400 = new GraceString("; OBJECT VAR DEC ");
  var opresult402 = callmethod(string400, "++", [1], var_nm);
  lineNumber = 148
  var call403 = callmethod(this,"out", [1], opresult402);
  var string404 = new GraceString("  call void @adddatum2(%object ");
  var opresult406 = callmethod(string404, "++", [1], var_selfr);
  var string407 = new GraceString(", %object ");
  var opresult409 = callmethod(opresult406, "++", [1], string407);
  var opresult411 = callmethod(opresult409, "++", [1], var_val);
  var string412 = new GraceString(", i32 ");
  var opresult414 = callmethod(opresult411, "++", [1], string412);
  var opresult416 = callmethod(opresult414, "++", [1], var_pos);
  var string417 = new GraceString(")");
  var opresult419 = callmethod(opresult416, "++", [1], string417);
  lineNumber = 149
  var call420 = callmethod(this,"out", [1], opresult419);
  lineNumber = 151
  lineNumber = 149
  var string421 = new GraceString("define private %object @\"reader_");
  var opresult423 = callmethod(string421, "++", [1], var_modname);
  var string424 = new GraceString("_");
  var opresult426 = callmethod(opresult423, "++", [1], string424);
  var opresult428 = callmethod(opresult426, "++", [1], var_enm);
  var string429 = new GraceString("_");
  var opresult431 = callmethod(opresult428, "++", [1], string429);
  var opresult433 = callmethod(opresult431, "++", [1], var_myc);
  lineNumber = 150
  var string434 = new GraceString("\"(%object %self, i32 %nparams, ");
  var opresult436 = callmethod(opresult433, "++", [1], string434);
  lineNumber = 151
  var string437 = new GraceString("%object* %args, i32 %flags) {");
  var opresult439 = callmethod(opresult436, "++", [1], string437);
  lineNumber = 152
  var call440 = callmethod(this,"outprint", [1], opresult439);
  var string441 = new GraceString("  %uo = bitcast %object %self to %UserObject*");
  lineNumber = 153
  var call442 = callmethod(this,"outprint", [1], string441);
  var string443 = new GraceString("  %fieldpp = getelementptr %UserObject* %uo, i32 0, i32 3");
  lineNumber = 154
  var call444 = callmethod(this,"outprint", [1], string443);
  var string445 = new GraceString("  %fieldpf = getelementptr [0 x %object]* %fieldpp, i32 0, i32 ");
  var opresult447 = callmethod(string445, "++", [1], var_pos);
  var string448 = new GraceString("");
  var opresult450 = callmethod(opresult447, "++", [1], string448);
  lineNumber = 155
  var call451 = callmethod(this,"outprint", [1], opresult450);
  var string452 = new GraceString("  %val = load %object* %fieldpf");
  lineNumber = 156
  var call453 = callmethod(this,"outprint", [1], string452);
  var string454 = new GraceString("  ret %object %val");
  lineNumber = 157
  var call455 = callmethod(this,"outprint", [1], string454);
  var string456 = new GraceString("}");
  lineNumber = 158
  var call457 = callmethod(this,"outprint", [1], string456);
  lineNumber = 166
  lineNumber = 158
  var string458 = new GraceString("  call void @addmethod2(%object ");
  var opresult460 = callmethod(string458, "++", [1], var_selfr);
  lineNumber = 159
  var string461 = new GraceString(", i8* getelementptr([");
  var opresult463 = callmethod(opresult460, "++", [1], string461);
  lineNumber = 160
  var opresult465 = callmethod(opresult463, "++", [1], var_len);
  var string466 = new GraceString(" x i8]* @.str.methname");
  var opresult468 = callmethod(opresult465, "++", [1], string466);
  var opresult470 = callmethod(opresult468, "++", [1], var_myc);
  var string471 = new GraceString(", i32 0, i32 0), ");
  var opresult473 = callmethod(opresult470, "++", [1], string471);
  lineNumber = 161
  var string474 = new GraceString("%object(%object, i32, %object*, i32)* ");
  var opresult476 = callmethod(opresult473, "++", [1], string474);
  lineNumber = 162
  var string477 = new GraceString("getelementptr(%object ");
  var opresult479 = callmethod(opresult476, "++", [1], string477);
  lineNumber = 163
  var string480 = new GraceString("(%object, i32, %object*, i32)* ");
  var opresult482 = callmethod(opresult479, "++", [1], string480);
  lineNumber = 164
  var string483 = new GraceString("@\"reader_");
  var opresult485 = callmethod(opresult482, "++", [1], string483);
  var opresult487 = callmethod(opresult485, "++", [1], var_modname);
  var string488 = new GraceString("_");
  var opresult490 = callmethod(opresult487, "++", [1], string488);
  var opresult492 = callmethod(opresult490, "++", [1], var_enm);
  lineNumber = 165
  var string493 = new GraceString("_");
  var opresult495 = callmethod(opresult492, "++", [1], string493);
  var opresult497 = callmethod(opresult495, "++", [1], var_myc);
  lineNumber = 166
  var string498 = new GraceString("\"))");
  var opresult500 = callmethod(opresult497, "++", [1], string498);
  lineNumber = 167
  var call501 = callmethod(this,"out", [1], opresult500);
  lineNumber = 168
  lineNumber = 167
  var string502 = new GraceString(":=");
  var opresult504 = callmethod(var_nm, "++", [1], string502);
  var var_nmw = opresult504;
  lineNumber = 168
  var call505 = Grace_length(var_nmw);
  var opresult507 = callmethod(call505, "+", [1], new GraceNum(1));
  var_len = opresult507;
  lineNumber = 169
  lineNumber = 1
  lineNumber = 169
  var call508 = callmethod(var_nmw,"_escape", [0]);
  var_nmw = call508;
  lineNumber = 172
  lineNumber = 170
  var string509 = new GraceString("@.str.methnamew");
  var opresult511 = callmethod(string509, "++", [1], var_myc);
  var string512 = new GraceString(" = private unnamed_addr ");
  var opresult514 = callmethod(opresult511, "++", [1], string512);
  lineNumber = 171
  var string515 = new GraceString("constant [");
  var opresult517 = callmethod(opresult514, "++", [1], string515);
  var opresult519 = callmethod(opresult517, "++", [1], var_len);
  var string520 = new GraceString(" x i8] c\"");
  var opresult522 = callmethod(opresult519, "++", [1], string520);
  var opresult524 = callmethod(opresult522, "++", [1], var_nmw);
  var string525 = new GraceString("\\00\"");
  var opresult527 = callmethod(opresult524, "++", [1], string525);
  var_con = opresult527;
  lineNumber = 172
  var call528 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 175
  lineNumber = 173
  var string529 = new GraceString("define private %object @\"writer_");
  var opresult531 = callmethod(string529, "++", [1], var_modname);
  var string532 = new GraceString("_");
  var opresult534 = callmethod(opresult531, "++", [1], string532);
  var opresult536 = callmethod(opresult534, "++", [1], var_enm);
  var string537 = new GraceString("_");
  var opresult539 = callmethod(opresult536, "++", [1], string537);
  var opresult541 = callmethod(opresult539, "++", [1], var_myc);
  lineNumber = 174
  var string542 = new GraceString("\"(%object %self, i32 %nparams, ");
  var opresult544 = callmethod(opresult541, "++", [1], string542);
  lineNumber = 175
  var string545 = new GraceString("%object* %args, i32 %flags) {");
  var opresult547 = callmethod(opresult544, "++", [1], string545);
  lineNumber = 176
  var call548 = callmethod(this,"outprint", [1], opresult547);
  var string549 = new GraceString("  %params = getelementptr %object* %args, i32 0");
  lineNumber = 177
  var call550 = callmethod(this,"outprint", [1], string549);
  var string551 = new GraceString("  %par0 = load %object* %params");
  lineNumber = 178
  var call552 = callmethod(this,"outprint", [1], string551);
  var string553 = new GraceString("  %uo = bitcast %object %self to %UserObject*");
  lineNumber = 179
  var call554 = callmethod(this,"outprint", [1], string553);
  var string555 = new GraceString("  %fieldpp = getelementptr %UserObject* %uo, i32 0, i32 3");
  lineNumber = 180
  var call556 = callmethod(this,"outprint", [1], string555);
  var string557 = new GraceString("  %fieldpf = getelementptr [0 x %object]* %fieldpp, i32 0, i32 ");
  var opresult559 = callmethod(string557, "++", [1], var_pos);
  var string560 = new GraceString("");
  var opresult562 = callmethod(opresult559, "++", [1], string560);
  lineNumber = 181
  var call563 = callmethod(this,"outprint", [1], opresult562);
  var string564 = new GraceString("  store %object %par0, %object* %fieldpf");
  lineNumber = 182
  var call565 = callmethod(this,"outprint", [1], string564);
  var string566 = new GraceString("  %none = load %object* @none");
  lineNumber = 183
  var call567 = callmethod(this,"outprint", [1], string566);
  var string568 = new GraceString("  ret %object %none");
  lineNumber = 184
  var call569 = callmethod(this,"outprint", [1], string568);
  var string570 = new GraceString("}");
  lineNumber = 185
  var call571 = callmethod(this,"outprint", [1], string570);
  lineNumber = 193
  lineNumber = 185
  var string572 = new GraceString("  call void @addmethod2(%object ");
  var opresult574 = callmethod(string572, "++", [1], var_selfr);
  lineNumber = 186
  var string575 = new GraceString(", i8* getelementptr([");
  var opresult577 = callmethod(opresult574, "++", [1], string575);
  lineNumber = 187
  var opresult579 = callmethod(opresult577, "++", [1], var_len);
  var string580 = new GraceString(" x i8]* @.str.methnamew");
  var opresult582 = callmethod(opresult579, "++", [1], string580);
  var opresult584 = callmethod(opresult582, "++", [1], var_myc);
  var string585 = new GraceString(", i32 0, i32 0), ");
  var opresult587 = callmethod(opresult584, "++", [1], string585);
  lineNumber = 188
  var string588 = new GraceString("%object(%object, i32, %object*, i32)* ");
  var opresult590 = callmethod(opresult587, "++", [1], string588);
  lineNumber = 189
  var string591 = new GraceString("getelementptr(%object ");
  var opresult593 = callmethod(opresult590, "++", [1], string591);
  lineNumber = 190
  var string594 = new GraceString("(%object, i32, %object*, i32)* ");
  var opresult596 = callmethod(opresult593, "++", [1], string594);
  lineNumber = 191
  var string597 = new GraceString("@\"writer_");
  var opresult599 = callmethod(opresult596, "++", [1], string597);
  var opresult601 = callmethod(opresult599, "++", [1], var_modname);
  var string602 = new GraceString("_");
  var opresult604 = callmethod(opresult601, "++", [1], string602);
  var opresult606 = callmethod(opresult604, "++", [1], var_enm);
  lineNumber = 192
  var string607 = new GraceString("_");
  var opresult609 = callmethod(opresult606, "++", [1], string607);
  var opresult611 = callmethod(opresult609, "++", [1], var_myc);
  lineNumber = 193
  var string612 = new GraceString("\"))");
  var opresult614 = callmethod(opresult611, "++", [1], string612);
  lineNumber = 194
  var call615 = callmethod(this,"out", [1], opresult614);
  return call615
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjvardec"] = func363;
  lineNumber = 203
var func616 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 197
  lineNumber = 1
  lineNumber = 196
  var call617 = callmethod(var_o,"params", [0]);
  var var_params = call617;
  lineNumber = 197
  lineNumber = 1
  lineNumber = 197
  var call619 = callmethod(var_o,"value", [0]);
  lineNumber = 1
  lineNumber = 197
  var call620 = callmethod(var_o,"superclass", [0]);
  var call621 = callmethod(var_ast,"astobject", [2], call619, call620);
  var array618 = new GraceList([
call621,
]);

  var var_mbody = array618;
  lineNumber = 199
  lineNumber = 198
  var string622 = new GraceString("new");
  var bool623 = new GraceBoolean(false)
  var call624 = callmethod(var_ast,"astidentifier", [2], string622, bool623);
  lineNumber = 199
  var bool625 = new GraceBoolean(false)
  lineNumber = 198
  var call626 = callmethod(var_ast,"astmethod", [4], call624, var_params, var_mbody, bool625);
  var var_newmeth = call626;
  lineNumber = 200
  var array627 = new GraceList([
var_newmeth,
]);

  var var_obody = array627;
  lineNumber = 201
  var bool628 = new GraceBoolean(false)
  var call629 = callmethod(var_ast,"astobject", [2], var_obody, bool628);
  var var_cobj = call629;
  lineNumber = 202
  lineNumber = 1
  lineNumber = 202
  var call630 = callmethod(var_o,"name", [0]);
  var bool631 = new GraceBoolean(false)
  var call632 = callmethod(var_ast,"astdefdec", [3], call630, var_cobj, bool631);
  var var_con = call632;
  lineNumber = 203
  lineNumber = 1
  lineNumber = 203
  lineNumber = 204
  var call633 = callmethod(this,"compilenode", [1], var_con);
  lineNumber = 203
  var call634 = callmethod(var_o,"register:=", [1], call633);
  return call634
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileclass"] = func616;
  lineNumber = 248
var func635 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 207
  lineNumber = 206
  var var_origInBlock = var_inBlock;
  lineNumber = 208
  lineNumber = 207
  var bool636 = new GraceBoolean(false)
  var_inBlock = bool636;
  lineNumber = 209
  lineNumber = 208
  var var_myc = var_auto__95__count;
  lineNumber = 210
  lineNumber = 209
  var opresult638 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult638;
  lineNumber = 211
  lineNumber = 210
  var string639 = new GraceString("%obj");
  var opresult641 = callmethod(string639, "++", [1], var_myc);
  var var_selfr = opresult641;
  lineNumber = 212
  lineNumber = 211
  var var_numFields = new GraceNum(1);
  lineNumber = 213
  lineNumber = 212
  var var_numMethods = new GraceNum(0);
  lineNumber = 214
  lineNumber = 213
  var var_pos = new GraceNum(1);
  lineNumber = 220
  lineNumber = 214
  lineNumber = 1
  lineNumber = 214
  var call642 = callmethod(var_o,"value", [0]);
  lineNumber = 220
  var block643 = Grace_allocObject();
  block643.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block643.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block643.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block643.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block643.receiver = this;
  block643.className = 'block<genllvm29:220>';
  block643.real = function(
var_e
) {
  lineNumber = 217
  lineNumber = 218
  lineNumber = 1
  lineNumber = 215
  var call645 = callmethod(var_e,"kind", [0]);
  var string646 = new GraceString("vardec");
  var opresult648 = callmethod(call645, "==", [1], string646);
  if (Grace_isTrue(opresult648)) {
  lineNumber = 217
  lineNumber = 216
  var opresult650 = callmethod(var_numMethods, "+", [1], new GraceNum(1));
  var_numMethods = opresult650;
  var if644 = opresult650;
}
  lineNumber = 219
  lineNumber = 218
  var opresult652 = callmethod(var_numMethods, "+", [1], new GraceNum(1));
  var_numMethods = opresult652;
  lineNumber = 220
  lineNumber = 219
  var opresult654 = callmethod(var_numFields, "+", [1], new GraceNum(1));
  var_numFields = opresult654;
  return opresult654;
};
  var call655 = callmethod(Grace_prelude,"for()do", [1, 1], call642, block643);
  lineNumber = 223
  lineNumber = 224
  lineNumber = 221
  var opresult658 = callmethod(var_numFields, "==", [1], new GraceNum(3));
  if (Grace_isTrue(opresult658)) {
  lineNumber = 223
  lineNumber = 222
  var_numFields = new GraceNum(4);
  var if656 = new GraceNum(4);
}
  lineNumber = 228
  lineNumber = 230
  lineNumber = 1
  lineNumber = 224
  var call660 = callmethod(var_o,"superclass", [0]);
  var bool661 = new GraceBoolean(false)
  var opresult663 = callmethod(call660, "/=", [1], bool661);
  if (Grace_isTrue(opresult663)) {
  lineNumber = 225
  lineNumber = 1
  lineNumber = 225
  var call664 = callmethod(var_o,"superclass", [0]);
  lineNumber = 226
  var call665 = callmethod(this,"compilenode", [1], call664);
  var_selfr = call665;
  var if659 = call665;
  } else {
  lineNumber = 228
  lineNumber = 227
  var string666 = new GraceString("  ");
  var opresult668 = callmethod(string666, "++", [1], var_selfr);
  lineNumber = 228
  lineNumber = 227
  var string669 = new GraceString(" = call %object @alloc_obj2(i32 ");
  var opresult671 = callmethod(string669, "++", [1], var_numMethods);
  var string672 = new GraceString(",");
  var opresult674 = callmethod(opresult671, "++", [1], string672);
  var opresult676 = callmethod(opresult668, "++", [1], opresult674);
  lineNumber = 228
  var string677 = new GraceString("i32 ");
  var opresult679 = callmethod(string677, "++", [1], var_numFields);
  var string680 = new GraceString(")");
  var opresult682 = callmethod(opresult679, "++", [1], string680);
  var opresult684 = callmethod(opresult676, "++", [1], opresult682);
  lineNumber = 229
  var call685 = callmethod(this,"out", [1], opresult684);
  var if659 = call685;
}
  lineNumber = 230
  lineNumber = 231
  var call686 = callmethod(this,"compileobjouter", [1], var_selfr);
  var string687 = new GraceString("  call void @adddatum2(%object ");
  var opresult689 = callmethod(string687, "++", [1], var_selfr);
  var string690 = new GraceString(", %object %self, i32 0)");
  var opresult692 = callmethod(opresult689, "++", [1], string690);
  lineNumber = 232
  var call693 = callmethod(this,"out", [1], opresult692);
  lineNumber = 243
  lineNumber = 232
  lineNumber = 1
  lineNumber = 232
  var call694 = callmethod(var_o,"value", [0]);
  lineNumber = 243
  var block695 = Grace_allocObject();
  block695.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block695.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block695.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block695.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block695.receiver = this;
  block695.className = 'block<genllvm29:243>';
  block695.real = function(
var_e
) {
  lineNumber = 234
  lineNumber = 236
  lineNumber = 1
  lineNumber = 233
  var call697 = callmethod(var_e,"kind", [0]);
  var string698 = new GraceString("method");
  var opresult700 = callmethod(call697, "==", [1], string698);
  if (Grace_isTrue(opresult700)) {
  lineNumber = 234
  lineNumber = 235
  var call701 = callmethod(this,"compilemethod", [3], var_e, var_selfr, var_pos);
  var if696 = call701;
}
  lineNumber = 237
  lineNumber = 239
  lineNumber = 1
  lineNumber = 236
  var call703 = callmethod(var_e,"kind", [0]);
  var string704 = new GraceString("vardec");
  var opresult706 = callmethod(call703, "==", [1], string704);
  if (Grace_isTrue(opresult706)) {
  lineNumber = 237
  lineNumber = 238
  var call707 = callmethod(this,"compileobjvardec", [3], var_e, var_selfr, var_pos);
  var if702 = call707;
}
  lineNumber = 240
  lineNumber = 242
  lineNumber = 1
  lineNumber = 239
  var call709 = callmethod(var_e,"kind", [0]);
  var string710 = new GraceString("defdec");
  var opresult712 = callmethod(call709, "==", [1], string710);
  if (Grace_isTrue(opresult712)) {
  lineNumber = 240
  lineNumber = 241
  var call713 = callmethod(this,"compileobjdefdec", [3], var_e, var_selfr, var_pos);
  var if708 = call713;
}
  lineNumber = 243
  lineNumber = 242
  var opresult715 = callmethod(var_pos, "+", [1], new GraceNum(1));
  var_pos = opresult715;
  return opresult715;
};
  var call716 = callmethod(Grace_prelude,"for()do", [1, 1], call694, block695);
  lineNumber = 245
  lineNumber = 244
  var string717 = new GraceString("  call void @set_type(%object ");
  var opresult719 = callmethod(string717, "++", [1], var_selfr);
  var string720 = new GraceString(", ");
  var opresult722 = callmethod(opresult719, "++", [1], string720);
  lineNumber = 245
  var string723 = new GraceString("i16 ");
  lineNumber = 1
  lineNumber = 245
  var call724 = callmethod(var_o,"otype", [0]);
  var call725 = callmethod(var_subtype,"typeId", [1], call724);
  var opresult727 = callmethod(string723, "++", [1], call725);
  var string728 = new GraceString(")");
  var opresult730 = callmethod(opresult727, "++", [1], string728);
  var opresult732 = callmethod(opresult722, "++", [1], opresult730);
  lineNumber = 246
  var call733 = callmethod(this,"out", [1], opresult732);
  lineNumber = 247
  lineNumber = 1
  lineNumber = 246
  var call734 = callmethod(var_o,"register:=", [1], var_selfr);
  lineNumber = 248
  lineNumber = 247
  var_inBlock = var_origInBlock;
  return var_origInBlock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobject"] = func635;
  lineNumber = 268
var func735 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 251
  lineNumber = 250
  var var_origInBlock = var_inBlock;
  lineNumber = 252
  lineNumber = 251
  var bool736 = new GraceBoolean(true)
  var_inBlock = bool736;
  lineNumber = 253
  lineNumber = 252
  var var_myc = var_auto__95__count;
  lineNumber = 254
  lineNumber = 253
  var opresult738 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult738;
  lineNumber = 255
  lineNumber = 254
  var string739 = new GraceString("apply");
  var bool740 = new GraceBoolean(false)
  var call741 = callmethod(var_ast,"astidentifier", [2], string739, bool740);
  lineNumber = 255
  lineNumber = 1
  lineNumber = 255
  var call742 = callmethod(var_o,"params", [0]);
  lineNumber = 1
  lineNumber = 255
  var call743 = callmethod(var_o,"body", [0]);
  var bool744 = new GraceBoolean(false)
  lineNumber = 254
  var call745 = callmethod(var_ast,"astmethod", [4], call741, call742, call743, bool744);
  var var_applymeth = call745;
  lineNumber = 257
  lineNumber = 1
  lineNumber = 256
  var bool746 = new GraceBoolean(true)
  var call747 = callmethod(var_applymeth,"selfclosure:=", [1], bool746);
  lineNumber = 257
  var array748 = new GraceList([
var_applymeth,
]);

  var bool749 = new GraceBoolean(false)
  var call750 = callmethod(var_ast,"astobject", [2], array748, bool749);
  var var_objbody = call750;
  lineNumber = 258
  lineNumber = 259
  var call751 = callmethod(this,"compilenode", [1], var_objbody);
  var var_obj = call751;
  lineNumber = 260
  lineNumber = 259
  var string752 = new GraceString("Block<");
  var opresult754 = callmethod(string752, "++", [1], var_modname);
  var string755 = new GraceString(":");
  var opresult757 = callmethod(opresult754, "++", [1], string755);
  var opresult759 = callmethod(opresult757, "++", [1], var_myc);
  var string760 = new GraceString(">");
  var opresult762 = callmethod(opresult759, "++", [1], string760);
  var var_modn = opresult762;
  lineNumber = 262
  lineNumber = 260
  var string763 = new GraceString("@.str.block");
  var opresult765 = callmethod(string763, "++", [1], var_myc);
  var string766 = new GraceString(" = private unnamed_addr ");
  var opresult768 = callmethod(opresult765, "++", [1], string766);
  lineNumber = 262
  lineNumber = 261
  var string769 = new GraceString("constant [");
  lineNumber = 262
  lineNumber = 1
  lineNumber = 261
  var call770 = callmethod(var_modn,"size", [0]);
  var opresult772 = callmethod(call770, "+", [1], new GraceNum(1));
  var opresult774 = callmethod(string769, "++", [1], opresult772);
  var string775 = new GraceString(" x i8] c\"");
  var opresult777 = callmethod(opresult774, "++", [1], string775);
  var opresult779 = callmethod(opresult777, "++", [1], var_modn);
  var string780 = new GraceString("\\00\"");
  var opresult782 = callmethod(opresult779, "++", [1], string780);
  var opresult784 = callmethod(opresult768, "++", [1], opresult782);
  var var_con = opresult784;
  lineNumber = 262
  var call785 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 265
  lineNumber = 263
  var string786 = new GraceString("  call void @setclassname(%object ");
  var opresult788 = callmethod(string786, "++", [1], var_obj);
  var string789 = new GraceString(", ");
  var opresult791 = callmethod(opresult788, "++", [1], string789);
  lineNumber = 265
  lineNumber = 264
  var string792 = new GraceString("i8* getelementptr([");
  lineNumber = 265
  lineNumber = 1
  lineNumber = 264
  var call793 = callmethod(var_modn,"size", [0]);
  var opresult795 = callmethod(call793, "+", [1], new GraceNum(1));
  var opresult797 = callmethod(string792, "++", [1], opresult795);
  var string798 = new GraceString(" x i8]* @.str.block");
  var opresult800 = callmethod(opresult797, "++", [1], string798);
  var opresult802 = callmethod(opresult800, "++", [1], var_myc);
  var string803 = new GraceString(",");
  var opresult805 = callmethod(opresult802, "++", [1], string803);
  var opresult807 = callmethod(opresult791, "++", [1], opresult805);
  lineNumber = 265
  var string808 = new GraceString("i32 0,i32 0))");
  var opresult810 = callmethod(opresult807, "++", [1], string808);
  lineNumber = 266
  var call811 = callmethod(this,"out", [1], opresult810);
  lineNumber = 267
  lineNumber = 1
  lineNumber = 266
  var call812 = callmethod(var_o,"register:=", [1], var_obj);
  lineNumber = 268
  lineNumber = 267
  var_inBlock = var_origInBlock;
  return var_origInBlock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileblock"] = func735;
  lineNumber = 307
var func813 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 271
  lineNumber = 270
  var var_myc = var_auto__95__count;
  lineNumber = 272
  lineNumber = 271
  var opresult815 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult815;
  lineNumber = 272
  lineNumber = 1
  lineNumber = 272
  var call816 = callmethod(var_o,"value", [0]);
  lineNumber = 273
  var call817 = callmethod(this,"compilenode", [1], call816);
  var var_over = call817;
  lineNumber = 274
  lineNumber = 1
  lineNumber = 273
  var call818 = callmethod(var_o,"body", [0]);
  var var_blk = call818;
  lineNumber = 274
  lineNumber = 275
  var call819 = callmethod(this,"compilenode", [1], var_blk);
  var var_obj = call819;
  var string820 = new GraceString("  store %object ");
  var opresult822 = callmethod(string820, "++", [1], var_over);
  var string823 = new GraceString(", %object* %params_0");
  var opresult825 = callmethod(opresult822, "++", [1], string823);
  lineNumber = 276
  var call826 = callmethod(this,"out", [1], opresult825);
  lineNumber = 278
  lineNumber = 276
  var string827 = new GraceString("  %iter");
  var opresult829 = callmethod(string827, "++", [1], var_myc);
  var string830 = new GraceString(" = call %object @callmethod(%object ");
  var opresult832 = callmethod(opresult829, "++", [1], string830);
  var opresult834 = callmethod(opresult832, "++", [1], var_over);
  lineNumber = 277
  var string835 = new GraceString(", i8* getelementptr([5 x i8]* @.str._iter");
  var opresult837 = callmethod(opresult834, "++", [1], string835);
  lineNumber = 278
  var string838 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult840 = callmethod(opresult837, "++", [1], string838);
  lineNumber = 280
  var call841 = callmethod(this,"out", [1], opresult840);
  var string842 = new GraceString("  br label %BeginFor");
  var opresult844 = callmethod(string842, "++", [1], var_myc);
  lineNumber = 281
  var call845 = callmethod(this,"out", [1], opresult844);
  var string846 = new GraceString("BeginFor");
  var opresult848 = callmethod(string846, "++", [1], var_myc);
  lineNumber = 282
  var call849 = callmethod(this,"beginblock", [1], opresult848);
  lineNumber = 285
  lineNumber = 282
  var string850 = new GraceString("  %condobj");
  var opresult852 = callmethod(string850, "++", [1], var_myc);
  var string853 = new GraceString(" = call %object @callmethod(%object %iter");
  var opresult855 = callmethod(opresult852, "++", [1], string853);
  lineNumber = 283
  var opresult857 = callmethod(opresult855, "++", [1], var_myc);
  lineNumber = 284
  var string858 = new GraceString(", i8* getelementptr([9 x i8]* @.str._havemore");
  var opresult860 = callmethod(opresult857, "++", [1], string858);
  lineNumber = 285
  var string861 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult863 = callmethod(opresult860, "++", [1], string861);
  lineNumber = 286
  var call864 = callmethod(this,"out", [1], opresult863);
  lineNumber = 287
  lineNumber = 286
  var string865 = new GraceString("%cond");
  var opresult867 = callmethod(string865, "++", [1], var_myc);
  var var_creg = opresult867;
  lineNumber = 288
  lineNumber = 287
  var string868 = new GraceString("  ");
  var opresult870 = callmethod(string868, "++", [1], var_creg);
  var string871 = new GraceString("_valp = call i1 @istrue(%object %condobj");
  var opresult873 = callmethod(opresult870, "++", [1], string871);
  lineNumber = 288
  var opresult875 = callmethod(opresult873, "++", [1], var_myc);
  var string876 = new GraceString(")");
  var opresult878 = callmethod(opresult875, "++", [1], string876);
  lineNumber = 289
  var call879 = callmethod(this,"out", [1], opresult878);
  var string880 = new GraceString("  ");
  var opresult882 = callmethod(string880, "++", [1], var_creg);
  var string883 = new GraceString(" = icmp eq i1 0, ");
  var opresult885 = callmethod(opresult882, "++", [1], string883);
  var opresult887 = callmethod(opresult885, "++", [1], var_creg);
  var string888 = new GraceString("_valp");
  var opresult890 = callmethod(opresult887, "++", [1], string888);
  lineNumber = 290
  var call891 = callmethod(this,"out", [1], opresult890);
  lineNumber = 291
  lineNumber = 290
  var string892 = new GraceString("br i1 ");
  var opresult894 = callmethod(string892, "++", [1], var_creg);
  var string895 = new GraceString(", label %EndFor");
  var opresult897 = callmethod(opresult894, "++", [1], string895);
  var opresult899 = callmethod(opresult897, "++", [1], var_myc);
  lineNumber = 291
  var string900 = new GraceString(", label %ForBody");
  var opresult902 = callmethod(opresult899, "++", [1], string900);
  var opresult904 = callmethod(opresult902, "++", [1], var_myc);
  lineNumber = 292
  var call905 = callmethod(this,"out", [1], opresult904);
  var string906 = new GraceString("ForBody");
  var opresult908 = callmethod(string906, "++", [1], var_myc);
  lineNumber = 293
  var call909 = callmethod(this,"beginblock", [1], opresult908);
  lineNumber = 294
  lineNumber = 293
  var string910 = new GraceString("null");
  var var_tret = string910;
  lineNumber = 295
  lineNumber = 294
  var string911 = new GraceString("ERROR");
  var var_tblock = string911;
  lineNumber = 298
  lineNumber = 295
  var string912 = new GraceString(" %forval");
  var opresult914 = callmethod(string912, "++", [1], var_myc);
  var string915 = new GraceString(" = call %object @callmethod(%object %iter");
  var opresult917 = callmethod(opresult914, "++", [1], string915);
  lineNumber = 296
  var opresult919 = callmethod(opresult917, "++", [1], var_myc);
  lineNumber = 297
  var string920 = new GraceString(", i8* getelementptr([5 x i8]* @.str._next");
  var opresult922 = callmethod(opresult919, "++", [1], string920);
  lineNumber = 298
  var string923 = new GraceString(",i32 0,i32 0), i32 0, %object* %params)");
  var opresult925 = callmethod(opresult922, "++", [1], string923);
  lineNumber = 299
  var call926 = callmethod(this,"out", [1], opresult925);
  var string927 = new GraceString("  store %object %forval");
  var opresult929 = callmethod(string927, "++", [1], var_myc);
  var string930 = new GraceString(", %object* %params_0");
  var opresult932 = callmethod(opresult929, "++", [1], string930);
  lineNumber = 300
  var call933 = callmethod(this,"out", [1], opresult932);
  lineNumber = 302
  lineNumber = 300
  var string934 = new GraceString("  call %object @callmethod(%object ");
  var opresult936 = callmethod(string934, "++", [1], var_obj);
  lineNumber = 301
  var string937 = new GraceString(", i8* getelementptr([6 x i8]* @.str._apply");
  var opresult939 = callmethod(opresult936, "++", [1], string937);
  lineNumber = 302
  var string940 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult942 = callmethod(opresult939, "++", [1], string940);
  lineNumber = 303
  var call943 = callmethod(this,"out", [1], opresult942);
  lineNumber = 304
  lineNumber = 303
  var_tblock = var_bblock;
  lineNumber = 304
  var string944 = new GraceString("  br label %BeginFor");
  var opresult946 = callmethod(string944, "++", [1], var_myc);
  lineNumber = 305
  var call947 = callmethod(this,"out", [1], opresult946);
  var string948 = new GraceString("EndFor");
  var opresult950 = callmethod(string948, "++", [1], var_myc);
  lineNumber = 306
  var call951 = callmethod(this,"beginblock", [1], opresult950);
  lineNumber = 307
  lineNumber = 1
  lineNumber = 306
  var string952 = new GraceString("%none");
  var call953 = callmethod(var_o,"register:=", [1], string952);
  return call953
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilefor"] = func813;
  lineNumber = 517
var func954 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfobj = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 314
  lineNumber = 313
  var var_origParamsUsed = var_paramsUsed;
  lineNumber = 315
  lineNumber = 314
  var_paramsUsed = new GraceNum(1);
  lineNumber = 316
  lineNumber = 315
  var var_origInBlock = var_inBlock;
  lineNumber = 317
  lineNumber = 1
  lineNumber = 316
  var call955 = callmethod(var_o,"selfclosure", [0]);
  var_inBlock = call955;
  lineNumber = 318
  lineNumber = 317
  var var_oldout = var_output;
  lineNumber = 319
  lineNumber = 318
  var var_oldbblock = var_bblock;
  lineNumber = 320
  lineNumber = 319
  var var_oldusedvars = var_usedvars;
  lineNumber = 321
  lineNumber = 320
  var var_olddeclaredvars = var_declaredvars;
  lineNumber = 322
  var array956 = new GraceList([
]);

  var_output = array956;
  lineNumber = 323
  var array957 = new GraceList([
]);

  var_usedvars = array957;
  lineNumber = 324
  var array958 = new GraceList([
]);

  var_declaredvars = array958;
  lineNumber = 325
  lineNumber = 324
  var var_myc = var_auto__95__count;
  lineNumber = 326
  lineNumber = 325
  var opresult960 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult960;
  lineNumber = 327
  lineNumber = 1
  lineNumber = 327
  lineNumber = 1
  lineNumber = 326
  var call961 = callmethod(var_o,"value", [0]);
  var call962 = callmethod(call961,"value", [0]);
  var var_name = call962;
  lineNumber = 328
  lineNumber = 327
  var opresult964 = callmethod(var_name, "++", [1], var_myc);
  var var_nm = opresult964;
  lineNumber = 328
  var string965 = new GraceString("entry");
  lineNumber = 329
  var call966 = callmethod(this,"beginblock", [1], string965);
  lineNumber = 1
  lineNumber = 329
  var call967 = callmethod(var_output,"pop", [0]);
  lineNumber = 331
  lineNumber = 1
  lineNumber = 331
  lineNumber = 1
  lineNumber = 330
  var call968 = callmethod(var_o,"params", [0]);
  var call969 = callmethod(call968,"size", [0]);
  var var_i = call969;
  lineNumber = 337
  lineNumber = 339
  lineNumber = 1
  lineNumber = 331
  var call971 = callmethod(var_o,"varargs", [0]);
  if (Grace_isTrue(call971)) {
  lineNumber = 332
  lineNumber = 1
  lineNumber = 332
  lineNumber = 1
  lineNumber = 332
  lineNumber = 1
  lineNumber = 332
  var call972 = callmethod(var_o,"vararg", [0]);
  var call973 = callmethod(call972,"value", [0]);
  var call974 = callmethod(call973,"_escape", [0]);
  var var_van = call974;
  lineNumber = 334
  lineNumber = 333
  var string975 = new GraceString("  %\"var_init_");
  var opresult977 = callmethod(string975, "++", [1], var_van);
  var string978 = new GraceString("\" = call %object @process_varargs(");
  var opresult980 = callmethod(opresult977, "++", [1], string978);
  lineNumber = 334
  var string981 = new GraceString("%object* %args, i32 ");
  var opresult983 = callmethod(string981, "++", [1], var_i);
  var string984 = new GraceString(", i32 %nparams)");
  var opresult986 = callmethod(opresult983, "++", [1], string984);
  var opresult988 = callmethod(opresult980, "++", [1], opresult986);
  lineNumber = 335
  var call989 = callmethod(this,"out", [1], opresult988);
  var string990 = new GraceString("  %\"var_");
  var opresult992 = callmethod(string990, "++", [1], var_van);
  var string993 = new GraceString("\" = call %object* @alloc_var()");
  var opresult995 = callmethod(opresult992, "++", [1], string993);
  lineNumber = 336
  var call996 = callmethod(this,"out", [1], opresult995);
  var string997 = new GraceString("  store %object %\"var_init_");
  var opresult999 = callmethod(string997, "++", [1], var_van);
  var string1000 = new GraceString("\", %object* %\"var_");
  var opresult1002 = callmethod(opresult999, "++", [1], string1000);
  var opresult1004 = callmethod(opresult1002, "++", [1], var_van);
  var string1005 = new GraceString("\"");
  var opresult1007 = callmethod(opresult1004, "++", [1], string1005);
  lineNumber = 337
  var call1008 = callmethod(this,"out", [1], opresult1007);
  var call1009 = callmethod(var_declaredvars,"push", [1], var_van);
  var if970 = call1009;
}
  lineNumber = 339
  var string1010 = new GraceString("  %undefined = load %object* @undefined");
  lineNumber = 340
  var call1011 = callmethod(this,"out", [1], string1010);
  var string1012 = new GraceString("  %none = load %object* @none");
  lineNumber = 341
  var call1013 = callmethod(this,"out", [1], string1012);
  lineNumber = 342
  lineNumber = 341
  var string1014 = new GraceString("%none");
  var var_ret = string1014;
  lineNumber = 348
  lineNumber = 342
  lineNumber = 1
  lineNumber = 342
  var call1015 = callmethod(var_o,"body", [0]);
  lineNumber = 348
  var block1016 = Grace_allocObject();
  block1016.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1016.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1016.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1016.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1016.receiver = this;
  block1016.className = 'block<genllvm29:348>';
  block1016.real = function(
var_l
) {
  lineNumber = 350
  lineNumber = 1
  lineNumber = 343
  var call1018 = callmethod(var_l,"kind", [0]);
  var string1019 = new GraceString("vardec");
  var opresult1021 = callmethod(call1018, "==", [1], string1019);
  lineNumber = 350
  lineNumber = 1
  lineNumber = 343
  var call1022 = callmethod(var_l,"kind", [0]);
  var string1023 = new GraceString("defdec");
  var opresult1025 = callmethod(call1022, "==", [1], string1023);
  var opresult1027 = callmethod(opresult1021, "|", [1], opresult1025);
  lineNumber = 350
  lineNumber = 1
  lineNumber = 344
  var call1028 = callmethod(var_l,"kind", [0]);
  var string1029 = new GraceString("class");
  var opresult1031 = callmethod(call1028, "==", [1], string1029);
  var opresult1033 = callmethod(opresult1027, "|", [1], opresult1031);
  if (Grace_isTrue(opresult1033)) {
  lineNumber = 345
  lineNumber = 1
  lineNumber = 345
  lineNumber = 1
  lineNumber = 345
  lineNumber = 1
  lineNumber = 345
  var call1034 = callmethod(var_l,"name", [0]);
  var call1035 = callmethod(call1034,"value", [0]);
  var call1036 = callmethod(call1035,"_escape", [0]);
  var var_tnm = call1036;
  lineNumber = 346
  var call1037 = callmethod(var_declaredvars,"push", [1], var_tnm);
  lineNumber = 347
  var string1038 = new GraceString("  %\"var_");
  var opresult1040 = callmethod(string1038, "++", [1], var_tnm);
  var string1041 = new GraceString("\" = call %object* @alloc_var()");
  var opresult1043 = callmethod(opresult1040, "++", [1], string1041);
  lineNumber = 348
  var call1044 = callmethod(this,"out", [1], opresult1043);
  var string1045 = new GraceString("  store %object %undefined, %object* %\"var_");
  var opresult1047 = callmethod(string1045, "++", [1], var_tnm);
  var string1048 = new GraceString("\"");
  var opresult1050 = callmethod(opresult1047, "++", [1], string1048);
  lineNumber = 349
  var call1051 = callmethod(this,"out", [1], opresult1050);
  var if1017 = call1051;
}
  return if1017;
};
  var call1052 = callmethod(Grace_prelude,"for()do", [1, 1], call1015, block1016);
  lineNumber = 352
  lineNumber = 351
  lineNumber = 1
  lineNumber = 351
  var call1053 = callmethod(var_o,"body", [0]);
  lineNumber = 352
  var block1054 = Grace_allocObject();
  block1054.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1054.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1054.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1054.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1054.receiver = this;
  block1054.className = 'block<genllvm29:352>';
  block1054.real = function(
var_l
) {
  lineNumber = 353
  var call1055 = callmethod(this,"compilenode", [1], var_l);
  var_ret = call1055;
  return call1055;
};
  var call1056 = callmethod(Grace_prelude,"for()do", [1, 1], call1053, block1054);
  lineNumber = 354
  var string1057 = new GraceString("  ret %object ");
  var opresult1059 = callmethod(string1057, "++", [1], var_ret);
  lineNumber = 355
  var call1060 = callmethod(this,"out", [1], opresult1059);
  var string1061 = new GraceString("}");
  lineNumber = 356
  var call1062 = callmethod(this,"out", [1], string1061);
  lineNumber = 357
  lineNumber = 356
  var var_body = var_output;
  lineNumber = 358
  var array1063 = new GraceList([
]);

  var_output = array1063;
  lineNumber = 359
  var array1064 = new GraceList([
]);

  var var_closurevars = array1064;
  lineNumber = 378
  lineNumber = 359
  lineNumber = 378
  var block1065 = Grace_allocObject();
  block1065.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1065.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1065.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1065.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1065.receiver = this;
  block1065.className = 'block<genllvm29:378>';
  block1065.real = function(
var_u
) {
  lineNumber = 361
  lineNumber = 360
  var bool1066 = new GraceBoolean(false)
  var var_decl = bool1066;
  lineNumber = 364
  lineNumber = 361
  lineNumber = 364
  var block1067 = Grace_allocObject();
  block1067.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1067.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1067.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1067.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1067.receiver = this;
  block1067.className = 'block<genllvm29:364>';
  block1067.real = function(
var_d
) {
  lineNumber = 365
  lineNumber = 362
  var opresult1070 = callmethod(var_d, "==", [1], var_u);
  if (Grace_isTrue(opresult1070)) {
  lineNumber = 364
  lineNumber = 363
  var bool1071 = new GraceBoolean(true)
  var_decl = bool1071;
  var if1068 = bool1071;
}
  return if1068;
};
  var call1072 = callmethod(Grace_prelude,"for()do", [1, 1], var_declaredvars, block1067);
  lineNumber = 378
  lineNumber = 366
  if (Grace_isTrue(var_decl)) {
  lineNumber = 368
  lineNumber = 367
  var_decl = var_decl;
  var if1073 = var_decl;
  } else {
  lineNumber = 370
  lineNumber = 369
  var bool1074 = new GraceBoolean(false)
  var var_found = bool1074;
  lineNumber = 373
  lineNumber = 370
  lineNumber = 373
  var block1075 = Grace_allocObject();
  block1075.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1075.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1075.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1075.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1075.receiver = this;
  block1075.className = 'block<genllvm29:373>';
  block1075.real = function(
var_v
) {
  lineNumber = 374
  lineNumber = 371
  var opresult1078 = callmethod(var_v, "==", [1], var_u);
  if (Grace_isTrue(opresult1078)) {
  lineNumber = 373
  lineNumber = 372
  var bool1079 = new GraceBoolean(true)
  var_found = bool1079;
  var if1076 = bool1079;
}
  return if1076;
};
  var call1080 = callmethod(Grace_prelude,"for()do", [1, 1], var_closurevars, block1075);
  lineNumber = 378
  lineNumber = 375
  if (Grace_isTrue(var_found)) {
  lineNumber = 377
  lineNumber = 376
  var_found = var_found;
  var if1081 = var_found;
  } else {
  lineNumber = 378
  var call1082 = callmethod(var_closurevars,"push", [1], var_u);
  var if1081 = call1082;
}
  var if1073 = if1081;
}
  return if1073;
};
  var call1083 = callmethod(Grace_prelude,"for()do", [1, 1], var_usedvars, block1065);
  lineNumber = 383
  lineNumber = 385
  lineNumber = 1
  lineNumber = 382
  var call1085 = callmethod(var_o,"selfclosure", [0]);
  if (Grace_isTrue(call1085)) {
  lineNumber = 383
  var string1086 = new GraceString("self");
  var call1087 = callmethod(var_closurevars,"push", [1], string1086);
  var if1084 = call1087;
}
  lineNumber = 385
  lineNumber = 386
  lineNumber = 385
  var string1088 = new GraceString("@\"meth_");
  var opresult1090 = callmethod(string1088, "++", [1], var_modname);
  var string1091 = new GraceString("_");
  var opresult1093 = callmethod(opresult1090, "++", [1], string1091);
  lineNumber = 1
  lineNumber = 385
  var call1094 = callmethod(var_nm,"_escape", [0]);
  var opresult1096 = callmethod(opresult1093, "++", [1], call1094);
  var string1097 = new GraceString("\"");
  var opresult1099 = callmethod(opresult1096, "++", [1], string1097);
  var var_litname = opresult1099;
  lineNumber = 386
  var string1100 = new GraceString(";;;; METHOD DEFINITION: ");
  var opresult1102 = callmethod(string1100, "++", [1], var_name);
  lineNumber = 387
  var call1103 = callmethod(this,"outprint", [1], opresult1102);
  lineNumber = 406
  lineNumber = 408
  lineNumber = 1
  lineNumber = 387
  var call1105 = callmethod(var_closurevars,"size", [0]);
  var opresult1107 = callmethod(call1105, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1107)) {
  lineNumber = 397
  lineNumber = 399
  lineNumber = 1
  lineNumber = 388
  var call1109 = callmethod(var_o,"selfclosure", [0]);
  if (Grace_isTrue(call1109)) {
  lineNumber = 390
  lineNumber = 389
  var string1110 = new GraceString("define private %object ");
  var opresult1112 = callmethod(string1110, "++", [1], var_litname);
  var string1113 = new GraceString("(%object %realself, i32 %nparams, ");
  var opresult1115 = callmethod(opresult1112, "++", [1], string1113);
  lineNumber = 390
  var string1116 = new GraceString("%object* %args, i32 %flags) {");
  var opresult1118 = callmethod(opresult1115, "++", [1], string1116);
  lineNumber = 391
  var call1119 = callmethod(this,"out", [1], opresult1118);
  var string1120 = new GraceString("closureinit");
  lineNumber = 392
  var call1121 = callmethod(this,"beginblock", [1], string1120);
  var string1122 = new GraceString("  %uo = bitcast %object %realself to %UserObject*");
  lineNumber = 393
  var call1123 = callmethod(this,"out", [1], string1122);
  var if1108 = call1123;
  } else {
  lineNumber = 395
  lineNumber = 394
  var string1124 = new GraceString("define private %object ");
  var opresult1126 = callmethod(string1124, "++", [1], var_litname);
  var string1127 = new GraceString("(%object %self, i32 %nparams, ");
  var opresult1129 = callmethod(opresult1126, "++", [1], string1127);
  lineNumber = 395
  var string1130 = new GraceString("%object* %args, i32 %flags) {");
  var opresult1132 = callmethod(opresult1129, "++", [1], string1130);
  lineNumber = 396
  var call1133 = callmethod(this,"out", [1], opresult1132);
  var string1134 = new GraceString("closureinit");
  lineNumber = 397
  var call1135 = callmethod(this,"beginblock", [1], string1134);
  var string1136 = new GraceString("  %uo = bitcast %object %self to %UserObject*");
  lineNumber = 398
  var call1137 = callmethod(this,"out", [1], string1136);
  var if1108 = call1137;
}
  lineNumber = 399
  var string1138 = new GraceString("  %closurepp = getelementptr %UserObject* %uo, i32 0, i32 3");
  lineNumber = 400
  var call1139 = callmethod(this,"out", [1], string1138);
  var string1140 = new GraceString("  %closurepf = getelementptr [0 x %object]* %closurepp, i32 0, i32 ");
  var opresult1142 = callmethod(string1140, "++", [1], var_pos);
  var string1143 = new GraceString("");
  var opresult1145 = callmethod(opresult1142, "++", [1], string1143);
  lineNumber = 401
  var call1146 = callmethod(this,"out", [1], opresult1145);
  var string1147 = new GraceString("  %closurepc = bitcast %object* %closurepf to %object***");
  lineNumber = 402
  var call1148 = callmethod(this,"out", [1], string1147);
  var string1149 = new GraceString("  %closure = load %object*** %closurepc");
  lineNumber = 403
  var call1150 = callmethod(this,"out", [1], string1149);
  var string1151 = new GraceString("  br label %entry");
  lineNumber = 404
  var call1152 = callmethod(this,"out", [1], string1151);
  var if1104 = call1152;
  } else {
  lineNumber = 406
  lineNumber = 405
  var string1153 = new GraceString("define private %object ");
  var opresult1155 = callmethod(string1153, "++", [1], var_litname);
  var string1156 = new GraceString("(%object %self, i32 %nparams, ");
  var opresult1158 = callmethod(opresult1155, "++", [1], string1156);
  lineNumber = 406
  var string1159 = new GraceString("%object* %args, i32 %flags) {");
  var opresult1161 = callmethod(opresult1158, "++", [1], string1159);
  lineNumber = 407
  var call1162 = callmethod(this,"out", [1], opresult1161);
  var if1104 = call1162;
}
  lineNumber = 408
  var string1163 = new GraceString("entry");
  lineNumber = 413
  var call1164 = callmethod(this,"beginblock", [1], string1163);
  lineNumber = 414
  lineNumber = 413
  var_i = new GraceNum(0);
  lineNumber = 415
  var array1165 = new GraceList([
]);

  var var_toremove = array1165;
  lineNumber = 429
  lineNumber = 415
  lineNumber = 1
  lineNumber = 415
  var call1166 = callmethod(var_o,"params", [0]);
  lineNumber = 429
  var block1167 = Grace_allocObject();
  block1167.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1167.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1167.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1167.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1167.receiver = this;
  block1167.className = 'block<genllvm29:429>';
  block1167.real = function(
var_p
) {
  lineNumber = 416
  lineNumber = 1
  lineNumber = 416
  lineNumber = 1
  lineNumber = 416
  var call1168 = callmethod(var_p,"value", [0]);
  var call1169 = callmethod(call1168,"_escape", [0]);
  var var_pn = call1169;
  lineNumber = 425
  lineNumber = 417
  var call1171 = callmethod(var_closurevars,"contains", [1], var_pn);
  if (Grace_isTrue(call1171)) {
  lineNumber = 418
  var string1172 = new GraceString("  %\"var_");
  var opresult1174 = callmethod(string1172, "++", [1], var_pn);
  var string1175 = new GraceString("\" = call %object* @alloc_var()");
  var opresult1177 = callmethod(opresult1174, "++", [1], string1175);
  lineNumber = 419
  var call1178 = callmethod(this,"out", [1], opresult1177);
  var string1179 = new GraceString("  %argp_");
  var opresult1181 = callmethod(string1179, "++", [1], var_i);
  var string1182 = new GraceString(" = getelementptr %object* %args, i32 ");
  var opresult1184 = callmethod(opresult1181, "++", [1], string1182);
  var opresult1186 = callmethod(opresult1184, "++", [1], var_i);
  var string1187 = new GraceString("");
  var opresult1189 = callmethod(opresult1186, "++", [1], string1187);
  lineNumber = 420
  var call1190 = callmethod(this,"out", [1], opresult1189);
  var string1191 = new GraceString("  %argval_");
  var opresult1193 = callmethod(string1191, "++", [1], var_i);
  var string1194 = new GraceString(" = load %object* %argp_");
  var opresult1196 = callmethod(opresult1193, "++", [1], string1194);
  var opresult1198 = callmethod(opresult1196, "++", [1], var_i);
  var string1199 = new GraceString("");
  var opresult1201 = callmethod(opresult1198, "++", [1], string1199);
  lineNumber = 421
  var call1202 = callmethod(this,"out", [1], opresult1201);
  var string1203 = new GraceString("  store %object %\"argval_");
  var opresult1205 = callmethod(string1203, "++", [1], var_i);
  var string1206 = new GraceString("\", %object* %\"var_");
  var opresult1208 = callmethod(opresult1205, "++", [1], string1206);
  var opresult1210 = callmethod(opresult1208, "++", [1], var_pn);
  var string1211 = new GraceString("\"");
  var opresult1213 = callmethod(opresult1210, "++", [1], string1211);
  lineNumber = 422
  var call1214 = callmethod(this,"out", [1], opresult1213);
  var call1215 = callmethod(var_toremove,"push", [1], var_pn);
  var if1170 = call1215;
  } else {
  lineNumber = 425
  lineNumber = 424
  var string1216 = new GraceString("  %\"var_");
  var opresult1218 = callmethod(string1216, "++", [1], var_pn);
  var string1219 = new GraceString("\" = getelementptr %object* %args, ");
  var opresult1221 = callmethod(opresult1218, "++", [1], string1219);
  lineNumber = 425
  var string1222 = new GraceString("i32 ");
  var opresult1224 = callmethod(opresult1221, "++", [1], string1222);
  var opresult1226 = callmethod(opresult1224, "++", [1], var_i);
  lineNumber = 426
  var call1227 = callmethod(this,"out", [1], opresult1226);
  var if1170 = call1227;
}
  lineNumber = 427
  var call1228 = callmethod(var_declaredvars,"push", [1], var_pn);
  lineNumber = 429
  lineNumber = 428
  var opresult1230 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult1230;
  return opresult1230;
};
  var call1231 = callmethod(Grace_prelude,"for()do", [1, 1], call1166, block1167);
  lineNumber = 431
  lineNumber = 430
  var var_origclosurevars = var_closurevars;
  lineNumber = 432
  var array1232 = new GraceList([
]);

  var_closurevars = array1232;
  lineNumber = 436
  lineNumber = 432
  lineNumber = 436
  var block1233 = Grace_allocObject();
  block1233.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1233.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1233.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1233.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1233.receiver = this;
  block1233.className = 'block<genllvm29:436>';
  block1233.real = function(
var_pn
) {
  lineNumber = 433
  var call1235 = callmethod(var_toremove,"contains", [1], var_pn);
  if (Grace_isTrue(call1235)) {
  var if1234 = undefined;
  } else {
  lineNumber = 436
  var call1236 = callmethod(var_closurevars,"push", [1], var_pn);
  var if1234 = call1236;
}
  return if1234;
};
  var call1237 = callmethod(Grace_prelude,"for()do", [1, 1], var_origclosurevars, block1233);
  lineNumber = 439
  var string1238 = new GraceString("  %params = alloca %object, i32 ");
  var opresult1240 = callmethod(string1238, "++", [1], var_paramsUsed);
  lineNumber = 440
  var call1241 = callmethod(this,"out", [1], opresult1240);
  lineNumber = 442
  lineNumber = 440
  var diff1243 = callmethod(var_paramsUsed, "-", [1], new GraceNum(1));
  var opresult1245 = callmethod(new GraceNum(0), "..", [1], diff1243);
  lineNumber = 442
  var block1246 = Grace_allocObject();
  block1246.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1246.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1246.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1246.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1246.receiver = this;
  block1246.className = 'block<genllvm29:442>';
  block1246.real = function(
var_ii
) {
  lineNumber = 441
  var string1247 = new GraceString("  %params_");
  var opresult1249 = callmethod(string1247, "++", [1], var_ii);
  var string1250 = new GraceString(" = getelementptr %object* %params, i32 ");
  var opresult1252 = callmethod(opresult1249, "++", [1], string1250);
  lineNumber = 442
  var opresult1254 = callmethod(opresult1252, "++", [1], var_ii);
  lineNumber = 443
  var call1255 = callmethod(this,"out", [1], opresult1254);
  return call1255;
};
  var call1256 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1245, block1246);
  lineNumber = 445
  lineNumber = 444
  var var_j = new GraceNum(0);
  lineNumber = 456
  lineNumber = 445
  lineNumber = 456
  var block1257 = Grace_allocObject();
  block1257.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1257.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1257.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1257.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1257.receiver = this;
  block1257.className = 'block<genllvm29:456>';
  block1257.real = function(
var_cv
) {
  lineNumber = 453
  lineNumber = 455
  lineNumber = 446
  var string1259 = new GraceString("self");
  var opresult1261 = callmethod(var_cv, "==", [1], string1259);
  if (Grace_isTrue(opresult1261)) {
  lineNumber = 447
  var string1262 = new GraceString("  %varc_");
  var opresult1264 = callmethod(string1262, "++", [1], var_cv);
  var string1265 = new GraceString(" = getelementptr %object** %closure, i32 ");
  var opresult1267 = callmethod(opresult1264, "++", [1], string1265);
  var opresult1269 = callmethod(opresult1267, "++", [1], var_j);
  lineNumber = 448
  var call1270 = callmethod(this,"out", [1], opresult1269);
  var string1271 = new GraceString("  %self2 = load %object** %varc_");
  var opresult1273 = callmethod(string1271, "++", [1], var_cv);
  lineNumber = 449
  var call1274 = callmethod(this,"out", [1], opresult1273);
  var string1275 = new GraceString("  %self = load %object* %self2");
  lineNumber = 450
  var call1276 = callmethod(this,"out", [1], string1275);
  var if1258 = call1276;
  } else {
  lineNumber = 451
  var string1277 = new GraceString("  %\"varc_");
  var opresult1279 = callmethod(string1277, "++", [1], var_cv);
  var string1280 = new GraceString("\" = getelementptr %object** %closure, i32 ");
  var opresult1282 = callmethod(opresult1279, "++", [1], string1280);
  var opresult1284 = callmethod(opresult1282, "++", [1], var_j);
  lineNumber = 452
  var call1285 = callmethod(this,"out", [1], opresult1284);
  lineNumber = 453
  lineNumber = 452
  var string1286 = new GraceString("  %\"var_");
  var opresult1288 = callmethod(string1286, "++", [1], var_cv);
  var string1289 = new GraceString("\" = load %object** %\"varc_");
  var opresult1291 = callmethod(opresult1288, "++", [1], string1289);
  var opresult1293 = callmethod(opresult1291, "++", [1], var_cv);
  lineNumber = 453
  var string1294 = new GraceString("\"");
  var opresult1296 = callmethod(opresult1293, "++", [1], string1294);
  lineNumber = 454
  var call1297 = callmethod(this,"out", [1], opresult1296);
  var if1258 = call1297;
}
  lineNumber = 456
  lineNumber = 455
  var opresult1299 = callmethod(var_j, "+", [1], new GraceNum(1));
  var_j = opresult1299;
  return opresult1299;
};
  var call1300 = callmethod(Grace_prelude,"for()do", [1, 1], var_closurevars, block1257);
  lineNumber = 458
  lineNumber = 457
  lineNumber = 458
  var block1301 = Grace_allocObject();
  block1301.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1301.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1301.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1301.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1301.receiver = this;
  block1301.className = 'block<genllvm29:458>';
  block1301.real = function(
var_l
) {
  lineNumber = 459
  var call1302 = callmethod(this,"out", [1], var_l);
  return call1302;
};
  var call1303 = callmethod(Grace_prelude,"for()do", [1, 1], var_body, block1301);
  lineNumber = 460
  var string1304 = new GraceString(";;;; ENDS");
  lineNumber = 461
  var call1305 = callmethod(this,"out", [1], string1304);
  lineNumber = 462
  lineNumber = 461
  lineNumber = 462
  var block1306 = Grace_allocObject();
  block1306.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1306.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1306.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1306.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1306.receiver = this;
  block1306.className = 'block<genllvm29:462>';
  block1306.real = function(
var_l
) {
  lineNumber = 463
  var call1307 = callmethod(this,"outprint", [1], var_l);
  return call1307;
};
  var call1308 = callmethod(Grace_prelude,"for()do", [1, 1], var_output, block1306);
  lineNumber = 465
  lineNumber = 464
  var_output = var_oldout;
  lineNumber = 466
  lineNumber = 465
  var_bblock = var_oldbblock;
  lineNumber = 467
  lineNumber = 466
  var_usedvars = var_oldusedvars;
  lineNumber = 468
  lineNumber = 467
  var_declaredvars = var_olddeclaredvars;
  lineNumber = 471
  lineNumber = 468
  lineNumber = 471
  var block1309 = Grace_allocObject();
  block1309.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1309.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1309.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1309.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1309.receiver = this;
  block1309.className = 'block<genllvm29:471>';
  block1309.real = function(
var_cv
) {
  lineNumber = 474
  lineNumber = 469
  var string1311 = new GraceString("self");
  var opresult1313 = callmethod(var_cv, "/=", [1], string1311);
  if (Grace_isTrue(opresult1313)) {
  lineNumber = 471
  lineNumber = 470
  lineNumber = 1
  lineNumber = 470
  var call1315 = callmethod(var_usedvars,"contains", [1], var_cv);
  var call1316 = callmethod(call1315,"not", [0]);
  if (Grace_isTrue(call1316)) {
  lineNumber = 471
  var call1317 = callmethod(var_usedvars,"push", [1], var_cv);
  var if1314 = call1317;
}
  var if1310 = if1314;
}
  return if1310;
};
  var call1318 = callmethod(Grace_prelude,"for()do", [1, 1], var_closurevars, block1309);
  lineNumber = 475
  var call1319 = Grace_length(var_name);
  var opresult1321 = callmethod(call1319, "+", [1], new GraceNum(1));
  var var_len = opresult1321;
  lineNumber = 478
  lineNumber = 476
  var string1322 = new GraceString("@.str.methname");
  var opresult1324 = callmethod(string1322, "++", [1], var_myc);
  var string1325 = new GraceString(" = private unnamed_addr ");
  var opresult1327 = callmethod(opresult1324, "++", [1], string1325);
  lineNumber = 477
  var string1328 = new GraceString("constant [");
  var opresult1330 = callmethod(opresult1327, "++", [1], string1328);
  var opresult1332 = callmethod(opresult1330, "++", [1], var_len);
  var string1333 = new GraceString(" x i8] c\"");
  var opresult1335 = callmethod(opresult1332, "++", [1], string1333);
  var opresult1337 = callmethod(opresult1335, "++", [1], var_name);
  var string1338 = new GraceString("\\00\"");
  var opresult1340 = callmethod(opresult1337, "++", [1], string1338);
  var var_con = opresult1340;
  lineNumber = 478
  var call1341 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 513
  lineNumber = 515
  lineNumber = 1
  lineNumber = 479
  var call1343 = callmethod(var_closurevars,"size", [0]);
  var opresult1345 = callmethod(call1343, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1345)) {
  lineNumber = 484
  lineNumber = 480
  var string1346 = new GraceString("  call void @addmethod2(%object ");
  var opresult1348 = callmethod(string1346, "++", [1], var_selfobj);
  lineNumber = 481
  var string1349 = new GraceString(", i8* getelementptr([");
  var opresult1351 = callmethod(opresult1348, "++", [1], string1349);
  lineNumber = 482
  var opresult1353 = callmethod(opresult1351, "++", [1], var_len);
  var string1354 = new GraceString(" x i8]* @.str.methname");
  var opresult1356 = callmethod(opresult1353, "++", [1], string1354);
  var opresult1358 = callmethod(opresult1356, "++", [1], var_myc);
  var string1359 = new GraceString(", i32 0, i32 0), ");
  var opresult1361 = callmethod(opresult1358, "++", [1], string1359);
  lineNumber = 483
  var string1362 = new GraceString("%object(%object, i32, %object*, i32)* getelementptr(%object ");
  var opresult1364 = callmethod(opresult1361, "++", [1], string1362);
  lineNumber = 484
  var string1365 = new GraceString("(%object, i32, %object*, i32)* ");
  var opresult1367 = callmethod(opresult1364, "++", [1], string1365);
  var opresult1369 = callmethod(opresult1367, "++", [1], var_litname);
  var string1370 = new GraceString("))");
  var opresult1372 = callmethod(opresult1369, "++", [1], string1370);
  lineNumber = 485
  var call1373 = callmethod(this,"out", [1], opresult1372);
  var if1342 = call1373;
  } else {
  lineNumber = 486
  var string1374 = new GraceString("  call void @block_savedest(%object ");
  var opresult1376 = callmethod(string1374, "++", [1], var_selfobj);
  var string1377 = new GraceString(")");
  var opresult1379 = callmethod(opresult1376, "++", [1], string1377);
  lineNumber = 487
  var call1380 = callmethod(this,"out", [1], opresult1379);
  lineNumber = 488
  lineNumber = 487
  var string1381 = new GraceString("  %closure");
  var opresult1383 = callmethod(string1381, "++", [1], var_myc);
  var string1384 = new GraceString(" = call %object** @createclosure(i32 ");
  var opresult1386 = callmethod(opresult1383, "++", [1], string1384);
  lineNumber = 488
  lineNumber = 1
  lineNumber = 488
  var call1387 = callmethod(var_closurevars,"size", [0]);
  var opresult1389 = callmethod(opresult1386, "++", [1], call1387);
  var string1390 = new GraceString(")");
  var opresult1392 = callmethod(opresult1389, "++", [1], string1390);
  lineNumber = 489
  var call1393 = callmethod(this,"out", [1], opresult1392);
  lineNumber = 499
  lineNumber = 489
  lineNumber = 499
  var block1394 = Grace_allocObject();
  block1394.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1394.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1394.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1394.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1394.receiver = this;
  block1394.className = 'block<genllvm29:499>';
  block1394.real = function(
var_v
) {
  lineNumber = 501
  lineNumber = 490
  var string1396 = new GraceString("self");
  var opresult1398 = callmethod(var_v, "==", [1], string1396);
  if (Grace_isTrue(opresult1398)) {
  lineNumber = 492
  lineNumber = 491
  var string1399 = new GraceString("  %selfpp");
  var opresult1401 = callmethod(string1399, "++", [1], var_auto__95__count);
  var string1402 = new GraceString(" = ");
  var opresult1404 = callmethod(opresult1401, "++", [1], string1402);
  lineNumber = 492
  var string1405 = new GraceString("call %object* @alloc_var()");
  var opresult1407 = callmethod(opresult1404, "++", [1], string1405);
  lineNumber = 493
  var call1408 = callmethod(this,"out", [1], opresult1407);
  var string1409 = new GraceString("  store %object %self, %object* %selfpp");
  var opresult1411 = callmethod(string1409, "++", [1], var_auto__95__count);
  lineNumber = 494
  var call1412 = callmethod(this,"out", [1], opresult1411);
  lineNumber = 495
  lineNumber = 494
  var string1413 = new GraceString("  call void @addtoclosure(%object** %closure");
  var opresult1415 = callmethod(string1413, "++", [1], var_myc);
  var string1416 = new GraceString(", ");
  var opresult1418 = callmethod(opresult1415, "++", [1], string1416);
  lineNumber = 495
  var string1419 = new GraceString("%object* %selfpp");
  var opresult1421 = callmethod(opresult1418, "++", [1], string1419);
  var opresult1423 = callmethod(opresult1421, "++", [1], var_auto__95__count);
  var string1424 = new GraceString(")");
  var opresult1426 = callmethod(opresult1423, "++", [1], string1424);
  lineNumber = 496
  var call1427 = callmethod(this,"out", [1], opresult1426);
  lineNumber = 497
  lineNumber = 496
  var opresult1429 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1429;
  var if1395 = opresult1429;
  } else {
  lineNumber = 499
  lineNumber = 498
  var string1430 = new GraceString("  call void @addtoclosure(%object** %closure");
  var opresult1432 = callmethod(string1430, "++", [1], var_myc);
  var string1433 = new GraceString(", ");
  var opresult1435 = callmethod(opresult1432, "++", [1], string1433);
  lineNumber = 499
  var string1436 = new GraceString("%object* %\"var_");
  var opresult1438 = callmethod(opresult1435, "++", [1], string1436);
  var opresult1440 = callmethod(opresult1438, "++", [1], var_v);
  var string1441 = new GraceString("\")");
  var opresult1443 = callmethod(opresult1440, "++", [1], string1441);
  lineNumber = 500
  var call1444 = callmethod(this,"out", [1], opresult1443);
  var if1395 = call1444;
}
  return if1395;
};
  var call1445 = callmethod(Grace_prelude,"for()do", [1, 1], var_closurevars, block1394);
  lineNumber = 503
  lineNumber = 502
  var string1446 = new GraceString("uo");
  var opresult1448 = callmethod(string1446, "++", [1], var_myc);
  var string1449 = new GraceString("");
  var opresult1451 = callmethod(opresult1448, "++", [1], string1449);
  var var_uo = opresult1451;
  lineNumber = 503
  var string1452 = new GraceString("  %");
  var opresult1454 = callmethod(string1452, "++", [1], var_uo);
  var string1455 = new GraceString(" = bitcast %object ");
  var opresult1457 = callmethod(opresult1454, "++", [1], string1455);
  var opresult1459 = callmethod(opresult1457, "++", [1], var_selfobj);
  var string1460 = new GraceString(" to %UserObject*");
  var opresult1462 = callmethod(opresult1459, "++", [1], string1460);
  lineNumber = 504
  var call1463 = callmethod(this,"out", [1], opresult1462);
  var string1464 = new GraceString("  %closurepp");
  var opresult1466 = callmethod(string1464, "++", [1], var_myc);
  var string1467 = new GraceString(" = getelementptr %UserObject* %");
  var opresult1469 = callmethod(opresult1466, "++", [1], string1467);
  var opresult1471 = callmethod(opresult1469, "++", [1], var_uo);
  var string1472 = new GraceString(", i32 0, i32 3");
  var opresult1474 = callmethod(opresult1471, "++", [1], string1472);
  lineNumber = 505
  var call1475 = callmethod(this,"out", [1], opresult1474);
  var string1476 = new GraceString("  %closurepf");
  var opresult1478 = callmethod(string1476, "++", [1], var_myc);
  var string1479 = new GraceString(" = getelementptr [0 x %object]* %closurepp");
  var opresult1481 = callmethod(opresult1478, "++", [1], string1479);
  var opresult1483 = callmethod(opresult1481, "++", [1], var_myc);
  var string1484 = new GraceString(", i32 0, i32 ");
  var opresult1486 = callmethod(opresult1483, "++", [1], string1484);
  var opresult1488 = callmethod(opresult1486, "++", [1], var_pos);
  var string1489 = new GraceString("");
  var opresult1491 = callmethod(opresult1488, "++", [1], string1489);
  lineNumber = 506
  var call1492 = callmethod(this,"out", [1], opresult1491);
  var string1493 = new GraceString("  %closurepc");
  var opresult1495 = callmethod(string1493, "++", [1], var_myc);
  var string1496 = new GraceString(" = bitcast %object* %closurepf");
  var opresult1498 = callmethod(opresult1495, "++", [1], string1496);
  var opresult1500 = callmethod(opresult1498, "++", [1], var_myc);
  var string1501 = new GraceString(" to %object***");
  var opresult1503 = callmethod(opresult1500, "++", [1], string1501);
  lineNumber = 507
  var call1504 = callmethod(this,"out", [1], opresult1503);
  var string1505 = new GraceString("  %closurec");
  var opresult1507 = callmethod(string1505, "++", [1], var_myc);
  var string1508 = new GraceString(" = bitcast %object** %closure");
  var opresult1510 = callmethod(opresult1507, "++", [1], string1508);
  var opresult1512 = callmethod(opresult1510, "++", [1], var_myc);
  var string1513 = new GraceString(" to %object");
  var opresult1515 = callmethod(opresult1512, "++", [1], string1513);
  lineNumber = 508
  var call1516 = callmethod(this,"out", [1], opresult1515);
  var string1517 = new GraceString("  store %object %closurec");
  var opresult1519 = callmethod(string1517, "++", [1], var_myc);
  var string1520 = new GraceString(", %object* %closurepf");
  var opresult1522 = callmethod(opresult1519, "++", [1], string1520);
  var opresult1524 = callmethod(opresult1522, "++", [1], var_myc);
  var string1525 = new GraceString("");
  var opresult1527 = callmethod(opresult1524, "++", [1], string1525);
  lineNumber = 509
  var call1528 = callmethod(this,"out", [1], opresult1527);
  lineNumber = 513
  lineNumber = 509
  var string1529 = new GraceString("  call void @addmethod2(%object ");
  var opresult1531 = callmethod(string1529, "++", [1], var_selfobj);
  lineNumber = 510
  var string1532 = new GraceString(", i8* getelementptr([");
  var opresult1534 = callmethod(opresult1531, "++", [1], string1532);
  lineNumber = 511
  var opresult1536 = callmethod(opresult1534, "++", [1], var_len);
  var string1537 = new GraceString(" x i8]* @.str.methname");
  var opresult1539 = callmethod(opresult1536, "++", [1], string1537);
  var opresult1541 = callmethod(opresult1539, "++", [1], var_myc);
  var string1542 = new GraceString(", i32 0, i32 0), ");
  var opresult1544 = callmethod(opresult1541, "++", [1], string1542);
  lineNumber = 512
  var string1545 = new GraceString("%object(%object, i32, %object*, i32)* getelementptr(%object ");
  var opresult1547 = callmethod(opresult1544, "++", [1], string1545);
  lineNumber = 513
  var string1548 = new GraceString("(%object, i32, %object*, i32)* ");
  var opresult1550 = callmethod(opresult1547, "++", [1], string1548);
  var opresult1552 = callmethod(opresult1550, "++", [1], var_litname);
  var string1553 = new GraceString("))");
  var opresult1555 = callmethod(opresult1552, "++", [1], string1553);
  lineNumber = 514
  var call1556 = callmethod(this,"out", [1], opresult1555);
  var if1342 = call1556;
}
  lineNumber = 516
  lineNumber = 515
  var_inBlock = var_origInBlock;
  lineNumber = 517
  lineNumber = 516
  var_paramsUsed = var_origParamsUsed;
  return var_origParamsUsed
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilemethod"] = func954;
  lineNumber = 551
var func1557 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 520
  lineNumber = 519
  var var_myc = var_auto__95__count;
  lineNumber = 521
  lineNumber = 520
  var opresult1559 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1559;
  lineNumber = 521
  var string1560 = new GraceString("  br label %BeginWhile");
  var opresult1562 = callmethod(string1560, "++", [1], var_myc);
  lineNumber = 522
  var call1563 = callmethod(this,"out", [1], opresult1562);
  var string1564 = new GraceString("BeginWhile");
  var opresult1566 = callmethod(string1564, "++", [1], var_myc);
  lineNumber = 523
  var call1567 = callmethod(this,"beginblock", [1], opresult1566);
  lineNumber = 1
  lineNumber = 523
  var call1568 = callmethod(var_o,"value", [0]);
  lineNumber = 524
  var call1569 = callmethod(this,"compilenode", [1], call1568);
  var var_cond = call1569;
  lineNumber = 525
  lineNumber = 524
  var string1570 = new GraceString("%cond");
  var opresult1572 = callmethod(string1570, "++", [1], var_myc);
  var var_creg = opresult1572;
  lineNumber = 526
  lineNumber = 525
  var string1573 = new GraceString("  ");
  var opresult1575 = callmethod(string1573, "++", [1], var_creg);
  var string1576 = new GraceString("_valp = call i1 @istrue(%object ");
  var opresult1578 = callmethod(opresult1575, "++", [1], string1576);
  lineNumber = 526
  var opresult1580 = callmethod(opresult1578, "++", [1], var_cond);
  var string1581 = new GraceString(")");
  var opresult1583 = callmethod(opresult1580, "++", [1], string1581);
  lineNumber = 527
  var call1584 = callmethod(this,"out", [1], opresult1583);
  var string1585 = new GraceString("  ");
  var opresult1587 = callmethod(string1585, "++", [1], var_creg);
  var string1588 = new GraceString(" = icmp eq i1 0, ");
  var opresult1590 = callmethod(opresult1587, "++", [1], string1588);
  var opresult1592 = callmethod(opresult1590, "++", [1], var_creg);
  var string1593 = new GraceString("_valp");
  var opresult1595 = callmethod(opresult1592, "++", [1], string1593);
  lineNumber = 528
  var call1596 = callmethod(this,"out", [1], opresult1595);
  lineNumber = 529
  lineNumber = 528
  var string1597 = new GraceString("br i1 ");
  var opresult1599 = callmethod(string1597, "++", [1], var_creg);
  var string1600 = new GraceString(", label %EndWhile");
  var opresult1602 = callmethod(opresult1599, "++", [1], string1600);
  var opresult1604 = callmethod(opresult1602, "++", [1], var_myc);
  lineNumber = 529
  var string1605 = new GraceString(", label %WhileBody");
  var opresult1607 = callmethod(opresult1604, "++", [1], string1605);
  var opresult1609 = callmethod(opresult1607, "++", [1], var_myc);
  lineNumber = 530
  var call1610 = callmethod(this,"out", [1], opresult1609);
  var string1611 = new GraceString("WhileBody");
  var opresult1613 = callmethod(string1611, "++", [1], var_myc);
  lineNumber = 531
  var call1614 = callmethod(this,"beginblock", [1], opresult1613);
  lineNumber = 532
  lineNumber = 531
  var string1615 = new GraceString("null");
  var var_tret = string1615;
  lineNumber = 533
  lineNumber = 532
  var string1616 = new GraceString("ERROR");
  var var_tblock = string1616;
  lineNumber = 539
  lineNumber = 533
  lineNumber = 1
  lineNumber = 533
  var call1617 = callmethod(var_o,"body", [0]);
  lineNumber = 539
  var block1618 = Grace_allocObject();
  block1618.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1618.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1618.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1618.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1618.receiver = this;
  block1618.className = 'block<genllvm29:539>';
  block1618.real = function(
var_l
) {
  lineNumber = 541
  lineNumber = 1
  lineNumber = 534
  var call1620 = callmethod(var_l,"kind", [0]);
  var string1621 = new GraceString("vardec");
  var opresult1623 = callmethod(call1620, "==", [1], string1621);
  lineNumber = 541
  lineNumber = 1
  lineNumber = 534
  var call1624 = callmethod(var_l,"kind", [0]);
  var string1625 = new GraceString("defdec");
  var opresult1627 = callmethod(call1624, "==", [1], string1625);
  var opresult1629 = callmethod(opresult1623, "|", [1], opresult1627);
  lineNumber = 541
  lineNumber = 1
  lineNumber = 535
  var call1630 = callmethod(var_l,"kind", [0]);
  var string1631 = new GraceString("class");
  var opresult1633 = callmethod(call1630, "==", [1], string1631);
  var opresult1635 = callmethod(opresult1629, "|", [1], opresult1633);
  if (Grace_isTrue(opresult1635)) {
  lineNumber = 536
  lineNumber = 1
  lineNumber = 536
  lineNumber = 1
  lineNumber = 536
  lineNumber = 1
  lineNumber = 536
  var call1636 = callmethod(var_l,"name", [0]);
  var call1637 = callmethod(call1636,"value", [0]);
  var call1638 = callmethod(call1637,"_escape", [0]);
  var var_tnm = call1638;
  lineNumber = 537
  var call1639 = callmethod(var_declaredvars,"push", [1], var_tnm);
  lineNumber = 538
  var string1640 = new GraceString("  %\"var_");
  var opresult1642 = callmethod(string1640, "++", [1], var_tnm);
  var string1643 = new GraceString("\" = call %object* @alloc_var()");
  var opresult1645 = callmethod(opresult1642, "++", [1], string1643);
  lineNumber = 539
  var call1646 = callmethod(this,"out", [1], opresult1645);
  var string1647 = new GraceString("  store %object %undefined, %object* %\"var_");
  var opresult1649 = callmethod(string1647, "++", [1], var_tnm);
  var string1650 = new GraceString("\"");
  var opresult1652 = callmethod(opresult1649, "++", [1], string1650);
  lineNumber = 540
  var call1653 = callmethod(this,"out", [1], opresult1652);
  var if1619 = call1653;
}
  return if1619;
};
  var call1654 = callmethod(Grace_prelude,"for()do", [1, 1], call1617, block1618);
  lineNumber = 543
  lineNumber = 542
  lineNumber = 1
  lineNumber = 542
  var call1655 = callmethod(var_o,"body", [0]);
  lineNumber = 543
  var block1656 = Grace_allocObject();
  block1656.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1656.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1656.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1656.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1656.receiver = this;
  block1656.className = 'block<genllvm29:543>';
  block1656.real = function(
var_l
) {
  lineNumber = 544
  var call1657 = callmethod(this,"compilenode", [1], var_l);
  var_tret = call1657;
  return call1657;
};
  var call1658 = callmethod(Grace_prelude,"for()do", [1, 1], call1655, block1656);
  lineNumber = 546
  lineNumber = 545
  var_tblock = var_bblock;
  lineNumber = 546
  var string1659 = new GraceString("  br label %BeginWhile");
  var opresult1661 = callmethod(string1659, "++", [1], var_myc);
  lineNumber = 547
  var call1662 = callmethod(this,"out", [1], opresult1661);
  var string1663 = new GraceString("EndWhile");
  var opresult1665 = callmethod(string1663, "++", [1], var_myc);
  lineNumber = 550
  var call1666 = callmethod(this,"beginblock", [1], opresult1665);
  lineNumber = 551
  lineNumber = 1
  lineNumber = 550
  var call1667 = callmethod(var_o,"register:=", [1], var_cond);
  return call1667
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilewhile"] = func1557;
  lineNumber = 616
var func1668 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 554
  lineNumber = 553
  var var_myc = var_auto__95__count;
  lineNumber = 555
  lineNumber = 554
  var opresult1670 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1670;
  lineNumber = 555
  var string1671 = new GraceString("  br label %BeginIf");
  var opresult1673 = callmethod(string1671, "++", [1], var_myc);
  lineNumber = 556
  var call1674 = callmethod(this,"out", [1], opresult1673);
  var string1675 = new GraceString("BeginIf");
  var opresult1677 = callmethod(string1675, "++", [1], var_myc);
  lineNumber = 557
  var call1678 = callmethod(this,"beginblock", [1], opresult1677);
  lineNumber = 1
  lineNumber = 557
  var call1679 = callmethod(var_o,"value", [0]);
  lineNumber = 558
  var call1680 = callmethod(this,"compilenode", [1], call1679);
  var var_cond = call1680;
  lineNumber = 559
  lineNumber = 558
  var string1681 = new GraceString("%cond");
  var opresult1683 = callmethod(string1681, "++", [1], var_myc);
  var var_creg = opresult1683;
  lineNumber = 560
  lineNumber = 559
  var string1684 = new GraceString("  ");
  var opresult1686 = callmethod(string1684, "++", [1], var_creg);
  var string1687 = new GraceString("_valp = call i1 @istrue(%object ");
  var opresult1689 = callmethod(opresult1686, "++", [1], string1687);
  lineNumber = 560
  var opresult1691 = callmethod(opresult1689, "++", [1], var_cond);
  var string1692 = new GraceString(")");
  var opresult1694 = callmethod(opresult1691, "++", [1], string1692);
  lineNumber = 561
  var call1695 = callmethod(this,"out", [1], opresult1694);
  var string1696 = new GraceString("  ");
  var opresult1698 = callmethod(string1696, "++", [1], var_creg);
  var string1699 = new GraceString(" = icmp eq i1 0, ");
  var opresult1701 = callmethod(opresult1698, "++", [1], string1699);
  var opresult1703 = callmethod(opresult1701, "++", [1], var_creg);
  var string1704 = new GraceString("_valp");
  var opresult1706 = callmethod(opresult1703, "++", [1], string1704);
  lineNumber = 562
  var call1707 = callmethod(this,"out", [1], opresult1706);
  lineNumber = 563
  lineNumber = 562
  var var_startblock = var_bblock;
  lineNumber = 569
  lineNumber = 571
  lineNumber = 1
  lineNumber = 571
  lineNumber = 1
  lineNumber = 563
  var call1709 = callmethod(var_o,"elseblock", [0]);
  var call1710 = callmethod(call1709,"size", [0]);
  var opresult1712 = callmethod(call1710, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1712)) {
  lineNumber = 565
  lineNumber = 564
  var string1713 = new GraceString("br i1 ");
  var opresult1715 = callmethod(string1713, "++", [1], var_creg);
  var string1716 = new GraceString(", label %FalseBranch");
  var opresult1718 = callmethod(opresult1715, "++", [1], string1716);
  var opresult1720 = callmethod(opresult1718, "++", [1], var_myc);
  lineNumber = 565
  var string1721 = new GraceString(", label %TrueBranch");
  var opresult1723 = callmethod(opresult1720, "++", [1], string1721);
  var opresult1725 = callmethod(opresult1723, "++", [1], var_myc);
  lineNumber = 566
  var call1726 = callmethod(this,"out", [1], opresult1725);
  var if1708 = call1726;
  } else {
  lineNumber = 567
  var string1727 = new GraceString("  %undefined");
  var opresult1729 = callmethod(string1727, "++", [1], var_myc);
  var string1730 = new GraceString(" = load %object* @undefined");
  var opresult1732 = callmethod(opresult1729, "++", [1], string1730);
  lineNumber = 568
  var call1733 = callmethod(this,"out", [1], opresult1732);
  lineNumber = 569
  lineNumber = 568
  var string1734 = new GraceString("br i1 ");
  var opresult1736 = callmethod(string1734, "++", [1], var_creg);
  var string1737 = new GraceString(", label %EndIf");
  var opresult1739 = callmethod(opresult1736, "++", [1], string1737);
  var opresult1741 = callmethod(opresult1739, "++", [1], var_myc);
  lineNumber = 569
  var string1742 = new GraceString(", label %TrueBranch");
  var opresult1744 = callmethod(opresult1741, "++", [1], string1742);
  var opresult1746 = callmethod(opresult1744, "++", [1], var_myc);
  lineNumber = 570
  var call1747 = callmethod(this,"out", [1], opresult1746);
  var if1708 = call1747;
}
  lineNumber = 571
  var string1748 = new GraceString("TrueBranch");
  var opresult1750 = callmethod(string1748, "++", [1], var_myc);
  lineNumber = 572
  var call1751 = callmethod(this,"beginblock", [1], opresult1750);
  lineNumber = 573
  lineNumber = 572
  var string1752 = new GraceString("%none");
  var var_tret = string1752;
  lineNumber = 574
  lineNumber = 573
  var string1753 = new GraceString("%none");
  var var_fret = string1753;
  lineNumber = 575
  lineNumber = 574
  var string1754 = new GraceString("ERROR");
  var var_tblock = string1754;
  lineNumber = 576
  lineNumber = 575
  var string1755 = new GraceString("ERROR");
  var var_fblock = string1755;
  lineNumber = 582
  lineNumber = 576
  lineNumber = 1
  lineNumber = 576
  var call1756 = callmethod(var_o,"thenblock", [0]);
  lineNumber = 582
  var block1757 = Grace_allocObject();
  block1757.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1757.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1757.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1757.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1757.receiver = this;
  block1757.className = 'block<genllvm29:582>';
  block1757.real = function(
var_l
) {
  lineNumber = 584
  lineNumber = 1
  lineNumber = 577
  var call1759 = callmethod(var_l,"kind", [0]);
  var string1760 = new GraceString("vardec");
  var opresult1762 = callmethod(call1759, "==", [1], string1760);
  lineNumber = 584
  lineNumber = 1
  lineNumber = 577
  var call1763 = callmethod(var_l,"kind", [0]);
  var string1764 = new GraceString("defdec");
  var opresult1766 = callmethod(call1763, "==", [1], string1764);
  var opresult1768 = callmethod(opresult1762, "|", [1], opresult1766);
  lineNumber = 584
  lineNumber = 1
  lineNumber = 578
  var call1769 = callmethod(var_l,"kind", [0]);
  var string1770 = new GraceString("class");
  var opresult1772 = callmethod(call1769, "==", [1], string1770);
  var opresult1774 = callmethod(opresult1768, "|", [1], opresult1772);
  if (Grace_isTrue(opresult1774)) {
  lineNumber = 579
  lineNumber = 1
  lineNumber = 579
  lineNumber = 1
  lineNumber = 579
  lineNumber = 1
  lineNumber = 579
  var call1775 = callmethod(var_l,"name", [0]);
  var call1776 = callmethod(call1775,"value", [0]);
  var call1777 = callmethod(call1776,"_escape", [0]);
  var var_tnm = call1777;
  lineNumber = 580
  var call1778 = callmethod(var_declaredvars,"push", [1], var_tnm);
  lineNumber = 581
  var string1779 = new GraceString("  %\"var_");
  var opresult1781 = callmethod(string1779, "++", [1], var_tnm);
  var string1782 = new GraceString("\" = call %object* @alloc_var()");
  var opresult1784 = callmethod(opresult1781, "++", [1], string1782);
  lineNumber = 582
  var call1785 = callmethod(this,"out", [1], opresult1784);
  var string1786 = new GraceString("  store %object %undefined, %object* %\"var_");
  var opresult1788 = callmethod(string1786, "++", [1], var_tnm);
  var string1789 = new GraceString("\"");
  var opresult1791 = callmethod(opresult1788, "++", [1], string1789);
  lineNumber = 583
  var call1792 = callmethod(this,"out", [1], opresult1791);
  var if1758 = call1792;
}
  return if1758;
};
  var call1793 = callmethod(Grace_prelude,"for()do", [1, 1], call1756, block1757);
  lineNumber = 586
  lineNumber = 585
  lineNumber = 1
  lineNumber = 585
  var call1794 = callmethod(var_o,"thenblock", [0]);
  lineNumber = 586
  var block1795 = Grace_allocObject();
  block1795.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1795.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1795.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1795.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1795.receiver = this;
  block1795.className = 'block<genllvm29:586>';
  block1795.real = function(
var_l
) {
  lineNumber = 587
  var call1796 = callmethod(this,"compilenode", [1], var_l);
  var_tret = call1796;
  return call1796;
};
  var call1797 = callmethod(Grace_prelude,"for()do", [1, 1], call1794, block1795);
  lineNumber = 589
  lineNumber = 588
  var_tblock = var_bblock;
  lineNumber = 589
  var string1798 = new GraceString("  br label %EndIf");
  var opresult1800 = callmethod(string1798, "++", [1], var_myc);
  lineNumber = 590
  var call1801 = callmethod(this,"out", [1], opresult1800);
  lineNumber = 606
  lineNumber = 607
  lineNumber = 1
  lineNumber = 607
  lineNumber = 1
  lineNumber = 590
  var call1803 = callmethod(var_o,"elseblock", [0]);
  var call1804 = callmethod(call1803,"size", [0]);
  var opresult1806 = callmethod(call1804, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1806)) {
  lineNumber = 591
  var string1807 = new GraceString("FalseBranch");
  var opresult1809 = callmethod(string1807, "++", [1], var_myc);
  lineNumber = 592
  var call1810 = callmethod(this,"beginblock", [1], opresult1809);
  lineNumber = 598
  lineNumber = 592
  lineNumber = 1
  lineNumber = 592
  var call1811 = callmethod(var_o,"elseblock", [0]);
  lineNumber = 598
  var block1812 = Grace_allocObject();
  block1812.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1812.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1812.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1812.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1812.receiver = this;
  block1812.className = 'block<genllvm29:598>';
  block1812.real = function(
var_l
) {
  lineNumber = 600
  lineNumber = 1
  lineNumber = 593
  var call1814 = callmethod(var_l,"kind", [0]);
  var string1815 = new GraceString("vardec");
  var opresult1817 = callmethod(call1814, "==", [1], string1815);
  lineNumber = 600
  lineNumber = 1
  lineNumber = 593
  var call1818 = callmethod(var_l,"kind", [0]);
  var string1819 = new GraceString("defdec");
  var opresult1821 = callmethod(call1818, "==", [1], string1819);
  var opresult1823 = callmethod(opresult1817, "|", [1], opresult1821);
  lineNumber = 600
  lineNumber = 1
  lineNumber = 594
  var call1824 = callmethod(var_l,"kind", [0]);
  var string1825 = new GraceString("class");
  var opresult1827 = callmethod(call1824, "==", [1], string1825);
  var opresult1829 = callmethod(opresult1823, "|", [1], opresult1827);
  if (Grace_isTrue(opresult1829)) {
  lineNumber = 595
  lineNumber = 1
  lineNumber = 595
  lineNumber = 1
  lineNumber = 595
  lineNumber = 1
  lineNumber = 595
  var call1830 = callmethod(var_l,"name", [0]);
  var call1831 = callmethod(call1830,"value", [0]);
  var call1832 = callmethod(call1831,"_escape", [0]);
  var var_tnm = call1832;
  lineNumber = 596
  var call1833 = callmethod(var_declaredvars,"push", [1], var_tnm);
  lineNumber = 597
  var string1834 = new GraceString("  %\"var_");
  var opresult1836 = callmethod(string1834, "++", [1], var_tnm);
  var string1837 = new GraceString("\" = call %object* @alloc_var()");
  var opresult1839 = callmethod(opresult1836, "++", [1], string1837);
  lineNumber = 598
  var call1840 = callmethod(this,"out", [1], opresult1839);
  var string1841 = new GraceString("  store %object %undefined, %object* %\"var_");
  var opresult1843 = callmethod(string1841, "++", [1], var_tnm);
  var string1844 = new GraceString("\"");
  var opresult1846 = callmethod(opresult1843, "++", [1], string1844);
  lineNumber = 599
  var call1847 = callmethod(this,"out", [1], opresult1846);
  var if1813 = call1847;
}
  return if1813;
};
  var call1848 = callmethod(Grace_prelude,"for()do", [1, 1], call1811, block1812);
  lineNumber = 602
  lineNumber = 601
  lineNumber = 1
  lineNumber = 601
  var call1849 = callmethod(var_o,"elseblock", [0]);
  lineNumber = 602
  var block1850 = Grace_allocObject();
  block1850.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1850.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1850.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1850.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1850.receiver = this;
  block1850.className = 'block<genllvm29:602>';
  block1850.real = function(
var_l
) {
  lineNumber = 603
  var call1851 = callmethod(this,"compilenode", [1], var_l);
  var_fret = call1851;
  return call1851;
};
  var call1852 = callmethod(Grace_prelude,"for()do", [1, 1], call1849, block1850);
  lineNumber = 604
  var string1853 = new GraceString("  br label %EndIf");
  var opresult1855 = callmethod(string1853, "++", [1], var_myc);
  lineNumber = 605
  var call1856 = callmethod(this,"out", [1], opresult1855);
  lineNumber = 606
  lineNumber = 605
  var_fblock = var_bblock;
  var if1802 = var_bblock;
}
  lineNumber = 607
  var string1857 = new GraceString("EndIf");
  var opresult1859 = callmethod(string1857, "++", [1], var_myc);
  lineNumber = 608
  var call1860 = callmethod(this,"beginblock", [1], opresult1859);
  lineNumber = 613
  lineNumber = 615
  lineNumber = 1
  lineNumber = 615
  lineNumber = 1
  lineNumber = 608
  var call1862 = callmethod(var_o,"elseblock", [0]);
  var call1863 = callmethod(call1862,"size", [0]);
  var opresult1865 = callmethod(call1863, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1865)) {
  lineNumber = 610
  lineNumber = 609
  var string1866 = new GraceString("  %if");
  var opresult1868 = callmethod(string1866, "++", [1], var_myc);
  var string1869 = new GraceString(" = phi %object [ ");
  var opresult1871 = callmethod(opresult1868, "++", [1], string1869);
  var opresult1873 = callmethod(opresult1871, "++", [1], var_tret);
  var string1874 = new GraceString(", ");
  var opresult1876 = callmethod(opresult1873, "++", [1], string1874);
  lineNumber = 610
  var opresult1878 = callmethod(opresult1876, "++", [1], var_tblock);
  var string1879 = new GraceString("], [");
  var opresult1881 = callmethod(opresult1878, "++", [1], string1879);
  var opresult1883 = callmethod(opresult1881, "++", [1], var_fret);
  var string1884 = new GraceString(", ");
  var opresult1886 = callmethod(opresult1883, "++", [1], string1884);
  var opresult1888 = callmethod(opresult1886, "++", [1], var_fblock);
  var string1889 = new GraceString("]");
  var opresult1891 = callmethod(opresult1888, "++", [1], string1889);
  lineNumber = 611
  var call1892 = callmethod(this,"out", [1], opresult1891);
  var if1861 = call1892;
  } else {
  lineNumber = 613
  lineNumber = 612
  var string1893 = new GraceString("  %if");
  var opresult1895 = callmethod(string1893, "++", [1], var_myc);
  var string1896 = new GraceString(" = phi %object [ ");
  var opresult1898 = callmethod(opresult1895, "++", [1], string1896);
  var opresult1900 = callmethod(opresult1898, "++", [1], var_tret);
  var string1901 = new GraceString(", ");
  var opresult1903 = callmethod(opresult1900, "++", [1], string1901);
  lineNumber = 613
  var opresult1905 = callmethod(opresult1903, "++", [1], var_tblock);
  var string1906 = new GraceString("], [%undefined");
  var opresult1908 = callmethod(opresult1905, "++", [1], string1906);
  var opresult1910 = callmethod(opresult1908, "++", [1], var_myc);
  var string1911 = new GraceString(", ");
  var opresult1913 = callmethod(opresult1910, "++", [1], string1911);
  var opresult1915 = callmethod(opresult1913, "++", [1], var_startblock);
  var string1916 = new GraceString("]");
  var opresult1918 = callmethod(opresult1915, "++", [1], string1916);
  lineNumber = 614
  var call1919 = callmethod(this,"out", [1], opresult1918);
  var if1861 = call1919;
}
  lineNumber = 616
  lineNumber = 1
  lineNumber = 616
  lineNumber = 615
  var string1920 = new GraceString("%if");
  var opresult1922 = callmethod(string1920, "++", [1], var_myc);
  var call1923 = callmethod(var_o,"register:=", [1], opresult1922);
  return call1923
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileif"] = func1668;
  lineNumber = 640
var func1924 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 619
  lineNumber = 1
  lineNumber = 618
  var call1925 = callmethod(var_o,"value", [0]);
  var var_name = call1925;
  lineNumber = 640
  lineNumber = 641
  lineNumber = 619
  var string1927 = new GraceString("self");
  var opresult1929 = callmethod(var_name, "==", [1], string1927);
  if (Grace_isTrue(opresult1929)) {
  lineNumber = 621
  lineNumber = 1
  lineNumber = 620
  var string1930 = new GraceString("%self");
  var call1931 = callmethod(var_o,"register:=", [1], string1930);
  var if1926 = call1931;
  } else {
  lineNumber = 640
  lineNumber = 628
  lineNumber = 621
  var string1933 = new GraceString("__compilerRevision");
  var opresult1935 = callmethod(var_name, "==", [1], string1933);
  if (Grace_isTrue(opresult1935)) {
  lineNumber = 623
  lineNumber = 622
  var string1936 = new GraceString("%str___compilerRevision");
  var opresult1938 = callmethod(string1936, "++", [1], var_auto__95__count);
  lineNumber = 623
  var string1939 = new GraceString(" = bitcast [41 x i8]* @.str._compilerRevision to i8*");
  var opresult1941 = callmethod(opresult1938, "++", [1], string1939);
  lineNumber = 624
  var call1942 = callmethod(this,"out", [1], opresult1941);
  lineNumber = 626
  lineNumber = 624
  var string1943 = new GraceString("%\"var_val___compilerRevision");
  var opresult1945 = callmethod(string1943, "++", [1], var_auto__95__count);
  lineNumber = 625
  var string1946 = new GraceString("\" = call %object @alloc_String(i8* %str___compilerRevision");
  var opresult1948 = callmethod(opresult1945, "++", [1], string1946);
  lineNumber = 626
  var opresult1950 = callmethod(opresult1948, "++", [1], var_auto__95__count);
  var string1951 = new GraceString(")");
  var opresult1953 = callmethod(opresult1950, "++", [1], string1951);
  lineNumber = 627
  var call1954 = callmethod(this,"out", [1], opresult1953);
  lineNumber = 628
  lineNumber = 1
  lineNumber = 628
  lineNumber = 627
  var string1955 = new GraceString("%\"var_val___compilerRevision");
  var opresult1957 = callmethod(string1955, "++", [1], var_auto__95__count);
  var string1958 = new GraceString("\"");
  var opresult1960 = callmethod(opresult1957, "++", [1], string1958);
  var call1961 = callmethod(var_o,"register:=", [1], opresult1960);
  var if1932 = call1961;
  } else {
  lineNumber = 629
  lineNumber = 1
  lineNumber = 629
  var call1962 = callmethod(var_name,"_escape", [0]);
  var_name = call1962;
  lineNumber = 636
  lineNumber = 630
  var call1964 = callmethod(var_modules,"contains", [1], var_name);
  if (Grace_isTrue(call1964)) {
  lineNumber = 632
  lineNumber = 631
  var string1965 = new GraceString("  %\"var_val_");
  var opresult1967 = callmethod(string1965, "++", [1], var_name);
  var opresult1969 = callmethod(opresult1967, "++", [1], var_auto__95__count);
  lineNumber = 632
  var string1970 = new GraceString("\" = load %object* @.module.");
  var opresult1972 = callmethod(opresult1969, "++", [1], string1970);
  var opresult1974 = callmethod(opresult1972, "++", [1], var_name);
  lineNumber = 633
  var call1975 = callmethod(this,"out", [1], opresult1974);
  var if1963 = call1975;
  } else {
  lineNumber = 634
  var call1976 = callmethod(var_usedvars,"push", [1], var_name);
  lineNumber = 636
  lineNumber = 635
  var string1977 = new GraceString("  %\"var_val_");
  var opresult1979 = callmethod(string1977, "++", [1], var_name);
  var opresult1981 = callmethod(opresult1979, "++", [1], var_auto__95__count);
  var string1982 = new GraceString("\" = load %object* ");
  var opresult1984 = callmethod(opresult1981, "++", [1], string1982);
  lineNumber = 636
  var string1985 = new GraceString("%\"var_");
  var opresult1987 = callmethod(opresult1984, "++", [1], string1985);
  var opresult1989 = callmethod(opresult1987, "++", [1], var_name);
  var string1990 = new GraceString("\"");
  var opresult1992 = callmethod(opresult1989, "++", [1], string1990);
  lineNumber = 637
  var call1993 = callmethod(this,"out", [1], opresult1992);
  var if1963 = call1993;
}
  lineNumber = 639
  lineNumber = 1
  lineNumber = 639
  lineNumber = 638
  var string1994 = new GraceString("%\"var_val_");
  var opresult1996 = callmethod(string1994, "++", [1], var_name);
  var opresult1998 = callmethod(opresult1996, "++", [1], var_auto__95__count);
  var string1999 = new GraceString("\"");
  var opresult2001 = callmethod(opresult1998, "++", [1], string1999);
  var call2002 = callmethod(var_o,"register:=", [1], opresult2001);
  lineNumber = 640
  lineNumber = 639
  var opresult2004 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2004;
  var if1932 = opresult2004;
}
  var if1926 = if1932;
}
  return if1926
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileidentifier"] = func1924;
  lineNumber = 677
var func2005 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 644
  lineNumber = 1
  lineNumber = 643
  var call2006 = callmethod(var_o,"dest", [0]);
  var var_dest = call2006;
  lineNumber = 645
  lineNumber = 644
  var string2007 = new GraceString("");
  var var_val = string2007;
  lineNumber = 646
  lineNumber = 645
  var string2008 = new GraceString("");
  var var_c = string2008;
  lineNumber = 647
  lineNumber = 646
  var string2009 = new GraceString("");
  var var_r = string2009;
  lineNumber = 675
  lineNumber = 676
  lineNumber = 1
  lineNumber = 647
  var call2011 = callmethod(var_dest,"kind", [0]);
  var string2012 = new GraceString("identifier");
  var opresult2014 = callmethod(call2011, "==", [1], string2012);
  if (Grace_isTrue(opresult2014)) {
  lineNumber = 649
  lineNumber = 1
  lineNumber = 648
  var call2015 = callmethod(var_o,"value", [0]);
  var_val = call2015;
  lineNumber = 649
  lineNumber = 650
  var call2016 = callmethod(this,"compilenode", [1], var_val);
  var_val = call2016;
  lineNumber = 1
  lineNumber = 650
  lineNumber = 1
  lineNumber = 650
  var call2017 = callmethod(var_dest,"value", [0]);
  var call2018 = callmethod(call2017,"_escape", [0]);
  var var_nm = call2018;
  lineNumber = 651
  var call2019 = callmethod(var_usedvars,"push", [1], var_nm);
  lineNumber = 652
  var string2020 = new GraceString("  store %object ");
  var opresult2022 = callmethod(string2020, "++", [1], var_val);
  var string2023 = new GraceString(", %object* %\"var_");
  var opresult2025 = callmethod(opresult2022, "++", [1], string2023);
  var opresult2027 = callmethod(opresult2025, "++", [1], var_nm);
  var string2028 = new GraceString("\"");
  var opresult2030 = callmethod(opresult2027, "++", [1], string2028);
  lineNumber = 653
  var call2031 = callmethod(this,"out", [1], opresult2030);
  var string2032 = new GraceString("  %icmp");
  var opresult2034 = callmethod(string2032, "++", [1], var_auto__95__count);
  var string2035 = new GraceString(" = icmp eq %object ");
  var opresult2037 = callmethod(opresult2034, "++", [1], string2035);
  var opresult2039 = callmethod(opresult2037, "++", [1], var_val);
  var string2040 = new GraceString(", %undefined");
  var opresult2042 = callmethod(opresult2039, "++", [1], string2040);
  lineNumber = 654
  var call2043 = callmethod(this,"out", [1], opresult2042);
  lineNumber = 655
  lineNumber = 654
  var string2044 = new GraceString("  br i1 %icmp");
  var opresult2046 = callmethod(string2044, "++", [1], var_auto__95__count);
  var string2047 = new GraceString(", label %isundef");
  var opresult2049 = callmethod(opresult2046, "++", [1], string2047);
  var opresult2051 = callmethod(opresult2049, "++", [1], var_auto__95__count);
  var string2052 = new GraceString(", ");
  var opresult2054 = callmethod(opresult2051, "++", [1], string2052);
  lineNumber = 655
  var string2055 = new GraceString("label %isdef");
  var opresult2057 = callmethod(string2055, "++", [1], var_auto__95__count);
  var string2058 = new GraceString("");
  var opresult2060 = callmethod(opresult2057, "++", [1], string2058);
  var opresult2062 = callmethod(opresult2054, "++", [1], opresult2060);
  lineNumber = 656
  var call2063 = callmethod(this,"out", [1], opresult2062);
  var string2064 = new GraceString("isundef");
  var opresult2066 = callmethod(string2064, "++", [1], var_auto__95__count);
  var string2067 = new GraceString("");
  var opresult2069 = callmethod(opresult2066, "++", [1], string2067);
  lineNumber = 657
  var call2070 = callmethod(this,"beginblock", [1], opresult2069);
  lineNumber = 659
  lineNumber = 657
  var string2071 = new GraceString("  call %object @callmethod(%object %none");
  lineNumber = 658
  var string2072 = new GraceString(", i8* getelementptr([11 x i8]* @.str._assignment");
  var opresult2074 = callmethod(string2071, "++", [1], string2072);
  lineNumber = 659
  var string2075 = new GraceString(",i32 0,i32 0), i32 1, %object* %\"var_");
  var opresult2077 = callmethod(string2075, "++", [1], var_nm);
  var string2078 = new GraceString("\")");
  var opresult2080 = callmethod(opresult2077, "++", [1], string2078);
  var opresult2082 = callmethod(opresult2074, "++", [1], opresult2080);
  lineNumber = 660
  var call2083 = callmethod(this,"out", [1], opresult2082);
  var string2084 = new GraceString("  br label %isdef");
  var opresult2086 = callmethod(string2084, "++", [1], var_auto__95__count);
  var string2087 = new GraceString("");
  var opresult2089 = callmethod(opresult2086, "++", [1], string2087);
  lineNumber = 661
  var call2090 = callmethod(this,"out", [1], opresult2089);
  var string2091 = new GraceString("isdef");
  var opresult2093 = callmethod(string2091, "++", [1], var_auto__95__count);
  var string2094 = new GraceString("");
  var opresult2096 = callmethod(opresult2093, "++", [1], string2094);
  lineNumber = 662
  var call2097 = callmethod(this,"beginblock", [1], opresult2096);
  lineNumber = 663
  lineNumber = 662
  var opresult2099 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2099;
  lineNumber = 664
  lineNumber = 1
  lineNumber = 663
  var call2100 = callmethod(var_o,"register:=", [1], var_val);
  var if2010 = call2100;
  } else {
  lineNumber = 675
  lineNumber = 670
  lineNumber = 1
  lineNumber = 664
  var call2102 = callmethod(var_dest,"kind", [0]);
  var string2103 = new GraceString("member");
  var opresult2105 = callmethod(call2102, "==", [1], string2103);
  if (Grace_isTrue(opresult2105)) {
  lineNumber = 665
  var string2106 = new GraceString("; WARNING: non-local assigns not yet fully supported");
  lineNumber = 666
  var call2107 = callmethod(this,"out", [1], string2106);
  lineNumber = 667
  lineNumber = 1
  lineNumber = 667
  lineNumber = 1
  lineNumber = 666
  var call2108 = callmethod(var_dest,"value", [0]);
  var string2109 = new GraceString(":=");
  var opresult2111 = callmethod(call2108, "++", [1], string2109);
  var call2112 = callmethod(var_dest,"value:=", [1], opresult2111);
  lineNumber = 667
  lineNumber = 1
  lineNumber = 667
  var call2114 = callmethod(var_o,"value", [0]);
  var array2113 = new GraceList([
call2114,
]);

  var call2115 = callmethod(var_ast,"astcall", [2], var_dest, array2113);
  var_c = call2115;
  lineNumber = 668
  lineNumber = 669
  var call2116 = callmethod(this,"compilenode", [1], var_c);
  var_r = call2116;
  lineNumber = 670
  lineNumber = 1
  lineNumber = 669
  var call2117 = callmethod(var_o,"register:=", [1], var_r);
  var if2101 = call2117;
  } else {
  lineNumber = 675
  lineNumber = 676
  lineNumber = 1
  lineNumber = 670
  var call2119 = callmethod(var_dest,"kind", [0]);
  var string2120 = new GraceString("index");
  var opresult2122 = callmethod(call2119, "==", [1], string2120);
  if (Grace_isTrue(opresult2122)) {
  lineNumber = 671
  var string2123 = new GraceString("[]:=");
  lineNumber = 1
  lineNumber = 671
  var call2124 = callmethod(var_dest,"value", [0]);
  var call2125 = callmethod(var_ast,"astmember", [2], string2123, call2124);
  var var_imem = call2125;
  lineNumber = 672
  lineNumber = 1
  lineNumber = 672
  var call2127 = callmethod(var_dest,"index", [0]);
  lineNumber = 1
  lineNumber = 672
  var call2128 = callmethod(var_o,"value", [0]);
  var array2126 = new GraceList([
call2127,
call2128,
]);

  var call2129 = callmethod(var_ast,"astcall", [2], var_imem, array2126);
  var_c = call2129;
  lineNumber = 673
  lineNumber = 674
  var call2130 = callmethod(this,"compilenode", [1], var_c);
  var_r = call2130;
  lineNumber = 675
  lineNumber = 1
  lineNumber = 674
  var call2131 = callmethod(var_o,"register:=", [1], var_r);
  var if2118 = call2131;
}
  var if2101 = if2118;
}
  var if2010 = if2101;
}
  lineNumber = 677
  lineNumber = 1
  lineNumber = 676
  var string2132 = new GraceString("%none");
  var call2133 = callmethod(var_o,"register:=", [1], string2132);
  return call2133
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilebind"] = func2005;
  lineNumber = 705
var func2134 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 680
  var var_nm;
  lineNumber = 683
  lineNumber = 685
  lineNumber = 1
  lineNumber = 685
  lineNumber = 1
  lineNumber = 680
  var call2136 = callmethod(var_o,"name", [0]);
  var call2137 = callmethod(call2136,"kind", [0]);
  var string2138 = new GraceString("generic");
  var opresult2140 = callmethod(call2137, "==", [1], string2138);
  if (Grace_isTrue(opresult2140)) {
  lineNumber = 681
  lineNumber = 1
  lineNumber = 681
  lineNumber = 1
  lineNumber = 681
  lineNumber = 1
  lineNumber = 681
  lineNumber = 1
  lineNumber = 681
  var call2141 = callmethod(var_o,"name", [0]);
  var call2142 = callmethod(call2141,"value", [0]);
  var call2143 = callmethod(call2142,"value", [0]);
  var call2144 = callmethod(call2143,"_escape", [0]);
  var_nm = call2144;
  var if2135 = call2144;
  } else {
  lineNumber = 683
  lineNumber = 1
  lineNumber = 683
  lineNumber = 1
  lineNumber = 683
  lineNumber = 1
  lineNumber = 683
  var call2145 = callmethod(var_o,"name", [0]);
  var call2146 = callmethod(call2145,"value", [0]);
  var call2147 = callmethod(call2146,"_escape", [0]);
  var_nm = call2147;
  var if2135 = call2147;
}
  lineNumber = 685
  var call2148 = callmethod(var_declaredvars,"push", [1], var_nm);
  lineNumber = 687
  lineNumber = 1
  lineNumber = 686
  var call2149 = callmethod(var_o,"value", [0]);
  var var_val = call2149;
  lineNumber = 690
  lineNumber = 687
  if (Grace_isTrue(var_val)) {
  lineNumber = 688
  lineNumber = 689
  var call2151 = callmethod(this,"compilenode", [1], var_val);
  var_val = call2151;
  var if2150 = call2151;
  } else {
  lineNumber = 690
  var string2152 = new GraceString("const must have value bound.");
  var call2153 = callmethod(var_util,"syntax_error", [1], string2152);
  var if2150 = call2153;
}
  lineNumber = 693
  lineNumber = 692
  var string2154 = new GraceString("  store %object ");
  var opresult2156 = callmethod(string2154, "++", [1], var_val);
  var string2157 = new GraceString(", %object* %\"var_");
  var opresult2159 = callmethod(opresult2156, "++", [1], string2157);
  lineNumber = 693
  var opresult2161 = callmethod(opresult2159, "++", [1], var_nm);
  var string2162 = new GraceString("\"");
  var opresult2164 = callmethod(opresult2161, "++", [1], string2162);
  lineNumber = 694
  var call2165 = callmethod(this,"out", [1], opresult2164);
  var string2166 = new GraceString("  %icmp");
  var opresult2168 = callmethod(string2166, "++", [1], var_auto__95__count);
  var string2169 = new GraceString(" = icmp eq %object ");
  var opresult2171 = callmethod(opresult2168, "++", [1], string2169);
  var opresult2173 = callmethod(opresult2171, "++", [1], var_val);
  var string2174 = new GraceString(", %undefined");
  var opresult2176 = callmethod(opresult2173, "++", [1], string2174);
  lineNumber = 695
  var call2177 = callmethod(this,"out", [1], opresult2176);
  lineNumber = 696
  lineNumber = 695
  var string2178 = new GraceString("  br i1 %icmp");
  var opresult2180 = callmethod(string2178, "++", [1], var_auto__95__count);
  var string2181 = new GraceString(", label %isundef");
  var opresult2183 = callmethod(opresult2180, "++", [1], string2181);
  var opresult2185 = callmethod(opresult2183, "++", [1], var_auto__95__count);
  var string2186 = new GraceString(", ");
  var opresult2188 = callmethod(opresult2185, "++", [1], string2186);
  lineNumber = 696
  var string2189 = new GraceString("label %isdef");
  var opresult2191 = callmethod(string2189, "++", [1], var_auto__95__count);
  var string2192 = new GraceString("");
  var opresult2194 = callmethod(opresult2191, "++", [1], string2192);
  var opresult2196 = callmethod(opresult2188, "++", [1], opresult2194);
  lineNumber = 697
  var call2197 = callmethod(this,"out", [1], opresult2196);
  var string2198 = new GraceString("isundef");
  var opresult2200 = callmethod(string2198, "++", [1], var_auto__95__count);
  var string2201 = new GraceString("");
  var opresult2203 = callmethod(opresult2200, "++", [1], string2201);
  lineNumber = 698
  var call2204 = callmethod(this,"beginblock", [1], opresult2203);
  lineNumber = 700
  lineNumber = 698
  var string2205 = new GraceString("  call %object @callmethod(%object %none");
  lineNumber = 699
  var string2206 = new GraceString(", i8* getelementptr([11 x i8]* @.str._assignment");
  var opresult2208 = callmethod(string2205, "++", [1], string2206);
  lineNumber = 700
  var string2209 = new GraceString(",i32 0,i32 0), i32 1, %object* %\"var_");
  var opresult2211 = callmethod(string2209, "++", [1], var_nm);
  var string2212 = new GraceString("\")");
  var opresult2214 = callmethod(opresult2211, "++", [1], string2212);
  var opresult2216 = callmethod(opresult2208, "++", [1], opresult2214);
  lineNumber = 701
  var call2217 = callmethod(this,"out", [1], opresult2216);
  var string2218 = new GraceString("  br label %isdef");
  var opresult2220 = callmethod(string2218, "++", [1], var_auto__95__count);
  var string2221 = new GraceString("");
  var opresult2223 = callmethod(opresult2220, "++", [1], string2221);
  lineNumber = 702
  var call2224 = callmethod(this,"out", [1], opresult2223);
  var string2225 = new GraceString("isdef");
  var opresult2227 = callmethod(string2225, "++", [1], var_auto__95__count);
  var string2228 = new GraceString("");
  var opresult2230 = callmethod(opresult2227, "++", [1], string2228);
  lineNumber = 703
  var call2231 = callmethod(this,"beginblock", [1], opresult2230);
  lineNumber = 704
  lineNumber = 703
  var opresult2233 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2233;
  lineNumber = 705
  lineNumber = 1
  lineNumber = 704
  var string2234 = new GraceString("%none");
  var call2235 = callmethod(var_o,"register:=", [1], string2234);
  return call2235
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compiledefdec"] = func2134;
  lineNumber = 732
var func2236 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 707
  lineNumber = 1
  lineNumber = 707
  lineNumber = 1
  lineNumber = 707
  lineNumber = 1
  lineNumber = 707
  var call2237 = callmethod(var_o,"name", [0]);
  var call2238 = callmethod(call2237,"value", [0]);
  var call2239 = callmethod(call2238,"_escape", [0]);
  var var_nm = call2239;
  lineNumber = 708
  var call2240 = callmethod(var_declaredvars,"push", [1], var_nm);
  lineNumber = 710
  lineNumber = 1
  lineNumber = 709
  var call2241 = callmethod(var_o,"value", [0]);
  var var_val = call2241;
  lineNumber = 711
  lineNumber = 710
  var bool2242 = new GraceBoolean(false)
  var var_hadval = bool2242;
  lineNumber = 716
  lineNumber = 711
  if (Grace_isTrue(var_val)) {
  lineNumber = 712
  lineNumber = 713
  var call2244 = callmethod(this,"compilenode", [1], var_val);
  var_val = call2244;
  lineNumber = 714
  lineNumber = 713
  var bool2245 = new GraceBoolean(true)
  var_hadval = bool2245;
  var if2243 = bool2245;
  } else {
  lineNumber = 716
  lineNumber = 715
  var string2246 = new GraceString("%undefined");
  var_val = string2246;
  var if2243 = string2246;
}
  lineNumber = 718
  lineNumber = 717
  var string2247 = new GraceString("  store %object ");
  var opresult2249 = callmethod(string2247, "++", [1], var_val);
  var string2250 = new GraceString(", %object* %\"var_");
  var opresult2252 = callmethod(opresult2249, "++", [1], string2250);
  lineNumber = 718
  var opresult2254 = callmethod(opresult2252, "++", [1], var_nm);
  var string2255 = new GraceString("\"");
  var opresult2257 = callmethod(opresult2254, "++", [1], string2255);
  lineNumber = 719
  var call2258 = callmethod(this,"out", [1], opresult2257);
  lineNumber = 730
  lineNumber = 719
  if (Grace_isTrue(var_hadval)) {
  lineNumber = 720
  var string2260 = new GraceString("  %icmp");
  var opresult2262 = callmethod(string2260, "++", [1], var_auto__95__count);
  var string2263 = new GraceString(" = icmp eq %object ");
  var opresult2265 = callmethod(opresult2262, "++", [1], string2263);
  var opresult2267 = callmethod(opresult2265, "++", [1], var_val);
  var string2268 = new GraceString(", %undefined");
  var opresult2270 = callmethod(opresult2267, "++", [1], string2268);
  lineNumber = 721
  var call2271 = callmethod(this,"out", [1], opresult2270);
  lineNumber = 722
  lineNumber = 721
  var string2272 = new GraceString("  br i1 %icmp");
  var opresult2274 = callmethod(string2272, "++", [1], var_auto__95__count);
  var string2275 = new GraceString(", label %isundef");
  var opresult2277 = callmethod(opresult2274, "++", [1], string2275);
  var opresult2279 = callmethod(opresult2277, "++", [1], var_auto__95__count);
  var string2280 = new GraceString(", ");
  var opresult2282 = callmethod(opresult2279, "++", [1], string2280);
  lineNumber = 722
  var string2283 = new GraceString("label %isdef");
  var opresult2285 = callmethod(string2283, "++", [1], var_auto__95__count);
  var string2286 = new GraceString("");
  var opresult2288 = callmethod(opresult2285, "++", [1], string2286);
  var opresult2290 = callmethod(opresult2282, "++", [1], opresult2288);
  lineNumber = 723
  var call2291 = callmethod(this,"out", [1], opresult2290);
  var string2292 = new GraceString("isundef");
  var opresult2294 = callmethod(string2292, "++", [1], var_auto__95__count);
  var string2295 = new GraceString("");
  var opresult2297 = callmethod(opresult2294, "++", [1], string2295);
  lineNumber = 724
  var call2298 = callmethod(this,"beginblock", [1], opresult2297);
  lineNumber = 726
  lineNumber = 724
  var string2299 = new GraceString("  call %object @callmethod(%object %none");
  lineNumber = 725
  var string2300 = new GraceString(", i8* getelementptr([11 x i8]* @.str._assignment");
  var opresult2302 = callmethod(string2299, "++", [1], string2300);
  lineNumber = 726
  var string2303 = new GraceString(",i32 0,i32 0), i32 1, %object* %\"var_");
  var opresult2305 = callmethod(string2303, "++", [1], var_nm);
  var string2306 = new GraceString("\")");
  var opresult2308 = callmethod(opresult2305, "++", [1], string2306);
  var opresult2310 = callmethod(opresult2302, "++", [1], opresult2308);
  lineNumber = 727
  var call2311 = callmethod(this,"out", [1], opresult2310);
  var string2312 = new GraceString("  br label %isdef");
  var opresult2314 = callmethod(string2312, "++", [1], var_auto__95__count);
  var string2315 = new GraceString("");
  var opresult2317 = callmethod(opresult2314, "++", [1], string2315);
  lineNumber = 728
  var call2318 = callmethod(this,"out", [1], opresult2317);
  var string2319 = new GraceString("isdef");
  var opresult2321 = callmethod(string2319, "++", [1], var_auto__95__count);
  var string2322 = new GraceString("");
  var opresult2324 = callmethod(opresult2321, "++", [1], string2322);
  lineNumber = 729
  var call2325 = callmethod(this,"beginblock", [1], opresult2324);
  lineNumber = 730
  lineNumber = 729
  var opresult2327 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2327;
  var if2259 = opresult2327;
}
  lineNumber = 732
  lineNumber = 1
  lineNumber = 731
  var string2328 = new GraceString("%none");
  var call2329 = callmethod(var_o,"register:=", [1], string2328);
  return call2329
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilevardec"] = func2236;
  lineNumber = 742
var func2330 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 734
  lineNumber = 1
  lineNumber = 734
  var call2331 = callmethod(var_o,"value", [0]);
  lineNumber = 735
  var call2332 = callmethod(this,"compilenode", [1], call2331);
  var var_of = call2332;
  lineNumber = 1
  lineNumber = 735
  var call2333 = callmethod(var_o,"index", [0]);
  lineNumber = 736
  var call2334 = callmethod(this,"compilenode", [1], call2333);
  var var_index = call2334;
  var string2335 = new GraceString("  store %object ");
  var opresult2337 = callmethod(string2335, "++", [1], var_index);
  var string2338 = new GraceString(", %object* %params_0");
  var opresult2340 = callmethod(opresult2337, "++", [1], string2338);
  lineNumber = 737
  var call2341 = callmethod(this,"out", [1], opresult2340);
  lineNumber = 739
  lineNumber = 737
  var string2342 = new GraceString("  %idxres");
  var opresult2344 = callmethod(string2342, "++", [1], var_auto__95__count);
  var string2345 = new GraceString(" = call %object @callmethod(%object ");
  var opresult2347 = callmethod(opresult2344, "++", [1], string2345);
  lineNumber = 738
  var opresult2349 = callmethod(opresult2347, "++", [1], var_of);
  var string2350 = new GraceString(", i8* getelementptr([3 x i8]* @.str._index");
  var opresult2352 = callmethod(opresult2349, "++", [1], string2350);
  lineNumber = 739
  var string2353 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult2355 = callmethod(opresult2352, "++", [1], string2353);
  lineNumber = 740
  var call2356 = callmethod(this,"out", [1], opresult2355);
  lineNumber = 741
  lineNumber = 1
  lineNumber = 741
  lineNumber = 740
  var string2357 = new GraceString("%idxres");
  var opresult2359 = callmethod(string2357, "++", [1], var_auto__95__count);
  var call2360 = callmethod(var_o,"register:=", [1], opresult2359);
  lineNumber = 742
  lineNumber = 741
  var opresult2362 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2362;
  return opresult2362
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileindex"] = func2330;
  lineNumber = 786
var func2363 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 744
  lineNumber = 1
  lineNumber = 744
  var call2364 = callmethod(var_o,"left", [0]);
  lineNumber = 745
  var call2365 = callmethod(this,"compilenode", [1], call2364);
  var var_left = call2365;
  lineNumber = 1
  lineNumber = 745
  var call2366 = callmethod(var_o,"right", [0]);
  lineNumber = 746
  var call2367 = callmethod(this,"compilenode", [1], call2366);
  var var_right = call2367;
  lineNumber = 747
  lineNumber = 746
  var opresult2369 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2369;
  lineNumber = 786
  lineNumber = 787
  lineNumber = 1
  lineNumber = 747
  var call2371 = callmethod(var_o,"value", [0]);
  var string2372 = new GraceString("+");
  var opresult2374 = callmethod(call2371, "==", [1], string2372);
  lineNumber = 787
  lineNumber = 1
  lineNumber = 747
  var call2375 = callmethod(var_o,"value", [0]);
  var string2376 = new GraceString("*");
  var opresult2378 = callmethod(call2375, "==", [1], string2376);
  var opresult2380 = callmethod(opresult2374, "|", [1], opresult2378);
  lineNumber = 787
  lineNumber = 1
  lineNumber = 747
  var call2381 = callmethod(var_o,"value", [0]);
  var string2382 = new GraceString("/");
  var opresult2384 = callmethod(call2381, "==", [1], string2382);
  var opresult2386 = callmethod(opresult2380, "|", [1], opresult2384);
  lineNumber = 787
  lineNumber = 1
  lineNumber = 748
  var call2387 = callmethod(var_o,"value", [0]);
  var string2388 = new GraceString("-");
  var opresult2390 = callmethod(call2387, "==", [1], string2388);
  var opresult2392 = callmethod(opresult2386, "|", [1], opresult2390);
  lineNumber = 787
  lineNumber = 1
  lineNumber = 748
  var call2393 = callmethod(var_o,"value", [0]);
  var string2394 = new GraceString("%");
  var opresult2396 = callmethod(call2393, "==", [1], string2394);
  var opresult2398 = callmethod(opresult2392, "|", [1], opresult2396);
  if (Grace_isTrue(opresult2398)) {
  lineNumber = 750
  lineNumber = 749
  var string2399 = new GraceString("sum");
  var var_rnm = string2399;
  lineNumber = 751
  lineNumber = 750
  var string2400 = new GraceString("plus");
  var var_opnm = string2400;
  lineNumber = 754
  lineNumber = 755
  lineNumber = 1
  lineNumber = 751
  var call2402 = callmethod(var_o,"value", [0]);
  var string2403 = new GraceString("*");
  var opresult2405 = callmethod(call2402, "==", [1], string2403);
  if (Grace_isTrue(opresult2405)) {
  lineNumber = 753
  lineNumber = 752
  var string2406 = new GraceString("prod");
  var_rnm = string2406;
  lineNumber = 754
  lineNumber = 753
  var string2407 = new GraceString("asterisk");
  var_opnm = string2407;
  var if2401 = string2407;
}
  lineNumber = 758
  lineNumber = 759
  lineNumber = 1
  lineNumber = 755
  var call2409 = callmethod(var_o,"value", [0]);
  var string2410 = new GraceString("/");
  var opresult2412 = callmethod(call2409, "==", [1], string2410);
  if (Grace_isTrue(opresult2412)) {
  lineNumber = 757
  lineNumber = 756
  var string2413 = new GraceString("quotient");
  var_rnm = string2413;
  lineNumber = 758
  lineNumber = 757
  var string2414 = new GraceString("slash");
  var_opnm = string2414;
  var if2408 = string2414;
}
  lineNumber = 762
  lineNumber = 763
  lineNumber = 1
  lineNumber = 759
  var call2416 = callmethod(var_o,"value", [0]);
  var string2417 = new GraceString("-");
  var opresult2419 = callmethod(call2416, "==", [1], string2417);
  if (Grace_isTrue(opresult2419)) {
  lineNumber = 761
  lineNumber = 760
  var string2420 = new GraceString("diff");
  var_rnm = string2420;
  lineNumber = 762
  lineNumber = 761
  var string2421 = new GraceString("minus");
  var_opnm = string2421;
  var if2415 = string2421;
}
  lineNumber = 766
  lineNumber = 767
  lineNumber = 1
  lineNumber = 763
  var call2423 = callmethod(var_o,"value", [0]);
  var string2424 = new GraceString("%");
  var opresult2426 = callmethod(call2423, "==", [1], string2424);
  if (Grace_isTrue(opresult2426)) {
  lineNumber = 765
  lineNumber = 764
  var string2427 = new GraceString("modulus");
  var_rnm = string2427;
  lineNumber = 766
  lineNumber = 765
  var string2428 = new GraceString("percent");
  var_opnm = string2428;
  var if2422 = string2428;
}
  lineNumber = 767
  var string2429 = new GraceString("  store %object ");
  var opresult2431 = callmethod(string2429, "++", [1], var_right);
  var string2432 = new GraceString(", %object* %params_0");
  var opresult2434 = callmethod(opresult2431, "++", [1], string2432);
  lineNumber = 768
  var call2435 = callmethod(this,"out", [1], opresult2434);
  lineNumber = 770
  lineNumber = 768
  var string2436 = new GraceString("  %");
  var opresult2438 = callmethod(string2436, "++", [1], var_rnm);
  var opresult2440 = callmethod(opresult2438, "++", [1], var_auto__95__count);
  var string2441 = new GraceString(" = call %object @callmethod(%object ");
  var opresult2443 = callmethod(opresult2440, "++", [1], string2441);
  lineNumber = 769
  var opresult2445 = callmethod(opresult2443, "++", [1], var_left);
  var string2446 = new GraceString(", i8* getelementptr([2 x i8]* @.str._");
  var opresult2448 = callmethod(opresult2445, "++", [1], string2446);
  var opresult2450 = callmethod(opresult2448, "++", [1], var_opnm);
  lineNumber = 770
  var string2451 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult2453 = callmethod(opresult2450, "++", [1], string2451);
  lineNumber = 771
  var call2454 = callmethod(this,"out", [1], opresult2453);
  lineNumber = 772
  lineNumber = 1
  lineNumber = 772
  lineNumber = 771
  var string2455 = new GraceString("%");
  var opresult2457 = callmethod(string2455, "++", [1], var_rnm);
  var opresult2459 = callmethod(opresult2457, "++", [1], var_auto__95__count);
  var call2460 = callmethod(var_o,"register:=", [1], opresult2459);
  lineNumber = 773
  lineNumber = 772
  var opresult2462 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2462;
  var if2370 = opresult2462;
  } else {
  lineNumber = 774
  lineNumber = 1
  lineNumber = 774
  var call2463 = callmethod(var_o,"value", [0]);
  var call2464 = Grace_length(call2463);
  var opresult2466 = callmethod(call2464, "+", [1], new GraceNum(1));
  var var_len = opresult2466;
  lineNumber = 775
  lineNumber = 1
  lineNumber = 775
  lineNumber = 1
  lineNumber = 775
  var call2467 = callmethod(var_o,"value", [0]);
  var call2468 = callmethod(call2467,"_escape", [0]);
  var var_evl = call2468;
  lineNumber = 778
  lineNumber = 776
  var string2469 = new GraceString("@.str");
  lineNumber = 778
  lineNumber = 1
  lineNumber = 776
  var call2470 = callmethod(var_constants,"size", [0]);
  var opresult2472 = callmethod(string2469, "++", [1], call2470);
  var string2473 = new GraceString(" = private unnamed_addr ");
  var opresult2475 = callmethod(opresult2472, "++", [1], string2473);
  lineNumber = 777
  var string2476 = new GraceString("constant [");
  var opresult2478 = callmethod(opresult2475, "++", [1], string2476);
  var opresult2480 = callmethod(opresult2478, "++", [1], var_len);
  var string2481 = new GraceString(" x i8] c\"");
  var opresult2483 = callmethod(opresult2480, "++", [1], string2481);
  var opresult2485 = callmethod(opresult2483, "++", [1], var_evl);
  var string2486 = new GraceString("\\00\"");
  var opresult2488 = callmethod(opresult2485, "++", [1], string2486);
  var var_con = opresult2488;
  lineNumber = 778
  var string2489 = new GraceString("  store %object ");
  var opresult2491 = callmethod(string2489, "++", [1], var_right);
  var string2492 = new GraceString(", %object* %params_0");
  var opresult2494 = callmethod(opresult2491, "++", [1], string2492);
  lineNumber = 779
  var call2495 = callmethod(this,"out", [1], opresult2494);
  lineNumber = 782
  lineNumber = 779
  var string2496 = new GraceString("  %opresult");
  var opresult2498 = callmethod(string2496, "++", [1], var_auto__95__count);
  var string2499 = new GraceString(" = call %object ");
  var opresult2501 = callmethod(opresult2498, "++", [1], string2499);
  lineNumber = 780
  var string2502 = new GraceString("@callmethod(%object ");
  var opresult2504 = callmethod(opresult2501, "++", [1], string2502);
  var opresult2506 = callmethod(opresult2504, "++", [1], var_left);
  lineNumber = 781
  var string2507 = new GraceString(", i8* getelementptr([");
  var opresult2509 = callmethod(opresult2506, "++", [1], string2507);
  var opresult2511 = callmethod(opresult2509, "++", [1], var_len);
  var string2512 = new GraceString(" x i8]* @.str");
  var opresult2514 = callmethod(opresult2511, "++", [1], string2512);
  lineNumber = 782
  lineNumber = 1
  lineNumber = 782
  var call2515 = callmethod(var_constants,"size", [0]);
  var opresult2517 = callmethod(opresult2514, "++", [1], call2515);
  var string2518 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult2520 = callmethod(opresult2517, "++", [1], string2518);
  lineNumber = 783
  var call2521 = callmethod(this,"out", [1], opresult2520);
  var call2522 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 785
  lineNumber = 1
  lineNumber = 785
  lineNumber = 784
  var string2523 = new GraceString("%opresult");
  var opresult2525 = callmethod(string2523, "++", [1], var_auto__95__count);
  var call2526 = callmethod(var_o,"register:=", [1], opresult2525);
  lineNumber = 786
  lineNumber = 785
  var opresult2528 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2528;
  var if2370 = opresult2528;
}
  return if2370
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileop"] = func2363;
  lineNumber = 836
var func2529 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 790
  var array2530 = new GraceList([
]);

  var var_args = array2530;
  lineNumber = 791
  lineNumber = 790
  var string2531 = new GraceString("");
  var var_obj = string2531;
  lineNumber = 792
  lineNumber = 791
  var var_len = new GraceNum(0);
  lineNumber = 793
  lineNumber = 792
  var string2532 = new GraceString("");
  var var_con = string2532;
  lineNumber = 794
  var var_evl;
  lineNumber = 795
  lineNumber = 794
  var var_i = new GraceNum(0);
  lineNumber = 797
  lineNumber = 795
  lineNumber = 1
  lineNumber = 795
  var call2533 = callmethod(var_o,"with", [0]);
  lineNumber = 797
  var block2534 = Grace_allocObject();
  block2534.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2534.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2534.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2534.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2534.receiver = this;
  block2534.className = 'block<genllvm29:797>';
  block2534.real = function(
var_p
) {
  lineNumber = 796
  lineNumber = 797
  var call2535 = callmethod(this,"compilenode", [1], var_p);
  var var_r = call2535;
  var call2536 = callmethod(var_args,"push", [1], var_r);
  return call2536;
};
  var call2537 = callmethod(Grace_prelude,"for()do", [1, 1], call2533, block2534);
  lineNumber = 801
  lineNumber = 802
  lineNumber = 1
  lineNumber = 799
  var call2539 = callmethod(var_args,"size", [0]);
  var opresult2541 = callmethod(call2539, ">", [1], var_paramsUsed);
  if (Grace_isTrue(opresult2541)) {
  lineNumber = 801
  lineNumber = 1
  lineNumber = 800
  var call2542 = callmethod(var_args,"size", [0]);
  var_paramsUsed = call2542;
  var if2538 = call2542;
}
  lineNumber = 802
  lineNumber = 1
  lineNumber = 802
  lineNumber = 1
  lineNumber = 802
  lineNumber = 1
  lineNumber = 802
  var call2543 = callmethod(var_o,"value", [0]);
  var call2544 = callmethod(call2543,"value", [0]);
  var call2545 = callmethod(call2544,"_escape", [0]);
  var_evl = call2545;
  lineNumber = 832
  lineNumber = 834
  lineNumber = 1
  lineNumber = 834
  lineNumber = 1
  lineNumber = 803
  var call2547 = callmethod(var_o,"value", [0]);
  var call2548 = callmethod(call2547,"kind", [0]);
  var string2549 = new GraceString("member");
  var opresult2551 = callmethod(call2548, "==", [1], string2549);
  if (Grace_isTrue(opresult2551)) {
  lineNumber = 804
  lineNumber = 1
  lineNumber = 804
  lineNumber = 1
  lineNumber = 804
  var call2552 = callmethod(var_o,"value", [0]);
  var call2553 = callmethod(call2552,"in", [0]);
  lineNumber = 805
  var call2554 = callmethod(this,"compilenode", [1], call2553);
  var_obj = call2554;
  lineNumber = 1
  lineNumber = 805
  lineNumber = 1
  lineNumber = 805
  var call2555 = callmethod(var_o,"value", [0]);
  var call2556 = callmethod(call2555,"value", [0]);
  var call2557 = Grace_length(call2556);
  var opresult2559 = callmethod(call2557, "+", [1], new GraceNum(1));
  var_len = opresult2559;
  lineNumber = 808
  lineNumber = 806
  var string2560 = new GraceString("@.str");
  lineNumber = 808
  lineNumber = 1
  lineNumber = 806
  var call2561 = callmethod(var_constants,"size", [0]);
  var opresult2563 = callmethod(string2560, "++", [1], call2561);
  var string2564 = new GraceString(" = private unnamed_addr ");
  var opresult2566 = callmethod(opresult2563, "++", [1], string2564);
  lineNumber = 807
  var string2567 = new GraceString("constant [");
  var opresult2569 = callmethod(opresult2566, "++", [1], string2567);
  var opresult2571 = callmethod(opresult2569, "++", [1], var_len);
  var string2572 = new GraceString(" x i8] c\"");
  var opresult2574 = callmethod(opresult2571, "++", [1], string2572);
  var opresult2576 = callmethod(opresult2574, "++", [1], var_evl);
  var string2577 = new GraceString("\\00\"");
  var opresult2579 = callmethod(opresult2576, "++", [1], string2577);
  var_con = opresult2579;
  lineNumber = 811
  lineNumber = 808
  lineNumber = 811
  var block2580 = Grace_allocObject();
  block2580.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2580.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2580.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2580.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2580.receiver = this;
  block2580.className = 'block<genllvm29:811>';
  block2580.real = function(
var_arg
) {
  lineNumber = 809
  var string2581 = new GraceString("  store %object ");
  var opresult2583 = callmethod(string2581, "++", [1], var_arg);
  var string2584 = new GraceString(", %object* %params_");
  var opresult2586 = callmethod(opresult2583, "++", [1], string2584);
  var opresult2588 = callmethod(opresult2586, "++", [1], var_i);
  var string2589 = new GraceString("");
  var opresult2591 = callmethod(opresult2588, "++", [1], string2589);
  lineNumber = 810
  var call2592 = callmethod(this,"out", [1], opresult2591);
  lineNumber = 811
  lineNumber = 810
  var opresult2594 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult2594;
  return opresult2594;
};
  var call2595 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block2580);
  lineNumber = 816
  lineNumber = 812
  var string2596 = new GraceString("  %call");
  var opresult2598 = callmethod(string2596, "++", [1], var_auto__95__count);
  var string2599 = new GraceString(" = call %object ");
  var opresult2601 = callmethod(opresult2598, "++", [1], string2599);
  lineNumber = 813
  var string2602 = new GraceString("@callmethod(%object ");
  var opresult2604 = callmethod(opresult2601, "++", [1], string2602);
  var opresult2606 = callmethod(opresult2604, "++", [1], var_obj);
  lineNumber = 814
  var string2607 = new GraceString(", i8* getelementptr([");
  var opresult2609 = callmethod(opresult2606, "++", [1], string2607);
  var opresult2611 = callmethod(opresult2609, "++", [1], var_len);
  var string2612 = new GraceString(" x i8]* @.str");
  var opresult2614 = callmethod(opresult2611, "++", [1], string2612);
  lineNumber = 816
  lineNumber = 1
  lineNumber = 815
  var call2615 = callmethod(var_constants,"size", [0]);
  var opresult2617 = callmethod(opresult2614, "++", [1], call2615);
  var string2618 = new GraceString(",i32 0,i32 0), i32 ");
  var opresult2620 = callmethod(opresult2617, "++", [1], string2618);
  lineNumber = 816
  lineNumber = 1
  lineNumber = 816
  var call2621 = callmethod(var_args,"size", [0]);
  var opresult2623 = callmethod(opresult2620, "++", [1], call2621);
  var string2624 = new GraceString(", %object* %params)");
  var opresult2626 = callmethod(opresult2623, "++", [1], string2624);
  lineNumber = 817
  var call2627 = callmethod(this,"out", [1], opresult2626);
  var call2628 = callmethod(var_constants,"push", [1], var_con);
  var if2546 = call2628;
  } else {
  lineNumber = 820
  lineNumber = 819
  var string2629 = new GraceString("%self");
  var_obj = string2629;
  lineNumber = 820
  lineNumber = 1
  lineNumber = 820
  lineNumber = 1
  lineNumber = 820
  var call2630 = callmethod(var_o,"value", [0]);
  var call2631 = callmethod(call2630,"value", [0]);
  var call2632 = Grace_length(call2631);
  var opresult2634 = callmethod(call2632, "+", [1], new GraceNum(1));
  var_len = opresult2634;
  lineNumber = 823
  lineNumber = 821
  var string2635 = new GraceString("@.str");
  lineNumber = 823
  lineNumber = 1
  lineNumber = 821
  var call2636 = callmethod(var_constants,"size", [0]);
  var opresult2638 = callmethod(string2635, "++", [1], call2636);
  var string2639 = new GraceString(" = private unnamed_addr ");
  var opresult2641 = callmethod(opresult2638, "++", [1], string2639);
  lineNumber = 822
  var string2642 = new GraceString("constant [");
  var opresult2644 = callmethod(opresult2641, "++", [1], string2642);
  var opresult2646 = callmethod(opresult2644, "++", [1], var_len);
  var string2647 = new GraceString(" x i8] c\"");
  var opresult2649 = callmethod(opresult2646, "++", [1], string2647);
  var opresult2651 = callmethod(opresult2649, "++", [1], var_evl);
  var string2652 = new GraceString("\\00\"");
  var opresult2654 = callmethod(opresult2651, "++", [1], string2652);
  var_con = opresult2654;
  lineNumber = 826
  lineNumber = 823
  lineNumber = 826
  var block2655 = Grace_allocObject();
  block2655.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2655.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2655.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2655.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2655.receiver = this;
  block2655.className = 'block<genllvm29:826>';
  block2655.real = function(
var_arg
) {
  lineNumber = 824
  var string2656 = new GraceString("  store %object ");
  var opresult2658 = callmethod(string2656, "++", [1], var_arg);
  var string2659 = new GraceString(", %object* %params_");
  var opresult2661 = callmethod(opresult2658, "++", [1], string2659);
  var opresult2663 = callmethod(opresult2661, "++", [1], var_i);
  var string2664 = new GraceString("");
  var opresult2666 = callmethod(opresult2663, "++", [1], string2664);
  lineNumber = 825
  var call2667 = callmethod(this,"out", [1], opresult2666);
  lineNumber = 826
  lineNumber = 825
  var opresult2669 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult2669;
  return opresult2669;
};
  var call2670 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block2655);
  lineNumber = 831
  lineNumber = 827
  var string2671 = new GraceString("  %call");
  var opresult2673 = callmethod(string2671, "++", [1], var_auto__95__count);
  var string2674 = new GraceString(" = call %object ");
  var opresult2676 = callmethod(opresult2673, "++", [1], string2674);
  lineNumber = 828
  var string2677 = new GraceString("@callmethod(%object ");
  var opresult2679 = callmethod(opresult2676, "++", [1], string2677);
  var opresult2681 = callmethod(opresult2679, "++", [1], var_obj);
  lineNumber = 829
  var string2682 = new GraceString(", i8* getelementptr([");
  var opresult2684 = callmethod(opresult2681, "++", [1], string2682);
  var opresult2686 = callmethod(opresult2684, "++", [1], var_len);
  var string2687 = new GraceString(" x i8]* @.str");
  var opresult2689 = callmethod(opresult2686, "++", [1], string2687);
  lineNumber = 831
  lineNumber = 1
  lineNumber = 830
  var call2690 = callmethod(var_constants,"size", [0]);
  var opresult2692 = callmethod(opresult2689, "++", [1], call2690);
  var string2693 = new GraceString(",i32 0,i32 0), i32 ");
  var opresult2695 = callmethod(opresult2692, "++", [1], string2693);
  lineNumber = 831
  lineNumber = 1
  lineNumber = 831
  var call2696 = callmethod(var_args,"size", [0]);
  var opresult2698 = callmethod(opresult2695, "++", [1], call2696);
  var string2699 = new GraceString(", %object* %params)");
  var opresult2701 = callmethod(opresult2698, "++", [1], string2699);
  lineNumber = 832
  var call2702 = callmethod(this,"out", [1], opresult2701);
  var call2703 = callmethod(var_constants,"push", [1], var_con);
  var if2546 = call2703;
}
  lineNumber = 835
  lineNumber = 1
  lineNumber = 835
  lineNumber = 834
  var string2704 = new GraceString("%call");
  var opresult2706 = callmethod(string2704, "++", [1], var_auto__95__count);
  var call2707 = callmethod(var_o,"register:=", [1], opresult2706);
  lineNumber = 836
  lineNumber = 835
  var opresult2709 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2709;
  return opresult2709
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilecall"] = func2529;
  lineNumber = 880
var func2710 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 839
  lineNumber = 838
  var string2711 = new GraceString("");
  var var_escval = string2711;
  lineNumber = 839
  lineNumber = 1
  lineNumber = 839
  var call2712 = callmethod(var_o,"value", [0]);
  var call2713 = Grace_length(call2712);
  var quotient2715 = callmethod(call2713, "/", [1], new GraceNum(2));
  var var_l = quotient2715;
  lineNumber = 841
  lineNumber = 840
  var var_i = new GraceNum(0);
  lineNumber = 847
  lineNumber = 841
  lineNumber = 1
  lineNumber = 841
  var call2716 = callmethod(var_o,"value", [0]);
  lineNumber = 847
  var block2717 = Grace_allocObject();
  block2717.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2717.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2717.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2717.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2717.receiver = this;
  block2717.className = 'block<genllvm29:847>';
  block2717.real = function(
var_c
) {
  lineNumber = 844
  lineNumber = 845
  lineNumber = 842
  var modulus2720 = callmethod(var_i, "%", [1], new GraceNum(2));
  var opresult2722 = callmethod(modulus2720, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult2722)) {
  lineNumber = 844
  lineNumber = 843
  var string2723 = new GraceString("\\");
  var opresult2725 = callmethod(var_escval, "++", [1], string2723);
  var_escval = opresult2725;
  var if2718 = opresult2725;
}
  lineNumber = 846
  lineNumber = 845
  var opresult2727 = callmethod(var_escval, "++", [1], var_c);
  var_escval = opresult2727;
  lineNumber = 847
  lineNumber = 846
  var opresult2729 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult2729;
  return opresult2729;
};
  var call2730 = callmethod(Grace_prelude,"for()do", [1, 1], call2716, block2717);
  lineNumber = 849
  lineNumber = 848
  var string2731 = new GraceString("  %tmp");
  var opresult2733 = callmethod(string2731, "++", [1], var_auto__95__count);
  var string2734 = new GraceString(" = load %object* @.octlit");
  var opresult2736 = callmethod(opresult2733, "++", [1], string2734);
  lineNumber = 849
  var opresult2738 = callmethod(opresult2736, "++", [1], var_auto__95__count);
  lineNumber = 850
  var call2739 = callmethod(this,"out", [1], opresult2738);
  lineNumber = 851
  lineNumber = 850
  var string2740 = new GraceString("  %cmp");
  var opresult2742 = callmethod(string2740, "++", [1], var_auto__95__count);
  var string2743 = new GraceString(" = icmp ne %object %tmp");
  var opresult2745 = callmethod(opresult2742, "++", [1], string2743);
  lineNumber = 851
  var opresult2747 = callmethod(opresult2745, "++", [1], var_auto__95__count);
  var string2748 = new GraceString(", null");
  var opresult2750 = callmethod(opresult2747, "++", [1], string2748);
  lineNumber = 852
  var call2751 = callmethod(this,"out", [1], opresult2750);
  lineNumber = 854
  lineNumber = 852
  var string2752 = new GraceString("  br i1 %cmp");
  var opresult2754 = callmethod(string2752, "++", [1], var_auto__95__count);
  var string2755 = new GraceString(", label %octlit");
  var opresult2757 = callmethod(opresult2754, "++", [1], string2755);
  lineNumber = 853
  var opresult2759 = callmethod(opresult2757, "++", [1], var_auto__95__count);
  var string2760 = new GraceString(".already, label %octlit");
  var opresult2762 = callmethod(opresult2759, "++", [1], string2760);
  lineNumber = 854
  var opresult2764 = callmethod(opresult2762, "++", [1], var_auto__95__count);
  var string2765 = new GraceString(".define");
  var opresult2767 = callmethod(opresult2764, "++", [1], string2765);
  lineNumber = 855
  var call2768 = callmethod(this,"out", [1], opresult2767);
  var string2769 = new GraceString("octlit");
  var opresult2771 = callmethod(string2769, "++", [1], var_auto__95__count);
  var string2772 = new GraceString(".already");
  var opresult2774 = callmethod(opresult2771, "++", [1], string2772);
  lineNumber = 856
  var call2775 = callmethod(this,"beginblock", [1], opresult2774);
  lineNumber = 857
  lineNumber = 856
  var string2776 = new GraceString("  %alreadyoctets");
  var opresult2778 = callmethod(string2776, "++", [1], var_auto__95__count);
  var string2779 = new GraceString(" = load %object* @.octlit");
  var opresult2781 = callmethod(opresult2778, "++", [1], string2779);
  lineNumber = 857
  var opresult2783 = callmethod(opresult2781, "++", [1], var_auto__95__count);
  lineNumber = 858
  var call2784 = callmethod(this,"out", [1], opresult2783);
  var string2785 = new GraceString("  br label %octlit");
  var opresult2787 = callmethod(string2785, "++", [1], var_auto__95__count);
  var string2788 = new GraceString(".end");
  var opresult2790 = callmethod(opresult2787, "++", [1], string2788);
  lineNumber = 859
  var call2791 = callmethod(this,"out", [1], opresult2790);
  var string2792 = new GraceString("octlit");
  var opresult2794 = callmethod(string2792, "++", [1], var_auto__95__count);
  var string2795 = new GraceString(".define");
  var opresult2797 = callmethod(opresult2794, "++", [1], string2795);
  lineNumber = 860
  var call2798 = callmethod(this,"beginblock", [1], opresult2797);
  var string2799 = new GraceString("  %oct");
  var opresult2801 = callmethod(string2799, "++", [1], var_auto__95__count);
  var string2802 = new GraceString(" = getelementptr [");
  var opresult2804 = callmethod(opresult2801, "++", [1], string2802);
  var opresult2806 = callmethod(opresult2804, "++", [1], var_l);
  var string2807 = new GraceString(" x i8]* @.oct");
  var opresult2809 = callmethod(opresult2806, "++", [1], string2807);
  lineNumber = 1
  lineNumber = 860
  var call2810 = callmethod(var_constants,"size", [0]);
  var opresult2812 = callmethod(opresult2809, "++", [1], call2810);
  var string2813 = new GraceString(", i32 0, i32 0");
  var opresult2815 = callmethod(opresult2812, "++", [1], string2813);
  lineNumber = 861
  var call2816 = callmethod(this,"out", [1], opresult2815);
  lineNumber = 863
  lineNumber = 861
  var string2817 = new GraceString("  %defoctets");
  var opresult2819 = callmethod(string2817, "++", [1], var_auto__95__count);
  var string2820 = new GraceString(" = call %object ");
  var opresult2822 = callmethod(opresult2819, "++", [1], string2820);
  lineNumber = 862
  var string2823 = new GraceString("@alloc_Octets(i8* ");
  var opresult2825 = callmethod(opresult2822, "++", [1], string2823);
  lineNumber = 863
  var string2826 = new GraceString("%oct");
  var opresult2828 = callmethod(opresult2825, "++", [1], string2826);
  var opresult2830 = callmethod(opresult2828, "++", [1], var_auto__95__count);
  var string2831 = new GraceString(", i32 ");
  var opresult2833 = callmethod(opresult2830, "++", [1], string2831);
  var opresult2835 = callmethod(opresult2833, "++", [1], var_l);
  var string2836 = new GraceString(")");
  var opresult2838 = callmethod(opresult2835, "++", [1], string2836);
  lineNumber = 864
  var call2839 = callmethod(this,"out", [1], opresult2838);
  lineNumber = 865
  lineNumber = 864
  var string2840 = new GraceString("  store %object %defoctets");
  var opresult2842 = callmethod(string2840, "++", [1], var_auto__95__count);
  var string2843 = new GraceString(", %object* ");
  var opresult2845 = callmethod(opresult2842, "++", [1], string2843);
  lineNumber = 865
  var string2846 = new GraceString("@.octlit");
  var opresult2848 = callmethod(opresult2845, "++", [1], string2846);
  var opresult2850 = callmethod(opresult2848, "++", [1], var_auto__95__count);
  lineNumber = 866
  var call2851 = callmethod(this,"out", [1], opresult2850);
  var string2852 = new GraceString("br label %octlit");
  var opresult2854 = callmethod(string2852, "++", [1], var_auto__95__count);
  var string2855 = new GraceString(".end");
  var opresult2857 = callmethod(opresult2854, "++", [1], string2855);
  lineNumber = 867
  var call2858 = callmethod(this,"out", [1], opresult2857);
  var string2859 = new GraceString("octlit");
  var opresult2861 = callmethod(string2859, "++", [1], var_auto__95__count);
  var string2862 = new GraceString(".end");
  var opresult2864 = callmethod(opresult2861, "++", [1], string2862);
  lineNumber = 868
  var call2865 = callmethod(this,"beginblock", [1], opresult2864);
  lineNumber = 871
  lineNumber = 868
  var string2866 = new GraceString(" %octets");
  var opresult2868 = callmethod(string2866, "++", [1], var_auto__95__count);
  var string2869 = new GraceString(" = phi %object [%alreadyoctets");
  var opresult2871 = callmethod(opresult2868, "++", [1], string2869);
  lineNumber = 869
  var opresult2873 = callmethod(opresult2871, "++", [1], var_auto__95__count);
  var string2874 = new GraceString(", %octlit");
  var opresult2876 = callmethod(opresult2873, "++", [1], string2874);
  var opresult2878 = callmethod(opresult2876, "++", [1], var_auto__95__count);
  var string2879 = new GraceString(".already], ");
  var opresult2881 = callmethod(opresult2878, "++", [1], string2879);
  lineNumber = 870
  var string2882 = new GraceString("[%defoctets");
  var opresult2884 = callmethod(opresult2881, "++", [1], string2882);
  var opresult2886 = callmethod(opresult2884, "++", [1], var_auto__95__count);
  var string2887 = new GraceString(", %octlit");
  var opresult2889 = callmethod(opresult2886, "++", [1], string2887);
  var opresult2891 = callmethod(opresult2889, "++", [1], var_auto__95__count);
  lineNumber = 871
  var string2892 = new GraceString(".define]");
  var opresult2894 = callmethod(opresult2891, "++", [1], string2892);
  lineNumber = 872
  var call2895 = callmethod(this,"out", [1], opresult2894);
  lineNumber = 874
  lineNumber = 872
  var string2896 = new GraceString("@.oct");
  lineNumber = 874
  lineNumber = 1
  lineNumber = 872
  var call2897 = callmethod(var_constants,"size", [0]);
  var opresult2899 = callmethod(string2896, "++", [1], call2897);
  var string2900 = new GraceString(" = private unnamed_addr ");
  var opresult2902 = callmethod(opresult2899, "++", [1], string2900);
  lineNumber = 873
  var string2903 = new GraceString("constant [");
  var opresult2905 = callmethod(opresult2902, "++", [1], string2903);
  var opresult2907 = callmethod(opresult2905, "++", [1], var_l);
  var string2908 = new GraceString(" x i8] c\"");
  var opresult2910 = callmethod(opresult2907, "++", [1], string2908);
  var opresult2912 = callmethod(opresult2910, "++", [1], var_escval);
  var string2913 = new GraceString("\"");
  var opresult2915 = callmethod(opresult2912, "++", [1], string2913);
  var var_con = opresult2915;
  lineNumber = 874
  var call2916 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 877
  lineNumber = 875
  var string2917 = new GraceString("@.octlit");
  var opresult2919 = callmethod(string2917, "++", [1], var_auto__95__count);
  lineNumber = 876
  var string2920 = new GraceString(" = private global %object null");
  var opresult2922 = callmethod(opresult2919, "++", [1], string2920);
  var_con = opresult2922;
  lineNumber = 877
  var call2923 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 879
  lineNumber = 1
  lineNumber = 879
  lineNumber = 878
  var string2924 = new GraceString("%octets");
  var opresult2926 = callmethod(string2924, "++", [1], var_auto__95__count);
  var call2927 = callmethod(var_o,"register:=", [1], opresult2926);
  lineNumber = 880
  lineNumber = 879
  var opresult2929 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2929;
  return opresult2929
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileoctets"] = func2710;
  lineNumber = 927
var func2930 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 882
  var string2931 = new GraceString("; Import of ");
  lineNumber = 1
  lineNumber = 882
  lineNumber = 1
  lineNumber = 882
  var call2932 = callmethod(var_o,"value", [0]);
  var call2933 = callmethod(call2932,"value", [0]);
  var opresult2935 = callmethod(string2931, "++", [1], call2933);
  lineNumber = 883
  var call2936 = callmethod(this,"out", [1], opresult2935);
  lineNumber = 884
  var var_con;
  lineNumber = 1
  lineNumber = 884
  lineNumber = 1
  lineNumber = 884
  lineNumber = 1
  lineNumber = 884
  var call2937 = callmethod(var_o,"value", [0]);
  var call2938 = callmethod(call2937,"value", [0]);
  var call2939 = callmethod(call2938,"_escape", [0]);
  var var_nm = call2939;
  lineNumber = 886
  lineNumber = 885
  var string2940 = new GraceString("@\".module.");
  var opresult2942 = callmethod(string2940, "++", [1], var_nm);
  var string2943 = new GraceString("\"");
  var opresult2945 = callmethod(opresult2942, "++", [1], string2943);
  var var_modg = opresult2945;
  lineNumber = 887
  lineNumber = 886
  var var_sblock = var_bblock;
  lineNumber = 887
  var string2946 = new GraceString("  %tmp");
  var opresult2948 = callmethod(string2946, "++", [1], var_auto__95__count);
  var string2949 = new GraceString(" = load %object* ");
  var opresult2951 = callmethod(opresult2948, "++", [1], string2949);
  var opresult2953 = callmethod(opresult2951, "++", [1], var_modg);
  lineNumber = 888
  var call2954 = callmethod(this,"out", [1], opresult2953);
  lineNumber = 889
  lineNumber = 888
  var string2955 = new GraceString("  %cmp");
  var opresult2957 = callmethod(string2955, "++", [1], var_auto__95__count);
  var string2958 = new GraceString(" = icmp ne %object %tmp");
  var opresult2960 = callmethod(opresult2957, "++", [1], string2958);
  var opresult2962 = callmethod(opresult2960, "++", [1], var_auto__95__count);
  lineNumber = 889
  var string2963 = new GraceString(", null");
  var opresult2965 = callmethod(opresult2962, "++", [1], string2963);
  lineNumber = 890
  var call2966 = callmethod(this,"out", [1], opresult2965);
  lineNumber = 891
  lineNumber = 890
  var string2967 = new GraceString("  br i1 %cmp");
  var opresult2969 = callmethod(string2967, "++", [1], var_auto__95__count);
  var string2970 = new GraceString(", label %\"import.");
  var opresult2972 = callmethod(opresult2969, "++", [1], string2970);
  var opresult2974 = callmethod(opresult2972, "++", [1], var_nm);
  lineNumber = 891
  var string2975 = new GraceString(".already\", label %\"import.");
  var opresult2977 = callmethod(opresult2974, "++", [1], string2975);
  var opresult2979 = callmethod(opresult2977, "++", [1], var_nm);
  var string2980 = new GraceString(".define\"");
  var opresult2982 = callmethod(opresult2979, "++", [1], string2980);
  lineNumber = 892
  var call2983 = callmethod(this,"out", [1], opresult2982);
  var string2984 = new GraceString("import.");
  var opresult2986 = callmethod(string2984, "++", [1], var_nm);
  var string2987 = new GraceString(".already");
  var opresult2989 = callmethod(opresult2986, "++", [1], string2987);
  lineNumber = 893
  var call2990 = callmethod(this,"beginblock", [1], opresult2989);
  var string2991 = new GraceString("  %alreadymod");
  var opresult2993 = callmethod(string2991, "++", [1], var_auto__95__count);
  var string2994 = new GraceString(" = load %object* ");
  var opresult2996 = callmethod(opresult2993, "++", [1], string2994);
  var opresult2998 = callmethod(opresult2996, "++", [1], var_modg);
  lineNumber = 894
  var call2999 = callmethod(this,"out", [1], opresult2998);
  var string3000 = new GraceString("  br label %\"import.");
  var opresult3002 = callmethod(string3000, "++", [1], var_nm);
  var string3003 = new GraceString(".end\"");
  var opresult3005 = callmethod(opresult3002, "++", [1], string3003);
  lineNumber = 895
  var call3006 = callmethod(this,"out", [1], opresult3005);
  var string3007 = new GraceString("import.");
  var opresult3009 = callmethod(string3007, "++", [1], var_nm);
  var string3010 = new GraceString(".define");
  var opresult3012 = callmethod(opresult3009, "++", [1], string3010);
  lineNumber = 896
  var call3013 = callmethod(this,"beginblock", [1], opresult3012);
  lineNumber = 906
  lineNumber = 896
  var call3015 = callmethod(var_staticmodules,"contains", [1], var_nm);
  if (Grace_isTrue(call3015)) {
  lineNumber = 898
  lineNumber = 897
  var string3016 = new GraceString("  %\"tmp_mod_");
  var opresult3018 = callmethod(string3016, "++", [1], var_nm);
  var string3019 = new GraceString("\" = call %object @module_");
  var opresult3021 = callmethod(opresult3018, "++", [1], string3019);
  lineNumber = 898
  var opresult3023 = callmethod(opresult3021, "++", [1], var_nm);
  var string3024 = new GraceString("_init()");
  var opresult3026 = callmethod(opresult3023, "++", [1], string3024);
  lineNumber = 899
  var call3027 = callmethod(this,"out", [1], opresult3026);
  var if3014 = call3027;
  } else {
  lineNumber = 901
  lineNumber = 900
  var string3028 = new GraceString("@\".str.module.");
  var opresult3030 = callmethod(string3028, "++", [1], var_nm);
  var string3031 = new GraceString("\"");
  var opresult3033 = callmethod(opresult3030, "++", [1], string3031);
  var var_mn = opresult3033;
  lineNumber = 901
  lineNumber = 1
  lineNumber = 901
  var string3034 = new GraceString("utf-8");
  var call3035 = callmethod(var_nm,"encode", [1], string3034);
  var call3036 = callmethod(call3035,"size", [0]);
  var opresult3038 = callmethod(call3036, "+", [1], new GraceNum(1));
  var var_l = opresult3038;
  lineNumber = 903
  lineNumber = 904
  lineNumber = 902
  var string3039 = new GraceString(" = private unnamed_addr constant [");
  var opresult3041 = callmethod(var_mn, "++", [1], string3039);
  var opresult3043 = callmethod(opresult3041, "++", [1], var_l);
  var string3044 = new GraceString(" x i8] ");
  var opresult3046 = callmethod(opresult3043, "++", [1], string3044);
  lineNumber = 903
  var string3047 = new GraceString(" c\"");
  var opresult3049 = callmethod(opresult3046, "++", [1], string3047);
  lineNumber = 1
  lineNumber = 903
  var call3050 = callmethod(var_nm,"_escape", [0]);
  var opresult3052 = callmethod(opresult3049, "++", [1], call3050);
  var string3053 = new GraceString("\\00\"");
  var opresult3055 = callmethod(opresult3052, "++", [1], string3053);
  var_con = opresult3055;
  lineNumber = 904
  var call3056 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 906
  lineNumber = 905
  var string3057 = new GraceString("  %\"tmp_mod_");
  var opresult3059 = callmethod(string3057, "++", [1], var_nm);
  var string3060 = new GraceString("\" = call %object @dlmodule(i8 *");
  var opresult3062 = callmethod(opresult3059, "++", [1], string3060);
  lineNumber = 906
  var string3063 = new GraceString(" getelementptr([");
  var opresult3065 = callmethod(opresult3062, "++", [1], string3063);
  var opresult3067 = callmethod(opresult3065, "++", [1], var_l);
  var string3068 = new GraceString(" x i8]* ");
  var opresult3070 = callmethod(opresult3067, "++", [1], string3068);
  var opresult3072 = callmethod(opresult3070, "++", [1], var_mn);
  var string3073 = new GraceString(",i32 0,i32 0))");
  var opresult3075 = callmethod(opresult3072, "++", [1], string3073);
  lineNumber = 907
  var call3076 = callmethod(this,"out", [1], opresult3075);
  var if3014 = call3076;
}
  lineNumber = 909
  lineNumber = 908
  var string3077 = new GraceString("  store %object %\"tmp_mod_");
  var opresult3079 = callmethod(string3077, "++", [1], var_nm);
  lineNumber = 909
  var string3080 = new GraceString("\", %object* @\".module.");
  var opresult3082 = callmethod(opresult3079, "++", [1], string3080);
  var opresult3084 = callmethod(opresult3082, "++", [1], var_nm);
  var string3085 = new GraceString("\"");
  var opresult3087 = callmethod(opresult3084, "++", [1], string3085);
  lineNumber = 910
  var call3088 = callmethod(this,"out", [1], opresult3087);
  lineNumber = 911
  lineNumber = 910
  var string3089 = new GraceString("  store %object %\"tmp_mod_");
  var opresult3091 = callmethod(string3089, "++", [1], var_nm);
  var string3092 = new GraceString("\", %object* @\".module.");
  var opresult3094 = callmethod(opresult3091, "++", [1], string3092);
  lineNumber = 911
  var opresult3096 = callmethod(opresult3094, "++", [1], var_nm);
  var string3097 = new GraceString("\"");
  var opresult3099 = callmethod(opresult3096, "++", [1], string3097);
  lineNumber = 912
  var call3100 = callmethod(this,"out", [1], opresult3099);
  var string3101 = new GraceString("  br label %\"import.");
  var opresult3103 = callmethod(string3101, "++", [1], var_nm);
  var string3104 = new GraceString(".end\"");
  var opresult3106 = callmethod(opresult3103, "++", [1], string3104);
  lineNumber = 913
  var call3107 = callmethod(this,"out", [1], opresult3106);
  var string3108 = new GraceString("import.");
  var opresult3110 = callmethod(string3108, "++", [1], var_nm);
  var string3111 = new GraceString(".end");
  var opresult3113 = callmethod(opresult3110, "++", [1], string3111);
  lineNumber = 914
  var call3114 = callmethod(this,"beginblock", [1], opresult3113);
  lineNumber = 916
  lineNumber = 914
  var string3115 = new GraceString("  %\"tmp_modv_");
  var opresult3117 = callmethod(string3115, "++", [1], var_nm);
  var string3118 = new GraceString("\" = phi %object [%alreadymod");
  var opresult3120 = callmethod(opresult3117, "++", [1], string3118);
  lineNumber = 915
  var opresult3122 = callmethod(opresult3120, "++", [1], var_auto__95__count);
  var string3123 = new GraceString(", %\"import.");
  var opresult3125 = callmethod(opresult3122, "++", [1], string3123);
  var opresult3127 = callmethod(opresult3125, "++", [1], var_nm);
  var string3128 = new GraceString(".already\"], ");
  var opresult3130 = callmethod(opresult3127, "++", [1], string3128);
  lineNumber = 916
  var string3131 = new GraceString("[%\"tmp_mod_");
  var opresult3133 = callmethod(opresult3130, "++", [1], string3131);
  var opresult3135 = callmethod(opresult3133, "++", [1], var_nm);
  var string3136 = new GraceString("\", %\"import.");
  var opresult3138 = callmethod(opresult3135, "++", [1], string3136);
  var opresult3140 = callmethod(opresult3138, "++", [1], var_nm);
  var string3141 = new GraceString(".define\"]");
  var opresult3143 = callmethod(opresult3140, "++", [1], string3141);
  lineNumber = 917
  var call3144 = callmethod(this,"out", [1], opresult3143);
  var string3145 = new GraceString("  %\"var_");
  var opresult3147 = callmethod(string3145, "++", [1], var_nm);
  var string3148 = new GraceString("\" = call %object* @alloc_var()");
  var opresult3150 = callmethod(opresult3147, "++", [1], string3148);
  lineNumber = 918
  var call3151 = callmethod(this,"out", [1], opresult3150);
  lineNumber = 919
  lineNumber = 918
  var string3152 = new GraceString("  store %object %\"tmp_modv_");
  var opresult3154 = callmethod(string3152, "++", [1], var_nm);
  lineNumber = 919
  var string3155 = new GraceString("\", %object* %\"var_");
  var opresult3157 = callmethod(opresult3154, "++", [1], string3155);
  var opresult3159 = callmethod(opresult3157, "++", [1], var_nm);
  var string3160 = new GraceString("\"");
  var opresult3162 = callmethod(opresult3159, "++", [1], string3160);
  lineNumber = 920
  var call3163 = callmethod(this,"out", [1], opresult3162);
  lineNumber = 921
  lineNumber = 920
  var string3164 = new GraceString("@\".module.");
  var opresult3166 = callmethod(string3164, "++", [1], var_nm);
  var string3167 = new GraceString("\" = weak global %object null");
  var opresult3169 = callmethod(opresult3166, "++", [1], string3167);
  var_con = opresult3169;
  lineNumber = 921
  var call3170 = callmethod(var_modules,"push", [1], var_nm);
  lineNumber = 922
  var call3171 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 924
  lineNumber = 923
  var string3172 = new GraceString("declare %object @\"module_");
  var opresult3174 = callmethod(string3172, "++", [1], var_nm);
  var string3175 = new GraceString("_init\"()");
  var opresult3177 = callmethod(opresult3174, "++", [1], string3175);
  var_con = opresult3177;
  lineNumber = 924
  var call3178 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 926
  lineNumber = 925
  var opresult3180 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3180;
  lineNumber = 927
  lineNumber = 1
  lineNumber = 926
  var string3181 = new GraceString("%none");
  var call3182 = callmethod(var_o,"register:=", [1], string3181);
  return call3182
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileimport"] = func2930;
  lineNumber = 937
var func3183 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 929
  lineNumber = 1
  lineNumber = 929
  var call3184 = callmethod(var_o,"value", [0]);
  lineNumber = 930
  var call3185 = callmethod(this,"compilenode", [1], call3184);
  var var_reg = call3185;
  lineNumber = 934
  lineNumber = 930
  if (Grace_isTrue(var_inBlock)) {
  lineNumber = 931
  var string3187 = new GraceString("  call void @block_return(%object %realself, %object ");
  var opresult3189 = callmethod(string3187, "++", [1], var_reg);
  var string3190 = new GraceString(")");
  var opresult3192 = callmethod(opresult3189, "++", [1], string3190);
  lineNumber = 932
  var call3193 = callmethod(this,"out", [1], opresult3192);
  var if3186 = call3193;
  } else {
  lineNumber = 933
  var string3194 = new GraceString("  ret %object ");
  var opresult3196 = callmethod(string3194, "++", [1], var_reg);
  lineNumber = 934
  var call3197 = callmethod(this,"out", [1], opresult3196);
  var string3198 = new GraceString("postret");
  var opresult3200 = callmethod(string3198, "++", [1], var_auto__95__count);
  lineNumber = 935
  var call3201 = callmethod(this,"beginblock", [1], opresult3200);
  var if3186 = call3201;
}
  lineNumber = 937
  lineNumber = 1
  lineNumber = 936
  var string3202 = new GraceString("%none");
  var call3203 = callmethod(var_o,"register:=", [1], string3202);
  return call3203
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilereturn"] = func3183;
  lineNumber = 953
var func3204 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 940
  lineNumber = 1
  lineNumber = 939
  var call3205 = callmethod(var_o,"value", [0]);
  var var_cnum = call3205;
  lineNumber = 941
  lineNumber = 940
  var bool3206 = new GraceBoolean(false)
  var var_havedot = bool3206;
  lineNumber = 944
  lineNumber = 941
  lineNumber = 944
  var block3207 = Grace_allocObject();
  block3207.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3207.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3207.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3207.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3207.receiver = this;
  block3207.className = 'block<genllvm29:944>';
  block3207.real = function(
var_c
) {
  lineNumber = 945
  lineNumber = 942
  var string3209 = new GraceString(".");
  var opresult3211 = callmethod(var_c, "==", [1], string3209);
  if (Grace_isTrue(opresult3211)) {
  lineNumber = 944
  lineNumber = 943
  var bool3212 = new GraceBoolean(true)
  var_havedot = bool3212;
  var if3208 = bool3212;
}
  return if3208;
};
  var call3213 = callmethod(Grace_prelude,"for()do", [1, 1], var_cnum, block3207);
  lineNumber = 948
  lineNumber = 949
  lineNumber = 1
  lineNumber = 946
  var call3215 = callmethod(var_havedot,"not", [0]);
  if (Grace_isTrue(call3215)) {
  lineNumber = 948
  lineNumber = 947
  var string3216 = new GraceString(".0");
  var opresult3218 = callmethod(var_cnum, "++", [1], string3216);
  var_cnum = opresult3218;
  var if3214 = opresult3218;
}
  lineNumber = 950
  lineNumber = 949
  var string3219 = new GraceString("  %num");
  var opresult3221 = callmethod(string3219, "++", [1], var_auto__95__count);
  var string3222 = new GraceString(" = call %object @alloc_Float64(double ");
  var opresult3224 = callmethod(opresult3221, "++", [1], string3222);
  lineNumber = 950
  var opresult3226 = callmethod(opresult3224, "++", [1], var_cnum);
  var string3227 = new GraceString(")");
  var opresult3229 = callmethod(opresult3226, "++", [1], string3227);
  lineNumber = 951
  var call3230 = callmethod(this,"out", [1], opresult3229);
  lineNumber = 952
  lineNumber = 1
  lineNumber = 952
  lineNumber = 951
  var string3231 = new GraceString("%num");
  var opresult3233 = callmethod(string3231, "++", [1], var_auto__95__count);
  var call3234 = callmethod(var_o,"register:=", [1], opresult3233);
  lineNumber = 953
  lineNumber = 952
  var opresult3236 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3236;
  return opresult3236
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilenum"] = func3204;
  lineNumber = 1109
var func3237 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 958
  lineNumber = 960
  lineNumber = 955
  lineNumber = 960
  lineNumber = 1
  lineNumber = 955
  var call3239 = callmethod(var_o,"line", [0]);
  var opresult3241 = callmethod(var_linenum, "/=", [1], call3239);
  if (Grace_isTrue(opresult3241)) {
  lineNumber = 957
  lineNumber = 1
  lineNumber = 956
  var call3242 = callmethod(var_o,"line", [0]);
  var_linenum = call3242;
  lineNumber = 957
  var string3243 = new GraceString("; Begin line ");
  var opresult3245 = callmethod(string3243, "++", [1], var_linenum);
  lineNumber = 958
  var call3246 = callmethod(this,"out", [1], opresult3245);
  var string3247 = new GraceString("  call void @setline(i32 ");
  var opresult3249 = callmethod(string3247, "++", [1], var_linenum);
  var string3250 = new GraceString(")");
  var opresult3252 = callmethod(opresult3249, "++", [1], string3250);
  lineNumber = 959
  var call3253 = callmethod(this,"out", [1], opresult3252);
  var if3238 = call3253;
}
  lineNumber = 961
  lineNumber = 963
  lineNumber = 1
  lineNumber = 960
  var call3255 = callmethod(var_o,"kind", [0]);
  var string3256 = new GraceString("num");
  var opresult3258 = callmethod(call3255, "==", [1], string3256);
  if (Grace_isTrue(opresult3258)) {
  lineNumber = 961
  lineNumber = 962
  var call3259 = callmethod(this,"compilenum", [1], var_o);
  var if3254 = call3259;
}
  lineNumber = 964
  lineNumber = 963
  var string3260 = new GraceString("");
  var var_l = string3260;
  lineNumber = 1000
  lineNumber = 1001
  lineNumber = 1
  lineNumber = 964
  var call3262 = callmethod(var_o,"kind", [0]);
  var string3263 = new GraceString("string");
  var opresult3265 = callmethod(call3262, "==", [1], string3263);
  if (Grace_isTrue(opresult3265)) {
  lineNumber = 965
  lineNumber = 1
  lineNumber = 965
  var call3266 = callmethod(var_o,"value", [0]);
  var call3267 = Grace_length(call3266);
  var_l = call3267;
  lineNumber = 967
  lineNumber = 966
  var opresult3269 = callmethod(var_l, "+", [1], new GraceNum(1));
  var_l = opresult3269;
  lineNumber = 967
  lineNumber = 1
  lineNumber = 967
  lineNumber = 1
  lineNumber = 967
  lineNumber = 1
  lineNumber = 967
  var call3270 = callmethod(var_o,"value", [0]);
  var call3271 = callmethod(call3270,"_escape", [0]);
  var call3272 = callmethod(var_o,"value:=", [1], call3271);
  lineNumber = 969
  lineNumber = 968
  var string3273 = new GraceString("  %tmp");
  var opresult3275 = callmethod(string3273, "++", [1], var_auto__95__count);
  var string3276 = new GraceString(" = load %object* @.strlit");
  var opresult3278 = callmethod(opresult3275, "++", [1], string3276);
  lineNumber = 969
  var opresult3280 = callmethod(opresult3278, "++", [1], var_auto__95__count);
  lineNumber = 970
  var call3281 = callmethod(this,"out", [1], opresult3280);
  lineNumber = 971
  lineNumber = 970
  var string3282 = new GraceString("  %cmp");
  var opresult3284 = callmethod(string3282, "++", [1], var_auto__95__count);
  var string3285 = new GraceString(" = icmp ne %object %tmp");
  var opresult3287 = callmethod(opresult3284, "++", [1], string3285);
  lineNumber = 971
  var opresult3289 = callmethod(opresult3287, "++", [1], var_auto__95__count);
  var string3290 = new GraceString(", null");
  var opresult3292 = callmethod(opresult3289, "++", [1], string3290);
  lineNumber = 972
  var call3293 = callmethod(this,"out", [1], opresult3292);
  lineNumber = 974
  lineNumber = 972
  var string3294 = new GraceString("  br i1 %cmp");
  var opresult3296 = callmethod(string3294, "++", [1], var_auto__95__count);
  var string3297 = new GraceString(", label %strlit");
  var opresult3299 = callmethod(opresult3296, "++", [1], string3297);
  lineNumber = 973
  var opresult3301 = callmethod(opresult3299, "++", [1], var_auto__95__count);
  var string3302 = new GraceString(".already, label %strlit");
  var opresult3304 = callmethod(opresult3301, "++", [1], string3302);
  lineNumber = 974
  var opresult3306 = callmethod(opresult3304, "++", [1], var_auto__95__count);
  var string3307 = new GraceString(".define");
  var opresult3309 = callmethod(opresult3306, "++", [1], string3307);
  lineNumber = 975
  var call3310 = callmethod(this,"out", [1], opresult3309);
  var string3311 = new GraceString("strlit");
  var opresult3313 = callmethod(string3311, "++", [1], var_auto__95__count);
  var string3314 = new GraceString(".already");
  var opresult3316 = callmethod(opresult3313, "++", [1], string3314);
  lineNumber = 976
  var call3317 = callmethod(this,"beginblock", [1], opresult3316);
  lineNumber = 977
  lineNumber = 976
  var string3318 = new GraceString("  %alreadystring");
  var opresult3320 = callmethod(string3318, "++", [1], var_auto__95__count);
  var string3321 = new GraceString(" = load %object* @.strlit");
  var opresult3323 = callmethod(opresult3320, "++", [1], string3321);
  lineNumber = 977
  var opresult3325 = callmethod(opresult3323, "++", [1], var_auto__95__count);
  lineNumber = 978
  var call3326 = callmethod(this,"out", [1], opresult3325);
  var string3327 = new GraceString("  br label %strlit");
  var opresult3329 = callmethod(string3327, "++", [1], var_auto__95__count);
  var string3330 = new GraceString(".end");
  var opresult3332 = callmethod(opresult3329, "++", [1], string3330);
  lineNumber = 979
  var call3333 = callmethod(this,"out", [1], opresult3332);
  var string3334 = new GraceString("strlit");
  var opresult3336 = callmethod(string3334, "++", [1], var_auto__95__count);
  var string3337 = new GraceString(".define");
  var opresult3339 = callmethod(opresult3336, "++", [1], string3337);
  lineNumber = 980
  var call3340 = callmethod(this,"beginblock", [1], opresult3339);
  var string3341 = new GraceString("  %str");
  var opresult3343 = callmethod(string3341, "++", [1], var_auto__95__count);
  var string3344 = new GraceString(" = getelementptr [");
  var opresult3346 = callmethod(opresult3343, "++", [1], string3344);
  var opresult3348 = callmethod(opresult3346, "++", [1], var_l);
  var string3349 = new GraceString(" x i8]* @.str");
  var opresult3351 = callmethod(opresult3348, "++", [1], string3349);
  lineNumber = 1
  lineNumber = 980
  var call3352 = callmethod(var_constants,"size", [0]);
  var opresult3354 = callmethod(opresult3351, "++", [1], call3352);
  var string3355 = new GraceString(", i32 0, i32 0");
  var opresult3357 = callmethod(opresult3354, "++", [1], string3355);
  lineNumber = 981
  var call3358 = callmethod(this,"out", [1], opresult3357);
  lineNumber = 983
  lineNumber = 981
  var string3359 = new GraceString("  %defstring");
  var opresult3361 = callmethod(string3359, "++", [1], var_auto__95__count);
  var string3362 = new GraceString(" = call %object ");
  var opresult3364 = callmethod(opresult3361, "++", [1], string3362);
  lineNumber = 982
  var string3365 = new GraceString("@alloc_String(i8* ");
  var opresult3367 = callmethod(opresult3364, "++", [1], string3365);
  lineNumber = 983
  var string3368 = new GraceString("%str");
  var opresult3370 = callmethod(opresult3367, "++", [1], string3368);
  var opresult3372 = callmethod(opresult3370, "++", [1], var_auto__95__count);
  var string3373 = new GraceString(")");
  var opresult3375 = callmethod(opresult3372, "++", [1], string3373);
  lineNumber = 984
  var call3376 = callmethod(this,"out", [1], opresult3375);
  lineNumber = 985
  lineNumber = 984
  var string3377 = new GraceString("  store %object %defstring");
  var opresult3379 = callmethod(string3377, "++", [1], var_auto__95__count);
  var string3380 = new GraceString(", %object* ");
  var opresult3382 = callmethod(opresult3379, "++", [1], string3380);
  lineNumber = 985
  var string3383 = new GraceString("@.strlit");
  var opresult3385 = callmethod(opresult3382, "++", [1], string3383);
  var opresult3387 = callmethod(opresult3385, "++", [1], var_auto__95__count);
  lineNumber = 986
  var call3388 = callmethod(this,"out", [1], opresult3387);
  var string3389 = new GraceString("br label %strlit");
  var opresult3391 = callmethod(string3389, "++", [1], var_auto__95__count);
  var string3392 = new GraceString(".end");
  var opresult3394 = callmethod(opresult3391, "++", [1], string3392);
  lineNumber = 987
  var call3395 = callmethod(this,"out", [1], opresult3394);
  var string3396 = new GraceString("strlit");
  var opresult3398 = callmethod(string3396, "++", [1], var_auto__95__count);
  var string3399 = new GraceString(".end");
  var opresult3401 = callmethod(opresult3398, "++", [1], string3399);
  lineNumber = 988
  var call3402 = callmethod(this,"beginblock", [1], opresult3401);
  lineNumber = 991
  lineNumber = 988
  var string3403 = new GraceString(" %string");
  var opresult3405 = callmethod(string3403, "++", [1], var_auto__95__count);
  var string3406 = new GraceString(" = phi %object [%alreadystring");
  var opresult3408 = callmethod(opresult3405, "++", [1], string3406);
  lineNumber = 989
  var opresult3410 = callmethod(opresult3408, "++", [1], var_auto__95__count);
  var string3411 = new GraceString(", %strlit");
  var opresult3413 = callmethod(opresult3410, "++", [1], string3411);
  var opresult3415 = callmethod(opresult3413, "++", [1], var_auto__95__count);
  var string3416 = new GraceString(".already], ");
  var opresult3418 = callmethod(opresult3415, "++", [1], string3416);
  lineNumber = 990
  var string3419 = new GraceString("[%defstring");
  var opresult3421 = callmethod(opresult3418, "++", [1], string3419);
  var opresult3423 = callmethod(opresult3421, "++", [1], var_auto__95__count);
  var string3424 = new GraceString(", %strlit");
  var opresult3426 = callmethod(opresult3423, "++", [1], string3424);
  var opresult3428 = callmethod(opresult3426, "++", [1], var_auto__95__count);
  lineNumber = 991
  var string3429 = new GraceString(".define]");
  var opresult3431 = callmethod(opresult3428, "++", [1], string3429);
  lineNumber = 992
  var call3432 = callmethod(this,"out", [1], opresult3431);
  lineNumber = 994
  lineNumber = 992
  var string3433 = new GraceString("@.str");
  lineNumber = 994
  lineNumber = 1
  lineNumber = 992
  var call3434 = callmethod(var_constants,"size", [0]);
  var opresult3436 = callmethod(string3433, "++", [1], call3434);
  var string3437 = new GraceString(" = private unnamed_addr ");
  var opresult3439 = callmethod(opresult3436, "++", [1], string3437);
  lineNumber = 993
  var string3440 = new GraceString("constant [");
  var opresult3442 = callmethod(opresult3439, "++", [1], string3440);
  var opresult3444 = callmethod(opresult3442, "++", [1], var_l);
  var string3445 = new GraceString(" x i8] c\"");
  var opresult3447 = callmethod(opresult3444, "++", [1], string3445);
  lineNumber = 994
  lineNumber = 1
  lineNumber = 993
  var call3448 = callmethod(var_o,"value", [0]);
  var opresult3450 = callmethod(opresult3447, "++", [1], call3448);
  var string3451 = new GraceString("\\00\"");
  var opresult3453 = callmethod(opresult3450, "++", [1], string3451);
  var var_con = opresult3453;
  lineNumber = 994
  var call3454 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 997
  lineNumber = 995
  var string3455 = new GraceString("@.strlit");
  var opresult3457 = callmethod(string3455, "++", [1], var_auto__95__count);
  lineNumber = 996
  var string3458 = new GraceString(" = private global %object null");
  var opresult3460 = callmethod(opresult3457, "++", [1], string3458);
  var_con = opresult3460;
  lineNumber = 997
  var call3461 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 999
  lineNumber = 1
  lineNumber = 999
  lineNumber = 998
  var string3462 = new GraceString("%string");
  var opresult3464 = callmethod(string3462, "++", [1], var_auto__95__count);
  var call3465 = callmethod(var_o,"register:=", [1], opresult3464);
  lineNumber = 1000
  lineNumber = 999
  var opresult3467 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3467;
  var if3261 = opresult3467;
}
  lineNumber = 1002
  lineNumber = 1004
  lineNumber = 1
  lineNumber = 1001
  var call3469 = callmethod(var_o,"kind", [0]);
  var string3470 = new GraceString("index");
  var opresult3472 = callmethod(call3469, "==", [1], string3470);
  if (Grace_isTrue(opresult3472)) {
  lineNumber = 1002
  lineNumber = 1003
  var call3473 = callmethod(this,"compileindex", [1], var_o);
  var if3468 = call3473;
}
  lineNumber = 1005
  lineNumber = 1007
  lineNumber = 1
  lineNumber = 1004
  var call3475 = callmethod(var_o,"kind", [0]);
  var string3476 = new GraceString("octets");
  var opresult3478 = callmethod(call3475, "==", [1], string3476);
  if (Grace_isTrue(opresult3478)) {
  lineNumber = 1005
  lineNumber = 1006
  var call3479 = callmethod(this,"compileoctets", [1], var_o);
  var if3474 = call3479;
}
  lineNumber = 1008
  lineNumber = 1010
  lineNumber = 1
  lineNumber = 1007
  var call3481 = callmethod(var_o,"kind", [0]);
  var string3482 = new GraceString("import");
  var opresult3484 = callmethod(call3481, "==", [1], string3482);
  if (Grace_isTrue(opresult3484)) {
  lineNumber = 1008
  lineNumber = 1009
  var call3485 = callmethod(this,"compileimport", [1], var_o);
  var if3480 = call3485;
}
  lineNumber = 1011
  lineNumber = 1013
  lineNumber = 1
  lineNumber = 1010
  var call3487 = callmethod(var_o,"kind", [0]);
  var string3488 = new GraceString("return");
  var opresult3490 = callmethod(call3487, "==", [1], string3488);
  if (Grace_isTrue(opresult3490)) {
  lineNumber = 1011
  lineNumber = 1012
  var call3491 = callmethod(this,"compilereturn", [1], var_o);
  var if3486 = call3491;
}
  lineNumber = 1014
  lineNumber = 1016
  lineNumber = 1
  lineNumber = 1013
  var call3493 = callmethod(var_o,"kind", [0]);
  var string3494 = new GraceString("generic");
  var opresult3496 = callmethod(call3493, "==", [1], string3494);
  if (Grace_isTrue(opresult3496)) {
  lineNumber = 1014
  lineNumber = 1
  lineNumber = 1014
  lineNumber = 1
  lineNumber = 1014
  var call3497 = callmethod(var_o,"value", [0]);
  lineNumber = 1015
  var call3498 = callmethod(this,"compilenode", [1], call3497);
  lineNumber = 1014
  var call3499 = callmethod(var_o,"register:=", [1], call3498);
  var if3492 = call3499;
}
  lineNumber = 1027
  lineNumber = 1029
  lineNumber = 1
  lineNumber = 1016
  var call3501 = callmethod(var_o,"kind", [0]);
  var string3502 = new GraceString("identifier");
  var opresult3504 = callmethod(call3501, "==", [1], string3502);
  lineNumber = 1029
  lineNumber = 1
  lineNumber = 1017
  var call3505 = callmethod(var_o,"value", [0]);
  var string3506 = new GraceString("true");
  var opresult3508 = callmethod(call3505, "==", [1], string3506);
  lineNumber = 1029
  lineNumber = 1
  lineNumber = 1017
  var call3509 = callmethod(var_o,"value", [0]);
  var string3510 = new GraceString("false");
  var opresult3512 = callmethod(call3509, "==", [1], string3510);
  var opresult3514 = callmethod(opresult3508, "|", [1], opresult3512);
  var opresult3516 = callmethod(opresult3504, "&", [1], opresult3514);
  if (Grace_isTrue(opresult3516)) {
  lineNumber = 1019
  lineNumber = 1018
  var var_val = new GraceNum(0);
  lineNumber = 1021
  lineNumber = 1022
  lineNumber = 1
  lineNumber = 1019
  var call3518 = callmethod(var_o,"value", [0]);
  var string3519 = new GraceString("true");
  var opresult3521 = callmethod(call3518, "==", [1], string3519);
  if (Grace_isTrue(opresult3521)) {
  lineNumber = 1021
  lineNumber = 1020
  var_val = new GraceNum(1);
  var if3517 = new GraceNum(1);
}
  lineNumber = 1023
  lineNumber = 1022
  var string3522 = new GraceString("  %bool");
  var opresult3524 = callmethod(string3522, "++", [1], var_auto__95__count);
  var string3525 = new GraceString(" = call %object ");
  var opresult3527 = callmethod(opresult3524, "++", [1], string3525);
  lineNumber = 1023
  var string3528 = new GraceString("@alloc_Boolean(i32 ");
  var opresult3530 = callmethod(opresult3527, "++", [1], string3528);
  var opresult3532 = callmethod(opresult3530, "++", [1], var_val);
  var string3533 = new GraceString(")");
  var opresult3535 = callmethod(opresult3532, "++", [1], string3533);
  lineNumber = 1024
  var call3536 = callmethod(this,"out", [1], opresult3535);
  lineNumber = 1025
  lineNumber = 1
  lineNumber = 1025
  lineNumber = 1024
  var string3537 = new GraceString("%bool");
  var opresult3539 = callmethod(string3537, "++", [1], var_auto__95__count);
  var call3540 = callmethod(var_o,"register:=", [1], opresult3539);
  lineNumber = 1026
  lineNumber = 1025
  var opresult3542 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3542;
  var if3500 = opresult3542;
  } else {
  lineNumber = 1027
  lineNumber = 1029
  lineNumber = 1
  lineNumber = 1026
  var call3544 = callmethod(var_o,"kind", [0]);
  var string3545 = new GraceString("identifier");
  var opresult3547 = callmethod(call3544, "==", [1], string3545);
  if (Grace_isTrue(opresult3547)) {
  lineNumber = 1027
  lineNumber = 1028
  var call3548 = callmethod(this,"compileidentifier", [1], var_o);
  var if3543 = call3548;
}
  var if3500 = if3543;
}
  lineNumber = 1030
  lineNumber = 1032
  lineNumber = 1
  lineNumber = 1029
  var call3550 = callmethod(var_o,"kind", [0]);
  var string3551 = new GraceString("defdec");
  var opresult3553 = callmethod(call3550, "==", [1], string3551);
  if (Grace_isTrue(opresult3553)) {
  lineNumber = 1030
  lineNumber = 1031
  var call3554 = callmethod(this,"compiledefdec", [1], var_o);
  var if3549 = call3554;
}
  lineNumber = 1033
  lineNumber = 1035
  lineNumber = 1
  lineNumber = 1032
  var call3556 = callmethod(var_o,"kind", [0]);
  var string3557 = new GraceString("vardec");
  var opresult3559 = callmethod(call3556, "==", [1], string3557);
  if (Grace_isTrue(opresult3559)) {
  lineNumber = 1033
  lineNumber = 1034
  var call3560 = callmethod(this,"compilevardec", [1], var_o);
  var if3555 = call3560;
}
  lineNumber = 1036
  lineNumber = 1038
  lineNumber = 1
  lineNumber = 1035
  var call3562 = callmethod(var_o,"kind", [0]);
  var string3563 = new GraceString("block");
  var opresult3565 = callmethod(call3562, "==", [1], string3563);
  if (Grace_isTrue(opresult3565)) {
  lineNumber = 1036
  lineNumber = 1037
  var call3566 = callmethod(this,"compileblock", [1], var_o);
  var if3561 = call3566;
}
  lineNumber = 1041
  lineNumber = 1042
  lineNumber = 1
  lineNumber = 1038
  var call3568 = callmethod(var_o,"kind", [0]);
  var string3569 = new GraceString("method");
  var opresult3571 = callmethod(call3568, "==", [1], string3569);
  if (Grace_isTrue(opresult3571)) {
  lineNumber = 1039
  var string3572 = new GraceString("%self");
  lineNumber = 1040
  var call3573 = callmethod(this,"compilemethod", [3], var_o, string3572, var_topLevelMethodPos);
  lineNumber = 1041
  lineNumber = 1040
  var opresult3575 = callmethod(var_topLevelMethodPos, "+", [1], new GraceNum(1));
  var_topLevelMethodPos = opresult3575;
  var if3567 = opresult3575;
}
  lineNumber = 1043
  lineNumber = 1045
  lineNumber = 1
  lineNumber = 1042
  var call3577 = callmethod(var_o,"kind", [0]);
  var string3578 = new GraceString("array");
  var opresult3580 = callmethod(call3577, "==", [1], string3578);
  if (Grace_isTrue(opresult3580)) {
  lineNumber = 1043
  lineNumber = 1044
  var call3581 = callmethod(this,"compilearray", [1], var_o);
  var if3576 = call3581;
}
  lineNumber = 1046
  lineNumber = 1048
  lineNumber = 1
  lineNumber = 1045
  var call3583 = callmethod(var_o,"kind", [0]);
  var string3584 = new GraceString("bind");
  var opresult3586 = callmethod(call3583, "==", [1], string3584);
  if (Grace_isTrue(opresult3586)) {
  lineNumber = 1046
  lineNumber = 1047
  var call3587 = callmethod(this,"compilebind", [1], var_o);
  var if3582 = call3587;
}
  lineNumber = 1049
  lineNumber = 1051
  lineNumber = 1
  lineNumber = 1048
  var call3589 = callmethod(var_o,"kind", [0]);
  var string3590 = new GraceString("while");
  var opresult3592 = callmethod(call3589, "==", [1], string3590);
  if (Grace_isTrue(opresult3592)) {
  lineNumber = 1049
  lineNumber = 1050
  var call3593 = callmethod(this,"compilewhile", [1], var_o);
  var if3588 = call3593;
}
  lineNumber = 1052
  lineNumber = 1054
  lineNumber = 1
  lineNumber = 1051
  var call3595 = callmethod(var_o,"kind", [0]);
  var string3596 = new GraceString("if");
  var opresult3598 = callmethod(call3595, "==", [1], string3596);
  if (Grace_isTrue(opresult3598)) {
  lineNumber = 1052
  lineNumber = 1053
  var call3599 = callmethod(this,"compileif", [1], var_o);
  var if3594 = call3599;
}
  lineNumber = 1055
  lineNumber = 1057
  lineNumber = 1
  lineNumber = 1054
  var call3601 = callmethod(var_o,"kind", [0]);
  var string3602 = new GraceString("class");
  var opresult3604 = callmethod(call3601, "==", [1], string3602);
  if (Grace_isTrue(opresult3604)) {
  lineNumber = 1055
  lineNumber = 1056
  var call3605 = callmethod(this,"compileclass", [1], var_o);
  var if3600 = call3605;
}
  lineNumber = 1058
  lineNumber = 1060
  lineNumber = 1
  lineNumber = 1057
  var call3607 = callmethod(var_o,"kind", [0]);
  var string3608 = new GraceString("object");
  var opresult3610 = callmethod(call3607, "==", [1], string3608);
  if (Grace_isTrue(opresult3610)) {
  lineNumber = 1058
  lineNumber = 1059
  var call3611 = callmethod(this,"compileobject", [1], var_o);
  var if3606 = call3611;
}
  lineNumber = 1061
  lineNumber = 1063
  lineNumber = 1
  lineNumber = 1060
  var call3613 = callmethod(var_o,"kind", [0]);
  var string3614 = new GraceString("member");
  var opresult3616 = callmethod(call3613, "==", [1], string3614);
  if (Grace_isTrue(opresult3616)) {
  lineNumber = 1061
  lineNumber = 1062
  var call3617 = callmethod(this,"compilemember", [1], var_o);
  var if3612 = call3617;
}
  lineNumber = 1064
  lineNumber = 1066
  lineNumber = 1
  lineNumber = 1063
  var call3619 = callmethod(var_o,"kind", [0]);
  var string3620 = new GraceString("for");
  var opresult3622 = callmethod(call3619, "==", [1], string3620);
  if (Grace_isTrue(opresult3622)) {
  lineNumber = 1064
  lineNumber = 1065
  var call3623 = callmethod(this,"compilefor", [1], var_o);
  var if3618 = call3623;
}
  lineNumber = 1102
  lineNumber = 1105
  lineNumber = 1
  lineNumber = 1066
  var call3625 = callmethod(var_o,"kind", [0]);
  var string3626 = new GraceString("call");
  var opresult3628 = callmethod(call3625, "==", [1], string3626);
  if (Grace_isTrue(opresult3628)) {
  lineNumber = 1102
  lineNumber = 1104
  lineNumber = 1
  lineNumber = 1104
  lineNumber = 1
  lineNumber = 1067
  var call3630 = callmethod(var_o,"value", [0]);
  var call3631 = callmethod(call3630,"value", [0]);
  var string3632 = new GraceString("print");
  var opresult3634 = callmethod(call3631, "==", [1], string3632);
  if (Grace_isTrue(opresult3634)) {
  lineNumber = 1069
  var array3635 = new GraceList([
]);

  var var_args = array3635;
  lineNumber = 1071
  lineNumber = 1069
  lineNumber = 1
  lineNumber = 1069
  var call3636 = callmethod(var_o,"with", [0]);
  lineNumber = 1071
  var block3637 = Grace_allocObject();
  block3637.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3637.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3637.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3637.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3637.receiver = this;
  block3637.className = 'block<genllvm29:1071>';
  block3637.real = function(
var_prm
) {
  lineNumber = 1070
  lineNumber = 1071
  var call3638 = callmethod(this,"compilenode", [1], var_prm);
  var var_r = call3638;
  var call3639 = callmethod(var_args,"push", [1], var_r);
  return call3639;
};
  var call3640 = callmethod(Grace_prelude,"for()do", [1, 1], call3636, block3637);
  lineNumber = 1074
  lineNumber = 1073
  var var_parami = new GraceNum(0);
  lineNumber = 1077
  lineNumber = 1074
  lineNumber = 1077
  var block3641 = Grace_allocObject();
  block3641.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3641.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3641.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3641.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3641.receiver = this;
  block3641.className = 'block<genllvm29:1077>';
  block3641.real = function(
var_arg
) {
  lineNumber = 1075
  var string3642 = new GraceString("  store %object ");
  var opresult3644 = callmethod(string3642, "++", [1], var_arg);
  var string3645 = new GraceString(", %object* %params_");
  var opresult3647 = callmethod(opresult3644, "++", [1], string3645);
  var opresult3649 = callmethod(opresult3647, "++", [1], var_parami);
  var string3650 = new GraceString("");
  var opresult3652 = callmethod(opresult3649, "++", [1], string3650);
  lineNumber = 1076
  var call3653 = callmethod(this,"out", [1], opresult3652);
  lineNumber = 1077
  lineNumber = 1076
  var opresult3655 = callmethod(var_parami, "+", [1], new GraceNum(1));
  var_parami = opresult3655;
  return opresult3655;
};
  var call3656 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block3641);
  lineNumber = 1079
  lineNumber = 1078
  var string3657 = new GraceString("  %call");
  var opresult3659 = callmethod(string3657, "++", [1], var_auto__95__count);
  var string3660 = new GraceString(" = call %object @gracelib_print(%object null, i32 ");
  var opresult3662 = callmethod(opresult3659, "++", [1], string3660);
  lineNumber = 1079
  lineNumber = 1
  lineNumber = 1079
  var call3663 = callmethod(var_args,"size", [0]);
  var opresult3665 = callmethod(opresult3662, "++", [1], call3663);
  var string3666 = new GraceString(", %object* %params)");
  var opresult3668 = callmethod(opresult3665, "++", [1], string3666);
  lineNumber = 1080
  var call3669 = callmethod(this,"out", [1], opresult3668);
  lineNumber = 1081
  lineNumber = 1
  lineNumber = 1081
  lineNumber = 1080
  var string3670 = new GraceString("%call");
  var opresult3672 = callmethod(string3670, "++", [1], var_auto__95__count);
  var call3673 = callmethod(var_o,"register:=", [1], opresult3672);
  lineNumber = 1082
  lineNumber = 1081
  var opresult3675 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3675;
  var if3629 = opresult3675;
  } else {
  lineNumber = 1102
  lineNumber = 1095
  lineNumber = 1
  lineNumber = 1095
  lineNumber = 1
  lineNumber = 1082
  var call3677 = callmethod(var_o,"value", [0]);
  var call3678 = callmethod(call3677,"kind", [0]);
  var string3679 = new GraceString("identifier");
  var opresult3681 = callmethod(call3678, "==", [1], string3679);
  lineNumber = 1095
  lineNumber = 1
  lineNumber = 1095
  lineNumber = 1
  lineNumber = 1083
  var call3682 = callmethod(var_o,"value", [0]);
  var call3683 = callmethod(call3682,"value", [0]);
  var string3684 = new GraceString("length");
  var opresult3686 = callmethod(call3683, "==", [1], string3684);
  var opresult3688 = callmethod(opresult3681, "&", [1], opresult3686);
  if (Grace_isTrue(opresult3688)) {
  lineNumber = 1089
  lineNumber = 1091
  lineNumber = 1
  lineNumber = 1091
  lineNumber = 1
  lineNumber = 1084
  var call3690 = callmethod(var_o,"with", [0]);
  var call3691 = callmethod(call3690,"size", [0]);
  var opresult3693 = callmethod(call3691, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult3693)) {
  lineNumber = 1085
  var string3694 = new GraceString("; PP FOLLOWS");
  lineNumber = 1086
  var call3695 = callmethod(this,"out", [1], string3694);
  var call3696 = callmethod(var_o,"pretty", [1], new GraceNum(0));
  lineNumber = 1087
  var call3697 = callmethod(this,"out", [1], call3696);
  lineNumber = 1088
  lineNumber = 1087
  var string3698 = new GraceString("null");
  var_tmp = string3698;
  var if3689 = string3698;
  } else {
  lineNumber = 1089
  lineNumber = 1
  lineNumber = 1089
  lineNumber = 1
  lineNumber = 1089
  var call3699 = callmethod(var_o,"with", [0]);
  var call3700 = callmethod(call3699,"first", [0]);
  lineNumber = 1090
  var call3701 = callmethod(this,"compilenode", [1], call3700);
  var_tmp = call3701;
  var if3689 = call3701;
}
  lineNumber = 1092
  lineNumber = 1091
  var string3702 = new GraceString("  %call");
  var opresult3704 = callmethod(string3702, "++", [1], var_auto__95__count);
  var string3705 = new GraceString(" = call %object ");
  var opresult3707 = callmethod(opresult3704, "++", [1], string3705);
  lineNumber = 1092
  var string3708 = new GraceString("@gracelib_length(%object ");
  var opresult3710 = callmethod(opresult3707, "++", [1], string3708);
  var opresult3712 = callmethod(opresult3710, "++", [1], var_tmp);
  var string3713 = new GraceString(")");
  var opresult3715 = callmethod(opresult3712, "++", [1], string3713);
  lineNumber = 1093
  var call3716 = callmethod(this,"out", [1], opresult3715);
  lineNumber = 1094
  lineNumber = 1
  lineNumber = 1094
  lineNumber = 1093
  var string3717 = new GraceString("%call");
  var opresult3719 = callmethod(string3717, "++", [1], var_auto__95__count);
  var call3720 = callmethod(var_o,"register:=", [1], opresult3719);
  lineNumber = 1095
  lineNumber = 1094
  var opresult3722 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3722;
  var if3676 = opresult3722;
  } else {
  lineNumber = 1102
  lineNumber = 1101
  lineNumber = 1
  lineNumber = 1101
  lineNumber = 1
  lineNumber = 1095
  var call3724 = callmethod(var_o,"value", [0]);
  var call3725 = callmethod(call3724,"kind", [0]);
  var string3726 = new GraceString("identifier");
  var opresult3728 = callmethod(call3725, "==", [1], string3726);
  lineNumber = 1101
  lineNumber = 1
  lineNumber = 1101
  lineNumber = 1
  lineNumber = 1096
  var call3729 = callmethod(var_o,"value", [0]);
  var call3730 = callmethod(call3729,"value", [0]);
  var string3731 = new GraceString("escapestring");
  var opresult3733 = callmethod(call3730, "==", [1], string3731);
  var opresult3735 = callmethod(opresult3728, "&", [1], opresult3733);
  if (Grace_isTrue(opresult3735)) {
  lineNumber = 1098
  lineNumber = 1
  lineNumber = 1098
  lineNumber = 1
  lineNumber = 1097
  var call3736 = callmethod(var_o,"with", [0]);
  var call3737 = callmethod(call3736,"first", [0]);
  var_tmp = call3737;
  lineNumber = 1098
  var string3738 = new GraceString("_escape");
  var call3739 = callmethod(var_ast,"astmember", [2], string3738, var_tmp);
  var_tmp = call3739;
  lineNumber = 1099
  var array3740 = new GraceList([
]);

  var call3741 = callmethod(var_ast,"astcall", [2], var_tmp, array3740);
  var_tmp = call3741;
  lineNumber = 1100
  lineNumber = 1
  lineNumber = 1100
  lineNumber = 1101
  var call3742 = callmethod(this,"compilenode", [1], var_tmp);
  lineNumber = 1100
  var call3743 = callmethod(var_o,"register:=", [1], call3742);
  var if3723 = call3743;
  } else {
  lineNumber = 1102
  lineNumber = 1103
  var call3744 = callmethod(this,"compilecall", [1], var_o);
  var if3723 = call3744;
}
  var if3676 = if3723;
}
  var if3629 = if3676;
}
  var if3624 = if3629;
}
  lineNumber = 1106
  lineNumber = 1108
  lineNumber = 1
  lineNumber = 1105
  var call3746 = callmethod(var_o,"kind", [0]);
  var string3747 = new GraceString("op");
  var opresult3749 = callmethod(call3746, "==", [1], string3747);
  if (Grace_isTrue(opresult3749)) {
  lineNumber = 1106
  lineNumber = 1107
  var call3750 = callmethod(this,"compileop", [1], var_o);
  var if3745 = call3750;
}
  lineNumber = 1108
  var string3751 = new GraceString("; compilenode returning ");
  lineNumber = 1
  lineNumber = 1108
  var call3752 = callmethod(var_o,"register", [0]);
  var opresult3754 = callmethod(string3751, "++", [1], call3752);
  lineNumber = 1109
  var call3755 = callmethod(this,"out", [1], opresult3754);
  lineNumber = 1
  lineNumber = 1109
  var call3756 = callmethod(var_o,"register", [0]);
  return call3756
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilenode"] = func3237;
  lineNumber = 1428
var func3757 = function(argcv) {
  var curarg = 1;
  var var_vl = arguments[curarg];
  curarg++;
  var var_of = arguments[curarg];
  curarg++;
  var var_mn = arguments[curarg];
  curarg++;
  var var_rm = arguments[curarg];
  curarg++;
  var var_bt = arguments[curarg];
  curarg++;
  var var_glpath = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1113
  lineNumber = 1
  lineNumber = 1112
  var call3758 = callmethod(var_sys,"argv", [0]);
  var var_argv = call3758;
  lineNumber = 1114
  var var_cmd;
  lineNumber = 1115
  lineNumber = 1114
  var_values = var_vl;
  lineNumber = 1116
  lineNumber = 1115
  var_outfile = var_of;
  lineNumber = 1117
  lineNumber = 1116
  var_modname = var_mn;
  lineNumber = 1118
  lineNumber = 1117
  var_runmode = var_rm;
  lineNumber = 1119
  lineNumber = 1118
  var_buildtype = var_bt;
  lineNumber = 1120
  lineNumber = 1119
  var_gracelibPath = var_glpath;
  lineNumber = 1121
  var array3759 = new GraceList([
]);

  var var_linkfiles = array3759;
  lineNumber = 1122
  lineNumber = 1121
  var bool3760 = new GraceBoolean(false)
  var var_ext = bool3760;
  lineNumber = 1174
  lineNumber = 1179
  lineNumber = 1122
  var string3762 = new GraceString("make");
  var opresult3764 = callmethod(var_runmode, "==", [1], string3762);
  if (Grace_isTrue(opresult3764)) {
  lineNumber = 1123
  var string3765 = new GraceString("checking imports.");
  lineNumber = 1124
  var call3766 = callmethod(this,"log_verbose", [1], string3765);
  lineNumber = 1174
  lineNumber = 1124
  lineNumber = 1174
  var block3767 = Grace_allocObject();
  block3767.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3767.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3767.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3767.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3767.receiver = this;
  block3767.className = 'block<genllvm29:1174>';
  block3767.real = function(
var_v
) {
  lineNumber = 1177
  lineNumber = 1
  lineNumber = 1125
  var call3769 = callmethod(var_v,"kind", [0]);
  var string3770 = new GraceString("import");
  var opresult3772 = callmethod(call3769, "==", [1], string3770);
  if (Grace_isTrue(opresult3772)) {
  lineNumber = 1127
  lineNumber = 1
  lineNumber = 1127
  lineNumber = 1
  lineNumber = 1126
  var call3773 = callmethod(var_v,"value", [0]);
  var call3774 = callmethod(call3773,"value", [0]);
  var var_nm = call3774;
  lineNumber = 1128
  lineNumber = 1127
  var bool3775 = new GraceBoolean(false)
  var var_exists = bool3775;
  lineNumber = 1131
  lineNumber = 1129
  lineNumber = 1132
  lineNumber = 1128
  var string3777 = new GraceString("native");
  var opresult3779 = callmethod(var_buildtype, "==", [1], string3777);
  lineNumber = 1129
  var string3780 = new GraceString(".gso");
  var opresult3782 = callmethod(var_nm, "++", [1], string3780);
  var call3783 = callmethod(var_io,"exists", [1], opresult3782);
  var opresult3785 = callmethod(opresult3779, "&", [1], call3783);
  if (Grace_isTrue(opresult3785)) {
  lineNumber = 1131
  lineNumber = 1130
  var bool3786 = new GraceBoolean(true)
  var_exists = bool3786;
  var if3776 = bool3786;
}
  lineNumber = 1137
  lineNumber = 1141
  lineNumber = 1
  lineNumber = 1132
  var call3788 = callmethod(var_exists,"not", [0]);
  if (Grace_isTrue(call3788)) {
  lineNumber = 1137
  lineNumber = 1133
  var string3790 = new GraceString(".gco");
  var opresult3792 = callmethod(var_nm, "++", [1], string3790);
  var call3793 = callmethod(var_io,"exists", [1], opresult3792);
  if (Grace_isTrue(call3793)) {
  lineNumber = 1137
  lineNumber = 1134
  var string3795 = new GraceString(".gco");
  var opresult3797 = callmethod(var_nm, "++", [1], string3795);
  var string3798 = new GraceString(".grace");
  var opresult3800 = callmethod(var_nm, "++", [1], string3798);
  var call3801 = callmethod(var_io,"newer", [2], opresult3797, opresult3800);
  if (Grace_isTrue(call3801)) {
  lineNumber = 1136
  lineNumber = 1135
  var bool3802 = new GraceBoolean(true)
  var_exists = bool3802;
  lineNumber = 1136
  var string3803 = new GraceString(".gco");
  var opresult3805 = callmethod(var_nm, "++", [1], string3803);
  var call3806 = callmethod(var_linkfiles,"push", [1], opresult3805);
  lineNumber = 1137
  var call3807 = callmethod(var_staticmodules,"push", [1], var_nm);
  var if3794 = call3807;
}
  var if3789 = if3794;
}
  var if3787 = if3789;
}
  lineNumber = 1167
  lineNumber = 1169
  lineNumber = 1
  lineNumber = 1141
  var call3809 = callmethod(var_exists,"not", [0]);
  if (Grace_isTrue(call3809)) {
  lineNumber = 1144
  lineNumber = 1142
  var string3811 = new GraceString(".gc");
  var opresult3813 = callmethod(var_nm, "++", [1], string3811);
  var call3814 = callmethod(var_io,"exists", [1], opresult3813);
  if (Grace_isTrue(call3814)) {
  lineNumber = 1144
  lineNumber = 1143
  var string3815 = new GraceString(".gc");
  var_ext = string3815;
  var if3810 = string3815;
}
  lineNumber = 1147
  lineNumber = 1145
  var string3817 = new GraceString(".grace");
  var opresult3819 = callmethod(var_nm, "++", [1], string3817);
  var call3820 = callmethod(var_io,"exists", [1], opresult3819);
  if (Grace_isTrue(call3820)) {
  lineNumber = 1147
  lineNumber = 1146
  var string3821 = new GraceString(".grace");
  var_ext = string3821;
  var if3816 = string3821;
}
  lineNumber = 1167
  lineNumber = 1168
  lineNumber = 1148
  var bool3823 = new GraceBoolean(false)
  var opresult3825 = callmethod(var_ext, "/=", [1], bool3823);
  if (Grace_isTrue(opresult3825)) {
  lineNumber = 1150
  lineNumber = 1
  lineNumber = 1149
  var call3826 = callmethod(var_argv,"first", [0]);
  var string3827 = new GraceString(" --target llvm29");
  var opresult3829 = callmethod(call3826, "++", [1], string3827);
  var_cmd = opresult3829;
  lineNumber = 1151
  lineNumber = 1150
  var string3830 = new GraceString(" --make ");
  var opresult3832 = callmethod(var_cmd, "++", [1], string3830);
  var opresult3834 = callmethod(opresult3832, "++", [1], var_nm);
  var opresult3836 = callmethod(opresult3834, "++", [1], var_ext);
  var_cmd = opresult3836;
  lineNumber = 1153
  lineNumber = 1154
  lineNumber = 1
  lineNumber = 1151
  var call3838 = callmethod(var_util,"verbosity", [0]);
  var opresult3840 = callmethod(call3838, ">", [1], new GraceNum(30));
  if (Grace_isTrue(opresult3840)) {
  lineNumber = 1153
  lineNumber = 1152
  var string3841 = new GraceString(" --verbose");
  var opresult3843 = callmethod(var_cmd, "++", [1], string3841);
  var_cmd = opresult3843;
  var if3837 = opresult3843;
}
  lineNumber = 1156
  lineNumber = 1157
  lineNumber = 1
  lineNumber = 1154
  var call3845 = callmethod(var_util,"vtag", [0]);
  if (Grace_isTrue(call3845)) {
  lineNumber = 1156
  lineNumber = 1155
  var string3846 = new GraceString(" --vtag ");
  var opresult3848 = callmethod(var_cmd, "++", [1], string3846);
  lineNumber = 1156
  lineNumber = 1
  lineNumber = 1155
  var call3849 = callmethod(var_util,"vtag", [0]);
  var opresult3851 = callmethod(opresult3848, "++", [1], call3849);
  var_cmd = opresult3851;
  var if3844 = opresult3851;
}
  lineNumber = 1159
  lineNumber = 1160
  lineNumber = 1157
  var string3853 = new GraceString("native");
  var opresult3855 = callmethod(var_buildtype, "==", [1], string3853);
  if (Grace_isTrue(opresult3855)) {
  lineNumber = 1159
  lineNumber = 1158
  var string3856 = new GraceString(" --native --noexec");
  var opresult3858 = callmethod(var_cmd, "++", [1], string3856);
  var_cmd = opresult3858;
  var if3852 = opresult3858;
}
  lineNumber = 1161
  lineNumber = 1160
  lineNumber = 1
  lineNumber = 1160
  var call3860 = callmethod(var_io,"system", [1], var_cmd);
  var call3861 = callmethod(call3860,"not", [0]);
  if (Grace_isTrue(call3861)) {
  lineNumber = 1161
  var string3862 = new GraceString("failed processing import of ");
  var opresult3864 = callmethod(string3862, "++", [1], var_nm);
  var string3865 = new GraceString(".");
  var opresult3867 = callmethod(opresult3864, "++", [1], string3865);
  var call3868 = callmethod(var_util,"syntax_error", [1], opresult3867);
  var if3859 = call3868;
}
  lineNumber = 1164
  lineNumber = 1163
  var bool3869 = new GraceBoolean(true)
  var_exists = bool3869;
  lineNumber = 1164
  var string3870 = new GraceString(".gco");
  var opresult3872 = callmethod(var_nm, "++", [1], string3870);
  var call3873 = callmethod(var_linkfiles,"push", [1], opresult3872);
  lineNumber = 1165
  var call3874 = callmethod(var_staticmodules,"push", [1], var_nm);
  lineNumber = 1167
  lineNumber = 1166
  var bool3875 = new GraceBoolean(false)
  var_ext = bool3875;
  var if3822 = bool3875;
}
  var if3808 = if3822;
}
  lineNumber = 1171
  lineNumber = 1173
  lineNumber = 1169
  var string3877 = new GraceString("sys");
  var opresult3879 = callmethod(var_nm, "==", [1], string3877);
  lineNumber = 1173
  lineNumber = 1169
  var string3880 = new GraceString("io");
  var opresult3882 = callmethod(var_nm, "==", [1], string3880);
  var opresult3884 = callmethod(opresult3879, "|", [1], opresult3882);
  if (Grace_isTrue(opresult3884)) {
  lineNumber = 1171
  lineNumber = 1170
  var bool3885 = new GraceBoolean(true)
  var_exists = bool3885;
  lineNumber = 1171
  var call3886 = callmethod(var_staticmodules,"push", [1], var_nm);
  var if3876 = call3886;
}
  lineNumber = 1174
  lineNumber = 1176
  lineNumber = 1
  lineNumber = 1173
  var call3888 = callmethod(var_exists,"not", [0]);
  if (Grace_isTrue(call3888)) {
  lineNumber = 1174
  var string3889 = new GraceString("failed finding import of ");
  var opresult3891 = callmethod(string3889, "++", [1], var_nm);
  var string3892 = new GraceString(".");
  var opresult3894 = callmethod(opresult3891, "++", [1], string3892);
  var call3895 = callmethod(var_util,"syntax_error", [1], opresult3894);
  var if3887 = call3895;
}
  var if3768 = if3887;
}
  return if3768;
};
  var call3896 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block3767);
  var if3761 = call3896;
}
  lineNumber = 1179
  var string3897 = new GraceString("@.str = private unnamed_addr constant [6 x i8] c\"Hello\\00\"");
  lineNumber = 1180
  var call3898 = callmethod(this,"out", [1], string3897);
  var string3899 = new GraceString("@.str._plus = private unnamed_addr constant [2 x i8] c\"+\\00\"");
  lineNumber = 1181
  var call3900 = callmethod(this,"out", [1], string3899);
  var string3901 = new GraceString("@.str._minus = private unnamed_addr constant [2 x i8] c\"-\\00\"");
  lineNumber = 1182
  var call3902 = callmethod(this,"out", [1], string3901);
  var string3903 = new GraceString("@.str._asterisk = private unnamed_addr constant [2 x i8] c\"*\\00\"");
  lineNumber = 1183
  var call3904 = callmethod(this,"out", [1], string3903);
  var string3905 = new GraceString("@.str._slash = private unnamed_addr constant [2 x i8] c\"/\\00\"");
  lineNumber = 1184
  var call3906 = callmethod(this,"out", [1], string3905);
  var string3907 = new GraceString("@.str._percent = private unnamed_addr constant [2 x i8] c\"%\\00\"");
  lineNumber = 1185
  var call3908 = callmethod(this,"out", [1], string3907);
  var string3909 = new GraceString("@.str._index = private unnamed_addr constant [3 x i8] c\"[]\\00\"");
  lineNumber = 1186
  var call3910 = callmethod(this,"out", [1], string3909);
  var string3911 = new GraceString("@.str._push = private unnamed_addr constant [5 x i8] c\"push\\00\"");
  lineNumber = 1187
  var call3912 = callmethod(this,"out", [1], string3911);
  var string3913 = new GraceString("@.str._iter = private unnamed_addr constant [5 x i8] c\"iter\\00\"");
  lineNumber = 1188
  var call3914 = callmethod(this,"out", [1], string3913);
  var string3915 = new GraceString("@.str._apply = private unnamed_addr constant [6 x i8] c\"apply\\00\"");
  lineNumber = 1189
  var call3916 = callmethod(this,"out", [1], string3915);
  var string3917 = new GraceString("@.str._havemore = private unnamed_addr constant [9 x i8] c\"havemore\\00\"");
  lineNumber = 1190
  var call3918 = callmethod(this,"out", [1], string3917);
  var string3919 = new GraceString("@.str._next = private unnamed_addr constant [5 x i8] c\"next\\00\"");
  lineNumber = 1191
  var call3920 = callmethod(this,"out", [1], string3919);
  var string3921 = new GraceString("@.str._assignment = private unnamed_addr constant [11 x i8] c\"assignment\\00\"");
  lineNumber = 1192
  var call3922 = callmethod(this,"out", [1], string3921);
  var string3923 = new GraceString("@.str.asString = private unnamed_addr constant [9 x i8] c\"asString\\00\"");
  lineNumber = 1193
  var call3924 = callmethod(this,"out", [1], string3923);
  lineNumber = 1194
  lineNumber = 1193
  var string3925 = new GraceString("@.str._compilerRevision = private unnamed_addr constant [41 x i8]");
  lineNumber = 1194
  var string3926 = new GraceString("c\"");
  var opresult3928 = callmethod(string3925, "++", [1], string3926);
  lineNumber = 1
  lineNumber = 1194
  var call3929 = callmethod(var_buildinfo,"gitrevision", [0]);
  var opresult3931 = callmethod(opresult3928, "++", [1], call3929);
  var string3932 = new GraceString("\\00\"");
  var opresult3934 = callmethod(opresult3931, "++", [1], string3932);
  lineNumber = 1195
  var call3935 = callmethod(this,"out", [1], opresult3934);
  var string3936 = new GraceString("@undefined = private global %object null");
  lineNumber = 1196
  var call3937 = callmethod(this,"out", [1], string3936);
  var string3938 = new GraceString("@none = private global %object null");
  lineNumber = 1197
  var call3939 = callmethod(this,"out", [1], string3938);
  var string3940 = new GraceString("@argv = private global %object null");
  lineNumber = 1198
  var call3941 = callmethod(this,"out", [1], string3940);
  var string3942 = new GraceString("%Method = type {i8*,i32,%object(%object,i32,%object*,i32)*}");
  lineNumber = 1199
  var call3943 = callmethod(this,"outprint", [1], string3942);
  var string3944 = new GraceString("%ClassData = type { i8*, %Method*, i32 }*");
  lineNumber = 1200
  var call3945 = callmethod(this,"outprint", [1], string3944);
  var string3946 = new GraceString("%object = type { i32, %ClassData, [0 x i8] }*");
  lineNumber = 1201
  var call3947 = callmethod(this,"outprint", [1], string3946);
  var string3948 = new GraceString("%UserObject = type { i32, i8*, i8*, [0 x %object] }");
  lineNumber = 1202
  var call3949 = callmethod(this,"outprint", [1], string3948);
  var string3950 = new GraceString("define %object @module_");
  var opresult3952 = callmethod(string3950, "++", [1], var_modname);
  var string3953 = new GraceString("_init() {");
  var opresult3955 = callmethod(opresult3952, "++", [1], string3953);
  lineNumber = 1203
  var call3956 = callmethod(this,"out", [1], opresult3955);
  var string3957 = new GraceString("entry:");
  lineNumber = 1204
  var call3958 = callmethod(this,"out", [1], string3957);
  var string3959 = new GraceString("  %self = call %object @alloc_obj2(i32 100, i32 100)");
  lineNumber = 1205
  var call3960 = callmethod(this,"out", [1], string3959);
  lineNumber = 1206
  lineNumber = 1205
  var string3961 = new GraceString("Module<");
  var opresult3963 = callmethod(string3961, "++", [1], var_modname);
  var string3964 = new GraceString(">");
  var opresult3966 = callmethod(opresult3963, "++", [1], string3964);
  var var_modn = opresult3966;
  lineNumber = 1208
  lineNumber = 1206
  var string3967 = new GraceString("@\".str._modcname_");
  var opresult3969 = callmethod(string3967, "++", [1], var_modname);
  var string3970 = new GraceString("\" = private unnamed_addr ");
  var opresult3972 = callmethod(opresult3969, "++", [1], string3970);
  lineNumber = 1208
  lineNumber = 1207
  var string3973 = new GraceString("constant [");
  lineNumber = 1208
  lineNumber = 1
  lineNumber = 1207
  var call3974 = callmethod(var_modn,"size", [0]);
  var opresult3976 = callmethod(call3974, "+", [1], new GraceNum(1));
  var opresult3978 = callmethod(string3973, "++", [1], opresult3976);
  var string3979 = new GraceString(" x i8] c\"");
  var opresult3981 = callmethod(opresult3978, "++", [1], string3979);
  var opresult3983 = callmethod(opresult3981, "++", [1], var_modn);
  var string3984 = new GraceString("\\00\"");
  var opresult3986 = callmethod(opresult3983, "++", [1], string3984);
  var opresult3988 = callmethod(opresult3972, "++", [1], opresult3986);
  var var_con = opresult3988;
  lineNumber = 1208
  var call3989 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 1212
  lineNumber = 1209
  var string3990 = new GraceString("  call void @setclassname(%object %self, ");
  lineNumber = 1212
  lineNumber = 1210
  var string3991 = new GraceString("i8* getelementptr([");
  lineNumber = 1212
  lineNumber = 1
  lineNumber = 1210
  var call3992 = callmethod(var_modn,"size", [0]);
  var opresult3994 = callmethod(call3992, "+", [1], new GraceNum(1));
  var opresult3996 = callmethod(string3991, "++", [1], opresult3994);
  var string3997 = new GraceString(" x i8]* ");
  var opresult3999 = callmethod(opresult3996, "++", [1], string3997);
  var opresult4001 = callmethod(string3990, "++", [1], opresult3999);
  lineNumber = 1212
  lineNumber = 1211
  var string4002 = new GraceString("@\".str._modcname_");
  var opresult4004 = callmethod(string4002, "++", [1], var_modname);
  var string4005 = new GraceString("\",");
  var opresult4007 = callmethod(opresult4004, "++", [1], string4005);
  var opresult4009 = callmethod(opresult4001, "++", [1], opresult4007);
  lineNumber = 1212
  var string4010 = new GraceString("i32 0,i32 0))");
  var opresult4012 = callmethod(opresult4009, "++", [1], string4010);
  lineNumber = 1213
  var call4013 = callmethod(this,"out", [1], opresult4012);
  var string4014 = new GraceString("  %undefined = load %object* @undefined");
  lineNumber = 1214
  var call4015 = callmethod(this,"out", [1], string4014);
  var string4016 = new GraceString("  %none = load %object* @none");
  lineNumber = 1215
  var call4017 = callmethod(this,"out", [1], string4016);
  var string4018 = new GraceString("  %var_argv = call %object* @alloc_var()");
  lineNumber = 1216
  var call4019 = callmethod(this,"out", [1], string4018);
  var string4020 = new GraceString("  %tmp_argv = load %object* @argv");
  lineNumber = 1217
  var call4021 = callmethod(this,"out", [1], string4020);
  var string4022 = new GraceString("  store %object %tmp_argv, %object* %var_argv");
  lineNumber = 1218
  var call4023 = callmethod(this,"out", [1], string4022);
  var string4024 = new GraceString("  %var_HashMap = call %object* @alloc_var()");
  lineNumber = 1219
  var call4025 = callmethod(this,"out", [1], string4024);
  var string4026 = new GraceString("  %tmp_hmco = call %object @alloc_HashMapClassObject()");
  lineNumber = 1220
  var call4027 = callmethod(this,"out", [1], string4026);
  var string4028 = new GraceString("  store %object %tmp_hmco, %object* %var_HashMap");
  lineNumber = 1221
  var call4029 = callmethod(this,"out", [1], string4028);
  var string4030 = new GraceString("  %var_MatchFailed = call %object* @alloc_var()");
  lineNumber = 1222
  var call4031 = callmethod(this,"out", [1], string4030);
  var string4032 = new GraceString("  %tmp_mf = call %object @alloc_obj2(i32 0, i32 0)");
  lineNumber = 1223
  var call4033 = callmethod(this,"out", [1], string4032);
  var string4034 = new GraceString("  store %object %tmp_mf, %object* %var_MatchFailed");
  lineNumber = 1224
  var call4035 = callmethod(this,"out", [1], string4034);
  lineNumber = 1225
  lineNumber = 1224
  var var_tmpo = var_output;
  lineNumber = 1226
  var array4036 = new GraceList([
]);

  var_output = array4036;
  lineNumber = 1241
  lineNumber = 1226
  lineNumber = 1241
  var block4037 = Grace_allocObject();
  block4037.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4037.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4037.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4037.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4037.receiver = this;
  block4037.className = 'block<genllvm29:1241>';
  block4037.real = function(
var_l
) {
  lineNumber = 1243
  lineNumber = 1
  lineNumber = 1227
  var call4039 = callmethod(var_l,"kind", [0]);
  var string4040 = new GraceString("vardec");
  var opresult4042 = callmethod(call4039, "==", [1], string4040);
  lineNumber = 1243
  lineNumber = 1
  lineNumber = 1227
  var call4043 = callmethod(var_l,"kind", [0]);
  var string4044 = new GraceString("defdec");
  var opresult4046 = callmethod(call4043, "==", [1], string4044);
  var opresult4048 = callmethod(opresult4042, "|", [1], opresult4046);
  if (Grace_isTrue(opresult4048)) {
  lineNumber = 1228
  lineNumber = 1
  lineNumber = 1228
  lineNumber = 1
  lineNumber = 1228
  lineNumber = 1
  lineNumber = 1228
  var call4049 = callmethod(var_l,"name", [0]);
  var call4050 = callmethod(call4049,"value", [0]);
  var call4051 = callmethod(call4050,"_escape", [0]);
  var var_tnm = call4051;
  lineNumber = 1229
  var call4052 = callmethod(var_declaredvars,"push", [1], var_tnm);
  lineNumber = 1230
  var string4053 = new GraceString("  %\"var_");
  var opresult4055 = callmethod(string4053, "++", [1], var_tnm);
  var string4056 = new GraceString("\" = call %object* @alloc_var()");
  var opresult4058 = callmethod(opresult4055, "++", [1], string4056);
  lineNumber = 1231
  var call4059 = callmethod(this,"out", [1], opresult4058);
  var string4060 = new GraceString("  store %object %undefined, %object* %\"var_");
  var opresult4062 = callmethod(string4060, "++", [1], var_tnm);
  var string4063 = new GraceString("\"");
  var opresult4065 = callmethod(opresult4062, "++", [1], string4063);
  lineNumber = 1232
  var call4066 = callmethod(this,"out", [1], opresult4065);
  var if4038 = call4066;
  } else {
  lineNumber = 1241
  lineNumber = 1243
  lineNumber = 1
  lineNumber = 1232
  var call4068 = callmethod(var_l,"kind", [0]);
  var string4069 = new GraceString("class");
  var opresult4071 = callmethod(call4068, "==", [1], string4069);
  if (Grace_isTrue(opresult4071)) {
  lineNumber = 1234
  var var_tnmc;
  lineNumber = 1237
  lineNumber = 1239
  lineNumber = 1
  lineNumber = 1239
  lineNumber = 1
  lineNumber = 1234
  var call4073 = callmethod(var_l,"name", [0]);
  var call4074 = callmethod(call4073,"kind", [0]);
  var string4075 = new GraceString("generic");
  var opresult4077 = callmethod(call4074, "==", [1], string4075);
  if (Grace_isTrue(opresult4077)) {
  lineNumber = 1235
  lineNumber = 1
  lineNumber = 1235
  lineNumber = 1
  lineNumber = 1235
  lineNumber = 1
  lineNumber = 1235
  lineNumber = 1
  lineNumber = 1235
  var call4078 = callmethod(var_l,"name", [0]);
  var call4079 = callmethod(call4078,"value", [0]);
  var call4080 = callmethod(call4079,"value", [0]);
  var call4081 = callmethod(call4080,"_escape", [0]);
  var_tnmc = call4081;
  var if4072 = call4081;
  } else {
  lineNumber = 1237
  lineNumber = 1
  lineNumber = 1237
  lineNumber = 1
  lineNumber = 1237
  lineNumber = 1
  lineNumber = 1237
  var call4082 = callmethod(var_l,"name", [0]);
  var call4083 = callmethod(call4082,"value", [0]);
  var call4084 = callmethod(call4083,"_escape", [0]);
  var_tnmc = call4084;
  var if4072 = call4084;
}
  lineNumber = 1239
  var call4085 = callmethod(var_declaredvars,"push", [1], var_tnmc);
  lineNumber = 1240
  var string4086 = new GraceString("  %\"var_");
  var opresult4088 = callmethod(string4086, "++", [1], var_tnmc);
  var string4089 = new GraceString("\" = call %object* @alloc_var()");
  var opresult4091 = callmethod(opresult4088, "++", [1], string4089);
  lineNumber = 1241
  var call4092 = callmethod(this,"out", [1], opresult4091);
  var string4093 = new GraceString("  store %object %undefined, %object* %\"var_");
  var opresult4095 = callmethod(string4093, "++", [1], var_tnmc);
  var string4096 = new GraceString("\"");
  var opresult4098 = callmethod(opresult4095, "++", [1], string4096);
  lineNumber = 1242
  var call4099 = callmethod(this,"out", [1], opresult4098);
  var if4067 = call4099;
}
  var if4038 = if4067;
}
  return if4038;
};
  var call4100 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block4037);
  lineNumber = 1245
  lineNumber = 1244
  lineNumber = 1245
  var block4101 = Grace_allocObject();
  block4101.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4101.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4101.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4101.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4101.receiver = this;
  block4101.className = 'block<genllvm29:1245>';
  block4101.real = function(
var_o
) {
  lineNumber = 1246
  var call4102 = callmethod(this,"compilenode", [1], var_o);
  return call4102;
};
  var call4103 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block4101);
  lineNumber = 1248
  lineNumber = 1247
  var var_tmpo2 = var_output;
  lineNumber = 1249
  lineNumber = 1248
  var_output = var_tmpo;
  lineNumber = 1249
  var string4104 = new GraceString("  %params = alloca %object, i32 ");
  var opresult4106 = callmethod(string4104, "++", [1], var_paramsUsed);
  lineNumber = 1250
  var call4107 = callmethod(this,"out", [1], opresult4106);
  lineNumber = 1251
  lineNumber = 1250
  var diff4109 = callmethod(var_paramsUsed, "-", [1], new GraceNum(1));
  var opresult4111 = callmethod(new GraceNum(0), "..", [1], diff4109);
  lineNumber = 1251
  var block4112 = Grace_allocObject();
  block4112.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4112.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4112.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4112.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4112.receiver = this;
  block4112.className = 'block<genllvm29:1251>';
  block4112.real = function(
var_i
) {
  var string4113 = new GraceString("  %params_");
  var opresult4115 = callmethod(string4113, "++", [1], var_i);
  var string4116 = new GraceString(" = getelementptr %object* %params, i32 ");
  var opresult4118 = callmethod(opresult4115, "++", [1], string4116);
  var opresult4120 = callmethod(opresult4118, "++", [1], var_i);
  lineNumber = 1252
  var call4121 = callmethod(this,"out", [1], opresult4120);
  return call4121;
};
  var call4122 = callmethod(Grace_prelude,"for()do", [1, 1], opresult4111, block4112);
  lineNumber = 1254
  lineNumber = 1253
  lineNumber = 1254
  var block4123 = Grace_allocObject();
  block4123.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4123.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4123.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4123.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4123.receiver = this;
  block4123.className = 'block<genllvm29:1254>';
  block4123.real = function(
var_l
) {
  lineNumber = 1255
  var call4124 = callmethod(this,"out", [1], var_l);
  return call4124;
};
  var call4125 = callmethod(Grace_prelude,"for()do", [1, 1], var_tmpo2, block4123);
  lineNumber = 1257
  lineNumber = 1256
  var_paramsUsed = new GraceNum(1);
  lineNumber = 1257
  var string4126 = new GraceString("  ret %object %self");
  lineNumber = 1258
  var call4127 = callmethod(this,"out", [1], string4126);
  var string4128 = new GraceString("}");
  lineNumber = 1259
  var call4129 = callmethod(this,"out", [1], string4128);
  var string4130 = new GraceString("define weak i32 @main(i32 %argc, i8** %argv) {");
  lineNumber = 1260
  var call4131 = callmethod(this,"out", [1], string4130);
  var string4132 = new GraceString("entry:");
  lineNumber = 1261
  var call4133 = callmethod(this,"out", [1], string4132);
  var string4134 = new GraceString("  call void @initprofiling()");
  lineNumber = 1262
  var call4135 = callmethod(this,"out", [1], string4134);
  lineNumber = 1270
  lineNumber = 1262
  var string4137 = new GraceString("LogCallGraph");
  lineNumber = 1272
  lineNumber = 1
  lineNumber = 1262
  var call4138 = callmethod(var_util,"extensions", [0]);
  var call4139 = callmethod(call4138,"contains", [1], string4137);
  if (Grace_isTrue(call4139)) {
  lineNumber = 1263
  var string4140 = new GraceString("LogCallGraph");
  lineNumber = 1264
  lineNumber = 1
  lineNumber = 1263
  var call4141 = callmethod(var_util,"extensions", [0]);
  var call4142 = callmethod(call4141,"get", [1], string4140);
  var var_lcgfile = call4142;
  lineNumber = 1266
  lineNumber = 1264
  var string4143 = new GraceString("@.str.logdest = private unnamed_addr ");
  lineNumber = 1266
  lineNumber = 1265
  var string4144 = new GraceString("constant [");
  lineNumber = 1266
  lineNumber = 1
  lineNumber = 1265
  var call4145 = callmethod(var_lcgfile,"size", [0]);
  var opresult4147 = callmethod(call4145, "+", [1], new GraceNum(1));
  var opresult4149 = callmethod(string4144, "++", [1], opresult4147);
  var string4150 = new GraceString(" x i8] c\"");
  var opresult4152 = callmethod(opresult4149, "++", [1], string4150);
  var opresult4154 = callmethod(opresult4152, "++", [1], var_lcgfile);
  var string4155 = new GraceString("\\00\"");
  var opresult4157 = callmethod(opresult4154, "++", [1], string4155);
  var opresult4159 = callmethod(string4143, "++", [1], opresult4157);
  var_con = opresult4159;
  lineNumber = 1266
  var call4160 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 1270
  lineNumber = 1267
  var string4161 = new GraceString("  call void @enable_callgraph(");
  lineNumber = 1270
  lineNumber = 1268
  var string4162 = new GraceString("i8* getelementptr([");
  lineNumber = 1270
  lineNumber = 1
  lineNumber = 1268
  var call4163 = callmethod(var_lcgfile,"size", [0]);
  var opresult4165 = callmethod(call4163, "+", [1], new GraceNum(1));
  var opresult4167 = callmethod(string4162, "++", [1], opresult4165);
  var string4168 = new GraceString(" x i8]* ");
  var opresult4170 = callmethod(opresult4167, "++", [1], string4168);
  var opresult4172 = callmethod(string4161, "++", [1], opresult4170);
  lineNumber = 1269
  var string4173 = new GraceString("@.str.logdest,");
  var opresult4175 = callmethod(opresult4172, "++", [1], string4173);
  lineNumber = 1270
  var string4176 = new GraceString("i32 0,i32 0))");
  var opresult4178 = callmethod(opresult4175, "++", [1], string4176);
  lineNumber = 1271
  var call4179 = callmethod(this,"out", [1], opresult4178);
  var if4136 = call4179;
}
  lineNumber = 1272
  var string4180 = new GraceString("  call void @gracelib_argv(i8** %argv)");
  lineNumber = 1273
  var call4181 = callmethod(this,"out", [1], string4180);
  var string4182 = new GraceString("  %params = alloca %object, i32 1");
  lineNumber = 1274
  var call4183 = callmethod(this,"out", [1], string4182);
  var string4184 = new GraceString("  %params_0 = getelementptr %object* %params, i32 0");
  lineNumber = 1275
  var call4185 = callmethod(this,"out", [1], string4184);
  var string4186 = new GraceString("  %undefined = call %object @alloc_Undefined()");
  lineNumber = 1276
  var call4187 = callmethod(this,"out", [1], string4186);
  var string4188 = new GraceString("  store %object %undefined, %object* @undefined");
  lineNumber = 1277
  var call4189 = callmethod(this,"out", [1], string4188);
  var string4190 = new GraceString("  %none = call %object @alloc_none()");
  lineNumber = 1278
  var call4191 = callmethod(this,"out", [1], string4190);
  var string4192 = new GraceString("  store %object %none, %object* @none");
  lineNumber = 1279
  var call4193 = callmethod(this,"out", [1], string4192);
  var string4194 = new GraceString("  %tmp_argv = call %object @alloc_List()");
  lineNumber = 1280
  var call4195 = callmethod(this,"out", [1], string4194);
  var string4196 = new GraceString("  %argv_i = alloca i32");
  lineNumber = 1281
  var call4197 = callmethod(this,"out", [1], string4196);
  var string4198 = new GraceString("  store i32 0, i32* %argv_i");
  lineNumber = 1282
  var call4199 = callmethod(this,"out", [1], string4198);
  var string4200 = new GraceString("  br label %argv.cond");
  lineNumber = 1283
  var call4201 = callmethod(this,"out", [1], string4200);
  var string4202 = new GraceString("argv.cond");
  lineNumber = 1284
  var call4203 = callmethod(this,"beginblock", [1], string4202);
  var string4204 = new GraceString("  %argv_tmp1 = load i32* %argv_i, align 4");
  lineNumber = 1285
  var call4205 = callmethod(this,"out", [1], string4204);
  var string4206 = new GraceString("  %argv_cmp = icmp slt i32 %argv_tmp1, %argc");
  lineNumber = 1286
  var call4207 = callmethod(this,"out", [1], string4206);
  var string4208 = new GraceString("  br i1 %argv_cmp, label %argv.body, label %argv.end");
  lineNumber = 1287
  var call4209 = callmethod(this,"out", [1], string4208);
  var string4210 = new GraceString("argv.body");
  lineNumber = 1288
  var call4211 = callmethod(this,"beginblock", [1], string4210);
  var string4212 = new GraceString("  %argv_iv = load i32* %argv_i");
  lineNumber = 1289
  var call4213 = callmethod(this,"out", [1], string4212);
  var string4214 = new GraceString("  %argv_idx = getelementptr i8** %argv, i32 %argv_iv");
  lineNumber = 1290
  var call4215 = callmethod(this,"out", [1], string4214);
  var string4216 = new GraceString("  %argv_val = load i8** %argv_idx");
  lineNumber = 1291
  var call4217 = callmethod(this,"out", [1], string4216);
  var string4218 = new GraceString("  %argv_tmp3 = call %object @alloc_String(i8* %argv_val)");
  lineNumber = 1292
  var call4219 = callmethod(this,"out", [1], string4218);
  var string4220 = new GraceString("  store %object %argv_tmp3, %object* %params_0");
  lineNumber = 1293
  var call4221 = callmethod(this,"out", [1], string4220);
  lineNumber = 1296
  lineNumber = 1293
  var string4222 = new GraceString("  call %object @callmethod(%object %tmp_argv, ");
  lineNumber = 1294
  var string4223 = new GraceString("i8* getelementptr([5 x i8]* @.str._push");
  var opresult4225 = callmethod(string4222, "++", [1], string4223);
  lineNumber = 1295
  var string4226 = new GraceString(",i32 0,i32 0), ");
  var opresult4228 = callmethod(opresult4225, "++", [1], string4226);
  lineNumber = 1296
  var string4229 = new GraceString("i32 0, %object* %params)");
  var opresult4231 = callmethod(opresult4228, "++", [1], string4229);
  lineNumber = 1297
  var call4232 = callmethod(this,"out", [1], opresult4231);
  var string4233 = new GraceString("  %argv_inc = add i32 %argv_iv, 1");
  lineNumber = 1298
  var call4234 = callmethod(this,"out", [1], string4233);
  var string4235 = new GraceString("  store i32 %argv_inc, i32* %argv_i");
  lineNumber = 1299
  var call4236 = callmethod(this,"out", [1], string4235);
  var string4237 = new GraceString("  br label %argv.cond");
  lineNumber = 1300
  var call4238 = callmethod(this,"out", [1], string4237);
  var string4239 = new GraceString("argv.end");
  lineNumber = 1301
  var call4240 = callmethod(this,"beginblock", [1], string4239);
  var string4241 = new GraceString("  call void @module_sys_init_argv(%object %tmp_argv)");
  lineNumber = 1302
  var call4242 = callmethod(this,"out", [1], string4241);
  var string4243 = new GraceString("  %var_argv = call %object* @alloc_var()");
  lineNumber = 1303
  var call4244 = callmethod(this,"out", [1], string4243);
  var string4245 = new GraceString("  store %object %tmp_argv, %object* %var_argv");
  lineNumber = 1304
  var call4246 = callmethod(this,"out", [1], string4245);
  var string4247 = new GraceString("  store %object %tmp_argv, %object* @argv");
  lineNumber = 1305
  var call4248 = callmethod(this,"out", [1], string4247);
  var string4249 = new GraceString("  call %object @module_");
  var opresult4251 = callmethod(string4249, "++", [1], var_modname);
  var string4252 = new GraceString("_init()");
  var opresult4254 = callmethod(opresult4251, "++", [1], string4252);
  lineNumber = 1306
  var call4255 = callmethod(this,"out", [1], opresult4254);
  var string4256 = new GraceString("  call void @gracelib_stats()");
  lineNumber = 1307
  var call4257 = callmethod(this,"out", [1], string4256);
  var string4258 = new GraceString("  ret i32 0");
  lineNumber = 1308
  var call4259 = callmethod(this,"out", [1], string4258);
  var string4260 = new GraceString("}");
  lineNumber = 1309
  var call4261 = callmethod(this,"out", [1], string4260);
  var string4262 = new GraceString("; constant definitions");
  lineNumber = 1310
  var call4263 = callmethod(this,"out", [1], string4262);
  lineNumber = 1311
  lineNumber = 1310
  lineNumber = 1311
  var block4264 = Grace_allocObject();
  block4264.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4264.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4264.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4264.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4264.receiver = this;
  block4264.className = 'block<genllvm29:1311>';
  block4264.real = function(
var_c
) {
  lineNumber = 1312
  var call4265 = callmethod(this,"out", [1], var_c);
  return call4265;
};
  var call4266 = callmethod(Grace_prelude,"for()do", [1, 1], var_constants, block4264);
  lineNumber = 1314
  lineNumber = 1
  lineNumber = 1313
  var call4267 = callmethod(var_subtype,"boolMatrix", [0]);
  var var_mtx = call4267;
  lineNumber = 1315
  lineNumber = 1314
  var string4268 = new GraceString("@.subtypes = private unnamed_addr ");
  lineNumber = 1315
  var string4269 = new GraceString("constant [");
  lineNumber = 1
  lineNumber = 1315
  var call4270 = callmethod(var_mtx,"size", [0]);
  lineNumber = 1
  lineNumber = 1315
  var call4271 = callmethod(var_mtx,"size", [0]);
  var prod4273 = callmethod(call4270, "*", [1], call4271);
  var opresult4275 = callmethod(string4269, "++", [1], prod4273);
  var string4276 = new GraceString(" x i1] [");
  var opresult4278 = callmethod(opresult4275, "++", [1], string4276);
  var opresult4280 = callmethod(string4268, "++", [1], opresult4278);
  lineNumber = 1316
  var call4281 = callmethod(this,"out", [1], opresult4280);
  lineNumber = 1317
  lineNumber = 1316
  var bool4282 = new GraceBoolean(true)
  var var_smfirst = bool4282;
  lineNumber = 1327
  lineNumber = 1317
  lineNumber = 1327
  var block4283 = Grace_allocObject();
  block4283.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4283.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4283.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4283.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4283.receiver = this;
  block4283.className = 'block<genllvm29:1327>';
  block4283.real = function(
var_m1
) {
  lineNumber = 1318
  lineNumber = 1327
  var block4284 = Grace_allocObject();
  block4284.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4284.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4284.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4284.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4284.receiver = this;
  block4284.className = 'block<genllvm29:1327>';
  block4284.real = function(
var_m2
) {
  lineNumber = 1322
  lineNumber = 1319
  if (Grace_isTrue(var_smfirst)) {
  lineNumber = 1321
  lineNumber = 1320
  var bool4286 = new GraceBoolean(false)
  var_smfirst = bool4286;
  var if4285 = bool4286;
  } else {
  lineNumber = 1322
  var string4287 = new GraceString(",");
  lineNumber = 1323
  var call4288 = callmethod(this,"out", [1], string4287);
  var if4285 = call4288;
}
  lineNumber = 1327
  lineNumber = 1324
  if (Grace_isTrue(var_m2)) {
  lineNumber = 1325
  var string4290 = new GraceString("i1 1");
  lineNumber = 1326
  var call4291 = callmethod(this,"out", [1], string4290);
  var if4289 = call4291;
  } else {
  lineNumber = 1327
  var string4292 = new GraceString("i1 0");
  lineNumber = 1328
  var call4293 = callmethod(this,"out", [1], string4292);
  var if4289 = call4293;
}
  return if4289;
};
  var call4294 = callmethod(Grace_prelude,"for()do", [1, 1], var_m1, block4284);
  return call4294;
};
  var call4295 = callmethod(Grace_prelude,"for()do", [1, 1], var_mtx, block4283);
  lineNumber = 1331
  var string4296 = new GraceString("]");
  lineNumber = 1332
  var call4297 = callmethod(this,"out", [1], string4296);
  var string4298 = new GraceString("@.typecount = private unnamed_addr constant i16 ");
  lineNumber = 1
  lineNumber = 1332
  var call4299 = callmethod(var_mtx,"size", [0]);
  var opresult4301 = callmethod(string4298, "++", [1], call4299);
  var string4302 = new GraceString("");
  var opresult4304 = callmethod(opresult4301, "++", [1], string4302);
  lineNumber = 1333
  var call4305 = callmethod(this,"out", [1], opresult4304);
  var string4306 = new GraceString("define private i1 @checksub(i16 %sub, i16 %sup) {");
  lineNumber = 1334
  var call4307 = callmethod(this,"out", [1], string4306);
  var string4308 = new GraceString("entry:");
  lineNumber = 1335
  var call4309 = callmethod(this,"out", [1], string4308);
  var string4310 = new GraceString("  %tc = load i16* @.typecount");
  lineNumber = 1336
  var call4311 = callmethod(this,"out", [1], string4310);
  var string4312 = new GraceString("  %st = load [");
  lineNumber = 1
  lineNumber = 1336
  var call4313 = callmethod(var_mtx,"size", [0]);
  lineNumber = 1
  lineNumber = 1336
  var call4314 = callmethod(var_mtx,"size", [0]);
  var prod4316 = callmethod(call4313, "*", [1], call4314);
  var opresult4318 = callmethod(string4312, "++", [1], prod4316);
  var string4319 = new GraceString(" x i1]* @.subtypes");
  var opresult4321 = callmethod(opresult4318, "++", [1], string4319);
  lineNumber = 1337
  var call4322 = callmethod(this,"out", [1], opresult4321);
  var string4323 = new GraceString("  %ridx = mul i16 %sub, %tc");
  lineNumber = 1338
  var call4324 = callmethod(this,"out", [1], string4323);
  var string4325 = new GraceString("  %idx = add i16 %ridx, %sup");
  lineNumber = 1339
  var call4326 = callmethod(this,"out", [1], string4325);
  var string4327 = new GraceString("  %ptr = getelementptr [");
  lineNumber = 1
  lineNumber = 1339
  var call4328 = callmethod(var_mtx,"size", [0]);
  lineNumber = 1
  lineNumber = 1339
  var call4329 = callmethod(var_mtx,"size", [0]);
  var prod4331 = callmethod(call4328, "*", [1], call4329);
  var opresult4333 = callmethod(string4327, "++", [1], prod4331);
  var string4334 = new GraceString(" x i1]* @.subtypes, i32 0, i16 %idx");
  var opresult4336 = callmethod(opresult4333, "++", [1], string4334);
  lineNumber = 1340
  var call4337 = callmethod(this,"out", [1], opresult4336);
  var string4338 = new GraceString("  %rv = load i1* %ptr");
  lineNumber = 1341
  var call4339 = callmethod(this,"out", [1], string4338);
  var string4340 = new GraceString("  ret i1 %rv");
  lineNumber = 1342
  var call4341 = callmethod(this,"out", [1], string4340);
  var string4342 = new GraceString("}");
  lineNumber = 1343
  var call4343 = callmethod(this,"out", [1], string4342);
  var string4344 = new GraceString("; gracelib");
  lineNumber = 1344
  var call4345 = callmethod(this,"out", [1], string4344);
  var string4346 = new GraceString("declare %object @alloc_obj2(i32, i32)");
  lineNumber = 1345
  var call4347 = callmethod(this,"out", [1], string4346);
  var string4348 = new GraceString("declare void @addmethod2(%object, i8*, %object(%object, i32, %object*, i32)*)");
  lineNumber = 1346
  var call4349 = callmethod(this,"out", [1], string4348);
  var string4350 = new GraceString("declare void @adddatum2(%object, %object, i32)");
  lineNumber = 1347
  var call4351 = callmethod(this,"out", [1], string4350);
  var string4352 = new GraceString("declare %object @alloc_List()");
  lineNumber = 1348
  var call4353 = callmethod(this,"out", [1], string4352);
  var string4354 = new GraceString("declare %object @alloc_Float64(double)");
  lineNumber = 1349
  var call4355 = callmethod(this,"out", [1], string4354);
  var string4356 = new GraceString("declare %object @alloc_String(i8*)");
  lineNumber = 1350
  var call4357 = callmethod(this,"out", [1], string4356);
  var string4358 = new GraceString("declare %object @alloc_Octets(i8*, i32)");
  lineNumber = 1351
  var call4359 = callmethod(this,"out", [1], string4358);
  var string4360 = new GraceString("declare %object @alloc_Boolean(i32)");
  lineNumber = 1352
  var call4361 = callmethod(this,"out", [1], string4360);
  var string4362 = new GraceString("declare %object @alloc_Undefined()");
  lineNumber = 1353
  var call4363 = callmethod(this,"out", [1], string4362);
  var string4364 = new GraceString("declare %object @alloc_none()");
  lineNumber = 1354
  var call4365 = callmethod(this,"out", [1], string4364);
  var string4366 = new GraceString("declare %object @alloc_HashMapClassObject()");
  lineNumber = 1355
  var call4367 = callmethod(this,"out", [1], string4366);
  var string4368 = new GraceString("declare %object @callmethod(%object, i8*, i32, %object*)");
  lineNumber = 1356
  var call4369 = callmethod(this,"out", [1], string4368);
  var string4370 = new GraceString("declare %object @gracelib_print(%object, i32, %object*)");
  lineNumber = 1357
  var call4371 = callmethod(this,"out", [1], string4370);
  var string4372 = new GraceString("declare %object @gracelib_readall(%object, i32, %object*)");
  lineNumber = 1358
  var call4373 = callmethod(this,"out", [1], string4372);
  var string4374 = new GraceString("declare %object @gracelib_length(%object)");
  lineNumber = 1359
  var call4375 = callmethod(this,"out", [1], string4374);
  var string4376 = new GraceString("declare void @set_type(%object, i16)");
  lineNumber = 1360
  var call4377 = callmethod(this,"out", [1], string4376);
  var string4378 = new GraceString("declare void @setclassname(%object, i8*)");
  lineNumber = 1361
  var call4379 = callmethod(this,"out", [1], string4378);
  var string4380 = new GraceString("declare void @enable_callgraph(i8*)");
  lineNumber = 1362
  var call4381 = callmethod(this,"out", [1], string4380);
  var string4382 = new GraceString("declare %object @dlmodule(i8*)");
  lineNumber = 1363
  var call4383 = callmethod(this,"out", [1], string4382);
  var string4384 = new GraceString("declare %object* @alloc_var()");
  lineNumber = 1364
  var call4385 = callmethod(this,"out", [1], string4384);
  var string4386 = new GraceString("declare void @gracelib_argv(i8**)");
  lineNumber = 1365
  var call4387 = callmethod(this,"out", [1], string4386);
  var string4388 = new GraceString("declare void @module_sys_init_argv(%object)");
  lineNumber = 1366
  var call4389 = callmethod(this,"out", [1], string4388);
  var string4390 = new GraceString("declare i1 @istrue(%object)");
  lineNumber = 1367
  var call4391 = callmethod(this,"out", [1], string4390);
  var string4392 = new GraceString("declare void @gracelib_stats()");
  lineNumber = 1368
  var call4393 = callmethod(this,"out", [1], string4392);
  var string4394 = new GraceString("declare void @initprofiling()");
  lineNumber = 1369
  var call4395 = callmethod(this,"out", [1], string4394);
  var string4396 = new GraceString("declare %object** @createclosure(i32)");
  lineNumber = 1370
  var call4397 = callmethod(this,"out", [1], string4396);
  var string4398 = new GraceString("declare void @addtoclosure(%object**, %object*)");
  lineNumber = 1371
  var call4399 = callmethod(this,"out", [1], string4398);
  var string4400 = new GraceString("declare void @addclosuremethod(%object, i8*, %object(%object,");
  lineNumber = 1372
  var call4401 = callmethod(this,"out", [1], string4400);
  var string4402 = new GraceString("    i32, %object*, %object**)*, %object**)");
  lineNumber = 1373
  var call4403 = callmethod(this,"out", [1], string4402);
  var string4404 = new GraceString("declare void @setline(i32)");
  lineNumber = 1374
  var call4405 = callmethod(this,"out", [1], string4404);
  var string4406 = new GraceString("declare void @block_return(%object, %object)");
  lineNumber = 1375
  var call4407 = callmethod(this,"out", [1], string4406);
  var string4408 = new GraceString("declare void @block_savedest(%object)");
  lineNumber = 1376
  var call4409 = callmethod(this,"out", [1], string4408);
  var string4410 = new GraceString("declare %object @process_varargs(%object*, i32, i32)");
  lineNumber = 1377
  var call4411 = callmethod(this,"out", [1], string4410);
  var string4412 = new GraceString("; libc functions");
  lineNumber = 1378
  var call4413 = callmethod(this,"out", [1], string4412);
  var string4414 = new GraceString("declare i32 @puts(i8*)");
  lineNumber = 1379
  var call4415 = callmethod(this,"out", [1], string4414);
  var string4416 = new GraceString("declare i8* @malloc(i32)");
  lineNumber = 1380
  var call4417 = callmethod(this,"out", [1], string4416);
  var string4418 = new GraceString("writing file.");
  lineNumber = 1381
  var call4419 = callmethod(this,"log_verbose", [1], string4418);
  lineNumber = 1382
  lineNumber = 1381
  lineNumber = 1382
  var block4420 = Grace_allocObject();
  block4420.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4420.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4420.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4420.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4420.receiver = this;
  block4420.className = 'block<genllvm29:1382>';
  block4420.real = function(
var_x
) {
  lineNumber = 1383
  var call4421 = callmethod(this,"outprint", [1], var_x);
  return call4421;
};
  var call4422 = callmethod(Grace_prelude,"for()do", [1, 1], var_output, block4420);
  lineNumber = 1428
  lineNumber = 1431
  lineNumber = 1385
  var string4424 = new GraceString("make");
  var opresult4426 = callmethod(var_runmode, "==", [1], string4424);
  if (Grace_isTrue(opresult4426)) {
  lineNumber = 1386
  lineNumber = 1
  lineNumber = 1386
  var call4427 = callmethod(var_outfile,"close", [0]);
  lineNumber = 1388
  lineNumber = 1387
  var string4428 = new GraceString("llvm-as -o ");
  var opresult4430 = callmethod(string4428, "++", [1], var_modname);
  var string4431 = new GraceString(".gco ");
  var opresult4433 = callmethod(opresult4430, "++", [1], string4431);
  var opresult4435 = callmethod(opresult4433, "++", [1], var_modname);
  var string4436 = new GraceString(".ll");
  var opresult4438 = callmethod(opresult4435, "++", [1], string4436);
  var_cmd = opresult4438;
  lineNumber = 1390
  lineNumber = 1388
  lineNumber = 1
  lineNumber = 1388
  var call4440 = callmethod(var_io,"system", [1], var_cmd);
  var call4441 = callmethod(call4440,"not", [0]);
  if (Grace_isTrue(call4441)) {
  lineNumber = 1389
  var string4442 = new GraceString("Failed LLVM assembling");
  lineNumber = 1390
  lineNumber = 1
  lineNumber = 1389
  var call4443 = callmethod(var_io,"error", [0]);
  var call4444 = callmethod(call4443,"write", [1], string4442);
  lineNumber = 1390
  var string4445 = new GraceString("Fatal.");
  lineNumber = 1391
  var call4446 = callmethod(this,"raise", [1], string4445);
  var if4439 = call4446;
}
  lineNumber = 1392
  var string4447 = new GraceString("linking.");
  lineNumber = 1393
  var call4448 = callmethod(this,"log_verbose", [1], string4447);
  lineNumber = 1394
  lineNumber = 1393
  var string4449 = new GraceString("llvm-link -o ");
  var opresult4451 = callmethod(string4449, "++", [1], var_modname);
  var string4452 = new GraceString(".bc ");
  var opresult4454 = callmethod(opresult4451, "++", [1], string4452);
  var_cmd = opresult4454;
  lineNumber = 1394
  var string4455 = new GraceString(".o");
  var string4456 = new GraceString(".bc");
  var call4457 = callmethod(var_gracelibPath,"replace()with", [1, 1], string4455, string4456);
  var opresult4459 = callmethod(var_cmd, "++", [1], call4457);
  var string4460 = new GraceString(" ");
  var opresult4462 = callmethod(opresult4459, "++", [1], string4460);
  var_cmd = opresult4462;
  lineNumber = 1396
  lineNumber = 1395
  var opresult4464 = callmethod(var_cmd, "++", [1], var_modname);
  var string4465 = new GraceString(".gco");
  var opresult4467 = callmethod(opresult4464, "++", [1], string4465);
  var_cmd = opresult4467;
  lineNumber = 1398
  lineNumber = 1396
  lineNumber = 1398
  var block4468 = Grace_allocObject();
  block4468.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4468.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4468.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4468.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4468.receiver = this;
  block4468.className = 'block<genllvm29:1398>';
  block4468.real = function(
var_fn
) {
  lineNumber = 1397
  var string4469 = new GraceString(" ");
  var opresult4471 = callmethod(var_cmd, "++", [1], string4469);
  var opresult4473 = callmethod(opresult4471, "++", [1], var_fn);
  var_cmd = opresult4473;
  return opresult4473;
};
  var call4474 = callmethod(Grace_prelude,"for()do", [1, 1], var_linkfiles, block4468);
  lineNumber = 1401
  lineNumber = 1399
  lineNumber = 1
  lineNumber = 1399
  var call4476 = callmethod(var_io,"system", [1], var_cmd);
  var call4477 = callmethod(call4476,"not", [0]);
  if (Grace_isTrue(call4477)) {
  lineNumber = 1400
  var string4478 = new GraceString("Failed LLVM linking");
  lineNumber = 1401
  lineNumber = 1
  lineNumber = 1400
  var call4479 = callmethod(var_io,"error", [0]);
  var call4480 = callmethod(call4479,"write", [1], string4478);
  lineNumber = 1401
  var string4481 = new GraceString("Fatal.");
  lineNumber = 1402
  var call4482 = callmethod(this,"raise", [1], string4481);
  var if4475 = call4482;
}
  lineNumber = 1422
  lineNumber = 1425
  lineNumber = 1403
  var string4484 = new GraceString("native");
  var opresult4486 = callmethod(var_buildtype, "==", [1], string4484);
  lineNumber = 1425
  lineNumber = 1
  lineNumber = 1425
  lineNumber = 1
  lineNumber = 1403
  var call4487 = callmethod(var_util,"noexec", [0]);
  var call4488 = callmethod(call4487,"not", [0]);
  var opresult4490 = callmethod(opresult4486, "&", [1], call4488);
  if (Grace_isTrue(opresult4490)) {
  lineNumber = 1404
  var string4491 = new GraceString("compiling to native.");
  lineNumber = 1405
  var call4492 = callmethod(this,"log_verbose", [1], string4491);
  lineNumber = 1407
  lineNumber = 1405
  var string4493 = new GraceString("llc -o ");
  var opresult4495 = callmethod(string4493, "++", [1], var_modname);
  var string4496 = new GraceString(".s -relocation-model=pic ");
  var opresult4498 = callmethod(opresult4495, "++", [1], string4496);
  var opresult4500 = callmethod(opresult4498, "++", [1], var_modname);
  lineNumber = 1406
  var string4501 = new GraceString(".bc");
  var opresult4503 = callmethod(opresult4500, "++", [1], string4501);
  var_cmd = opresult4503;
  lineNumber = 1409
  lineNumber = 1407
  lineNumber = 1
  lineNumber = 1407
  var call4505 = callmethod(var_io,"system", [1], var_cmd);
  var call4506 = callmethod(call4505,"not", [0]);
  if (Grace_isTrue(call4506)) {
  lineNumber = 1408
  var string4507 = new GraceString("failed native assembly compilation");
  lineNumber = 1409
  lineNumber = 1
  lineNumber = 1408
  var call4508 = callmethod(var_io,"error", [0]);
  var call4509 = callmethod(call4508,"write", [1], string4507);
  lineNumber = 1409
  var string4510 = new GraceString("fatal.");
  lineNumber = 1410
  var call4511 = callmethod(this,"raise", [1], string4510);
  var if4504 = call4511;
}
  lineNumber = 1413
  lineNumber = 1412
  var string4512 = new GraceString("ld -ldl -o /dev/null 2>/dev/null");
  var_cmd = string4512;
  lineNumber = 1419
  lineNumber = 1413
  var call4514 = callmethod(var_io,"system", [1], var_cmd);
  if (Grace_isTrue(call4514)) {
  lineNumber = 1416
  lineNumber = 1414
  var string4515 = new GraceString("gcc -fPIC -Wl,--export-dynamic -o ");
  var opresult4517 = callmethod(string4515, "++", [1], var_modname);
  var string4518 = new GraceString(" -ldl ");
  var opresult4520 = callmethod(opresult4517, "++", [1], string4518);
  lineNumber = 1415
  var opresult4522 = callmethod(opresult4520, "++", [1], var_modname);
  var string4523 = new GraceString(".s");
  var opresult4525 = callmethod(opresult4522, "++", [1], string4523);
  var_cmd = opresult4525;
  var if4513 = opresult4525;
  } else {
  lineNumber = 1419
  lineNumber = 1417
  var string4526 = new GraceString("gcc -fPIC -Wl,--export-dynamic -o ");
  var opresult4528 = callmethod(string4526, "++", [1], var_modname);
  var string4529 = new GraceString(" ");
  var opresult4531 = callmethod(opresult4528, "++", [1], string4529);
  lineNumber = 1418
  var opresult4533 = callmethod(opresult4531, "++", [1], var_modname);
  var string4534 = new GraceString(".s");
  var opresult4536 = callmethod(opresult4533, "++", [1], string4534);
  var_cmd = opresult4536;
  var if4513 = opresult4536;
}
  lineNumber = 1422
  lineNumber = 1420
  lineNumber = 1
  lineNumber = 1420
  var call4538 = callmethod(var_io,"system", [1], var_cmd);
  var call4539 = callmethod(call4538,"not", [0]);
  if (Grace_isTrue(call4539)) {
  lineNumber = 1421
  var string4540 = new GraceString("failed native assembly compilation");
  lineNumber = 1422
  lineNumber = 1
  lineNumber = 1421
  var call4541 = callmethod(var_io,"error", [0]);
  var call4542 = callmethod(call4541,"write", [1], string4540);
  lineNumber = 1422
  var string4543 = new GraceString("fatal.");
  lineNumber = 1423
  var call4544 = callmethod(this,"raise", [1], string4543);
  var if4537 = call4544;
}
  var if4483 = if4537;
}
  lineNumber = 1425
  var string4545 = new GraceString("done.");
  lineNumber = 1426
  var call4546 = callmethod(this,"log_verbose", [1], string4545);
  lineNumber = 1428
  lineNumber = 1430
  lineNumber = 1426
  var string4548 = new GraceString("run");
  var opresult4550 = callmethod(var_buildtype, "==", [1], string4548);
  if (Grace_isTrue(opresult4550)) {
  lineNumber = 1428
  lineNumber = 1427
  var string4551 = new GraceString("lli ./");
  var opresult4553 = callmethod(string4551, "++", [1], var_modname);
  var string4554 = new GraceString(".bc");
  var opresult4556 = callmethod(opresult4553, "++", [1], string4554);
  var_cmd = opresult4556;
  lineNumber = 1428
  var call4557 = callmethod(var_io,"system", [1], var_cmd);
  var if4547 = call4557;
}
  var if4423 = if4547;
}
  return if4423
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compile"] = func3757;
  return this;
}
function gracecode_genllvm30() {
  lineNumber = 2
// Import of io
  var var_io = do_import("io", gracecode_io);
  lineNumber = 3
// Import of sys
  var var_sys = do_import("sys", gracecode_sys);
  lineNumber = 4
// Import of ast
  var var_ast = do_import("ast", gracecode_ast);
  lineNumber = 5
// Import of util
  var var_util = do_import("util", gracecode_util);
  lineNumber = 6
// Import of buildinfo
  var var_buildinfo = do_import("buildinfo", gracecode_buildinfo);
  lineNumber = 14
// Import of subtype
  var var_subtype = do_import("subtype", gracecode_subtype);
  lineNumber = 15
  var var_tmp;
  lineNumber = 1
var func0 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 14
  return var_tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tmp"] = func0;
  lineNumber = 1
var func1 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_tmp = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tmp:="] = func1;
  lineNumber = 16
  lineNumber = 15
  var var_verbosity = new GraceNum(30);
  lineNumber = 1
var func2 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 15
  return var_verbosity
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["verbosity"] = func2;
  lineNumber = 1
var func3 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_verbosity = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["verbosity:="] = func3;
  lineNumber = 17
  lineNumber = 16
  var var_pad1 = new GraceNum(1);
  lineNumber = 1
var func4 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 16
  return var_pad1
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pad1"] = func4;
  lineNumber = 1
var func5 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_pad1 = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pad1:="] = func5;
  lineNumber = 18
  lineNumber = 17
  var var_auto__95__count = new GraceNum(0);
  lineNumber = 1
var func6 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 17
  return var_auto__95__count
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["auto_count"] = func6;
  lineNumber = 1
var func7 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_auto__95__count = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["auto_count:="] = func7;
  lineNumber = 19
  var array8 = new GraceList([
]);

  var var_constants = array8;
  lineNumber = 1
var func9 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 18
  return var_constants
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["constants"] = func9;
  lineNumber = 1
var func10 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_constants = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["constants:="] = func10;
  lineNumber = 20
  var array11 = new GraceList([
]);

  var var_output = array11;
  lineNumber = 1
var func12 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 19
  return var_output
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["output"] = func12;
  lineNumber = 1
var func13 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_output = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["output:="] = func13;
  lineNumber = 21
  var array14 = new GraceList([
]);

  var var_usedvars = array14;
  lineNumber = 1
var func15 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 20
  return var_usedvars
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["usedvars"] = func15;
  lineNumber = 1
var func16 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_usedvars = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["usedvars:="] = func16;
  lineNumber = 22
  var array17 = new GraceList([
]);

  var var_declaredvars = array17;
  lineNumber = 1
var func18 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 21
  return var_declaredvars
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["declaredvars"] = func18;
  lineNumber = 1
var func19 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_declaredvars = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["declaredvars:="] = func19;
  lineNumber = 23
  lineNumber = 22
  var string20 = new GraceString("entry");
  var var_bblock = string20;
  lineNumber = 1
var func21 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 22
  return var_bblock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bblock"] = func21;
  lineNumber = 1
var func22 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_bblock = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bblock:="] = func22;
  lineNumber = 24
  lineNumber = 23
  var var_linenum = new GraceNum(1);
  lineNumber = 1
var func23 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 23
  return var_linenum
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["linenum"] = func23;
  lineNumber = 1
var func24 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_linenum = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["linenum:="] = func24;
  lineNumber = 25
  var array25 = new GraceList([
]);

  var var_modules = array25;
  lineNumber = 1
var func26 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 24
  return var_modules
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modules"] = func26;
  lineNumber = 1
var func27 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_modules = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modules:="] = func27;
  lineNumber = 26
  var array28 = new GraceList([
]);

  var var_staticmodules = array28;
  lineNumber = 1
var func29 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 25
  return var_staticmodules
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["staticmodules"] = func29;
  lineNumber = 1
var func30 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_staticmodules = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["staticmodules:="] = func30;
  lineNumber = 27
  var array31 = new GraceList([
]);

  var var_values = array31;
  lineNumber = 1
var func32 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 26
  return var_values
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["values"] = func32;
  lineNumber = 1
var func33 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_values = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["values:="] = func33;
  lineNumber = 28
  var var_outfile;
  lineNumber = 1
var func34 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 27
  return var_outfile
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outfile"] = func34;
  lineNumber = 1
var func35 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_outfile = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outfile:="] = func35;
  lineNumber = 29
  lineNumber = 28
  var string36 = new GraceString("main");
  var var_modname = string36;
  lineNumber = 1
var func37 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 28
  return var_modname
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modname"] = func37;
  lineNumber = 1
var func38 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_modname = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modname:="] = func38;
  lineNumber = 30
  lineNumber = 29
  var string39 = new GraceString("build");
  var var_runmode = string39;
  lineNumber = 1
var func40 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 29
  return var_runmode
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["runmode"] = func40;
  lineNumber = 1
var func41 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_runmode = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["runmode:="] = func41;
  lineNumber = 31
  lineNumber = 30
  var string42 = new GraceString("bc");
  var var_buildtype = string42;
  lineNumber = 1
var func43 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 30
  return var_buildtype
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["buildtype"] = func43;
  lineNumber = 1
var func44 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_buildtype = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["buildtype:="] = func44;
  lineNumber = 32
  lineNumber = 31
  var string45 = new GraceString("gracelib.bc");
  var var_gracelibPath = string45;
  lineNumber = 1
var func46 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 31
  return var_gracelibPath
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["gracelibPath"] = func46;
  lineNumber = 1
var func47 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_gracelibPath = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["gracelibPath:="] = func47;
  lineNumber = 33
  lineNumber = 32
  var bool48 = new GraceBoolean(false)
  var var_inBlock = bool48;
  lineNumber = 1
var func49 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 32
  return var_inBlock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["inBlock"] = func49;
  lineNumber = 1
var func50 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_inBlock = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["inBlock:="] = func50;
  lineNumber = 34
  lineNumber = 33
  var var_paramsUsed = new GraceNum(1);
  lineNumber = 1
var func51 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 33
  return var_paramsUsed
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["paramsUsed"] = func51;
  lineNumber = 1
var func52 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_paramsUsed = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["paramsUsed:="] = func52;
  lineNumber = 36
  lineNumber = 34
  var var_topLevelMethodPos = new GraceNum(1);
  lineNumber = 1
var func53 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 34
  return var_topLevelMethodPos
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["topLevelMethodPos"] = func53;
  lineNumber = 1
var func54 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_topLevelMethodPos = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["topLevelMethodPos:="] = func54;
  lineNumber = 37
var func55 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call56 = callmethod(var_output,"push", [1], var_s);
  return call56
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["out"] = func55;
  lineNumber = 40
var func57 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call58 = callmethod(var_util,"outprint", [1], var_s);
  return call58
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outprint"] = func57;
  lineNumber = 43
var func59 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var call60 = callmethod(var_util,"log_verbose", [1], var_s);
  return call60
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["log_verbose"] = func59;
  lineNumber = 47
var func61 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 46
  var string62 = new GraceString("%");
  var opresult64 = callmethod(string62, "++", [1], var_s);
  var_bblock = opresult64;
  lineNumber = 47
  var string65 = new GraceString(":");
  var opresult67 = callmethod(var_s, "++", [1], string65);
  lineNumber = 48
  var call68 = callmethod(this,"out", [1], opresult67);
  return call68
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["beginblock"] = func61;
  lineNumber = 62
var func69 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 51
  lineNumber = 50
  var var_myc = var_auto__95__count;
  lineNumber = 52
  lineNumber = 51
  var opresult71 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult71;
  lineNumber = 53
  var var_r;
  var string72 = new GraceString("  %array");
  var opresult74 = callmethod(string72, "++", [1], var_myc);
  var string75 = new GraceString(" = call %object @alloc_List()");
  var opresult77 = callmethod(opresult74, "++", [1], string75);
  lineNumber = 54
  var call78 = callmethod(this,"out", [1], opresult77);
  lineNumber = 59
  lineNumber = 54
  lineNumber = 1
  lineNumber = 54
  var call79 = callmethod(var_o,"value", [0]);
  lineNumber = 59
  var block80 = Grace_allocObject();
  block80.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block80.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block80.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block80.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block80.receiver = this;
  block80.className = 'block<genllvm30:59>';
  block80.real = function(
var_a
) {
  lineNumber = 55
  lineNumber = 56
  var call81 = callmethod(this,"compilenode", [1], var_a);
  var_r = call81;
  var string82 = new GraceString("  store %object ");
  var opresult84 = callmethod(string82, "++", [1], var_r);
  var string85 = new GraceString(", %object* %params_0");
  var opresult87 = callmethod(opresult84, "++", [1], string85);
  lineNumber = 57
  var call88 = callmethod(this,"out", [1], opresult87);
  lineNumber = 59
  lineNumber = 57
  var string89 = new GraceString("  call %object @callmethod(%object %array");
  lineNumber = 58
  var opresult91 = callmethod(string89, "++", [1], var_myc);
  var string92 = new GraceString(", i8* getelementptr([5 x i8]* @.str._push");
  var opresult94 = callmethod(opresult91, "++", [1], string92);
  lineNumber = 59
  var string95 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult97 = callmethod(opresult94, "++", [1], string95);
  lineNumber = 60
  var call98 = callmethod(this,"out", [1], opresult97);
  return call98;
};
  var call99 = callmethod(Grace_prelude,"for()do", [1, 1], call79, block80);
  lineNumber = 62
  lineNumber = 1
  lineNumber = 62
  lineNumber = 61
  var string100 = new GraceString("%array");
  var opresult102 = callmethod(string100, "++", [1], var_myc);
  var call103 = callmethod(var_o,"register:=", [1], opresult102);
  return call103
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilearray"] = func69;
  lineNumber = 69
var func104 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 66
  var array105 = new GraceList([
]);

  var var_l = array105;
  var call106 = callmethod(var_ast,"astcall", [2], var_o, var_l);
  var var_c = call106;
  lineNumber = 67
  lineNumber = 68
  var call107 = callmethod(this,"compilenode", [1], var_c);
  var var_r = call107;
  lineNumber = 69
  lineNumber = 1
  lineNumber = 68
  var call108 = callmethod(var_o,"register:=", [1], var_r);
  return call108
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilemember"] = func104;
  lineNumber = 98
var func109 = function(argcv) {
  var curarg = 1;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_outerRef = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 72
  lineNumber = 71
  var var_myc = var_auto__95__count;
  lineNumber = 73
  lineNumber = 72
  var opresult111 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult111;
  lineNumber = 74
  lineNumber = 73
  var string112 = new GraceString("outer");
  var var_nm = string112;
  lineNumber = 74
  var call113 = Grace_length(var_nm);
  var opresult115 = callmethod(call113, "+", [1], new GraceNum(1));
  var var_len = opresult115;
  lineNumber = 75
  lineNumber = 1
  lineNumber = 75
  var call116 = callmethod(var_nm,"_escape", [0]);
  var var_enm = call116;
  lineNumber = 78
  lineNumber = 76
  var string117 = new GraceString("@.str.methname");
  var opresult119 = callmethod(string117, "++", [1], var_myc);
  var string120 = new GraceString(" = private unnamed_addr ");
  var opresult122 = callmethod(opresult119, "++", [1], string120);
  lineNumber = 77
  var string123 = new GraceString("constant [");
  var opresult125 = callmethod(opresult122, "++", [1], string123);
  var opresult127 = callmethod(opresult125, "++", [1], var_len);
  var string128 = new GraceString(" x i8] c\"");
  var opresult130 = callmethod(opresult127, "++", [1], string128);
  var opresult132 = callmethod(opresult130, "++", [1], var_enm);
  var string133 = new GraceString("\\00\"");
  var opresult135 = callmethod(opresult132, "++", [1], string133);
  var var_con = opresult135;
  lineNumber = 78
  var call136 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 79
  var string137 = new GraceString("; OBJECT OUTER DEC ");
  var opresult139 = callmethod(string137, "++", [1], var_enm);
  lineNumber = 80
  var call140 = callmethod(this,"out", [1], opresult139);
  var string141 = new GraceString("  call void @adddatum2(%object ");
  var opresult143 = callmethod(string141, "++", [1], var_selfr);
  var string144 = new GraceString(", %object ");
  var opresult146 = callmethod(opresult143, "++", [1], string144);
  var opresult148 = callmethod(opresult146, "++", [1], var_outerRef);
  var string149 = new GraceString(", i32 0)");
  var opresult151 = callmethod(opresult148, "++", [1], string149);
  lineNumber = 81
  var call152 = callmethod(this,"out", [1], opresult151);
  lineNumber = 83
  lineNumber = 81
  var string153 = new GraceString("define private %object @\"reader_");
  var opresult155 = callmethod(string153, "++", [1], var_modname);
  var string156 = new GraceString("_");
  var opresult158 = callmethod(opresult155, "++", [1], string156);
  var opresult160 = callmethod(opresult158, "++", [1], var_enm);
  var string161 = new GraceString("_");
  var opresult163 = callmethod(opresult160, "++", [1], string161);
  var opresult165 = callmethod(opresult163, "++", [1], var_myc);
  lineNumber = 82
  var string166 = new GraceString("\"(%object %self, i32 %nparams, ");
  var opresult168 = callmethod(opresult165, "++", [1], string166);
  lineNumber = 83
  var string169 = new GraceString("%object* %args, i32 %flags) {");
  var opresult171 = callmethod(opresult168, "++", [1], string169);
  lineNumber = 84
  var call172 = callmethod(this,"outprint", [1], opresult171);
  var string173 = new GraceString("  %uo = bitcast %object %self to %UserObject*");
  lineNumber = 85
  var call174 = callmethod(this,"outprint", [1], string173);
  var string175 = new GraceString("  %fieldpp = getelementptr %UserObject* %uo, i32 0, i32 3");
  lineNumber = 86
  var call176 = callmethod(this,"outprint", [1], string175);
  var string177 = new GraceString("  %fieldpf = getelementptr [0 x %object]* %fieldpp, i32 0, i32 0");
  lineNumber = 87
  var call178 = callmethod(this,"outprint", [1], string177);
  var string179 = new GraceString("  %val = load %object* %fieldpf");
  lineNumber = 88
  var call180 = callmethod(this,"outprint", [1], string179);
  var string181 = new GraceString("  ret %object %val");
  lineNumber = 89
  var call182 = callmethod(this,"outprint", [1], string181);
  var string183 = new GraceString("}");
  lineNumber = 90
  var call184 = callmethod(this,"outprint", [1], string183);
  lineNumber = 98
  lineNumber = 90
  var string185 = new GraceString("  call void @addmethod2(%object ");
  var opresult187 = callmethod(string185, "++", [1], var_selfr);
  lineNumber = 91
  var string188 = new GraceString(", i8* getelementptr([");
  var opresult190 = callmethod(opresult187, "++", [1], string188);
  lineNumber = 92
  var opresult192 = callmethod(opresult190, "++", [1], var_len);
  var string193 = new GraceString(" x i8]* @.str.methname");
  var opresult195 = callmethod(opresult192, "++", [1], string193);
  var opresult197 = callmethod(opresult195, "++", [1], var_myc);
  var string198 = new GraceString(", i32 0, i32 0), ");
  var opresult200 = callmethod(opresult197, "++", [1], string198);
  lineNumber = 93
  var string201 = new GraceString("%object(%object, i32, %object*, i32)* ");
  var opresult203 = callmethod(opresult200, "++", [1], string201);
  lineNumber = 94
  var string204 = new GraceString("getelementptr(%object ");
  var opresult206 = callmethod(opresult203, "++", [1], string204);
  lineNumber = 95
  var string207 = new GraceString("(%object, i32, %object*, i32)* ");
  var opresult209 = callmethod(opresult206, "++", [1], string207);
  lineNumber = 96
  var string210 = new GraceString("@\"reader_");
  var opresult212 = callmethod(opresult209, "++", [1], string210);
  var opresult214 = callmethod(opresult212, "++", [1], var_modname);
  var string215 = new GraceString("_");
  var opresult217 = callmethod(opresult214, "++", [1], string215);
  var opresult219 = callmethod(opresult217, "++", [1], var_enm);
  lineNumber = 97
  var string220 = new GraceString("_");
  var opresult222 = callmethod(opresult219, "++", [1], string220);
  var opresult224 = callmethod(opresult222, "++", [1], var_myc);
  lineNumber = 98
  var string225 = new GraceString("\"))");
  var opresult227 = callmethod(opresult224, "++", [1], string225);
  lineNumber = 99
  var call228 = callmethod(this,"out", [1], opresult227);
  return call228
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjouter"] = func109;
  lineNumber = 137
var func229 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 102
  lineNumber = 101
  var string230 = new GraceString("%undefined");
  var var_val = string230;
  lineNumber = 107
  lineNumber = 110
  lineNumber = 102
  var bool232 = new GraceBoolean(false)
  lineNumber = 110
  lineNumber = 1
  lineNumber = 102
  var call233 = callmethod(var_o,"value", [0]);
  var opresult235 = callmethod(bool232, "!=", [1], call233);
  if (Grace_isTrue(opresult235)) {
  lineNumber = 107
  lineNumber = 109
  lineNumber = 1
  lineNumber = 109
  lineNumber = 1
  lineNumber = 103
  var call237 = callmethod(var_o,"value", [0]);
  var call238 = callmethod(call237,"kind", [0]);
  var string239 = new GraceString("object");
  var opresult241 = callmethod(call238, "==", [1], string239);
  if (Grace_isTrue(opresult241)) {
  lineNumber = 104
  lineNumber = 1
  lineNumber = 104
  var call242 = callmethod(var_o,"value", [0]);
  lineNumber = 105
  var call243 = callmethod(this,"compileobject", [2], call242, var_selfr);
  lineNumber = 106
  lineNumber = 1
  lineNumber = 106
  lineNumber = 1
  lineNumber = 105
  var call244 = callmethod(var_o,"value", [0]);
  var call245 = callmethod(call244,"register", [0]);
  var_val = call245;
  var if236 = call245;
  } else {
  lineNumber = 107
  lineNumber = 1
  lineNumber = 107
  var call246 = callmethod(var_o,"value", [0]);
  lineNumber = 108
  var call247 = callmethod(this,"compilenode", [1], call246);
  var_val = call247;
  var if236 = call247;
}
  var if231 = if236;
}
  lineNumber = 111
  lineNumber = 110
  var var_myc = var_auto__95__count;
  lineNumber = 112
  lineNumber = 111
  var opresult249 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult249;
  lineNumber = 113
  lineNumber = 1
  lineNumber = 113
  lineNumber = 1
  lineNumber = 112
  var call250 = callmethod(var_o,"name", [0]);
  var call251 = callmethod(call250,"value", [0]);
  var var_nm = call251;
  lineNumber = 113
  var call252 = Grace_length(var_nm);
  var opresult254 = callmethod(call252, "+", [1], new GraceNum(1));
  var var_len = opresult254;
  lineNumber = 114
  lineNumber = 1
  lineNumber = 114
  var call255 = callmethod(var_nm,"_escape", [0]);
  var var_enm = call255;
  lineNumber = 117
  lineNumber = 115
  var string256 = new GraceString("@.str.methname");
  var opresult258 = callmethod(string256, "++", [1], var_myc);
  var string259 = new GraceString(" = private unnamed_addr ");
  var opresult261 = callmethod(opresult258, "++", [1], string259);
  lineNumber = 116
  var string262 = new GraceString("constant [");
  var opresult264 = callmethod(opresult261, "++", [1], string262);
  var opresult266 = callmethod(opresult264, "++", [1], var_len);
  var string267 = new GraceString(" x i8] c\"");
  var opresult269 = callmethod(opresult266, "++", [1], string267);
  var opresult271 = callmethod(opresult269, "++", [1], var_enm);
  var string272 = new GraceString("\\00\"");
  var opresult274 = callmethod(opresult271, "++", [1], string272);
  var var_con = opresult274;
  lineNumber = 117
  var call275 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 118
  var string276 = new GraceString("; OBJECT CONST DEC ");
  var opresult278 = callmethod(string276, "++", [1], var_enm);
  lineNumber = 119
  var call279 = callmethod(this,"out", [1], opresult278);
  var string280 = new GraceString("  call void @adddatum2(%object ");
  var opresult282 = callmethod(string280, "++", [1], var_selfr);
  var string283 = new GraceString(", %object ");
  var opresult285 = callmethod(opresult282, "++", [1], string283);
  var opresult287 = callmethod(opresult285, "++", [1], var_val);
  var string288 = new GraceString(", i32 ");
  var opresult290 = callmethod(opresult287, "++", [1], string288);
  var opresult292 = callmethod(opresult290, "++", [1], var_pos);
  var string293 = new GraceString(")");
  var opresult295 = callmethod(opresult292, "++", [1], string293);
  lineNumber = 120
  var call296 = callmethod(this,"out", [1], opresult295);
  lineNumber = 122
  lineNumber = 120
  var string297 = new GraceString("define private %object @\"reader_");
  var opresult299 = callmethod(string297, "++", [1], var_modname);
  var string300 = new GraceString("_");
  var opresult302 = callmethod(opresult299, "++", [1], string300);
  var opresult304 = callmethod(opresult302, "++", [1], var_enm);
  var string305 = new GraceString("_");
  var opresult307 = callmethod(opresult304, "++", [1], string305);
  var opresult309 = callmethod(opresult307, "++", [1], var_myc);
  lineNumber = 121
  var string310 = new GraceString("\"(%object %self, i32 %nparams, ");
  var opresult312 = callmethod(opresult309, "++", [1], string310);
  lineNumber = 122
  var string313 = new GraceString("%object* %args, i32 %flags) {");
  var opresult315 = callmethod(opresult312, "++", [1], string313);
  lineNumber = 123
  var call316 = callmethod(this,"outprint", [1], opresult315);
  var string317 = new GraceString("  %uo = bitcast %object %self to %UserObject*");
  lineNumber = 124
  var call318 = callmethod(this,"outprint", [1], string317);
  var string319 = new GraceString("  %fieldpp = getelementptr %UserObject* %uo, i32 0, i32 3");
  lineNumber = 125
  var call320 = callmethod(this,"outprint", [1], string319);
  var string321 = new GraceString("  %fieldpf = getelementptr [0 x %object]* %fieldpp, i32 0, i32 ");
  var opresult323 = callmethod(string321, "++", [1], var_pos);
  var string324 = new GraceString("");
  var opresult326 = callmethod(opresult323, "++", [1], string324);
  lineNumber = 126
  var call327 = callmethod(this,"outprint", [1], opresult326);
  var string328 = new GraceString("  %val = load %object* %fieldpf");
  lineNumber = 127
  var call329 = callmethod(this,"outprint", [1], string328);
  var string330 = new GraceString("  ret %object %val");
  lineNumber = 128
  var call331 = callmethod(this,"outprint", [1], string330);
  var string332 = new GraceString("}");
  lineNumber = 129
  var call333 = callmethod(this,"outprint", [1], string332);
  lineNumber = 137
  lineNumber = 129
  var string334 = new GraceString("  call void @addmethod2(%object ");
  var opresult336 = callmethod(string334, "++", [1], var_selfr);
  lineNumber = 130
  var string337 = new GraceString(", i8* getelementptr([");
  var opresult339 = callmethod(opresult336, "++", [1], string337);
  lineNumber = 131
  var opresult341 = callmethod(opresult339, "++", [1], var_len);
  var string342 = new GraceString(" x i8]* @.str.methname");
  var opresult344 = callmethod(opresult341, "++", [1], string342);
  var opresult346 = callmethod(opresult344, "++", [1], var_myc);
  var string347 = new GraceString(", i32 0, i32 0), ");
  var opresult349 = callmethod(opresult346, "++", [1], string347);
  lineNumber = 132
  var string350 = new GraceString("%object(%object, i32, %object*, i32)* ");
  var opresult352 = callmethod(opresult349, "++", [1], string350);
  lineNumber = 133
  var string353 = new GraceString("getelementptr(%object ");
  var opresult355 = callmethod(opresult352, "++", [1], string353);
  lineNumber = 134
  var string356 = new GraceString("(%object, i32, %object*, i32)* ");
  var opresult358 = callmethod(opresult355, "++", [1], string356);
  lineNumber = 135
  var string359 = new GraceString("@\"reader_");
  var opresult361 = callmethod(opresult358, "++", [1], string359);
  var opresult363 = callmethod(opresult361, "++", [1], var_modname);
  var string364 = new GraceString("_");
  var opresult366 = callmethod(opresult363, "++", [1], string364);
  var opresult368 = callmethod(opresult366, "++", [1], var_enm);
  lineNumber = 136
  var string369 = new GraceString("_");
  var opresult371 = callmethod(opresult368, "++", [1], string369);
  var opresult373 = callmethod(opresult371, "++", [1], var_myc);
  lineNumber = 137
  var string374 = new GraceString("\"))");
  var opresult376 = callmethod(opresult373, "++", [1], string374);
  lineNumber = 138
  var call377 = callmethod(this,"out", [1], opresult376);
  return call377
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjdefdec"] = func229;
  lineNumber = 198
var func378 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfr = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 141
  lineNumber = 140
  var string379 = new GraceString("%undefined");
  var var_val = string379;
  lineNumber = 142
  lineNumber = 144
  lineNumber = 141
  var bool381 = new GraceBoolean(false)
  lineNumber = 144
  lineNumber = 1
  lineNumber = 141
  var call382 = callmethod(var_o,"value", [0]);
  var opresult384 = callmethod(bool381, "!=", [1], call382);
  if (Grace_isTrue(opresult384)) {
  lineNumber = 142
  lineNumber = 1
  lineNumber = 142
  var call385 = callmethod(var_o,"value", [0]);
  lineNumber = 143
  var call386 = callmethod(this,"compilenode", [1], call385);
  var_val = call386;
  var if380 = call386;
}
  lineNumber = 145
  lineNumber = 144
  var var_myc = var_auto__95__count;
  lineNumber = 146
  lineNumber = 145
  var opresult388 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult388;
  lineNumber = 147
  lineNumber = 1
  lineNumber = 147
  lineNumber = 1
  lineNumber = 146
  var call389 = callmethod(var_o,"name", [0]);
  var call390 = callmethod(call389,"value", [0]);
  var var_nm = call390;
  lineNumber = 147
  var call391 = Grace_length(var_nm);
  var opresult393 = callmethod(call391, "+", [1], new GraceNum(1));
  var var_len = opresult393;
  lineNumber = 148
  lineNumber = 1
  lineNumber = 148
  var call394 = callmethod(var_nm,"_escape", [0]);
  var var_enm = call394;
  lineNumber = 151
  lineNumber = 149
  var string395 = new GraceString("@.str.methname");
  var opresult397 = callmethod(string395, "++", [1], var_myc);
  var string398 = new GraceString(" = private unnamed_addr ");
  var opresult400 = callmethod(opresult397, "++", [1], string398);
  lineNumber = 150
  var string401 = new GraceString("constant [");
  var opresult403 = callmethod(opresult400, "++", [1], string401);
  var opresult405 = callmethod(opresult403, "++", [1], var_len);
  var string406 = new GraceString(" x i8] c\"");
  var opresult408 = callmethod(opresult405, "++", [1], string406);
  var opresult410 = callmethod(opresult408, "++", [1], var_enm);
  var string411 = new GraceString("\\00\"");
  var opresult413 = callmethod(opresult410, "++", [1], string411);
  var var_con = opresult413;
  lineNumber = 151
  var call414 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 152
  var string415 = new GraceString("; OBJECT VAR DEC ");
  var opresult417 = callmethod(string415, "++", [1], var_nm);
  lineNumber = 153
  var call418 = callmethod(this,"out", [1], opresult417);
  var string419 = new GraceString("  call void @adddatum2(%object ");
  var opresult421 = callmethod(string419, "++", [1], var_selfr);
  var string422 = new GraceString(", %object ");
  var opresult424 = callmethod(opresult421, "++", [1], string422);
  var opresult426 = callmethod(opresult424, "++", [1], var_val);
  var string427 = new GraceString(", i32 ");
  var opresult429 = callmethod(opresult426, "++", [1], string427);
  var opresult431 = callmethod(opresult429, "++", [1], var_pos);
  var string432 = new GraceString(")");
  var opresult434 = callmethod(opresult431, "++", [1], string432);
  lineNumber = 154
  var call435 = callmethod(this,"out", [1], opresult434);
  lineNumber = 156
  lineNumber = 154
  var string436 = new GraceString("define private %object @\"reader_");
  var opresult438 = callmethod(string436, "++", [1], var_modname);
  var string439 = new GraceString("_");
  var opresult441 = callmethod(opresult438, "++", [1], string439);
  var opresult443 = callmethod(opresult441, "++", [1], var_enm);
  var string444 = new GraceString("_");
  var opresult446 = callmethod(opresult443, "++", [1], string444);
  var opresult448 = callmethod(opresult446, "++", [1], var_myc);
  lineNumber = 155
  var string449 = new GraceString("\"(%object %self, i32 %nparams, ");
  var opresult451 = callmethod(opresult448, "++", [1], string449);
  lineNumber = 156
  var string452 = new GraceString("%object* %args, i32 %flags) {");
  var opresult454 = callmethod(opresult451, "++", [1], string452);
  lineNumber = 157
  var call455 = callmethod(this,"outprint", [1], opresult454);
  var string456 = new GraceString("  %uo = bitcast %object %self to %UserObject*");
  lineNumber = 158
  var call457 = callmethod(this,"outprint", [1], string456);
  var string458 = new GraceString("  %fieldpp = getelementptr %UserObject* %uo, i32 0, i32 3");
  lineNumber = 159
  var call459 = callmethod(this,"outprint", [1], string458);
  var string460 = new GraceString("  %fieldpf = getelementptr [0 x %object]* %fieldpp, i32 0, i32 ");
  var opresult462 = callmethod(string460, "++", [1], var_pos);
  var string463 = new GraceString("");
  var opresult465 = callmethod(opresult462, "++", [1], string463);
  lineNumber = 160
  var call466 = callmethod(this,"outprint", [1], opresult465);
  var string467 = new GraceString("  %val = load %object* %fieldpf");
  lineNumber = 161
  var call468 = callmethod(this,"outprint", [1], string467);
  var string469 = new GraceString("  ret %object %val");
  lineNumber = 162
  var call470 = callmethod(this,"outprint", [1], string469);
  var string471 = new GraceString("}");
  lineNumber = 163
  var call472 = callmethod(this,"outprint", [1], string471);
  lineNumber = 171
  lineNumber = 163
  var string473 = new GraceString("  call void @addmethod2(%object ");
  var opresult475 = callmethod(string473, "++", [1], var_selfr);
  lineNumber = 164
  var string476 = new GraceString(", i8* getelementptr([");
  var opresult478 = callmethod(opresult475, "++", [1], string476);
  lineNumber = 165
  var opresult480 = callmethod(opresult478, "++", [1], var_len);
  var string481 = new GraceString(" x i8]* @.str.methname");
  var opresult483 = callmethod(opresult480, "++", [1], string481);
  var opresult485 = callmethod(opresult483, "++", [1], var_myc);
  var string486 = new GraceString(", i32 0, i32 0), ");
  var opresult488 = callmethod(opresult485, "++", [1], string486);
  lineNumber = 166
  var string489 = new GraceString("%object(%object, i32, %object*, i32)* ");
  var opresult491 = callmethod(opresult488, "++", [1], string489);
  lineNumber = 167
  var string492 = new GraceString("getelementptr(%object ");
  var opresult494 = callmethod(opresult491, "++", [1], string492);
  lineNumber = 168
  var string495 = new GraceString("(%object, i32, %object*, i32)* ");
  var opresult497 = callmethod(opresult494, "++", [1], string495);
  lineNumber = 169
  var string498 = new GraceString("@\"reader_");
  var opresult500 = callmethod(opresult497, "++", [1], string498);
  var opresult502 = callmethod(opresult500, "++", [1], var_modname);
  var string503 = new GraceString("_");
  var opresult505 = callmethod(opresult502, "++", [1], string503);
  var opresult507 = callmethod(opresult505, "++", [1], var_enm);
  lineNumber = 170
  var string508 = new GraceString("_");
  var opresult510 = callmethod(opresult507, "++", [1], string508);
  var opresult512 = callmethod(opresult510, "++", [1], var_myc);
  lineNumber = 171
  var string513 = new GraceString("\"))");
  var opresult515 = callmethod(opresult512, "++", [1], string513);
  lineNumber = 172
  var call516 = callmethod(this,"out", [1], opresult515);
  lineNumber = 173
  lineNumber = 172
  var string517 = new GraceString(":=");
  var opresult519 = callmethod(var_nm, "++", [1], string517);
  var var_nmw = opresult519;
  lineNumber = 173
  var call520 = Grace_length(var_nmw);
  var opresult522 = callmethod(call520, "+", [1], new GraceNum(1));
  var_len = opresult522;
  lineNumber = 174
  lineNumber = 1
  lineNumber = 174
  var call523 = callmethod(var_nmw,"_escape", [0]);
  var_nmw = call523;
  lineNumber = 177
  lineNumber = 175
  var string524 = new GraceString("@.str.methnamew");
  var opresult526 = callmethod(string524, "++", [1], var_myc);
  var string527 = new GraceString(" = private unnamed_addr ");
  var opresult529 = callmethod(opresult526, "++", [1], string527);
  lineNumber = 176
  var string530 = new GraceString("constant [");
  var opresult532 = callmethod(opresult529, "++", [1], string530);
  var opresult534 = callmethod(opresult532, "++", [1], var_len);
  var string535 = new GraceString(" x i8] c\"");
  var opresult537 = callmethod(opresult534, "++", [1], string535);
  var opresult539 = callmethod(opresult537, "++", [1], var_nmw);
  var string540 = new GraceString("\\00\"");
  var opresult542 = callmethod(opresult539, "++", [1], string540);
  var_con = opresult542;
  lineNumber = 177
  var call543 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 180
  lineNumber = 178
  var string544 = new GraceString("define private %object @\"writer_");
  var opresult546 = callmethod(string544, "++", [1], var_modname);
  var string547 = new GraceString("_");
  var opresult549 = callmethod(opresult546, "++", [1], string547);
  var opresult551 = callmethod(opresult549, "++", [1], var_enm);
  var string552 = new GraceString("_");
  var opresult554 = callmethod(opresult551, "++", [1], string552);
  var opresult556 = callmethod(opresult554, "++", [1], var_myc);
  lineNumber = 179
  var string557 = new GraceString("\"(%object %self, i32 %nparams, ");
  var opresult559 = callmethod(opresult556, "++", [1], string557);
  lineNumber = 180
  var string560 = new GraceString("%object* %args, i32 %flags) {");
  var opresult562 = callmethod(opresult559, "++", [1], string560);
  lineNumber = 181
  var call563 = callmethod(this,"outprint", [1], opresult562);
  var string564 = new GraceString("  %params = getelementptr %object* %args, i32 0");
  lineNumber = 182
  var call565 = callmethod(this,"outprint", [1], string564);
  var string566 = new GraceString("  %par0 = load %object* %params");
  lineNumber = 183
  var call567 = callmethod(this,"outprint", [1], string566);
  var string568 = new GraceString("  %uo = bitcast %object %self to %UserObject*");
  lineNumber = 184
  var call569 = callmethod(this,"outprint", [1], string568);
  var string570 = new GraceString("  %fieldpp = getelementptr %UserObject* %uo, i32 0, i32 3");
  lineNumber = 185
  var call571 = callmethod(this,"outprint", [1], string570);
  var string572 = new GraceString("  %fieldpf = getelementptr [0 x %object]* %fieldpp, i32 0, i32 ");
  var opresult574 = callmethod(string572, "++", [1], var_pos);
  var string575 = new GraceString("");
  var opresult577 = callmethod(opresult574, "++", [1], string575);
  lineNumber = 186
  var call578 = callmethod(this,"outprint", [1], opresult577);
  var string579 = new GraceString("  store %object %par0, %object* %fieldpf");
  lineNumber = 187
  var call580 = callmethod(this,"outprint", [1], string579);
  var string581 = new GraceString("  %none = load %object* @none");
  lineNumber = 188
  var call582 = callmethod(this,"outprint", [1], string581);
  var string583 = new GraceString("  ret %object %none");
  lineNumber = 189
  var call584 = callmethod(this,"outprint", [1], string583);
  var string585 = new GraceString("}");
  lineNumber = 190
  var call586 = callmethod(this,"outprint", [1], string585);
  lineNumber = 198
  lineNumber = 190
  var string587 = new GraceString("  call void @addmethod2(%object ");
  var opresult589 = callmethod(string587, "++", [1], var_selfr);
  lineNumber = 191
  var string590 = new GraceString(", i8* getelementptr([");
  var opresult592 = callmethod(opresult589, "++", [1], string590);
  lineNumber = 192
  var opresult594 = callmethod(opresult592, "++", [1], var_len);
  var string595 = new GraceString(" x i8]* @.str.methnamew");
  var opresult597 = callmethod(opresult594, "++", [1], string595);
  var opresult599 = callmethod(opresult597, "++", [1], var_myc);
  var string600 = new GraceString(", i32 0, i32 0), ");
  var opresult602 = callmethod(opresult599, "++", [1], string600);
  lineNumber = 193
  var string603 = new GraceString("%object(%object, i32, %object*, i32)* ");
  var opresult605 = callmethod(opresult602, "++", [1], string603);
  lineNumber = 194
  var string606 = new GraceString("getelementptr(%object ");
  var opresult608 = callmethod(opresult605, "++", [1], string606);
  lineNumber = 195
  var string609 = new GraceString("(%object, i32, %object*, i32)* ");
  var opresult611 = callmethod(opresult608, "++", [1], string609);
  lineNumber = 196
  var string612 = new GraceString("@\"writer_");
  var opresult614 = callmethod(opresult611, "++", [1], string612);
  var opresult616 = callmethod(opresult614, "++", [1], var_modname);
  var string617 = new GraceString("_");
  var opresult619 = callmethod(opresult616, "++", [1], string617);
  var opresult621 = callmethod(opresult619, "++", [1], var_enm);
  lineNumber = 197
  var string622 = new GraceString("_");
  var opresult624 = callmethod(opresult621, "++", [1], string622);
  var opresult626 = callmethod(opresult624, "++", [1], var_myc);
  lineNumber = 198
  var string627 = new GraceString("\"))");
  var opresult629 = callmethod(opresult626, "++", [1], string627);
  lineNumber = 199
  var call630 = callmethod(this,"out", [1], opresult629);
  return call630
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobjvardec"] = func378;
  lineNumber = 208
var func631 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 202
  lineNumber = 1
  lineNumber = 201
  var call632 = callmethod(var_o,"params", [0]);
  var var_params = call632;
  lineNumber = 202
  lineNumber = 1
  lineNumber = 202
  var call634 = callmethod(var_o,"value", [0]);
  lineNumber = 1
  lineNumber = 202
  var call635 = callmethod(var_o,"superclass", [0]);
  var call636 = callmethod(var_ast,"astobject", [2], call634, call635);
  var array633 = new GraceList([
call636,
]);

  var var_mbody = array633;
  lineNumber = 204
  lineNumber = 203
  var string637 = new GraceString("new");
  var bool638 = new GraceBoolean(false)
  var call639 = callmethod(var_ast,"astidentifier", [2], string637, bool638);
  lineNumber = 204
  var bool640 = new GraceBoolean(false)
  lineNumber = 203
  var call641 = callmethod(var_ast,"astmethod", [4], call639, var_params, var_mbody, bool640);
  var var_newmeth = call641;
  lineNumber = 205
  var array642 = new GraceList([
var_newmeth,
]);

  var var_obody = array642;
  lineNumber = 206
  var bool643 = new GraceBoolean(false)
  var call644 = callmethod(var_ast,"astobject", [2], var_obody, bool643);
  var var_cobj = call644;
  lineNumber = 207
  lineNumber = 1
  lineNumber = 207
  var call645 = callmethod(var_o,"name", [0]);
  var bool646 = new GraceBoolean(false)
  var call647 = callmethod(var_ast,"astdefdec", [3], call645, var_cobj, bool646);
  var var_con = call647;
  lineNumber = 208
  lineNumber = 1
  lineNumber = 208
  lineNumber = 209
  var call648 = callmethod(this,"compilenode", [1], var_con);
  lineNumber = 208
  var call649 = callmethod(var_o,"register:=", [1], call648);
  return call649
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileclass"] = func631;
  lineNumber = 252
var func650 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_outerRef = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 212
  lineNumber = 211
  var var_origInBlock = var_inBlock;
  lineNumber = 213
  lineNumber = 212
  var bool651 = new GraceBoolean(false)
  var_inBlock = bool651;
  lineNumber = 214
  lineNumber = 213
  var var_myc = var_auto__95__count;
  lineNumber = 215
  lineNumber = 214
  var opresult653 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult653;
  lineNumber = 216
  lineNumber = 215
  var string654 = new GraceString("%obj");
  var opresult656 = callmethod(string654, "++", [1], var_myc);
  var var_selfr = opresult656;
  lineNumber = 217
  lineNumber = 216
  var var_numFields = new GraceNum(1);
  lineNumber = 218
  lineNumber = 217
  var var_numMethods = new GraceNum(0);
  lineNumber = 219
  lineNumber = 218
  var var_pos = new GraceNum(1);
  lineNumber = 225
  lineNumber = 219
  lineNumber = 1
  lineNumber = 219
  var call657 = callmethod(var_o,"value", [0]);
  lineNumber = 225
  var block658 = Grace_allocObject();
  block658.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block658.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block658.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block658.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block658.receiver = this;
  block658.className = 'block<genllvm30:225>';
  block658.real = function(
var_e
) {
  lineNumber = 222
  lineNumber = 223
  lineNumber = 1
  lineNumber = 220
  var call660 = callmethod(var_e,"kind", [0]);
  var string661 = new GraceString("vardec");
  var opresult663 = callmethod(call660, "==", [1], string661);
  if (Grace_isTrue(opresult663)) {
  lineNumber = 222
  lineNumber = 221
  var opresult665 = callmethod(var_numMethods, "+", [1], new GraceNum(1));
  var_numMethods = opresult665;
  var if659 = opresult665;
}
  lineNumber = 224
  lineNumber = 223
  var opresult667 = callmethod(var_numMethods, "+", [1], new GraceNum(1));
  var_numMethods = opresult667;
  lineNumber = 225
  lineNumber = 224
  var opresult669 = callmethod(var_numFields, "+", [1], new GraceNum(1));
  var_numFields = opresult669;
  return opresult669;
};
  var call670 = callmethod(Grace_prelude,"for()do", [1, 1], call657, block658);
  lineNumber = 228
  lineNumber = 229
  lineNumber = 226
  var opresult673 = callmethod(var_numFields, "==", [1], new GraceNum(3));
  if (Grace_isTrue(opresult673)) {
  lineNumber = 228
  lineNumber = 227
  var_numFields = new GraceNum(4);
  var if671 = new GraceNum(4);
}
  lineNumber = 233
  lineNumber = 235
  lineNumber = 1
  lineNumber = 229
  var call675 = callmethod(var_o,"superclass", [0]);
  var bool676 = new GraceBoolean(false)
  var opresult678 = callmethod(call675, "/=", [1], bool676);
  if (Grace_isTrue(opresult678)) {
  lineNumber = 230
  lineNumber = 1
  lineNumber = 230
  var call679 = callmethod(var_o,"superclass", [0]);
  lineNumber = 231
  var call680 = callmethod(this,"compilenode", [1], call679);
  var_selfr = call680;
  var if674 = call680;
  } else {
  lineNumber = 233
  lineNumber = 232
  var string681 = new GraceString("  ");
  var opresult683 = callmethod(string681, "++", [1], var_selfr);
  lineNumber = 233
  lineNumber = 232
  var string684 = new GraceString(" = call %object @alloc_obj2(i32 ");
  var opresult686 = callmethod(string684, "++", [1], var_numMethods);
  var string687 = new GraceString(",");
  var opresult689 = callmethod(opresult686, "++", [1], string687);
  var opresult691 = callmethod(opresult683, "++", [1], opresult689);
  lineNumber = 233
  var string692 = new GraceString("i32 ");
  var opresult694 = callmethod(string692, "++", [1], var_numFields);
  var string695 = new GraceString(")");
  var opresult697 = callmethod(opresult694, "++", [1], string695);
  var opresult699 = callmethod(opresult691, "++", [1], opresult697);
  lineNumber = 234
  var call700 = callmethod(this,"out", [1], opresult699);
  var if674 = call700;
}
  lineNumber = 235
  lineNumber = 236
  var call701 = callmethod(this,"compileobjouter", [2], var_selfr, var_outerRef);
  lineNumber = 247
  lineNumber = 236
  lineNumber = 1
  lineNumber = 236
  var call702 = callmethod(var_o,"value", [0]);
  lineNumber = 247
  var block703 = Grace_allocObject();
  block703.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block703.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block703.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block703.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block703.receiver = this;
  block703.className = 'block<genllvm30:247>';
  block703.real = function(
var_e
) {
  lineNumber = 238
  lineNumber = 240
  lineNumber = 1
  lineNumber = 237
  var call705 = callmethod(var_e,"kind", [0]);
  var string706 = new GraceString("method");
  var opresult708 = callmethod(call705, "==", [1], string706);
  if (Grace_isTrue(opresult708)) {
  lineNumber = 238
  lineNumber = 239
  var call709 = callmethod(this,"compilemethod", [3], var_e, var_selfr, var_pos);
  var if704 = call709;
}
  lineNumber = 241
  lineNumber = 243
  lineNumber = 1
  lineNumber = 240
  var call711 = callmethod(var_e,"kind", [0]);
  var string712 = new GraceString("vardec");
  var opresult714 = callmethod(call711, "==", [1], string712);
  if (Grace_isTrue(opresult714)) {
  lineNumber = 241
  lineNumber = 242
  var call715 = callmethod(this,"compileobjvardec", [3], var_e, var_selfr, var_pos);
  var if710 = call715;
}
  lineNumber = 244
  lineNumber = 246
  lineNumber = 1
  lineNumber = 243
  var call717 = callmethod(var_e,"kind", [0]);
  var string718 = new GraceString("defdec");
  var opresult720 = callmethod(call717, "==", [1], string718);
  if (Grace_isTrue(opresult720)) {
  lineNumber = 244
  lineNumber = 245
  var call721 = callmethod(this,"compileobjdefdec", [3], var_e, var_selfr, var_pos);
  var if716 = call721;
}
  lineNumber = 247
  lineNumber = 246
  var opresult723 = callmethod(var_pos, "+", [1], new GraceNum(1));
  var_pos = opresult723;
  return opresult723;
};
  var call724 = callmethod(Grace_prelude,"for()do", [1, 1], call702, block703);
  lineNumber = 249
  lineNumber = 248
  var string725 = new GraceString("  call void @set_type(%object ");
  var opresult727 = callmethod(string725, "++", [1], var_selfr);
  var string728 = new GraceString(", ");
  var opresult730 = callmethod(opresult727, "++", [1], string728);
  lineNumber = 249
  var string731 = new GraceString("i16 ");
  lineNumber = 1
  lineNumber = 249
  var call732 = callmethod(var_o,"otype", [0]);
  var call733 = callmethod(var_subtype,"typeId", [1], call732);
  var opresult735 = callmethod(string731, "++", [1], call733);
  var string736 = new GraceString(")");
  var opresult738 = callmethod(opresult735, "++", [1], string736);
  var opresult740 = callmethod(opresult730, "++", [1], opresult738);
  lineNumber = 250
  var call741 = callmethod(this,"out", [1], opresult740);
  lineNumber = 251
  lineNumber = 1
  lineNumber = 250
  var call742 = callmethod(var_o,"register:=", [1], var_selfr);
  lineNumber = 252
  lineNumber = 251
  var_inBlock = var_origInBlock;
  return var_origInBlock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileobject"] = func650;
  lineNumber = 272
var func743 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 255
  lineNumber = 254
  var var_origInBlock = var_inBlock;
  lineNumber = 256
  lineNumber = 255
  var bool744 = new GraceBoolean(true)
  var_inBlock = bool744;
  lineNumber = 257
  lineNumber = 256
  var var_myc = var_auto__95__count;
  lineNumber = 258
  lineNumber = 257
  var opresult746 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult746;
  lineNumber = 259
  lineNumber = 258
  var string747 = new GraceString("apply");
  var bool748 = new GraceBoolean(false)
  var call749 = callmethod(var_ast,"astidentifier", [2], string747, bool748);
  lineNumber = 259
  lineNumber = 1
  lineNumber = 259
  var call750 = callmethod(var_o,"params", [0]);
  lineNumber = 1
  lineNumber = 259
  var call751 = callmethod(var_o,"body", [0]);
  var bool752 = new GraceBoolean(false)
  lineNumber = 258
  var call753 = callmethod(var_ast,"astmethod", [4], call749, call750, call751, bool752);
  var var_applymeth = call753;
  lineNumber = 261
  lineNumber = 1
  lineNumber = 260
  var bool754 = new GraceBoolean(true)
  var call755 = callmethod(var_applymeth,"selfclosure:=", [1], bool754);
  lineNumber = 261
  var array756 = new GraceList([
var_applymeth,
]);

  var bool757 = new GraceBoolean(false)
  var call758 = callmethod(var_ast,"astobject", [2], array756, bool757);
  var var_objbody = call758;
  lineNumber = 262
  lineNumber = 263
  var call759 = callmethod(this,"compilenode", [1], var_objbody);
  var var_obj = call759;
  lineNumber = 264
  lineNumber = 263
  var string760 = new GraceString("Block<");
  var opresult762 = callmethod(string760, "++", [1], var_modname);
  var string763 = new GraceString(":");
  var opresult765 = callmethod(opresult762, "++", [1], string763);
  var opresult767 = callmethod(opresult765, "++", [1], var_myc);
  var string768 = new GraceString(">");
  var opresult770 = callmethod(opresult767, "++", [1], string768);
  var var_modn = opresult770;
  lineNumber = 266
  lineNumber = 264
  var string771 = new GraceString("@.str.block");
  var opresult773 = callmethod(string771, "++", [1], var_myc);
  var string774 = new GraceString(" = private unnamed_addr ");
  var opresult776 = callmethod(opresult773, "++", [1], string774);
  lineNumber = 266
  lineNumber = 265
  var string777 = new GraceString("constant [");
  lineNumber = 266
  lineNumber = 1
  lineNumber = 265
  var call778 = callmethod(var_modn,"size", [0]);
  var opresult780 = callmethod(call778, "+", [1], new GraceNum(1));
  var opresult782 = callmethod(string777, "++", [1], opresult780);
  var string783 = new GraceString(" x i8] c\"");
  var opresult785 = callmethod(opresult782, "++", [1], string783);
  var opresult787 = callmethod(opresult785, "++", [1], var_modn);
  var string788 = new GraceString("\\00\"");
  var opresult790 = callmethod(opresult787, "++", [1], string788);
  var opresult792 = callmethod(opresult776, "++", [1], opresult790);
  var var_con = opresult792;
  lineNumber = 266
  var call793 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 269
  lineNumber = 267
  var string794 = new GraceString("  call void @setclassname(%object ");
  var opresult796 = callmethod(string794, "++", [1], var_obj);
  var string797 = new GraceString(", ");
  var opresult799 = callmethod(opresult796, "++", [1], string797);
  lineNumber = 269
  lineNumber = 268
  var string800 = new GraceString("i8* getelementptr([");
  lineNumber = 269
  lineNumber = 1
  lineNumber = 268
  var call801 = callmethod(var_modn,"size", [0]);
  var opresult803 = callmethod(call801, "+", [1], new GraceNum(1));
  var opresult805 = callmethod(string800, "++", [1], opresult803);
  var string806 = new GraceString(" x i8]* @.str.block");
  var opresult808 = callmethod(opresult805, "++", [1], string806);
  var opresult810 = callmethod(opresult808, "++", [1], var_myc);
  var string811 = new GraceString(",");
  var opresult813 = callmethod(opresult810, "++", [1], string811);
  var opresult815 = callmethod(opresult799, "++", [1], opresult813);
  lineNumber = 269
  var string816 = new GraceString("i32 0,i32 0))");
  var opresult818 = callmethod(opresult815, "++", [1], string816);
  lineNumber = 270
  var call819 = callmethod(this,"out", [1], opresult818);
  lineNumber = 271
  lineNumber = 1
  lineNumber = 270
  var call820 = callmethod(var_o,"register:=", [1], var_obj);
  lineNumber = 272
  lineNumber = 271
  var_inBlock = var_origInBlock;
  return var_origInBlock
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileblock"] = func743;
  lineNumber = 311
var func821 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 275
  lineNumber = 274
  var var_myc = var_auto__95__count;
  lineNumber = 276
  lineNumber = 275
  var opresult823 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult823;
  lineNumber = 276
  lineNumber = 1
  lineNumber = 276
  var call824 = callmethod(var_o,"value", [0]);
  lineNumber = 277
  var call825 = callmethod(this,"compilenode", [1], call824);
  var var_over = call825;
  lineNumber = 278
  lineNumber = 1
  lineNumber = 277
  var call826 = callmethod(var_o,"body", [0]);
  var var_blk = call826;
  lineNumber = 278
  lineNumber = 279
  var call827 = callmethod(this,"compilenode", [1], var_blk);
  var var_obj = call827;
  var string828 = new GraceString("  store %object ");
  var opresult830 = callmethod(string828, "++", [1], var_over);
  var string831 = new GraceString(", %object* %params_0");
  var opresult833 = callmethod(opresult830, "++", [1], string831);
  lineNumber = 280
  var call834 = callmethod(this,"out", [1], opresult833);
  lineNumber = 282
  lineNumber = 280
  var string835 = new GraceString("  %iter");
  var opresult837 = callmethod(string835, "++", [1], var_myc);
  var string838 = new GraceString(" = call %object @callmethod(%object ");
  var opresult840 = callmethod(opresult837, "++", [1], string838);
  var opresult842 = callmethod(opresult840, "++", [1], var_over);
  lineNumber = 281
  var string843 = new GraceString(", i8* getelementptr([5 x i8]* @.str._iter");
  var opresult845 = callmethod(opresult842, "++", [1], string843);
  lineNumber = 282
  var string846 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult848 = callmethod(opresult845, "++", [1], string846);
  lineNumber = 284
  var call849 = callmethod(this,"out", [1], opresult848);
  var string850 = new GraceString("  br label %BeginFor");
  var opresult852 = callmethod(string850, "++", [1], var_myc);
  lineNumber = 285
  var call853 = callmethod(this,"out", [1], opresult852);
  var string854 = new GraceString("BeginFor");
  var opresult856 = callmethod(string854, "++", [1], var_myc);
  lineNumber = 286
  var call857 = callmethod(this,"beginblock", [1], opresult856);
  lineNumber = 289
  lineNumber = 286
  var string858 = new GraceString("  %condobj");
  var opresult860 = callmethod(string858, "++", [1], var_myc);
  var string861 = new GraceString(" = call %object @callmethod(%object %iter");
  var opresult863 = callmethod(opresult860, "++", [1], string861);
  lineNumber = 287
  var opresult865 = callmethod(opresult863, "++", [1], var_myc);
  lineNumber = 288
  var string866 = new GraceString(", i8* getelementptr([9 x i8]* @.str._havemore");
  var opresult868 = callmethod(opresult865, "++", [1], string866);
  lineNumber = 289
  var string869 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult871 = callmethod(opresult868, "++", [1], string869);
  lineNumber = 290
  var call872 = callmethod(this,"out", [1], opresult871);
  lineNumber = 291
  lineNumber = 290
  var string873 = new GraceString("%cond");
  var opresult875 = callmethod(string873, "++", [1], var_myc);
  var var_creg = opresult875;
  lineNumber = 292
  lineNumber = 291
  var string876 = new GraceString("  ");
  var opresult878 = callmethod(string876, "++", [1], var_creg);
  var string879 = new GraceString("_valp = call i1 @istrue(%object %condobj");
  var opresult881 = callmethod(opresult878, "++", [1], string879);
  lineNumber = 292
  var opresult883 = callmethod(opresult881, "++", [1], var_myc);
  var string884 = new GraceString(")");
  var opresult886 = callmethod(opresult883, "++", [1], string884);
  lineNumber = 293
  var call887 = callmethod(this,"out", [1], opresult886);
  var string888 = new GraceString("  ");
  var opresult890 = callmethod(string888, "++", [1], var_creg);
  var string891 = new GraceString(" = icmp eq i1 0, ");
  var opresult893 = callmethod(opresult890, "++", [1], string891);
  var opresult895 = callmethod(opresult893, "++", [1], var_creg);
  var string896 = new GraceString("_valp");
  var opresult898 = callmethod(opresult895, "++", [1], string896);
  lineNumber = 294
  var call899 = callmethod(this,"out", [1], opresult898);
  lineNumber = 295
  lineNumber = 294
  var string900 = new GraceString("br i1 ");
  var opresult902 = callmethod(string900, "++", [1], var_creg);
  var string903 = new GraceString(", label %EndFor");
  var opresult905 = callmethod(opresult902, "++", [1], string903);
  var opresult907 = callmethod(opresult905, "++", [1], var_myc);
  lineNumber = 295
  var string908 = new GraceString(", label %ForBody");
  var opresult910 = callmethod(opresult907, "++", [1], string908);
  var opresult912 = callmethod(opresult910, "++", [1], var_myc);
  lineNumber = 296
  var call913 = callmethod(this,"out", [1], opresult912);
  var string914 = new GraceString("ForBody");
  var opresult916 = callmethod(string914, "++", [1], var_myc);
  lineNumber = 297
  var call917 = callmethod(this,"beginblock", [1], opresult916);
  lineNumber = 298
  lineNumber = 297
  var string918 = new GraceString("null");
  var var_tret = string918;
  lineNumber = 299
  lineNumber = 298
  var string919 = new GraceString("ERROR");
  var var_tblock = string919;
  lineNumber = 302
  lineNumber = 299
  var string920 = new GraceString(" %forval");
  var opresult922 = callmethod(string920, "++", [1], var_myc);
  var string923 = new GraceString(" = call %object @callmethod(%object %iter");
  var opresult925 = callmethod(opresult922, "++", [1], string923);
  lineNumber = 300
  var opresult927 = callmethod(opresult925, "++", [1], var_myc);
  lineNumber = 301
  var string928 = new GraceString(", i8* getelementptr([5 x i8]* @.str._next");
  var opresult930 = callmethod(opresult927, "++", [1], string928);
  lineNumber = 302
  var string931 = new GraceString(",i32 0,i32 0), i32 0, %object* %params)");
  var opresult933 = callmethod(opresult930, "++", [1], string931);
  lineNumber = 303
  var call934 = callmethod(this,"out", [1], opresult933);
  var string935 = new GraceString("  store %object %forval");
  var opresult937 = callmethod(string935, "++", [1], var_myc);
  var string938 = new GraceString(", %object* %params_0");
  var opresult940 = callmethod(opresult937, "++", [1], string938);
  lineNumber = 304
  var call941 = callmethod(this,"out", [1], opresult940);
  lineNumber = 306
  lineNumber = 304
  var string942 = new GraceString("  call %object @callmethod(%object ");
  var opresult944 = callmethod(string942, "++", [1], var_obj);
  lineNumber = 305
  var string945 = new GraceString(", i8* getelementptr([6 x i8]* @.str._apply");
  var opresult947 = callmethod(opresult944, "++", [1], string945);
  lineNumber = 306
  var string948 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult950 = callmethod(opresult947, "++", [1], string948);
  lineNumber = 307
  var call951 = callmethod(this,"out", [1], opresult950);
  lineNumber = 308
  lineNumber = 307
  var_tblock = var_bblock;
  lineNumber = 308
  var string952 = new GraceString("  br label %BeginFor");
  var opresult954 = callmethod(string952, "++", [1], var_myc);
  lineNumber = 309
  var call955 = callmethod(this,"out", [1], opresult954);
  var string956 = new GraceString("EndFor");
  var opresult958 = callmethod(string956, "++", [1], var_myc);
  lineNumber = 310
  var call959 = callmethod(this,"beginblock", [1], opresult958);
  lineNumber = 311
  lineNumber = 1
  lineNumber = 310
  var string960 = new GraceString("%none");
  var call961 = callmethod(var_o,"register:=", [1], string960);
  return call961
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilefor"] = func821;
  lineNumber = 521
var func962 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var var_selfobj = arguments[curarg];
  curarg++;
  var var_pos = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 318
  lineNumber = 317
  var var_origParamsUsed = var_paramsUsed;
  lineNumber = 319
  lineNumber = 318
  var_paramsUsed = new GraceNum(1);
  lineNumber = 320
  lineNumber = 319
  var var_origInBlock = var_inBlock;
  lineNumber = 321
  lineNumber = 1
  lineNumber = 320
  var call963 = callmethod(var_o,"selfclosure", [0]);
  var_inBlock = call963;
  lineNumber = 322
  lineNumber = 321
  var var_oldout = var_output;
  lineNumber = 323
  lineNumber = 322
  var var_oldbblock = var_bblock;
  lineNumber = 324
  lineNumber = 323
  var var_oldusedvars = var_usedvars;
  lineNumber = 325
  lineNumber = 324
  var var_olddeclaredvars = var_declaredvars;
  lineNumber = 326
  var array964 = new GraceList([
]);

  var_output = array964;
  lineNumber = 327
  var array965 = new GraceList([
]);

  var_usedvars = array965;
  lineNumber = 328
  var array966 = new GraceList([
]);

  var_declaredvars = array966;
  lineNumber = 329
  lineNumber = 328
  var var_myc = var_auto__95__count;
  lineNumber = 330
  lineNumber = 329
  var opresult968 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult968;
  lineNumber = 331
  lineNumber = 1
  lineNumber = 331
  lineNumber = 1
  lineNumber = 330
  var call969 = callmethod(var_o,"value", [0]);
  var call970 = callmethod(call969,"value", [0]);
  var var_name = call970;
  lineNumber = 332
  lineNumber = 331
  var opresult972 = callmethod(var_name, "++", [1], var_myc);
  var var_nm = opresult972;
  lineNumber = 332
  var string973 = new GraceString("entry");
  lineNumber = 333
  var call974 = callmethod(this,"beginblock", [1], string973);
  lineNumber = 1
  lineNumber = 333
  var call975 = callmethod(var_output,"pop", [0]);
  lineNumber = 335
  lineNumber = 1
  lineNumber = 335
  lineNumber = 1
  lineNumber = 334
  var call976 = callmethod(var_o,"params", [0]);
  var call977 = callmethod(call976,"size", [0]);
  var var_i = call977;
  lineNumber = 341
  lineNumber = 343
  lineNumber = 1
  lineNumber = 335
  var call979 = callmethod(var_o,"varargs", [0]);
  if (Grace_isTrue(call979)) {
  lineNumber = 336
  lineNumber = 1
  lineNumber = 336
  lineNumber = 1
  lineNumber = 336
  lineNumber = 1
  lineNumber = 336
  var call980 = callmethod(var_o,"vararg", [0]);
  var call981 = callmethod(call980,"value", [0]);
  var call982 = callmethod(call981,"_escape", [0]);
  var var_van = call982;
  lineNumber = 338
  lineNumber = 337
  var string983 = new GraceString("  %\"var_init_");
  var opresult985 = callmethod(string983, "++", [1], var_van);
  var string986 = new GraceString("\" = call %object @process_varargs(");
  var opresult988 = callmethod(opresult985, "++", [1], string986);
  lineNumber = 338
  var string989 = new GraceString("%object* %args, i32 ");
  var opresult991 = callmethod(string989, "++", [1], var_i);
  var string992 = new GraceString(", i32 %nparams)");
  var opresult994 = callmethod(opresult991, "++", [1], string992);
  var opresult996 = callmethod(opresult988, "++", [1], opresult994);
  lineNumber = 339
  var call997 = callmethod(this,"out", [1], opresult996);
  var string998 = new GraceString("  %\"var_");
  var opresult1000 = callmethod(string998, "++", [1], var_van);
  var string1001 = new GraceString("\" = call %object* @alloc_var()");
  var opresult1003 = callmethod(opresult1000, "++", [1], string1001);
  lineNumber = 340
  var call1004 = callmethod(this,"out", [1], opresult1003);
  var string1005 = new GraceString("  store %object %\"var_init_");
  var opresult1007 = callmethod(string1005, "++", [1], var_van);
  var string1008 = new GraceString("\", %object* %\"var_");
  var opresult1010 = callmethod(opresult1007, "++", [1], string1008);
  var opresult1012 = callmethod(opresult1010, "++", [1], var_van);
  var string1013 = new GraceString("\"");
  var opresult1015 = callmethod(opresult1012, "++", [1], string1013);
  lineNumber = 341
  var call1016 = callmethod(this,"out", [1], opresult1015);
  var call1017 = callmethod(var_declaredvars,"push", [1], var_van);
  var if978 = call1017;
}
  lineNumber = 343
  var string1018 = new GraceString("  %undefined = load %object* @undefined");
  lineNumber = 344
  var call1019 = callmethod(this,"out", [1], string1018);
  var string1020 = new GraceString("  %none = load %object* @none");
  lineNumber = 345
  var call1021 = callmethod(this,"out", [1], string1020);
  lineNumber = 346
  lineNumber = 345
  var string1022 = new GraceString("%none");
  var var_ret = string1022;
  lineNumber = 352
  lineNumber = 346
  lineNumber = 1
  lineNumber = 346
  var call1023 = callmethod(var_o,"body", [0]);
  lineNumber = 352
  var block1024 = Grace_allocObject();
  block1024.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1024.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1024.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1024.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1024.receiver = this;
  block1024.className = 'block<genllvm30:352>';
  block1024.real = function(
var_l
) {
  lineNumber = 354
  lineNumber = 1
  lineNumber = 347
  var call1026 = callmethod(var_l,"kind", [0]);
  var string1027 = new GraceString("vardec");
  var opresult1029 = callmethod(call1026, "==", [1], string1027);
  lineNumber = 354
  lineNumber = 1
  lineNumber = 347
  var call1030 = callmethod(var_l,"kind", [0]);
  var string1031 = new GraceString("defdec");
  var opresult1033 = callmethod(call1030, "==", [1], string1031);
  var opresult1035 = callmethod(opresult1029, "|", [1], opresult1033);
  lineNumber = 354
  lineNumber = 1
  lineNumber = 348
  var call1036 = callmethod(var_l,"kind", [0]);
  var string1037 = new GraceString("class");
  var opresult1039 = callmethod(call1036, "==", [1], string1037);
  var opresult1041 = callmethod(opresult1035, "|", [1], opresult1039);
  if (Grace_isTrue(opresult1041)) {
  lineNumber = 349
  lineNumber = 1
  lineNumber = 349
  lineNumber = 1
  lineNumber = 349
  lineNumber = 1
  lineNumber = 349
  var call1042 = callmethod(var_l,"name", [0]);
  var call1043 = callmethod(call1042,"value", [0]);
  var call1044 = callmethod(call1043,"_escape", [0]);
  var var_tnm = call1044;
  lineNumber = 350
  var call1045 = callmethod(var_declaredvars,"push", [1], var_tnm);
  lineNumber = 351
  var string1046 = new GraceString("  %\"var_");
  var opresult1048 = callmethod(string1046, "++", [1], var_tnm);
  var string1049 = new GraceString("\" = call %object* @alloc_var()");
  var opresult1051 = callmethod(opresult1048, "++", [1], string1049);
  lineNumber = 352
  var call1052 = callmethod(this,"out", [1], opresult1051);
  var string1053 = new GraceString("  store %object %undefined, %object* %\"var_");
  var opresult1055 = callmethod(string1053, "++", [1], var_tnm);
  var string1056 = new GraceString("\"");
  var opresult1058 = callmethod(opresult1055, "++", [1], string1056);
  lineNumber = 353
  var call1059 = callmethod(this,"out", [1], opresult1058);
  var if1025 = call1059;
}
  return if1025;
};
  var call1060 = callmethod(Grace_prelude,"for()do", [1, 1], call1023, block1024);
  lineNumber = 356
  lineNumber = 355
  lineNumber = 1
  lineNumber = 355
  var call1061 = callmethod(var_o,"body", [0]);
  lineNumber = 356
  var block1062 = Grace_allocObject();
  block1062.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1062.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1062.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1062.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1062.receiver = this;
  block1062.className = 'block<genllvm30:356>';
  block1062.real = function(
var_l
) {
  lineNumber = 357
  var call1063 = callmethod(this,"compilenode", [1], var_l);
  var_ret = call1063;
  return call1063;
};
  var call1064 = callmethod(Grace_prelude,"for()do", [1, 1], call1061, block1062);
  lineNumber = 358
  var string1065 = new GraceString("  ret %object ");
  var opresult1067 = callmethod(string1065, "++", [1], var_ret);
  lineNumber = 359
  var call1068 = callmethod(this,"out", [1], opresult1067);
  var string1069 = new GraceString("}");
  lineNumber = 360
  var call1070 = callmethod(this,"out", [1], string1069);
  lineNumber = 361
  lineNumber = 360
  var var_body = var_output;
  lineNumber = 362
  var array1071 = new GraceList([
]);

  var_output = array1071;
  lineNumber = 363
  var array1072 = new GraceList([
]);

  var var_closurevars = array1072;
  lineNumber = 382
  lineNumber = 363
  lineNumber = 382
  var block1073 = Grace_allocObject();
  block1073.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1073.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1073.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1073.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1073.receiver = this;
  block1073.className = 'block<genllvm30:382>';
  block1073.real = function(
var_u
) {
  lineNumber = 365
  lineNumber = 364
  var bool1074 = new GraceBoolean(false)
  var var_decl = bool1074;
  lineNumber = 368
  lineNumber = 365
  lineNumber = 368
  var block1075 = Grace_allocObject();
  block1075.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1075.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1075.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1075.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1075.receiver = this;
  block1075.className = 'block<genllvm30:368>';
  block1075.real = function(
var_d
) {
  lineNumber = 369
  lineNumber = 366
  var opresult1078 = callmethod(var_d, "==", [1], var_u);
  if (Grace_isTrue(opresult1078)) {
  lineNumber = 368
  lineNumber = 367
  var bool1079 = new GraceBoolean(true)
  var_decl = bool1079;
  var if1076 = bool1079;
}
  return if1076;
};
  var call1080 = callmethod(Grace_prelude,"for()do", [1, 1], var_declaredvars, block1075);
  lineNumber = 382
  lineNumber = 370
  if (Grace_isTrue(var_decl)) {
  lineNumber = 372
  lineNumber = 371
  var_decl = var_decl;
  var if1081 = var_decl;
  } else {
  lineNumber = 374
  lineNumber = 373
  var bool1082 = new GraceBoolean(false)
  var var_found = bool1082;
  lineNumber = 377
  lineNumber = 374
  lineNumber = 377
  var block1083 = Grace_allocObject();
  block1083.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1083.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1083.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1083.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1083.receiver = this;
  block1083.className = 'block<genllvm30:377>';
  block1083.real = function(
var_v
) {
  lineNumber = 378
  lineNumber = 375
  var opresult1086 = callmethod(var_v, "==", [1], var_u);
  if (Grace_isTrue(opresult1086)) {
  lineNumber = 377
  lineNumber = 376
  var bool1087 = new GraceBoolean(true)
  var_found = bool1087;
  var if1084 = bool1087;
}
  return if1084;
};
  var call1088 = callmethod(Grace_prelude,"for()do", [1, 1], var_closurevars, block1083);
  lineNumber = 382
  lineNumber = 379
  if (Grace_isTrue(var_found)) {
  lineNumber = 381
  lineNumber = 380
  var_found = var_found;
  var if1089 = var_found;
  } else {
  lineNumber = 382
  var call1090 = callmethod(var_closurevars,"push", [1], var_u);
  var if1089 = call1090;
}
  var if1081 = if1089;
}
  return if1081;
};
  var call1091 = callmethod(Grace_prelude,"for()do", [1, 1], var_usedvars, block1073);
  lineNumber = 387
  lineNumber = 389
  lineNumber = 1
  lineNumber = 386
  var call1093 = callmethod(var_o,"selfclosure", [0]);
  if (Grace_isTrue(call1093)) {
  lineNumber = 387
  var string1094 = new GraceString("self");
  var call1095 = callmethod(var_closurevars,"push", [1], string1094);
  var if1092 = call1095;
}
  lineNumber = 389
  lineNumber = 390
  lineNumber = 389
  var string1096 = new GraceString("@\"meth_");
  var opresult1098 = callmethod(string1096, "++", [1], var_modname);
  var string1099 = new GraceString("_");
  var opresult1101 = callmethod(opresult1098, "++", [1], string1099);
  lineNumber = 1
  lineNumber = 389
  var call1102 = callmethod(var_nm,"_escape", [0]);
  var opresult1104 = callmethod(opresult1101, "++", [1], call1102);
  var string1105 = new GraceString("\"");
  var opresult1107 = callmethod(opresult1104, "++", [1], string1105);
  var var_litname = opresult1107;
  lineNumber = 390
  var string1108 = new GraceString(";;;; METHOD DEFINITION: ");
  var opresult1110 = callmethod(string1108, "++", [1], var_name);
  lineNumber = 391
  var call1111 = callmethod(this,"outprint", [1], opresult1110);
  lineNumber = 410
  lineNumber = 412
  lineNumber = 1
  lineNumber = 391
  var call1113 = callmethod(var_closurevars,"size", [0]);
  var opresult1115 = callmethod(call1113, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1115)) {
  lineNumber = 401
  lineNumber = 403
  lineNumber = 1
  lineNumber = 392
  var call1117 = callmethod(var_o,"selfclosure", [0]);
  if (Grace_isTrue(call1117)) {
  lineNumber = 394
  lineNumber = 393
  var string1118 = new GraceString("define private %object ");
  var opresult1120 = callmethod(string1118, "++", [1], var_litname);
  var string1121 = new GraceString("(%object %realself, i32 %nparams, ");
  var opresult1123 = callmethod(opresult1120, "++", [1], string1121);
  lineNumber = 394
  var string1124 = new GraceString("%object* %args, i32 %flags) {");
  var opresult1126 = callmethod(opresult1123, "++", [1], string1124);
  lineNumber = 395
  var call1127 = callmethod(this,"out", [1], opresult1126);
  var string1128 = new GraceString("closureinit");
  lineNumber = 396
  var call1129 = callmethod(this,"beginblock", [1], string1128);
  var string1130 = new GraceString("  %uo = bitcast %object %realself to %UserObject*");
  lineNumber = 397
  var call1131 = callmethod(this,"out", [1], string1130);
  var if1116 = call1131;
  } else {
  lineNumber = 399
  lineNumber = 398
  var string1132 = new GraceString("define private %object ");
  var opresult1134 = callmethod(string1132, "++", [1], var_litname);
  var string1135 = new GraceString("(%object %self, i32 %nparams, ");
  var opresult1137 = callmethod(opresult1134, "++", [1], string1135);
  lineNumber = 399
  var string1138 = new GraceString("%object* %args, i32 %flags) {");
  var opresult1140 = callmethod(opresult1137, "++", [1], string1138);
  lineNumber = 400
  var call1141 = callmethod(this,"out", [1], opresult1140);
  var string1142 = new GraceString("closureinit");
  lineNumber = 401
  var call1143 = callmethod(this,"beginblock", [1], string1142);
  var string1144 = new GraceString("  %uo = bitcast %object %self to %UserObject*");
  lineNumber = 402
  var call1145 = callmethod(this,"out", [1], string1144);
  var if1116 = call1145;
}
  lineNumber = 403
  var string1146 = new GraceString("  %closurepp = getelementptr %UserObject* %uo, i32 0, i32 3");
  lineNumber = 404
  var call1147 = callmethod(this,"out", [1], string1146);
  var string1148 = new GraceString("  %closurepf = getelementptr [0 x %object]* %closurepp, i32 0, i32 ");
  var opresult1150 = callmethod(string1148, "++", [1], var_pos);
  var string1151 = new GraceString("");
  var opresult1153 = callmethod(opresult1150, "++", [1], string1151);
  lineNumber = 405
  var call1154 = callmethod(this,"out", [1], opresult1153);
  var string1155 = new GraceString("  %closurepc = bitcast %object* %closurepf to %object***");
  lineNumber = 406
  var call1156 = callmethod(this,"out", [1], string1155);
  var string1157 = new GraceString("  %closure = load %object*** %closurepc");
  lineNumber = 407
  var call1158 = callmethod(this,"out", [1], string1157);
  var string1159 = new GraceString("  br label %entry");
  lineNumber = 408
  var call1160 = callmethod(this,"out", [1], string1159);
  var if1112 = call1160;
  } else {
  lineNumber = 410
  lineNumber = 409
  var string1161 = new GraceString("define private %object ");
  var opresult1163 = callmethod(string1161, "++", [1], var_litname);
  var string1164 = new GraceString("(%object %self, i32 %nparams, ");
  var opresult1166 = callmethod(opresult1163, "++", [1], string1164);
  lineNumber = 410
  var string1167 = new GraceString("%object* %args, i32 %flags) {");
  var opresult1169 = callmethod(opresult1166, "++", [1], string1167);
  lineNumber = 411
  var call1170 = callmethod(this,"out", [1], opresult1169);
  var if1112 = call1170;
}
  lineNumber = 412
  var string1171 = new GraceString("entry");
  lineNumber = 417
  var call1172 = callmethod(this,"beginblock", [1], string1171);
  lineNumber = 418
  lineNumber = 417
  var_i = new GraceNum(0);
  lineNumber = 419
  var array1173 = new GraceList([
]);

  var var_toremove = array1173;
  lineNumber = 433
  lineNumber = 419
  lineNumber = 1
  lineNumber = 419
  var call1174 = callmethod(var_o,"params", [0]);
  lineNumber = 433
  var block1175 = Grace_allocObject();
  block1175.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1175.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1175.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1175.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1175.receiver = this;
  block1175.className = 'block<genllvm30:433>';
  block1175.real = function(
var_p
) {
  lineNumber = 420
  lineNumber = 1
  lineNumber = 420
  lineNumber = 1
  lineNumber = 420
  var call1176 = callmethod(var_p,"value", [0]);
  var call1177 = callmethod(call1176,"_escape", [0]);
  var var_pn = call1177;
  lineNumber = 429
  lineNumber = 421
  var call1179 = callmethod(var_closurevars,"contains", [1], var_pn);
  if (Grace_isTrue(call1179)) {
  lineNumber = 422
  var string1180 = new GraceString("  %\"var_");
  var opresult1182 = callmethod(string1180, "++", [1], var_pn);
  var string1183 = new GraceString("\" = call %object* @alloc_var()");
  var opresult1185 = callmethod(opresult1182, "++", [1], string1183);
  lineNumber = 423
  var call1186 = callmethod(this,"out", [1], opresult1185);
  var string1187 = new GraceString("  %argp_");
  var opresult1189 = callmethod(string1187, "++", [1], var_i);
  var string1190 = new GraceString(" = getelementptr %object* %args, i32 ");
  var opresult1192 = callmethod(opresult1189, "++", [1], string1190);
  var opresult1194 = callmethod(opresult1192, "++", [1], var_i);
  var string1195 = new GraceString("");
  var opresult1197 = callmethod(opresult1194, "++", [1], string1195);
  lineNumber = 424
  var call1198 = callmethod(this,"out", [1], opresult1197);
  var string1199 = new GraceString("  %argval_");
  var opresult1201 = callmethod(string1199, "++", [1], var_i);
  var string1202 = new GraceString(" = load %object* %argp_");
  var opresult1204 = callmethod(opresult1201, "++", [1], string1202);
  var opresult1206 = callmethod(opresult1204, "++", [1], var_i);
  var string1207 = new GraceString("");
  var opresult1209 = callmethod(opresult1206, "++", [1], string1207);
  lineNumber = 425
  var call1210 = callmethod(this,"out", [1], opresult1209);
  var string1211 = new GraceString("  store %object %\"argval_");
  var opresult1213 = callmethod(string1211, "++", [1], var_i);
  var string1214 = new GraceString("\", %object* %\"var_");
  var opresult1216 = callmethod(opresult1213, "++", [1], string1214);
  var opresult1218 = callmethod(opresult1216, "++", [1], var_pn);
  var string1219 = new GraceString("\"");
  var opresult1221 = callmethod(opresult1218, "++", [1], string1219);
  lineNumber = 426
  var call1222 = callmethod(this,"out", [1], opresult1221);
  var call1223 = callmethod(var_toremove,"push", [1], var_pn);
  var if1178 = call1223;
  } else {
  lineNumber = 429
  lineNumber = 428
  var string1224 = new GraceString("  %\"var_");
  var opresult1226 = callmethod(string1224, "++", [1], var_pn);
  var string1227 = new GraceString("\" = getelementptr %object* %args, ");
  var opresult1229 = callmethod(opresult1226, "++", [1], string1227);
  lineNumber = 429
  var string1230 = new GraceString("i32 ");
  var opresult1232 = callmethod(opresult1229, "++", [1], string1230);
  var opresult1234 = callmethod(opresult1232, "++", [1], var_i);
  lineNumber = 430
  var call1235 = callmethod(this,"out", [1], opresult1234);
  var if1178 = call1235;
}
  lineNumber = 431
  var call1236 = callmethod(var_declaredvars,"push", [1], var_pn);
  lineNumber = 433
  lineNumber = 432
  var opresult1238 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult1238;
  return opresult1238;
};
  var call1239 = callmethod(Grace_prelude,"for()do", [1, 1], call1174, block1175);
  lineNumber = 435
  lineNumber = 434
  var var_origclosurevars = var_closurevars;
  lineNumber = 436
  var array1240 = new GraceList([
]);

  var_closurevars = array1240;
  lineNumber = 440
  lineNumber = 436
  lineNumber = 440
  var block1241 = Grace_allocObject();
  block1241.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1241.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1241.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1241.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1241.receiver = this;
  block1241.className = 'block<genllvm30:440>';
  block1241.real = function(
var_pn
) {
  lineNumber = 437
  var call1243 = callmethod(var_toremove,"contains", [1], var_pn);
  if (Grace_isTrue(call1243)) {
  var if1242 = undefined;
  } else {
  lineNumber = 440
  var call1244 = callmethod(var_closurevars,"push", [1], var_pn);
  var if1242 = call1244;
}
  return if1242;
};
  var call1245 = callmethod(Grace_prelude,"for()do", [1, 1], var_origclosurevars, block1241);
  lineNumber = 443
  var string1246 = new GraceString("  %params = alloca %object, i32 ");
  var opresult1248 = callmethod(string1246, "++", [1], var_paramsUsed);
  lineNumber = 444
  var call1249 = callmethod(this,"out", [1], opresult1248);
  lineNumber = 446
  lineNumber = 444
  var diff1251 = callmethod(var_paramsUsed, "-", [1], new GraceNum(1));
  var opresult1253 = callmethod(new GraceNum(0), "..", [1], diff1251);
  lineNumber = 446
  var block1254 = Grace_allocObject();
  block1254.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1254.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1254.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1254.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1254.receiver = this;
  block1254.className = 'block<genllvm30:446>';
  block1254.real = function(
var_ii
) {
  lineNumber = 445
  var string1255 = new GraceString("  %params_");
  var opresult1257 = callmethod(string1255, "++", [1], var_ii);
  var string1258 = new GraceString(" = getelementptr %object* %params, i32 ");
  var opresult1260 = callmethod(opresult1257, "++", [1], string1258);
  lineNumber = 446
  var opresult1262 = callmethod(opresult1260, "++", [1], var_ii);
  lineNumber = 447
  var call1263 = callmethod(this,"out", [1], opresult1262);
  return call1263;
};
  var call1264 = callmethod(Grace_prelude,"for()do", [1, 1], opresult1253, block1254);
  lineNumber = 449
  lineNumber = 448
  var var_j = new GraceNum(0);
  lineNumber = 460
  lineNumber = 449
  lineNumber = 460
  var block1265 = Grace_allocObject();
  block1265.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1265.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1265.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1265.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1265.receiver = this;
  block1265.className = 'block<genllvm30:460>';
  block1265.real = function(
var_cv
) {
  lineNumber = 457
  lineNumber = 459
  lineNumber = 450
  var string1267 = new GraceString("self");
  var opresult1269 = callmethod(var_cv, "==", [1], string1267);
  if (Grace_isTrue(opresult1269)) {
  lineNumber = 451
  var string1270 = new GraceString("  %varc_");
  var opresult1272 = callmethod(string1270, "++", [1], var_cv);
  var string1273 = new GraceString(" = getelementptr %object** %closure, i32 ");
  var opresult1275 = callmethod(opresult1272, "++", [1], string1273);
  var opresult1277 = callmethod(opresult1275, "++", [1], var_j);
  lineNumber = 452
  var call1278 = callmethod(this,"out", [1], opresult1277);
  var string1279 = new GraceString("  %self2 = load %object** %varc_");
  var opresult1281 = callmethod(string1279, "++", [1], var_cv);
  lineNumber = 453
  var call1282 = callmethod(this,"out", [1], opresult1281);
  var string1283 = new GraceString("  %self = load %object* %self2");
  lineNumber = 454
  var call1284 = callmethod(this,"out", [1], string1283);
  var if1266 = call1284;
  } else {
  lineNumber = 455
  var string1285 = new GraceString("  %\"varc_");
  var opresult1287 = callmethod(string1285, "++", [1], var_cv);
  var string1288 = new GraceString("\" = getelementptr %object** %closure, i32 ");
  var opresult1290 = callmethod(opresult1287, "++", [1], string1288);
  var opresult1292 = callmethod(opresult1290, "++", [1], var_j);
  lineNumber = 456
  var call1293 = callmethod(this,"out", [1], opresult1292);
  lineNumber = 457
  lineNumber = 456
  var string1294 = new GraceString("  %\"var_");
  var opresult1296 = callmethod(string1294, "++", [1], var_cv);
  var string1297 = new GraceString("\" = load %object** %\"varc_");
  var opresult1299 = callmethod(opresult1296, "++", [1], string1297);
  var opresult1301 = callmethod(opresult1299, "++", [1], var_cv);
  lineNumber = 457
  var string1302 = new GraceString("\"");
  var opresult1304 = callmethod(opresult1301, "++", [1], string1302);
  lineNumber = 458
  var call1305 = callmethod(this,"out", [1], opresult1304);
  var if1266 = call1305;
}
  lineNumber = 460
  lineNumber = 459
  var opresult1307 = callmethod(var_j, "+", [1], new GraceNum(1));
  var_j = opresult1307;
  return opresult1307;
};
  var call1308 = callmethod(Grace_prelude,"for()do", [1, 1], var_closurevars, block1265);
  lineNumber = 462
  lineNumber = 461
  lineNumber = 462
  var block1309 = Grace_allocObject();
  block1309.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1309.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1309.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1309.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1309.receiver = this;
  block1309.className = 'block<genllvm30:462>';
  block1309.real = function(
var_l
) {
  lineNumber = 463
  var call1310 = callmethod(this,"out", [1], var_l);
  return call1310;
};
  var call1311 = callmethod(Grace_prelude,"for()do", [1, 1], var_body, block1309);
  lineNumber = 464
  var string1312 = new GraceString(";;;; ENDS");
  lineNumber = 465
  var call1313 = callmethod(this,"out", [1], string1312);
  lineNumber = 466
  lineNumber = 465
  lineNumber = 466
  var block1314 = Grace_allocObject();
  block1314.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1314.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1314.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1314.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1314.receiver = this;
  block1314.className = 'block<genllvm30:466>';
  block1314.real = function(
var_l
) {
  lineNumber = 467
  var call1315 = callmethod(this,"outprint", [1], var_l);
  return call1315;
};
  var call1316 = callmethod(Grace_prelude,"for()do", [1, 1], var_output, block1314);
  lineNumber = 469
  lineNumber = 468
  var_output = var_oldout;
  lineNumber = 470
  lineNumber = 469
  var_bblock = var_oldbblock;
  lineNumber = 471
  lineNumber = 470
  var_usedvars = var_oldusedvars;
  lineNumber = 472
  lineNumber = 471
  var_declaredvars = var_olddeclaredvars;
  lineNumber = 475
  lineNumber = 472
  lineNumber = 475
  var block1317 = Grace_allocObject();
  block1317.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1317.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1317.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1317.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1317.receiver = this;
  block1317.className = 'block<genllvm30:475>';
  block1317.real = function(
var_cv
) {
  lineNumber = 478
  lineNumber = 473
  var string1319 = new GraceString("self");
  var opresult1321 = callmethod(var_cv, "/=", [1], string1319);
  if (Grace_isTrue(opresult1321)) {
  lineNumber = 475
  lineNumber = 474
  lineNumber = 1
  lineNumber = 474
  var call1323 = callmethod(var_usedvars,"contains", [1], var_cv);
  var call1324 = callmethod(call1323,"not", [0]);
  if (Grace_isTrue(call1324)) {
  lineNumber = 475
  var call1325 = callmethod(var_usedvars,"push", [1], var_cv);
  var if1322 = call1325;
}
  var if1318 = if1322;
}
  return if1318;
};
  var call1326 = callmethod(Grace_prelude,"for()do", [1, 1], var_closurevars, block1317);
  lineNumber = 479
  var call1327 = Grace_length(var_name);
  var opresult1329 = callmethod(call1327, "+", [1], new GraceNum(1));
  var var_len = opresult1329;
  lineNumber = 482
  lineNumber = 480
  var string1330 = new GraceString("@.str.methname");
  var opresult1332 = callmethod(string1330, "++", [1], var_myc);
  var string1333 = new GraceString(" = private unnamed_addr ");
  var opresult1335 = callmethod(opresult1332, "++", [1], string1333);
  lineNumber = 481
  var string1336 = new GraceString("constant [");
  var opresult1338 = callmethod(opresult1335, "++", [1], string1336);
  var opresult1340 = callmethod(opresult1338, "++", [1], var_len);
  var string1341 = new GraceString(" x i8] c\"");
  var opresult1343 = callmethod(opresult1340, "++", [1], string1341);
  var opresult1345 = callmethod(opresult1343, "++", [1], var_name);
  var string1346 = new GraceString("\\00\"");
  var opresult1348 = callmethod(opresult1345, "++", [1], string1346);
  var var_con = opresult1348;
  lineNumber = 482
  var call1349 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 517
  lineNumber = 519
  lineNumber = 1
  lineNumber = 483
  var call1351 = callmethod(var_closurevars,"size", [0]);
  var opresult1353 = callmethod(call1351, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1353)) {
  lineNumber = 488
  lineNumber = 484
  var string1354 = new GraceString("  call void @addmethod2(%object ");
  var opresult1356 = callmethod(string1354, "++", [1], var_selfobj);
  lineNumber = 485
  var string1357 = new GraceString(", i8* getelementptr([");
  var opresult1359 = callmethod(opresult1356, "++", [1], string1357);
  lineNumber = 486
  var opresult1361 = callmethod(opresult1359, "++", [1], var_len);
  var string1362 = new GraceString(" x i8]* @.str.methname");
  var opresult1364 = callmethod(opresult1361, "++", [1], string1362);
  var opresult1366 = callmethod(opresult1364, "++", [1], var_myc);
  var string1367 = new GraceString(", i32 0, i32 0), ");
  var opresult1369 = callmethod(opresult1366, "++", [1], string1367);
  lineNumber = 487
  var string1370 = new GraceString("%object(%object, i32, %object*, i32)* getelementptr(%object ");
  var opresult1372 = callmethod(opresult1369, "++", [1], string1370);
  lineNumber = 488
  var string1373 = new GraceString("(%object, i32, %object*, i32)* ");
  var opresult1375 = callmethod(opresult1372, "++", [1], string1373);
  var opresult1377 = callmethod(opresult1375, "++", [1], var_litname);
  var string1378 = new GraceString("))");
  var opresult1380 = callmethod(opresult1377, "++", [1], string1378);
  lineNumber = 489
  var call1381 = callmethod(this,"out", [1], opresult1380);
  var if1350 = call1381;
  } else {
  lineNumber = 490
  var string1382 = new GraceString("  call void @block_savedest(%object ");
  var opresult1384 = callmethod(string1382, "++", [1], var_selfobj);
  var string1385 = new GraceString(")");
  var opresult1387 = callmethod(opresult1384, "++", [1], string1385);
  lineNumber = 491
  var call1388 = callmethod(this,"out", [1], opresult1387);
  lineNumber = 492
  lineNumber = 491
  var string1389 = new GraceString("  %closure");
  var opresult1391 = callmethod(string1389, "++", [1], var_myc);
  var string1392 = new GraceString(" = call %object** @createclosure(i32 ");
  var opresult1394 = callmethod(opresult1391, "++", [1], string1392);
  lineNumber = 492
  lineNumber = 1
  lineNumber = 492
  var call1395 = callmethod(var_closurevars,"size", [0]);
  var opresult1397 = callmethod(opresult1394, "++", [1], call1395);
  var string1398 = new GraceString(")");
  var opresult1400 = callmethod(opresult1397, "++", [1], string1398);
  lineNumber = 493
  var call1401 = callmethod(this,"out", [1], opresult1400);
  lineNumber = 503
  lineNumber = 493
  lineNumber = 503
  var block1402 = Grace_allocObject();
  block1402.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1402.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1402.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1402.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1402.receiver = this;
  block1402.className = 'block<genllvm30:503>';
  block1402.real = function(
var_v
) {
  lineNumber = 505
  lineNumber = 494
  var string1404 = new GraceString("self");
  var opresult1406 = callmethod(var_v, "==", [1], string1404);
  if (Grace_isTrue(opresult1406)) {
  lineNumber = 496
  lineNumber = 495
  var string1407 = new GraceString("  %selfpp");
  var opresult1409 = callmethod(string1407, "++", [1], var_auto__95__count);
  var string1410 = new GraceString(" = ");
  var opresult1412 = callmethod(opresult1409, "++", [1], string1410);
  lineNumber = 496
  var string1413 = new GraceString("call %object* @alloc_var()");
  var opresult1415 = callmethod(opresult1412, "++", [1], string1413);
  lineNumber = 497
  var call1416 = callmethod(this,"out", [1], opresult1415);
  var string1417 = new GraceString("  store %object %self, %object* %selfpp");
  var opresult1419 = callmethod(string1417, "++", [1], var_auto__95__count);
  lineNumber = 498
  var call1420 = callmethod(this,"out", [1], opresult1419);
  lineNumber = 499
  lineNumber = 498
  var string1421 = new GraceString("  call void @addtoclosure(%object** %closure");
  var opresult1423 = callmethod(string1421, "++", [1], var_myc);
  var string1424 = new GraceString(", ");
  var opresult1426 = callmethod(opresult1423, "++", [1], string1424);
  lineNumber = 499
  var string1427 = new GraceString("%object* %selfpp");
  var opresult1429 = callmethod(opresult1426, "++", [1], string1427);
  var opresult1431 = callmethod(opresult1429, "++", [1], var_auto__95__count);
  var string1432 = new GraceString(")");
  var opresult1434 = callmethod(opresult1431, "++", [1], string1432);
  lineNumber = 500
  var call1435 = callmethod(this,"out", [1], opresult1434);
  lineNumber = 501
  lineNumber = 500
  var opresult1437 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1437;
  var if1403 = opresult1437;
  } else {
  lineNumber = 503
  lineNumber = 502
  var string1438 = new GraceString("  call void @addtoclosure(%object** %closure");
  var opresult1440 = callmethod(string1438, "++", [1], var_myc);
  var string1441 = new GraceString(", ");
  var opresult1443 = callmethod(opresult1440, "++", [1], string1441);
  lineNumber = 503
  var string1444 = new GraceString("%object* %\"var_");
  var opresult1446 = callmethod(opresult1443, "++", [1], string1444);
  var opresult1448 = callmethod(opresult1446, "++", [1], var_v);
  var string1449 = new GraceString("\")");
  var opresult1451 = callmethod(opresult1448, "++", [1], string1449);
  lineNumber = 504
  var call1452 = callmethod(this,"out", [1], opresult1451);
  var if1403 = call1452;
}
  return if1403;
};
  var call1453 = callmethod(Grace_prelude,"for()do", [1, 1], var_closurevars, block1402);
  lineNumber = 507
  lineNumber = 506
  var string1454 = new GraceString("uo");
  var opresult1456 = callmethod(string1454, "++", [1], var_myc);
  var string1457 = new GraceString("");
  var opresult1459 = callmethod(opresult1456, "++", [1], string1457);
  var var_uo = opresult1459;
  lineNumber = 507
  var string1460 = new GraceString("  %");
  var opresult1462 = callmethod(string1460, "++", [1], var_uo);
  var string1463 = new GraceString(" = bitcast %object ");
  var opresult1465 = callmethod(opresult1462, "++", [1], string1463);
  var opresult1467 = callmethod(opresult1465, "++", [1], var_selfobj);
  var string1468 = new GraceString(" to %UserObject*");
  var opresult1470 = callmethod(opresult1467, "++", [1], string1468);
  lineNumber = 508
  var call1471 = callmethod(this,"out", [1], opresult1470);
  var string1472 = new GraceString("  %closurepp");
  var opresult1474 = callmethod(string1472, "++", [1], var_myc);
  var string1475 = new GraceString(" = getelementptr %UserObject* %");
  var opresult1477 = callmethod(opresult1474, "++", [1], string1475);
  var opresult1479 = callmethod(opresult1477, "++", [1], var_uo);
  var string1480 = new GraceString(", i32 0, i32 3");
  var opresult1482 = callmethod(opresult1479, "++", [1], string1480);
  lineNumber = 509
  var call1483 = callmethod(this,"out", [1], opresult1482);
  var string1484 = new GraceString("  %closurepf");
  var opresult1486 = callmethod(string1484, "++", [1], var_myc);
  var string1487 = new GraceString(" = getelementptr [0 x %object]* %closurepp");
  var opresult1489 = callmethod(opresult1486, "++", [1], string1487);
  var opresult1491 = callmethod(opresult1489, "++", [1], var_myc);
  var string1492 = new GraceString(", i32 0, i32 ");
  var opresult1494 = callmethod(opresult1491, "++", [1], string1492);
  var opresult1496 = callmethod(opresult1494, "++", [1], var_pos);
  var string1497 = new GraceString("");
  var opresult1499 = callmethod(opresult1496, "++", [1], string1497);
  lineNumber = 510
  var call1500 = callmethod(this,"out", [1], opresult1499);
  var string1501 = new GraceString("  %closurepc");
  var opresult1503 = callmethod(string1501, "++", [1], var_myc);
  var string1504 = new GraceString(" = bitcast %object* %closurepf");
  var opresult1506 = callmethod(opresult1503, "++", [1], string1504);
  var opresult1508 = callmethod(opresult1506, "++", [1], var_myc);
  var string1509 = new GraceString(" to %object***");
  var opresult1511 = callmethod(opresult1508, "++", [1], string1509);
  lineNumber = 511
  var call1512 = callmethod(this,"out", [1], opresult1511);
  var string1513 = new GraceString("  %closurec");
  var opresult1515 = callmethod(string1513, "++", [1], var_myc);
  var string1516 = new GraceString(" = bitcast %object** %closure");
  var opresult1518 = callmethod(opresult1515, "++", [1], string1516);
  var opresult1520 = callmethod(opresult1518, "++", [1], var_myc);
  var string1521 = new GraceString(" to %object");
  var opresult1523 = callmethod(opresult1520, "++", [1], string1521);
  lineNumber = 512
  var call1524 = callmethod(this,"out", [1], opresult1523);
  var string1525 = new GraceString("  store %object %closurec");
  var opresult1527 = callmethod(string1525, "++", [1], var_myc);
  var string1528 = new GraceString(", %object* %closurepf");
  var opresult1530 = callmethod(opresult1527, "++", [1], string1528);
  var opresult1532 = callmethod(opresult1530, "++", [1], var_myc);
  var string1533 = new GraceString("");
  var opresult1535 = callmethod(opresult1532, "++", [1], string1533);
  lineNumber = 513
  var call1536 = callmethod(this,"out", [1], opresult1535);
  lineNumber = 517
  lineNumber = 513
  var string1537 = new GraceString("  call void @addmethod2(%object ");
  var opresult1539 = callmethod(string1537, "++", [1], var_selfobj);
  lineNumber = 514
  var string1540 = new GraceString(", i8* getelementptr([");
  var opresult1542 = callmethod(opresult1539, "++", [1], string1540);
  lineNumber = 515
  var opresult1544 = callmethod(opresult1542, "++", [1], var_len);
  var string1545 = new GraceString(" x i8]* @.str.methname");
  var opresult1547 = callmethod(opresult1544, "++", [1], string1545);
  var opresult1549 = callmethod(opresult1547, "++", [1], var_myc);
  var string1550 = new GraceString(", i32 0, i32 0), ");
  var opresult1552 = callmethod(opresult1549, "++", [1], string1550);
  lineNumber = 516
  var string1553 = new GraceString("%object(%object, i32, %object*, i32)* getelementptr(%object ");
  var opresult1555 = callmethod(opresult1552, "++", [1], string1553);
  lineNumber = 517
  var string1556 = new GraceString("(%object, i32, %object*, i32)* ");
  var opresult1558 = callmethod(opresult1555, "++", [1], string1556);
  var opresult1560 = callmethod(opresult1558, "++", [1], var_litname);
  var string1561 = new GraceString("))");
  var opresult1563 = callmethod(opresult1560, "++", [1], string1561);
  lineNumber = 518
  var call1564 = callmethod(this,"out", [1], opresult1563);
  var if1350 = call1564;
}
  lineNumber = 520
  lineNumber = 519
  var_inBlock = var_origInBlock;
  lineNumber = 521
  lineNumber = 520
  var_paramsUsed = var_origParamsUsed;
  return var_origParamsUsed
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilemethod"] = func962;
  lineNumber = 555
var func1565 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 524
  lineNumber = 523
  var var_myc = var_auto__95__count;
  lineNumber = 525
  lineNumber = 524
  var opresult1567 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1567;
  lineNumber = 525
  var string1568 = new GraceString("  br label %BeginWhile");
  var opresult1570 = callmethod(string1568, "++", [1], var_myc);
  lineNumber = 526
  var call1571 = callmethod(this,"out", [1], opresult1570);
  var string1572 = new GraceString("BeginWhile");
  var opresult1574 = callmethod(string1572, "++", [1], var_myc);
  lineNumber = 527
  var call1575 = callmethod(this,"beginblock", [1], opresult1574);
  lineNumber = 1
  lineNumber = 527
  var call1576 = callmethod(var_o,"value", [0]);
  lineNumber = 528
  var call1577 = callmethod(this,"compilenode", [1], call1576);
  var var_cond = call1577;
  lineNumber = 529
  lineNumber = 528
  var string1578 = new GraceString("%cond");
  var opresult1580 = callmethod(string1578, "++", [1], var_myc);
  var var_creg = opresult1580;
  lineNumber = 530
  lineNumber = 529
  var string1581 = new GraceString("  ");
  var opresult1583 = callmethod(string1581, "++", [1], var_creg);
  var string1584 = new GraceString("_valp = call i1 @istrue(%object ");
  var opresult1586 = callmethod(opresult1583, "++", [1], string1584);
  lineNumber = 530
  var opresult1588 = callmethod(opresult1586, "++", [1], var_cond);
  var string1589 = new GraceString(")");
  var opresult1591 = callmethod(opresult1588, "++", [1], string1589);
  lineNumber = 531
  var call1592 = callmethod(this,"out", [1], opresult1591);
  var string1593 = new GraceString("  ");
  var opresult1595 = callmethod(string1593, "++", [1], var_creg);
  var string1596 = new GraceString(" = icmp eq i1 0, ");
  var opresult1598 = callmethod(opresult1595, "++", [1], string1596);
  var opresult1600 = callmethod(opresult1598, "++", [1], var_creg);
  var string1601 = new GraceString("_valp");
  var opresult1603 = callmethod(opresult1600, "++", [1], string1601);
  lineNumber = 532
  var call1604 = callmethod(this,"out", [1], opresult1603);
  lineNumber = 533
  lineNumber = 532
  var string1605 = new GraceString("br i1 ");
  var opresult1607 = callmethod(string1605, "++", [1], var_creg);
  var string1608 = new GraceString(", label %EndWhile");
  var opresult1610 = callmethod(opresult1607, "++", [1], string1608);
  var opresult1612 = callmethod(opresult1610, "++", [1], var_myc);
  lineNumber = 533
  var string1613 = new GraceString(", label %WhileBody");
  var opresult1615 = callmethod(opresult1612, "++", [1], string1613);
  var opresult1617 = callmethod(opresult1615, "++", [1], var_myc);
  lineNumber = 534
  var call1618 = callmethod(this,"out", [1], opresult1617);
  var string1619 = new GraceString("WhileBody");
  var opresult1621 = callmethod(string1619, "++", [1], var_myc);
  lineNumber = 535
  var call1622 = callmethod(this,"beginblock", [1], opresult1621);
  lineNumber = 536
  lineNumber = 535
  var string1623 = new GraceString("null");
  var var_tret = string1623;
  lineNumber = 537
  lineNumber = 536
  var string1624 = new GraceString("ERROR");
  var var_tblock = string1624;
  lineNumber = 543
  lineNumber = 537
  lineNumber = 1
  lineNumber = 537
  var call1625 = callmethod(var_o,"body", [0]);
  lineNumber = 543
  var block1626 = Grace_allocObject();
  block1626.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1626.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1626.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1626.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1626.receiver = this;
  block1626.className = 'block<genllvm30:543>';
  block1626.real = function(
var_l
) {
  lineNumber = 545
  lineNumber = 1
  lineNumber = 538
  var call1628 = callmethod(var_l,"kind", [0]);
  var string1629 = new GraceString("vardec");
  var opresult1631 = callmethod(call1628, "==", [1], string1629);
  lineNumber = 545
  lineNumber = 1
  lineNumber = 538
  var call1632 = callmethod(var_l,"kind", [0]);
  var string1633 = new GraceString("defdec");
  var opresult1635 = callmethod(call1632, "==", [1], string1633);
  var opresult1637 = callmethod(opresult1631, "|", [1], opresult1635);
  lineNumber = 545
  lineNumber = 1
  lineNumber = 539
  var call1638 = callmethod(var_l,"kind", [0]);
  var string1639 = new GraceString("class");
  var opresult1641 = callmethod(call1638, "==", [1], string1639);
  var opresult1643 = callmethod(opresult1637, "|", [1], opresult1641);
  if (Grace_isTrue(opresult1643)) {
  lineNumber = 540
  lineNumber = 1
  lineNumber = 540
  lineNumber = 1
  lineNumber = 540
  lineNumber = 1
  lineNumber = 540
  var call1644 = callmethod(var_l,"name", [0]);
  var call1645 = callmethod(call1644,"value", [0]);
  var call1646 = callmethod(call1645,"_escape", [0]);
  var var_tnm = call1646;
  lineNumber = 541
  var call1647 = callmethod(var_declaredvars,"push", [1], var_tnm);
  lineNumber = 542
  var string1648 = new GraceString("  %\"var_");
  var opresult1650 = callmethod(string1648, "++", [1], var_tnm);
  var string1651 = new GraceString("\" = call %object* @alloc_var()");
  var opresult1653 = callmethod(opresult1650, "++", [1], string1651);
  lineNumber = 543
  var call1654 = callmethod(this,"out", [1], opresult1653);
  var string1655 = new GraceString("  store %object %undefined, %object* %\"var_");
  var opresult1657 = callmethod(string1655, "++", [1], var_tnm);
  var string1658 = new GraceString("\"");
  var opresult1660 = callmethod(opresult1657, "++", [1], string1658);
  lineNumber = 544
  var call1661 = callmethod(this,"out", [1], opresult1660);
  var if1627 = call1661;
}
  return if1627;
};
  var call1662 = callmethod(Grace_prelude,"for()do", [1, 1], call1625, block1626);
  lineNumber = 547
  lineNumber = 546
  lineNumber = 1
  lineNumber = 546
  var call1663 = callmethod(var_o,"body", [0]);
  lineNumber = 547
  var block1664 = Grace_allocObject();
  block1664.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1664.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1664.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1664.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1664.receiver = this;
  block1664.className = 'block<genllvm30:547>';
  block1664.real = function(
var_l
) {
  lineNumber = 548
  var call1665 = callmethod(this,"compilenode", [1], var_l);
  var_tret = call1665;
  return call1665;
};
  var call1666 = callmethod(Grace_prelude,"for()do", [1, 1], call1663, block1664);
  lineNumber = 550
  lineNumber = 549
  var_tblock = var_bblock;
  lineNumber = 550
  var string1667 = new GraceString("  br label %BeginWhile");
  var opresult1669 = callmethod(string1667, "++", [1], var_myc);
  lineNumber = 551
  var call1670 = callmethod(this,"out", [1], opresult1669);
  var string1671 = new GraceString("EndWhile");
  var opresult1673 = callmethod(string1671, "++", [1], var_myc);
  lineNumber = 554
  var call1674 = callmethod(this,"beginblock", [1], opresult1673);
  lineNumber = 555
  lineNumber = 1
  lineNumber = 554
  var call1675 = callmethod(var_o,"register:=", [1], var_cond);
  return call1675
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilewhile"] = func1565;
  lineNumber = 620
var func1676 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 558
  lineNumber = 557
  var var_myc = var_auto__95__count;
  lineNumber = 559
  lineNumber = 558
  var opresult1678 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult1678;
  lineNumber = 559
  var string1679 = new GraceString("  br label %BeginIf");
  var opresult1681 = callmethod(string1679, "++", [1], var_myc);
  lineNumber = 560
  var call1682 = callmethod(this,"out", [1], opresult1681);
  var string1683 = new GraceString("BeginIf");
  var opresult1685 = callmethod(string1683, "++", [1], var_myc);
  lineNumber = 561
  var call1686 = callmethod(this,"beginblock", [1], opresult1685);
  lineNumber = 1
  lineNumber = 561
  var call1687 = callmethod(var_o,"value", [0]);
  lineNumber = 562
  var call1688 = callmethod(this,"compilenode", [1], call1687);
  var var_cond = call1688;
  lineNumber = 563
  lineNumber = 562
  var string1689 = new GraceString("%cond");
  var opresult1691 = callmethod(string1689, "++", [1], var_myc);
  var var_creg = opresult1691;
  lineNumber = 564
  lineNumber = 563
  var string1692 = new GraceString("  ");
  var opresult1694 = callmethod(string1692, "++", [1], var_creg);
  var string1695 = new GraceString("_valp = call i1 @istrue(%object ");
  var opresult1697 = callmethod(opresult1694, "++", [1], string1695);
  lineNumber = 564
  var opresult1699 = callmethod(opresult1697, "++", [1], var_cond);
  var string1700 = new GraceString(")");
  var opresult1702 = callmethod(opresult1699, "++", [1], string1700);
  lineNumber = 565
  var call1703 = callmethod(this,"out", [1], opresult1702);
  var string1704 = new GraceString("  ");
  var opresult1706 = callmethod(string1704, "++", [1], var_creg);
  var string1707 = new GraceString(" = icmp eq i1 0, ");
  var opresult1709 = callmethod(opresult1706, "++", [1], string1707);
  var opresult1711 = callmethod(opresult1709, "++", [1], var_creg);
  var string1712 = new GraceString("_valp");
  var opresult1714 = callmethod(opresult1711, "++", [1], string1712);
  lineNumber = 566
  var call1715 = callmethod(this,"out", [1], opresult1714);
  lineNumber = 567
  lineNumber = 566
  var var_startblock = var_bblock;
  lineNumber = 573
  lineNumber = 575
  lineNumber = 1
  lineNumber = 575
  lineNumber = 1
  lineNumber = 567
  var call1717 = callmethod(var_o,"elseblock", [0]);
  var call1718 = callmethod(call1717,"size", [0]);
  var opresult1720 = callmethod(call1718, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1720)) {
  lineNumber = 569
  lineNumber = 568
  var string1721 = new GraceString("br i1 ");
  var opresult1723 = callmethod(string1721, "++", [1], var_creg);
  var string1724 = new GraceString(", label %FalseBranch");
  var opresult1726 = callmethod(opresult1723, "++", [1], string1724);
  var opresult1728 = callmethod(opresult1726, "++", [1], var_myc);
  lineNumber = 569
  var string1729 = new GraceString(", label %TrueBranch");
  var opresult1731 = callmethod(opresult1728, "++", [1], string1729);
  var opresult1733 = callmethod(opresult1731, "++", [1], var_myc);
  lineNumber = 570
  var call1734 = callmethod(this,"out", [1], opresult1733);
  var if1716 = call1734;
  } else {
  lineNumber = 571
  var string1735 = new GraceString("  %undefined");
  var opresult1737 = callmethod(string1735, "++", [1], var_myc);
  var string1738 = new GraceString(" = load %object* @undefined");
  var opresult1740 = callmethod(opresult1737, "++", [1], string1738);
  lineNumber = 572
  var call1741 = callmethod(this,"out", [1], opresult1740);
  lineNumber = 573
  lineNumber = 572
  var string1742 = new GraceString("br i1 ");
  var opresult1744 = callmethod(string1742, "++", [1], var_creg);
  var string1745 = new GraceString(", label %EndIf");
  var opresult1747 = callmethod(opresult1744, "++", [1], string1745);
  var opresult1749 = callmethod(opresult1747, "++", [1], var_myc);
  lineNumber = 573
  var string1750 = new GraceString(", label %TrueBranch");
  var opresult1752 = callmethod(opresult1749, "++", [1], string1750);
  var opresult1754 = callmethod(opresult1752, "++", [1], var_myc);
  lineNumber = 574
  var call1755 = callmethod(this,"out", [1], opresult1754);
  var if1716 = call1755;
}
  lineNumber = 575
  var string1756 = new GraceString("TrueBranch");
  var opresult1758 = callmethod(string1756, "++", [1], var_myc);
  lineNumber = 576
  var call1759 = callmethod(this,"beginblock", [1], opresult1758);
  lineNumber = 577
  lineNumber = 576
  var string1760 = new GraceString("%none");
  var var_tret = string1760;
  lineNumber = 578
  lineNumber = 577
  var string1761 = new GraceString("%none");
  var var_fret = string1761;
  lineNumber = 579
  lineNumber = 578
  var string1762 = new GraceString("ERROR");
  var var_tblock = string1762;
  lineNumber = 580
  lineNumber = 579
  var string1763 = new GraceString("ERROR");
  var var_fblock = string1763;
  lineNumber = 586
  lineNumber = 580
  lineNumber = 1
  lineNumber = 580
  var call1764 = callmethod(var_o,"thenblock", [0]);
  lineNumber = 586
  var block1765 = Grace_allocObject();
  block1765.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1765.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1765.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1765.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1765.receiver = this;
  block1765.className = 'block<genllvm30:586>';
  block1765.real = function(
var_l
) {
  lineNumber = 588
  lineNumber = 1
  lineNumber = 581
  var call1767 = callmethod(var_l,"kind", [0]);
  var string1768 = new GraceString("vardec");
  var opresult1770 = callmethod(call1767, "==", [1], string1768);
  lineNumber = 588
  lineNumber = 1
  lineNumber = 581
  var call1771 = callmethod(var_l,"kind", [0]);
  var string1772 = new GraceString("defdec");
  var opresult1774 = callmethod(call1771, "==", [1], string1772);
  var opresult1776 = callmethod(opresult1770, "|", [1], opresult1774);
  lineNumber = 588
  lineNumber = 1
  lineNumber = 582
  var call1777 = callmethod(var_l,"kind", [0]);
  var string1778 = new GraceString("class");
  var opresult1780 = callmethod(call1777, "==", [1], string1778);
  var opresult1782 = callmethod(opresult1776, "|", [1], opresult1780);
  if (Grace_isTrue(opresult1782)) {
  lineNumber = 583
  lineNumber = 1
  lineNumber = 583
  lineNumber = 1
  lineNumber = 583
  lineNumber = 1
  lineNumber = 583
  var call1783 = callmethod(var_l,"name", [0]);
  var call1784 = callmethod(call1783,"value", [0]);
  var call1785 = callmethod(call1784,"_escape", [0]);
  var var_tnm = call1785;
  lineNumber = 584
  var call1786 = callmethod(var_declaredvars,"push", [1], var_tnm);
  lineNumber = 585
  var string1787 = new GraceString("  %\"var_");
  var opresult1789 = callmethod(string1787, "++", [1], var_tnm);
  var string1790 = new GraceString("\" = call %object* @alloc_var()");
  var opresult1792 = callmethod(opresult1789, "++", [1], string1790);
  lineNumber = 586
  var call1793 = callmethod(this,"out", [1], opresult1792);
  var string1794 = new GraceString("  store %object %undefined, %object* %\"var_");
  var opresult1796 = callmethod(string1794, "++", [1], var_tnm);
  var string1797 = new GraceString("\"");
  var opresult1799 = callmethod(opresult1796, "++", [1], string1797);
  lineNumber = 587
  var call1800 = callmethod(this,"out", [1], opresult1799);
  var if1766 = call1800;
}
  return if1766;
};
  var call1801 = callmethod(Grace_prelude,"for()do", [1, 1], call1764, block1765);
  lineNumber = 590
  lineNumber = 589
  lineNumber = 1
  lineNumber = 589
  var call1802 = callmethod(var_o,"thenblock", [0]);
  lineNumber = 590
  var block1803 = Grace_allocObject();
  block1803.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1803.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1803.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1803.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1803.receiver = this;
  block1803.className = 'block<genllvm30:590>';
  block1803.real = function(
var_l
) {
  lineNumber = 591
  var call1804 = callmethod(this,"compilenode", [1], var_l);
  var_tret = call1804;
  return call1804;
};
  var call1805 = callmethod(Grace_prelude,"for()do", [1, 1], call1802, block1803);
  lineNumber = 593
  lineNumber = 592
  var_tblock = var_bblock;
  lineNumber = 593
  var string1806 = new GraceString("  br label %EndIf");
  var opresult1808 = callmethod(string1806, "++", [1], var_myc);
  lineNumber = 594
  var call1809 = callmethod(this,"out", [1], opresult1808);
  lineNumber = 610
  lineNumber = 611
  lineNumber = 1
  lineNumber = 611
  lineNumber = 1
  lineNumber = 594
  var call1811 = callmethod(var_o,"elseblock", [0]);
  var call1812 = callmethod(call1811,"size", [0]);
  var opresult1814 = callmethod(call1812, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1814)) {
  lineNumber = 595
  var string1815 = new GraceString("FalseBranch");
  var opresult1817 = callmethod(string1815, "++", [1], var_myc);
  lineNumber = 596
  var call1818 = callmethod(this,"beginblock", [1], opresult1817);
  lineNumber = 602
  lineNumber = 596
  lineNumber = 1
  lineNumber = 596
  var call1819 = callmethod(var_o,"elseblock", [0]);
  lineNumber = 602
  var block1820 = Grace_allocObject();
  block1820.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1820.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1820.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1820.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1820.receiver = this;
  block1820.className = 'block<genllvm30:602>';
  block1820.real = function(
var_l
) {
  lineNumber = 604
  lineNumber = 1
  lineNumber = 597
  var call1822 = callmethod(var_l,"kind", [0]);
  var string1823 = new GraceString("vardec");
  var opresult1825 = callmethod(call1822, "==", [1], string1823);
  lineNumber = 604
  lineNumber = 1
  lineNumber = 597
  var call1826 = callmethod(var_l,"kind", [0]);
  var string1827 = new GraceString("defdec");
  var opresult1829 = callmethod(call1826, "==", [1], string1827);
  var opresult1831 = callmethod(opresult1825, "|", [1], opresult1829);
  lineNumber = 604
  lineNumber = 1
  lineNumber = 598
  var call1832 = callmethod(var_l,"kind", [0]);
  var string1833 = new GraceString("class");
  var opresult1835 = callmethod(call1832, "==", [1], string1833);
  var opresult1837 = callmethod(opresult1831, "|", [1], opresult1835);
  if (Grace_isTrue(opresult1837)) {
  lineNumber = 599
  lineNumber = 1
  lineNumber = 599
  lineNumber = 1
  lineNumber = 599
  lineNumber = 1
  lineNumber = 599
  var call1838 = callmethod(var_l,"name", [0]);
  var call1839 = callmethod(call1838,"value", [0]);
  var call1840 = callmethod(call1839,"_escape", [0]);
  var var_tnm = call1840;
  lineNumber = 600
  var call1841 = callmethod(var_declaredvars,"push", [1], var_tnm);
  lineNumber = 601
  var string1842 = new GraceString("  %\"var_");
  var opresult1844 = callmethod(string1842, "++", [1], var_tnm);
  var string1845 = new GraceString("\" = call %object* @alloc_var()");
  var opresult1847 = callmethod(opresult1844, "++", [1], string1845);
  lineNumber = 602
  var call1848 = callmethod(this,"out", [1], opresult1847);
  var string1849 = new GraceString("  store %object %undefined, %object* %\"var_");
  var opresult1851 = callmethod(string1849, "++", [1], var_tnm);
  var string1852 = new GraceString("\"");
  var opresult1854 = callmethod(opresult1851, "++", [1], string1852);
  lineNumber = 603
  var call1855 = callmethod(this,"out", [1], opresult1854);
  var if1821 = call1855;
}
  return if1821;
};
  var call1856 = callmethod(Grace_prelude,"for()do", [1, 1], call1819, block1820);
  lineNumber = 606
  lineNumber = 605
  lineNumber = 1
  lineNumber = 605
  var call1857 = callmethod(var_o,"elseblock", [0]);
  lineNumber = 606
  var block1858 = Grace_allocObject();
  block1858.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1858.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1858.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1858.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1858.receiver = this;
  block1858.className = 'block<genllvm30:606>';
  block1858.real = function(
var_l
) {
  lineNumber = 607
  var call1859 = callmethod(this,"compilenode", [1], var_l);
  var_fret = call1859;
  return call1859;
};
  var call1860 = callmethod(Grace_prelude,"for()do", [1, 1], call1857, block1858);
  lineNumber = 608
  var string1861 = new GraceString("  br label %EndIf");
  var opresult1863 = callmethod(string1861, "++", [1], var_myc);
  lineNumber = 609
  var call1864 = callmethod(this,"out", [1], opresult1863);
  lineNumber = 610
  lineNumber = 609
  var_fblock = var_bblock;
  var if1810 = var_bblock;
}
  lineNumber = 611
  var string1865 = new GraceString("EndIf");
  var opresult1867 = callmethod(string1865, "++", [1], var_myc);
  lineNumber = 612
  var call1868 = callmethod(this,"beginblock", [1], opresult1867);
  lineNumber = 617
  lineNumber = 619
  lineNumber = 1
  lineNumber = 619
  lineNumber = 1
  lineNumber = 612
  var call1870 = callmethod(var_o,"elseblock", [0]);
  var call1871 = callmethod(call1870,"size", [0]);
  var opresult1873 = callmethod(call1871, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1873)) {
  lineNumber = 614
  lineNumber = 613
  var string1874 = new GraceString("  %if");
  var opresult1876 = callmethod(string1874, "++", [1], var_myc);
  var string1877 = new GraceString(" = phi %object [ ");
  var opresult1879 = callmethod(opresult1876, "++", [1], string1877);
  var opresult1881 = callmethod(opresult1879, "++", [1], var_tret);
  var string1882 = new GraceString(", ");
  var opresult1884 = callmethod(opresult1881, "++", [1], string1882);
  lineNumber = 614
  var opresult1886 = callmethod(opresult1884, "++", [1], var_tblock);
  var string1887 = new GraceString("], [");
  var opresult1889 = callmethod(opresult1886, "++", [1], string1887);
  var opresult1891 = callmethod(opresult1889, "++", [1], var_fret);
  var string1892 = new GraceString(", ");
  var opresult1894 = callmethod(opresult1891, "++", [1], string1892);
  var opresult1896 = callmethod(opresult1894, "++", [1], var_fblock);
  var string1897 = new GraceString("]");
  var opresult1899 = callmethod(opresult1896, "++", [1], string1897);
  lineNumber = 615
  var call1900 = callmethod(this,"out", [1], opresult1899);
  var if1869 = call1900;
  } else {
  lineNumber = 617
  lineNumber = 616
  var string1901 = new GraceString("  %if");
  var opresult1903 = callmethod(string1901, "++", [1], var_myc);
  var string1904 = new GraceString(" = phi %object [ ");
  var opresult1906 = callmethod(opresult1903, "++", [1], string1904);
  var opresult1908 = callmethod(opresult1906, "++", [1], var_tret);
  var string1909 = new GraceString(", ");
  var opresult1911 = callmethod(opresult1908, "++", [1], string1909);
  lineNumber = 617
  var opresult1913 = callmethod(opresult1911, "++", [1], var_tblock);
  var string1914 = new GraceString("], [%undefined");
  var opresult1916 = callmethod(opresult1913, "++", [1], string1914);
  var opresult1918 = callmethod(opresult1916, "++", [1], var_myc);
  var string1919 = new GraceString(", ");
  var opresult1921 = callmethod(opresult1918, "++", [1], string1919);
  var opresult1923 = callmethod(opresult1921, "++", [1], var_startblock);
  var string1924 = new GraceString("]");
  var opresult1926 = callmethod(opresult1923, "++", [1], string1924);
  lineNumber = 618
  var call1927 = callmethod(this,"out", [1], opresult1926);
  var if1869 = call1927;
}
  lineNumber = 620
  lineNumber = 1
  lineNumber = 620
  lineNumber = 619
  var string1928 = new GraceString("%if");
  var opresult1930 = callmethod(string1928, "++", [1], var_myc);
  var call1931 = callmethod(var_o,"register:=", [1], opresult1930);
  return call1931
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileif"] = func1676;
  lineNumber = 644
var func1932 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 623
  lineNumber = 1
  lineNumber = 622
  var call1933 = callmethod(var_o,"value", [0]);
  var var_name = call1933;
  lineNumber = 644
  lineNumber = 645
  lineNumber = 623
  var string1935 = new GraceString("self");
  var opresult1937 = callmethod(var_name, "==", [1], string1935);
  if (Grace_isTrue(opresult1937)) {
  lineNumber = 625
  lineNumber = 1
  lineNumber = 624
  var string1938 = new GraceString("%self");
  var call1939 = callmethod(var_o,"register:=", [1], string1938);
  var if1934 = call1939;
  } else {
  lineNumber = 644
  lineNumber = 632
  lineNumber = 625
  var string1941 = new GraceString("__compilerRevision");
  var opresult1943 = callmethod(var_name, "==", [1], string1941);
  if (Grace_isTrue(opresult1943)) {
  lineNumber = 627
  lineNumber = 626
  var string1944 = new GraceString("%str___compilerRevision");
  var opresult1946 = callmethod(string1944, "++", [1], var_auto__95__count);
  lineNumber = 627
  var string1947 = new GraceString(" = bitcast [41 x i8]* @.str._compilerRevision to i8*");
  var opresult1949 = callmethod(opresult1946, "++", [1], string1947);
  lineNumber = 628
  var call1950 = callmethod(this,"out", [1], opresult1949);
  lineNumber = 630
  lineNumber = 628
  var string1951 = new GraceString("%\"var_val___compilerRevision");
  var opresult1953 = callmethod(string1951, "++", [1], var_auto__95__count);
  lineNumber = 629
  var string1954 = new GraceString("\" = call %object @alloc_String(i8* %str___compilerRevision");
  var opresult1956 = callmethod(opresult1953, "++", [1], string1954);
  lineNumber = 630
  var opresult1958 = callmethod(opresult1956, "++", [1], var_auto__95__count);
  var string1959 = new GraceString(")");
  var opresult1961 = callmethod(opresult1958, "++", [1], string1959);
  lineNumber = 631
  var call1962 = callmethod(this,"out", [1], opresult1961);
  lineNumber = 632
  lineNumber = 1
  lineNumber = 632
  lineNumber = 631
  var string1963 = new GraceString("%\"var_val___compilerRevision");
  var opresult1965 = callmethod(string1963, "++", [1], var_auto__95__count);
  var string1966 = new GraceString("\"");
  var opresult1968 = callmethod(opresult1965, "++", [1], string1966);
  var call1969 = callmethod(var_o,"register:=", [1], opresult1968);
  var if1940 = call1969;
  } else {
  lineNumber = 633
  lineNumber = 1
  lineNumber = 633
  var call1970 = callmethod(var_name,"_escape", [0]);
  var_name = call1970;
  lineNumber = 640
  lineNumber = 634
  var call1972 = callmethod(var_modules,"contains", [1], var_name);
  if (Grace_isTrue(call1972)) {
  lineNumber = 636
  lineNumber = 635
  var string1973 = new GraceString("  %\"var_val_");
  var opresult1975 = callmethod(string1973, "++", [1], var_name);
  var opresult1977 = callmethod(opresult1975, "++", [1], var_auto__95__count);
  lineNumber = 636
  var string1978 = new GraceString("\" = load %object* @.module.");
  var opresult1980 = callmethod(opresult1977, "++", [1], string1978);
  var opresult1982 = callmethod(opresult1980, "++", [1], var_name);
  lineNumber = 637
  var call1983 = callmethod(this,"out", [1], opresult1982);
  var if1971 = call1983;
  } else {
  lineNumber = 638
  var call1984 = callmethod(var_usedvars,"push", [1], var_name);
  lineNumber = 640
  lineNumber = 639
  var string1985 = new GraceString("  %\"var_val_");
  var opresult1987 = callmethod(string1985, "++", [1], var_name);
  var opresult1989 = callmethod(opresult1987, "++", [1], var_auto__95__count);
  var string1990 = new GraceString("\" = load %object* ");
  var opresult1992 = callmethod(opresult1989, "++", [1], string1990);
  lineNumber = 640
  var string1993 = new GraceString("%\"var_");
  var opresult1995 = callmethod(opresult1992, "++", [1], string1993);
  var opresult1997 = callmethod(opresult1995, "++", [1], var_name);
  var string1998 = new GraceString("\"");
  var opresult2000 = callmethod(opresult1997, "++", [1], string1998);
  lineNumber = 641
  var call2001 = callmethod(this,"out", [1], opresult2000);
  var if1971 = call2001;
}
  lineNumber = 643
  lineNumber = 1
  lineNumber = 643
  lineNumber = 642
  var string2002 = new GraceString("%\"var_val_");
  var opresult2004 = callmethod(string2002, "++", [1], var_name);
  var opresult2006 = callmethod(opresult2004, "++", [1], var_auto__95__count);
  var string2007 = new GraceString("\"");
  var opresult2009 = callmethod(opresult2006, "++", [1], string2007);
  var call2010 = callmethod(var_o,"register:=", [1], opresult2009);
  lineNumber = 644
  lineNumber = 643
  var opresult2012 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2012;
  var if1940 = opresult2012;
}
  var if1934 = if1940;
}
  return if1934
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileidentifier"] = func1932;
  lineNumber = 681
var func2013 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 648
  lineNumber = 1
  lineNumber = 647
  var call2014 = callmethod(var_o,"dest", [0]);
  var var_dest = call2014;
  lineNumber = 649
  lineNumber = 648
  var string2015 = new GraceString("");
  var var_val = string2015;
  lineNumber = 650
  lineNumber = 649
  var string2016 = new GraceString("");
  var var_c = string2016;
  lineNumber = 651
  lineNumber = 650
  var string2017 = new GraceString("");
  var var_r = string2017;
  lineNumber = 679
  lineNumber = 680
  lineNumber = 1
  lineNumber = 651
  var call2019 = callmethod(var_dest,"kind", [0]);
  var string2020 = new GraceString("identifier");
  var opresult2022 = callmethod(call2019, "==", [1], string2020);
  if (Grace_isTrue(opresult2022)) {
  lineNumber = 653
  lineNumber = 1
  lineNumber = 652
  var call2023 = callmethod(var_o,"value", [0]);
  var_val = call2023;
  lineNumber = 653
  lineNumber = 654
  var call2024 = callmethod(this,"compilenode", [1], var_val);
  var_val = call2024;
  lineNumber = 1
  lineNumber = 654
  lineNumber = 1
  lineNumber = 654
  var call2025 = callmethod(var_dest,"value", [0]);
  var call2026 = callmethod(call2025,"_escape", [0]);
  var var_nm = call2026;
  lineNumber = 655
  var call2027 = callmethod(var_usedvars,"push", [1], var_nm);
  lineNumber = 656
  var string2028 = new GraceString("  store %object ");
  var opresult2030 = callmethod(string2028, "++", [1], var_val);
  var string2031 = new GraceString(", %object* %\"var_");
  var opresult2033 = callmethod(opresult2030, "++", [1], string2031);
  var opresult2035 = callmethod(opresult2033, "++", [1], var_nm);
  var string2036 = new GraceString("\"");
  var opresult2038 = callmethod(opresult2035, "++", [1], string2036);
  lineNumber = 657
  var call2039 = callmethod(this,"out", [1], opresult2038);
  var string2040 = new GraceString("  %icmp");
  var opresult2042 = callmethod(string2040, "++", [1], var_auto__95__count);
  var string2043 = new GraceString(" = icmp eq %object ");
  var opresult2045 = callmethod(opresult2042, "++", [1], string2043);
  var opresult2047 = callmethod(opresult2045, "++", [1], var_val);
  var string2048 = new GraceString(", %undefined");
  var opresult2050 = callmethod(opresult2047, "++", [1], string2048);
  lineNumber = 658
  var call2051 = callmethod(this,"out", [1], opresult2050);
  lineNumber = 659
  lineNumber = 658
  var string2052 = new GraceString("  br i1 %icmp");
  var opresult2054 = callmethod(string2052, "++", [1], var_auto__95__count);
  var string2055 = new GraceString(", label %isundef");
  var opresult2057 = callmethod(opresult2054, "++", [1], string2055);
  var opresult2059 = callmethod(opresult2057, "++", [1], var_auto__95__count);
  var string2060 = new GraceString(", ");
  var opresult2062 = callmethod(opresult2059, "++", [1], string2060);
  lineNumber = 659
  var string2063 = new GraceString("label %isdef");
  var opresult2065 = callmethod(string2063, "++", [1], var_auto__95__count);
  var string2066 = new GraceString("");
  var opresult2068 = callmethod(opresult2065, "++", [1], string2066);
  var opresult2070 = callmethod(opresult2062, "++", [1], opresult2068);
  lineNumber = 660
  var call2071 = callmethod(this,"out", [1], opresult2070);
  var string2072 = new GraceString("isundef");
  var opresult2074 = callmethod(string2072, "++", [1], var_auto__95__count);
  var string2075 = new GraceString("");
  var opresult2077 = callmethod(opresult2074, "++", [1], string2075);
  lineNumber = 661
  var call2078 = callmethod(this,"beginblock", [1], opresult2077);
  lineNumber = 663
  lineNumber = 661
  var string2079 = new GraceString("  call %object @callmethod(%object %none");
  lineNumber = 662
  var string2080 = new GraceString(", i8* getelementptr([11 x i8]* @.str._assignment");
  var opresult2082 = callmethod(string2079, "++", [1], string2080);
  lineNumber = 663
  var string2083 = new GraceString(",i32 0,i32 0), i32 1, %object* %\"var_");
  var opresult2085 = callmethod(string2083, "++", [1], var_nm);
  var string2086 = new GraceString("\")");
  var opresult2088 = callmethod(opresult2085, "++", [1], string2086);
  var opresult2090 = callmethod(opresult2082, "++", [1], opresult2088);
  lineNumber = 664
  var call2091 = callmethod(this,"out", [1], opresult2090);
  var string2092 = new GraceString("  br label %isdef");
  var opresult2094 = callmethod(string2092, "++", [1], var_auto__95__count);
  var string2095 = new GraceString("");
  var opresult2097 = callmethod(opresult2094, "++", [1], string2095);
  lineNumber = 665
  var call2098 = callmethod(this,"out", [1], opresult2097);
  var string2099 = new GraceString("isdef");
  var opresult2101 = callmethod(string2099, "++", [1], var_auto__95__count);
  var string2102 = new GraceString("");
  var opresult2104 = callmethod(opresult2101, "++", [1], string2102);
  lineNumber = 666
  var call2105 = callmethod(this,"beginblock", [1], opresult2104);
  lineNumber = 667
  lineNumber = 666
  var opresult2107 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2107;
  lineNumber = 668
  lineNumber = 1
  lineNumber = 667
  var call2108 = callmethod(var_o,"register:=", [1], var_val);
  var if2018 = call2108;
  } else {
  lineNumber = 679
  lineNumber = 674
  lineNumber = 1
  lineNumber = 668
  var call2110 = callmethod(var_dest,"kind", [0]);
  var string2111 = new GraceString("member");
  var opresult2113 = callmethod(call2110, "==", [1], string2111);
  if (Grace_isTrue(opresult2113)) {
  lineNumber = 669
  var string2114 = new GraceString("; WARNING: non-local assigns not yet fully supported");
  lineNumber = 670
  var call2115 = callmethod(this,"out", [1], string2114);
  lineNumber = 671
  lineNumber = 1
  lineNumber = 671
  lineNumber = 1
  lineNumber = 670
  var call2116 = callmethod(var_dest,"value", [0]);
  var string2117 = new GraceString(":=");
  var opresult2119 = callmethod(call2116, "++", [1], string2117);
  var call2120 = callmethod(var_dest,"value:=", [1], opresult2119);
  lineNumber = 671
  lineNumber = 1
  lineNumber = 671
  var call2122 = callmethod(var_o,"value", [0]);
  var array2121 = new GraceList([
call2122,
]);

  var call2123 = callmethod(var_ast,"astcall", [2], var_dest, array2121);
  var_c = call2123;
  lineNumber = 672
  lineNumber = 673
  var call2124 = callmethod(this,"compilenode", [1], var_c);
  var_r = call2124;
  lineNumber = 674
  lineNumber = 1
  lineNumber = 673
  var call2125 = callmethod(var_o,"register:=", [1], var_r);
  var if2109 = call2125;
  } else {
  lineNumber = 679
  lineNumber = 680
  lineNumber = 1
  lineNumber = 674
  var call2127 = callmethod(var_dest,"kind", [0]);
  var string2128 = new GraceString("index");
  var opresult2130 = callmethod(call2127, "==", [1], string2128);
  if (Grace_isTrue(opresult2130)) {
  lineNumber = 675
  var string2131 = new GraceString("[]:=");
  lineNumber = 1
  lineNumber = 675
  var call2132 = callmethod(var_dest,"value", [0]);
  var call2133 = callmethod(var_ast,"astmember", [2], string2131, call2132);
  var var_imem = call2133;
  lineNumber = 676
  lineNumber = 1
  lineNumber = 676
  var call2135 = callmethod(var_dest,"index", [0]);
  lineNumber = 1
  lineNumber = 676
  var call2136 = callmethod(var_o,"value", [0]);
  var array2134 = new GraceList([
call2135,
call2136,
]);

  var call2137 = callmethod(var_ast,"astcall", [2], var_imem, array2134);
  var_c = call2137;
  lineNumber = 677
  lineNumber = 678
  var call2138 = callmethod(this,"compilenode", [1], var_c);
  var_r = call2138;
  lineNumber = 679
  lineNumber = 1
  lineNumber = 678
  var call2139 = callmethod(var_o,"register:=", [1], var_r);
  var if2126 = call2139;
}
  var if2109 = if2126;
}
  var if2018 = if2109;
}
  lineNumber = 681
  lineNumber = 1
  lineNumber = 680
  var string2140 = new GraceString("%none");
  var call2141 = callmethod(var_o,"register:=", [1], string2140);
  return call2141
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilebind"] = func2013;
  lineNumber = 709
var func2142 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 684
  var var_nm;
  lineNumber = 687
  lineNumber = 689
  lineNumber = 1
  lineNumber = 689
  lineNumber = 1
  lineNumber = 684
  var call2144 = callmethod(var_o,"name", [0]);
  var call2145 = callmethod(call2144,"kind", [0]);
  var string2146 = new GraceString("generic");
  var opresult2148 = callmethod(call2145, "==", [1], string2146);
  if (Grace_isTrue(opresult2148)) {
  lineNumber = 685
  lineNumber = 1
  lineNumber = 685
  lineNumber = 1
  lineNumber = 685
  lineNumber = 1
  lineNumber = 685
  lineNumber = 1
  lineNumber = 685
  var call2149 = callmethod(var_o,"name", [0]);
  var call2150 = callmethod(call2149,"value", [0]);
  var call2151 = callmethod(call2150,"value", [0]);
  var call2152 = callmethod(call2151,"_escape", [0]);
  var_nm = call2152;
  var if2143 = call2152;
  } else {
  lineNumber = 687
  lineNumber = 1
  lineNumber = 687
  lineNumber = 1
  lineNumber = 687
  lineNumber = 1
  lineNumber = 687
  var call2153 = callmethod(var_o,"name", [0]);
  var call2154 = callmethod(call2153,"value", [0]);
  var call2155 = callmethod(call2154,"_escape", [0]);
  var_nm = call2155;
  var if2143 = call2155;
}
  lineNumber = 689
  var call2156 = callmethod(var_declaredvars,"push", [1], var_nm);
  lineNumber = 691
  lineNumber = 1
  lineNumber = 690
  var call2157 = callmethod(var_o,"value", [0]);
  var var_val = call2157;
  lineNumber = 694
  lineNumber = 691
  if (Grace_isTrue(var_val)) {
  lineNumber = 692
  lineNumber = 693
  var call2159 = callmethod(this,"compilenode", [1], var_val);
  var_val = call2159;
  var if2158 = call2159;
  } else {
  lineNumber = 694
  var string2160 = new GraceString("const must have value bound.");
  var call2161 = callmethod(var_util,"syntax_error", [1], string2160);
  var if2158 = call2161;
}
  lineNumber = 697
  lineNumber = 696
  var string2162 = new GraceString("  store %object ");
  var opresult2164 = callmethod(string2162, "++", [1], var_val);
  var string2165 = new GraceString(", %object* %\"var_");
  var opresult2167 = callmethod(opresult2164, "++", [1], string2165);
  lineNumber = 697
  var opresult2169 = callmethod(opresult2167, "++", [1], var_nm);
  var string2170 = new GraceString("\"");
  var opresult2172 = callmethod(opresult2169, "++", [1], string2170);
  lineNumber = 698
  var call2173 = callmethod(this,"out", [1], opresult2172);
  var string2174 = new GraceString("  %icmp");
  var opresult2176 = callmethod(string2174, "++", [1], var_auto__95__count);
  var string2177 = new GraceString(" = icmp eq %object ");
  var opresult2179 = callmethod(opresult2176, "++", [1], string2177);
  var opresult2181 = callmethod(opresult2179, "++", [1], var_val);
  var string2182 = new GraceString(", %undefined");
  var opresult2184 = callmethod(opresult2181, "++", [1], string2182);
  lineNumber = 699
  var call2185 = callmethod(this,"out", [1], opresult2184);
  lineNumber = 700
  lineNumber = 699
  var string2186 = new GraceString("  br i1 %icmp");
  var opresult2188 = callmethod(string2186, "++", [1], var_auto__95__count);
  var string2189 = new GraceString(", label %isundef");
  var opresult2191 = callmethod(opresult2188, "++", [1], string2189);
  var opresult2193 = callmethod(opresult2191, "++", [1], var_auto__95__count);
  var string2194 = new GraceString(", ");
  var opresult2196 = callmethod(opresult2193, "++", [1], string2194);
  lineNumber = 700
  var string2197 = new GraceString("label %isdef");
  var opresult2199 = callmethod(string2197, "++", [1], var_auto__95__count);
  var string2200 = new GraceString("");
  var opresult2202 = callmethod(opresult2199, "++", [1], string2200);
  var opresult2204 = callmethod(opresult2196, "++", [1], opresult2202);
  lineNumber = 701
  var call2205 = callmethod(this,"out", [1], opresult2204);
  var string2206 = new GraceString("isundef");
  var opresult2208 = callmethod(string2206, "++", [1], var_auto__95__count);
  var string2209 = new GraceString("");
  var opresult2211 = callmethod(opresult2208, "++", [1], string2209);
  lineNumber = 702
  var call2212 = callmethod(this,"beginblock", [1], opresult2211);
  lineNumber = 704
  lineNumber = 702
  var string2213 = new GraceString("  call %object @callmethod(%object %none");
  lineNumber = 703
  var string2214 = new GraceString(", i8* getelementptr([11 x i8]* @.str._assignment");
  var opresult2216 = callmethod(string2213, "++", [1], string2214);
  lineNumber = 704
  var string2217 = new GraceString(",i32 0,i32 0), i32 1, %object* %\"var_");
  var opresult2219 = callmethod(string2217, "++", [1], var_nm);
  var string2220 = new GraceString("\")");
  var opresult2222 = callmethod(opresult2219, "++", [1], string2220);
  var opresult2224 = callmethod(opresult2216, "++", [1], opresult2222);
  lineNumber = 705
  var call2225 = callmethod(this,"out", [1], opresult2224);
  var string2226 = new GraceString("  br label %isdef");
  var opresult2228 = callmethod(string2226, "++", [1], var_auto__95__count);
  var string2229 = new GraceString("");
  var opresult2231 = callmethod(opresult2228, "++", [1], string2229);
  lineNumber = 706
  var call2232 = callmethod(this,"out", [1], opresult2231);
  var string2233 = new GraceString("isdef");
  var opresult2235 = callmethod(string2233, "++", [1], var_auto__95__count);
  var string2236 = new GraceString("");
  var opresult2238 = callmethod(opresult2235, "++", [1], string2236);
  lineNumber = 707
  var call2239 = callmethod(this,"beginblock", [1], opresult2238);
  lineNumber = 708
  lineNumber = 707
  var opresult2241 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2241;
  lineNumber = 709
  lineNumber = 1
  lineNumber = 708
  var string2242 = new GraceString("%none");
  var call2243 = callmethod(var_o,"register:=", [1], string2242);
  return call2243
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compiledefdec"] = func2142;
  lineNumber = 736
var func2244 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 711
  lineNumber = 1
  lineNumber = 711
  lineNumber = 1
  lineNumber = 711
  lineNumber = 1
  lineNumber = 711
  var call2245 = callmethod(var_o,"name", [0]);
  var call2246 = callmethod(call2245,"value", [0]);
  var call2247 = callmethod(call2246,"_escape", [0]);
  var var_nm = call2247;
  lineNumber = 712
  var call2248 = callmethod(var_declaredvars,"push", [1], var_nm);
  lineNumber = 714
  lineNumber = 1
  lineNumber = 713
  var call2249 = callmethod(var_o,"value", [0]);
  var var_val = call2249;
  lineNumber = 715
  lineNumber = 714
  var bool2250 = new GraceBoolean(false)
  var var_hadval = bool2250;
  lineNumber = 720
  lineNumber = 715
  if (Grace_isTrue(var_val)) {
  lineNumber = 716
  lineNumber = 717
  var call2252 = callmethod(this,"compilenode", [1], var_val);
  var_val = call2252;
  lineNumber = 718
  lineNumber = 717
  var bool2253 = new GraceBoolean(true)
  var_hadval = bool2253;
  var if2251 = bool2253;
  } else {
  lineNumber = 720
  lineNumber = 719
  var string2254 = new GraceString("%undefined");
  var_val = string2254;
  var if2251 = string2254;
}
  lineNumber = 722
  lineNumber = 721
  var string2255 = new GraceString("  store %object ");
  var opresult2257 = callmethod(string2255, "++", [1], var_val);
  var string2258 = new GraceString(", %object* %\"var_");
  var opresult2260 = callmethod(opresult2257, "++", [1], string2258);
  lineNumber = 722
  var opresult2262 = callmethod(opresult2260, "++", [1], var_nm);
  var string2263 = new GraceString("\"");
  var opresult2265 = callmethod(opresult2262, "++", [1], string2263);
  lineNumber = 723
  var call2266 = callmethod(this,"out", [1], opresult2265);
  lineNumber = 734
  lineNumber = 723
  if (Grace_isTrue(var_hadval)) {
  lineNumber = 724
  var string2268 = new GraceString("  %icmp");
  var opresult2270 = callmethod(string2268, "++", [1], var_auto__95__count);
  var string2271 = new GraceString(" = icmp eq %object ");
  var opresult2273 = callmethod(opresult2270, "++", [1], string2271);
  var opresult2275 = callmethod(opresult2273, "++", [1], var_val);
  var string2276 = new GraceString(", %undefined");
  var opresult2278 = callmethod(opresult2275, "++", [1], string2276);
  lineNumber = 725
  var call2279 = callmethod(this,"out", [1], opresult2278);
  lineNumber = 726
  lineNumber = 725
  var string2280 = new GraceString("  br i1 %icmp");
  var opresult2282 = callmethod(string2280, "++", [1], var_auto__95__count);
  var string2283 = new GraceString(", label %isundef");
  var opresult2285 = callmethod(opresult2282, "++", [1], string2283);
  var opresult2287 = callmethod(opresult2285, "++", [1], var_auto__95__count);
  var string2288 = new GraceString(", ");
  var opresult2290 = callmethod(opresult2287, "++", [1], string2288);
  lineNumber = 726
  var string2291 = new GraceString("label %isdef");
  var opresult2293 = callmethod(string2291, "++", [1], var_auto__95__count);
  var string2294 = new GraceString("");
  var opresult2296 = callmethod(opresult2293, "++", [1], string2294);
  var opresult2298 = callmethod(opresult2290, "++", [1], opresult2296);
  lineNumber = 727
  var call2299 = callmethod(this,"out", [1], opresult2298);
  var string2300 = new GraceString("isundef");
  var opresult2302 = callmethod(string2300, "++", [1], var_auto__95__count);
  var string2303 = new GraceString("");
  var opresult2305 = callmethod(opresult2302, "++", [1], string2303);
  lineNumber = 728
  var call2306 = callmethod(this,"beginblock", [1], opresult2305);
  lineNumber = 730
  lineNumber = 728
  var string2307 = new GraceString("  call %object @callmethod(%object %none");
  lineNumber = 729
  var string2308 = new GraceString(", i8* getelementptr([11 x i8]* @.str._assignment");
  var opresult2310 = callmethod(string2307, "++", [1], string2308);
  lineNumber = 730
  var string2311 = new GraceString(",i32 0,i32 0), i32 1, %object* %\"var_");
  var opresult2313 = callmethod(string2311, "++", [1], var_nm);
  var string2314 = new GraceString("\")");
  var opresult2316 = callmethod(opresult2313, "++", [1], string2314);
  var opresult2318 = callmethod(opresult2310, "++", [1], opresult2316);
  lineNumber = 731
  var call2319 = callmethod(this,"out", [1], opresult2318);
  var string2320 = new GraceString("  br label %isdef");
  var opresult2322 = callmethod(string2320, "++", [1], var_auto__95__count);
  var string2323 = new GraceString("");
  var opresult2325 = callmethod(opresult2322, "++", [1], string2323);
  lineNumber = 732
  var call2326 = callmethod(this,"out", [1], opresult2325);
  var string2327 = new GraceString("isdef");
  var opresult2329 = callmethod(string2327, "++", [1], var_auto__95__count);
  var string2330 = new GraceString("");
  var opresult2332 = callmethod(opresult2329, "++", [1], string2330);
  lineNumber = 733
  var call2333 = callmethod(this,"beginblock", [1], opresult2332);
  lineNumber = 734
  lineNumber = 733
  var opresult2335 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2335;
  var if2267 = opresult2335;
}
  lineNumber = 736
  lineNumber = 1
  lineNumber = 735
  var string2336 = new GraceString("%none");
  var call2337 = callmethod(var_o,"register:=", [1], string2336);
  return call2337
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilevardec"] = func2244;
  lineNumber = 746
var func2338 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 738
  lineNumber = 1
  lineNumber = 738
  var call2339 = callmethod(var_o,"value", [0]);
  lineNumber = 739
  var call2340 = callmethod(this,"compilenode", [1], call2339);
  var var_of = call2340;
  lineNumber = 1
  lineNumber = 739
  var call2341 = callmethod(var_o,"index", [0]);
  lineNumber = 740
  var call2342 = callmethod(this,"compilenode", [1], call2341);
  var var_index = call2342;
  var string2343 = new GraceString("  store %object ");
  var opresult2345 = callmethod(string2343, "++", [1], var_index);
  var string2346 = new GraceString(", %object* %params_0");
  var opresult2348 = callmethod(opresult2345, "++", [1], string2346);
  lineNumber = 741
  var call2349 = callmethod(this,"out", [1], opresult2348);
  lineNumber = 743
  lineNumber = 741
  var string2350 = new GraceString("  %idxres");
  var opresult2352 = callmethod(string2350, "++", [1], var_auto__95__count);
  var string2353 = new GraceString(" = call %object @callmethod(%object ");
  var opresult2355 = callmethod(opresult2352, "++", [1], string2353);
  lineNumber = 742
  var opresult2357 = callmethod(opresult2355, "++", [1], var_of);
  var string2358 = new GraceString(", i8* getelementptr([3 x i8]* @.str._index");
  var opresult2360 = callmethod(opresult2357, "++", [1], string2358);
  lineNumber = 743
  var string2361 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult2363 = callmethod(opresult2360, "++", [1], string2361);
  lineNumber = 744
  var call2364 = callmethod(this,"out", [1], opresult2363);
  lineNumber = 745
  lineNumber = 1
  lineNumber = 745
  lineNumber = 744
  var string2365 = new GraceString("%idxres");
  var opresult2367 = callmethod(string2365, "++", [1], var_auto__95__count);
  var call2368 = callmethod(var_o,"register:=", [1], opresult2367);
  lineNumber = 746
  lineNumber = 745
  var opresult2370 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2370;
  return opresult2370
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileindex"] = func2338;
  lineNumber = 790
var func2371 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 748
  lineNumber = 1
  lineNumber = 748
  var call2372 = callmethod(var_o,"left", [0]);
  lineNumber = 749
  var call2373 = callmethod(this,"compilenode", [1], call2372);
  var var_left = call2373;
  lineNumber = 1
  lineNumber = 749
  var call2374 = callmethod(var_o,"right", [0]);
  lineNumber = 750
  var call2375 = callmethod(this,"compilenode", [1], call2374);
  var var_right = call2375;
  lineNumber = 751
  lineNumber = 750
  var opresult2377 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2377;
  lineNumber = 790
  lineNumber = 791
  lineNumber = 1
  lineNumber = 751
  var call2379 = callmethod(var_o,"value", [0]);
  var string2380 = new GraceString("+");
  var opresult2382 = callmethod(call2379, "==", [1], string2380);
  lineNumber = 791
  lineNumber = 1
  lineNumber = 751
  var call2383 = callmethod(var_o,"value", [0]);
  var string2384 = new GraceString("*");
  var opresult2386 = callmethod(call2383, "==", [1], string2384);
  var opresult2388 = callmethod(opresult2382, "|", [1], opresult2386);
  lineNumber = 791
  lineNumber = 1
  lineNumber = 751
  var call2389 = callmethod(var_o,"value", [0]);
  var string2390 = new GraceString("/");
  var opresult2392 = callmethod(call2389, "==", [1], string2390);
  var opresult2394 = callmethod(opresult2388, "|", [1], opresult2392);
  lineNumber = 791
  lineNumber = 1
  lineNumber = 752
  var call2395 = callmethod(var_o,"value", [0]);
  var string2396 = new GraceString("-");
  var opresult2398 = callmethod(call2395, "==", [1], string2396);
  var opresult2400 = callmethod(opresult2394, "|", [1], opresult2398);
  lineNumber = 791
  lineNumber = 1
  lineNumber = 752
  var call2401 = callmethod(var_o,"value", [0]);
  var string2402 = new GraceString("%");
  var opresult2404 = callmethod(call2401, "==", [1], string2402);
  var opresult2406 = callmethod(opresult2400, "|", [1], opresult2404);
  if (Grace_isTrue(opresult2406)) {
  lineNumber = 754
  lineNumber = 753
  var string2407 = new GraceString("sum");
  var var_rnm = string2407;
  lineNumber = 755
  lineNumber = 754
  var string2408 = new GraceString("plus");
  var var_opnm = string2408;
  lineNumber = 758
  lineNumber = 759
  lineNumber = 1
  lineNumber = 755
  var call2410 = callmethod(var_o,"value", [0]);
  var string2411 = new GraceString("*");
  var opresult2413 = callmethod(call2410, "==", [1], string2411);
  if (Grace_isTrue(opresult2413)) {
  lineNumber = 757
  lineNumber = 756
  var string2414 = new GraceString("prod");
  var_rnm = string2414;
  lineNumber = 758
  lineNumber = 757
  var string2415 = new GraceString("asterisk");
  var_opnm = string2415;
  var if2409 = string2415;
}
  lineNumber = 762
  lineNumber = 763
  lineNumber = 1
  lineNumber = 759
  var call2417 = callmethod(var_o,"value", [0]);
  var string2418 = new GraceString("/");
  var opresult2420 = callmethod(call2417, "==", [1], string2418);
  if (Grace_isTrue(opresult2420)) {
  lineNumber = 761
  lineNumber = 760
  var string2421 = new GraceString("quotient");
  var_rnm = string2421;
  lineNumber = 762
  lineNumber = 761
  var string2422 = new GraceString("slash");
  var_opnm = string2422;
  var if2416 = string2422;
}
  lineNumber = 766
  lineNumber = 767
  lineNumber = 1
  lineNumber = 763
  var call2424 = callmethod(var_o,"value", [0]);
  var string2425 = new GraceString("-");
  var opresult2427 = callmethod(call2424, "==", [1], string2425);
  if (Grace_isTrue(opresult2427)) {
  lineNumber = 765
  lineNumber = 764
  var string2428 = new GraceString("diff");
  var_rnm = string2428;
  lineNumber = 766
  lineNumber = 765
  var string2429 = new GraceString("minus");
  var_opnm = string2429;
  var if2423 = string2429;
}
  lineNumber = 770
  lineNumber = 771
  lineNumber = 1
  lineNumber = 767
  var call2431 = callmethod(var_o,"value", [0]);
  var string2432 = new GraceString("%");
  var opresult2434 = callmethod(call2431, "==", [1], string2432);
  if (Grace_isTrue(opresult2434)) {
  lineNumber = 769
  lineNumber = 768
  var string2435 = new GraceString("modulus");
  var_rnm = string2435;
  lineNumber = 770
  lineNumber = 769
  var string2436 = new GraceString("percent");
  var_opnm = string2436;
  var if2430 = string2436;
}
  lineNumber = 771
  var string2437 = new GraceString("  store %object ");
  var opresult2439 = callmethod(string2437, "++", [1], var_right);
  var string2440 = new GraceString(", %object* %params_0");
  var opresult2442 = callmethod(opresult2439, "++", [1], string2440);
  lineNumber = 772
  var call2443 = callmethod(this,"out", [1], opresult2442);
  lineNumber = 774
  lineNumber = 772
  var string2444 = new GraceString("  %");
  var opresult2446 = callmethod(string2444, "++", [1], var_rnm);
  var opresult2448 = callmethod(opresult2446, "++", [1], var_auto__95__count);
  var string2449 = new GraceString(" = call %object @callmethod(%object ");
  var opresult2451 = callmethod(opresult2448, "++", [1], string2449);
  lineNumber = 773
  var opresult2453 = callmethod(opresult2451, "++", [1], var_left);
  var string2454 = new GraceString(", i8* getelementptr([2 x i8]* @.str._");
  var opresult2456 = callmethod(opresult2453, "++", [1], string2454);
  var opresult2458 = callmethod(opresult2456, "++", [1], var_opnm);
  lineNumber = 774
  var string2459 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult2461 = callmethod(opresult2458, "++", [1], string2459);
  lineNumber = 775
  var call2462 = callmethod(this,"out", [1], opresult2461);
  lineNumber = 776
  lineNumber = 1
  lineNumber = 776
  lineNumber = 775
  var string2463 = new GraceString("%");
  var opresult2465 = callmethod(string2463, "++", [1], var_rnm);
  var opresult2467 = callmethod(opresult2465, "++", [1], var_auto__95__count);
  var call2468 = callmethod(var_o,"register:=", [1], opresult2467);
  lineNumber = 777
  lineNumber = 776
  var opresult2470 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2470;
  var if2378 = opresult2470;
  } else {
  lineNumber = 778
  lineNumber = 1
  lineNumber = 778
  var call2471 = callmethod(var_o,"value", [0]);
  var call2472 = Grace_length(call2471);
  var opresult2474 = callmethod(call2472, "+", [1], new GraceNum(1));
  var var_len = opresult2474;
  lineNumber = 779
  lineNumber = 1
  lineNumber = 779
  lineNumber = 1
  lineNumber = 779
  var call2475 = callmethod(var_o,"value", [0]);
  var call2476 = callmethod(call2475,"_escape", [0]);
  var var_evl = call2476;
  lineNumber = 782
  lineNumber = 780
  var string2477 = new GraceString("@.str");
  lineNumber = 782
  lineNumber = 1
  lineNumber = 780
  var call2478 = callmethod(var_constants,"size", [0]);
  var opresult2480 = callmethod(string2477, "++", [1], call2478);
  var string2481 = new GraceString(" = private unnamed_addr ");
  var opresult2483 = callmethod(opresult2480, "++", [1], string2481);
  lineNumber = 781
  var string2484 = new GraceString("constant [");
  var opresult2486 = callmethod(opresult2483, "++", [1], string2484);
  var opresult2488 = callmethod(opresult2486, "++", [1], var_len);
  var string2489 = new GraceString(" x i8] c\"");
  var opresult2491 = callmethod(opresult2488, "++", [1], string2489);
  var opresult2493 = callmethod(opresult2491, "++", [1], var_evl);
  var string2494 = new GraceString("\\00\"");
  var opresult2496 = callmethod(opresult2493, "++", [1], string2494);
  var var_con = opresult2496;
  lineNumber = 782
  var string2497 = new GraceString("  store %object ");
  var opresult2499 = callmethod(string2497, "++", [1], var_right);
  var string2500 = new GraceString(", %object* %params_0");
  var opresult2502 = callmethod(opresult2499, "++", [1], string2500);
  lineNumber = 783
  var call2503 = callmethod(this,"out", [1], opresult2502);
  lineNumber = 786
  lineNumber = 783
  var string2504 = new GraceString("  %opresult");
  var opresult2506 = callmethod(string2504, "++", [1], var_auto__95__count);
  var string2507 = new GraceString(" = call %object ");
  var opresult2509 = callmethod(opresult2506, "++", [1], string2507);
  lineNumber = 784
  var string2510 = new GraceString("@callmethod(%object ");
  var opresult2512 = callmethod(opresult2509, "++", [1], string2510);
  var opresult2514 = callmethod(opresult2512, "++", [1], var_left);
  lineNumber = 785
  var string2515 = new GraceString(", i8* getelementptr([");
  var opresult2517 = callmethod(opresult2514, "++", [1], string2515);
  var opresult2519 = callmethod(opresult2517, "++", [1], var_len);
  var string2520 = new GraceString(" x i8]* @.str");
  var opresult2522 = callmethod(opresult2519, "++", [1], string2520);
  lineNumber = 786
  lineNumber = 1
  lineNumber = 786
  var call2523 = callmethod(var_constants,"size", [0]);
  var opresult2525 = callmethod(opresult2522, "++", [1], call2523);
  var string2526 = new GraceString(",i32 0,i32 0), i32 1, %object* %params)");
  var opresult2528 = callmethod(opresult2525, "++", [1], string2526);
  lineNumber = 787
  var call2529 = callmethod(this,"out", [1], opresult2528);
  var call2530 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 789
  lineNumber = 1
  lineNumber = 789
  lineNumber = 788
  var string2531 = new GraceString("%opresult");
  var opresult2533 = callmethod(string2531, "++", [1], var_auto__95__count);
  var call2534 = callmethod(var_o,"register:=", [1], opresult2533);
  lineNumber = 790
  lineNumber = 789
  var opresult2536 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2536;
  var if2378 = opresult2536;
}
  return if2378
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileop"] = func2371;
  lineNumber = 840
var func2537 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 794
  var array2538 = new GraceList([
]);

  var var_args = array2538;
  lineNumber = 795
  lineNumber = 794
  var string2539 = new GraceString("");
  var var_obj = string2539;
  lineNumber = 796
  lineNumber = 795
  var var_len = new GraceNum(0);
  lineNumber = 797
  lineNumber = 796
  var string2540 = new GraceString("");
  var var_con = string2540;
  lineNumber = 798
  var var_evl;
  lineNumber = 799
  lineNumber = 798
  var var_i = new GraceNum(0);
  lineNumber = 801
  lineNumber = 799
  lineNumber = 1
  lineNumber = 799
  var call2541 = callmethod(var_o,"with", [0]);
  lineNumber = 801
  var block2542 = Grace_allocObject();
  block2542.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2542.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2542.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2542.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2542.receiver = this;
  block2542.className = 'block<genllvm30:801>';
  block2542.real = function(
var_p
) {
  lineNumber = 800
  lineNumber = 801
  var call2543 = callmethod(this,"compilenode", [1], var_p);
  var var_r = call2543;
  var call2544 = callmethod(var_args,"push", [1], var_r);
  return call2544;
};
  var call2545 = callmethod(Grace_prelude,"for()do", [1, 1], call2541, block2542);
  lineNumber = 805
  lineNumber = 806
  lineNumber = 1
  lineNumber = 803
  var call2547 = callmethod(var_args,"size", [0]);
  var opresult2549 = callmethod(call2547, ">", [1], var_paramsUsed);
  if (Grace_isTrue(opresult2549)) {
  lineNumber = 805
  lineNumber = 1
  lineNumber = 804
  var call2550 = callmethod(var_args,"size", [0]);
  var_paramsUsed = call2550;
  var if2546 = call2550;
}
  lineNumber = 806
  lineNumber = 1
  lineNumber = 806
  lineNumber = 1
  lineNumber = 806
  lineNumber = 1
  lineNumber = 806
  var call2551 = callmethod(var_o,"value", [0]);
  var call2552 = callmethod(call2551,"value", [0]);
  var call2553 = callmethod(call2552,"_escape", [0]);
  var_evl = call2553;
  lineNumber = 836
  lineNumber = 838
  lineNumber = 1
  lineNumber = 838
  lineNumber = 1
  lineNumber = 807
  var call2555 = callmethod(var_o,"value", [0]);
  var call2556 = callmethod(call2555,"kind", [0]);
  var string2557 = new GraceString("member");
  var opresult2559 = callmethod(call2556, "==", [1], string2557);
  if (Grace_isTrue(opresult2559)) {
  lineNumber = 808
  lineNumber = 1
  lineNumber = 808
  lineNumber = 1
  lineNumber = 808
  var call2560 = callmethod(var_o,"value", [0]);
  var call2561 = callmethod(call2560,"in", [0]);
  lineNumber = 809
  var call2562 = callmethod(this,"compilenode", [1], call2561);
  var_obj = call2562;
  lineNumber = 1
  lineNumber = 809
  lineNumber = 1
  lineNumber = 809
  var call2563 = callmethod(var_o,"value", [0]);
  var call2564 = callmethod(call2563,"value", [0]);
  var call2565 = Grace_length(call2564);
  var opresult2567 = callmethod(call2565, "+", [1], new GraceNum(1));
  var_len = opresult2567;
  lineNumber = 812
  lineNumber = 810
  var string2568 = new GraceString("@.str");
  lineNumber = 812
  lineNumber = 1
  lineNumber = 810
  var call2569 = callmethod(var_constants,"size", [0]);
  var opresult2571 = callmethod(string2568, "++", [1], call2569);
  var string2572 = new GraceString(" = private unnamed_addr ");
  var opresult2574 = callmethod(opresult2571, "++", [1], string2572);
  lineNumber = 811
  var string2575 = new GraceString("constant [");
  var opresult2577 = callmethod(opresult2574, "++", [1], string2575);
  var opresult2579 = callmethod(opresult2577, "++", [1], var_len);
  var string2580 = new GraceString(" x i8] c\"");
  var opresult2582 = callmethod(opresult2579, "++", [1], string2580);
  var opresult2584 = callmethod(opresult2582, "++", [1], var_evl);
  var string2585 = new GraceString("\\00\"");
  var opresult2587 = callmethod(opresult2584, "++", [1], string2585);
  var_con = opresult2587;
  lineNumber = 815
  lineNumber = 812
  lineNumber = 815
  var block2588 = Grace_allocObject();
  block2588.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2588.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2588.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2588.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2588.receiver = this;
  block2588.className = 'block<genllvm30:815>';
  block2588.real = function(
var_arg
) {
  lineNumber = 813
  var string2589 = new GraceString("  store %object ");
  var opresult2591 = callmethod(string2589, "++", [1], var_arg);
  var string2592 = new GraceString(", %object* %params_");
  var opresult2594 = callmethod(opresult2591, "++", [1], string2592);
  var opresult2596 = callmethod(opresult2594, "++", [1], var_i);
  var string2597 = new GraceString("");
  var opresult2599 = callmethod(opresult2596, "++", [1], string2597);
  lineNumber = 814
  var call2600 = callmethod(this,"out", [1], opresult2599);
  lineNumber = 815
  lineNumber = 814
  var opresult2602 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult2602;
  return opresult2602;
};
  var call2603 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block2588);
  lineNumber = 820
  lineNumber = 816
  var string2604 = new GraceString("  %call");
  var opresult2606 = callmethod(string2604, "++", [1], var_auto__95__count);
  var string2607 = new GraceString(" = call %object ");
  var opresult2609 = callmethod(opresult2606, "++", [1], string2607);
  lineNumber = 817
  var string2610 = new GraceString("@callmethod(%object ");
  var opresult2612 = callmethod(opresult2609, "++", [1], string2610);
  var opresult2614 = callmethod(opresult2612, "++", [1], var_obj);
  lineNumber = 818
  var string2615 = new GraceString(", i8* getelementptr([");
  var opresult2617 = callmethod(opresult2614, "++", [1], string2615);
  var opresult2619 = callmethod(opresult2617, "++", [1], var_len);
  var string2620 = new GraceString(" x i8]* @.str");
  var opresult2622 = callmethod(opresult2619, "++", [1], string2620);
  lineNumber = 820
  lineNumber = 1
  lineNumber = 819
  var call2623 = callmethod(var_constants,"size", [0]);
  var opresult2625 = callmethod(opresult2622, "++", [1], call2623);
  var string2626 = new GraceString(",i32 0,i32 0), i32 ");
  var opresult2628 = callmethod(opresult2625, "++", [1], string2626);
  lineNumber = 820
  lineNumber = 1
  lineNumber = 820
  var call2629 = callmethod(var_args,"size", [0]);
  var opresult2631 = callmethod(opresult2628, "++", [1], call2629);
  var string2632 = new GraceString(", %object* %params)");
  var opresult2634 = callmethod(opresult2631, "++", [1], string2632);
  lineNumber = 821
  var call2635 = callmethod(this,"out", [1], opresult2634);
  var call2636 = callmethod(var_constants,"push", [1], var_con);
  var if2554 = call2636;
  } else {
  lineNumber = 824
  lineNumber = 823
  var string2637 = new GraceString("%self");
  var_obj = string2637;
  lineNumber = 824
  lineNumber = 1
  lineNumber = 824
  lineNumber = 1
  lineNumber = 824
  var call2638 = callmethod(var_o,"value", [0]);
  var call2639 = callmethod(call2638,"value", [0]);
  var call2640 = Grace_length(call2639);
  var opresult2642 = callmethod(call2640, "+", [1], new GraceNum(1));
  var_len = opresult2642;
  lineNumber = 827
  lineNumber = 825
  var string2643 = new GraceString("@.str");
  lineNumber = 827
  lineNumber = 1
  lineNumber = 825
  var call2644 = callmethod(var_constants,"size", [0]);
  var opresult2646 = callmethod(string2643, "++", [1], call2644);
  var string2647 = new GraceString(" = private unnamed_addr ");
  var opresult2649 = callmethod(opresult2646, "++", [1], string2647);
  lineNumber = 826
  var string2650 = new GraceString("constant [");
  var opresult2652 = callmethod(opresult2649, "++", [1], string2650);
  var opresult2654 = callmethod(opresult2652, "++", [1], var_len);
  var string2655 = new GraceString(" x i8] c\"");
  var opresult2657 = callmethod(opresult2654, "++", [1], string2655);
  var opresult2659 = callmethod(opresult2657, "++", [1], var_evl);
  var string2660 = new GraceString("\\00\"");
  var opresult2662 = callmethod(opresult2659, "++", [1], string2660);
  var_con = opresult2662;
  lineNumber = 830
  lineNumber = 827
  lineNumber = 830
  var block2663 = Grace_allocObject();
  block2663.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2663.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2663.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2663.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2663.receiver = this;
  block2663.className = 'block<genllvm30:830>';
  block2663.real = function(
var_arg
) {
  lineNumber = 828
  var string2664 = new GraceString("  store %object ");
  var opresult2666 = callmethod(string2664, "++", [1], var_arg);
  var string2667 = new GraceString(", %object* %params_");
  var opresult2669 = callmethod(opresult2666, "++", [1], string2667);
  var opresult2671 = callmethod(opresult2669, "++", [1], var_i);
  var string2672 = new GraceString("");
  var opresult2674 = callmethod(opresult2671, "++", [1], string2672);
  lineNumber = 829
  var call2675 = callmethod(this,"out", [1], opresult2674);
  lineNumber = 830
  lineNumber = 829
  var opresult2677 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult2677;
  return opresult2677;
};
  var call2678 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block2663);
  lineNumber = 835
  lineNumber = 831
  var string2679 = new GraceString("  %call");
  var opresult2681 = callmethod(string2679, "++", [1], var_auto__95__count);
  var string2682 = new GraceString(" = call %object ");
  var opresult2684 = callmethod(opresult2681, "++", [1], string2682);
  lineNumber = 832
  var string2685 = new GraceString("@callmethod(%object ");
  var opresult2687 = callmethod(opresult2684, "++", [1], string2685);
  var opresult2689 = callmethod(opresult2687, "++", [1], var_obj);
  lineNumber = 833
  var string2690 = new GraceString(", i8* getelementptr([");
  var opresult2692 = callmethod(opresult2689, "++", [1], string2690);
  var opresult2694 = callmethod(opresult2692, "++", [1], var_len);
  var string2695 = new GraceString(" x i8]* @.str");
  var opresult2697 = callmethod(opresult2694, "++", [1], string2695);
  lineNumber = 835
  lineNumber = 1
  lineNumber = 834
  var call2698 = callmethod(var_constants,"size", [0]);
  var opresult2700 = callmethod(opresult2697, "++", [1], call2698);
  var string2701 = new GraceString(",i32 0,i32 0), i32 ");
  var opresult2703 = callmethod(opresult2700, "++", [1], string2701);
  lineNumber = 835
  lineNumber = 1
  lineNumber = 835
  var call2704 = callmethod(var_args,"size", [0]);
  var opresult2706 = callmethod(opresult2703, "++", [1], call2704);
  var string2707 = new GraceString(", %object* %params)");
  var opresult2709 = callmethod(opresult2706, "++", [1], string2707);
  lineNumber = 836
  var call2710 = callmethod(this,"out", [1], opresult2709);
  var call2711 = callmethod(var_constants,"push", [1], var_con);
  var if2554 = call2711;
}
  lineNumber = 839
  lineNumber = 1
  lineNumber = 839
  lineNumber = 838
  var string2712 = new GraceString("%call");
  var opresult2714 = callmethod(string2712, "++", [1], var_auto__95__count);
  var call2715 = callmethod(var_o,"register:=", [1], opresult2714);
  lineNumber = 840
  lineNumber = 839
  var opresult2717 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2717;
  return opresult2717
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilecall"] = func2537;
  lineNumber = 884
var func2718 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 843
  lineNumber = 842
  var string2719 = new GraceString("");
  var var_escval = string2719;
  lineNumber = 843
  lineNumber = 1
  lineNumber = 843
  var call2720 = callmethod(var_o,"value", [0]);
  var call2721 = Grace_length(call2720);
  var quotient2723 = callmethod(call2721, "/", [1], new GraceNum(2));
  var var_l = quotient2723;
  lineNumber = 845
  lineNumber = 844
  var var_i = new GraceNum(0);
  lineNumber = 851
  lineNumber = 845
  lineNumber = 1
  lineNumber = 845
  var call2724 = callmethod(var_o,"value", [0]);
  lineNumber = 851
  var block2725 = Grace_allocObject();
  block2725.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2725.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2725.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2725.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2725.receiver = this;
  block2725.className = 'block<genllvm30:851>';
  block2725.real = function(
var_c
) {
  lineNumber = 848
  lineNumber = 849
  lineNumber = 846
  var modulus2728 = callmethod(var_i, "%", [1], new GraceNum(2));
  var opresult2730 = callmethod(modulus2728, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult2730)) {
  lineNumber = 848
  lineNumber = 847
  var string2731 = new GraceString("\\");
  var opresult2733 = callmethod(var_escval, "++", [1], string2731);
  var_escval = opresult2733;
  var if2726 = opresult2733;
}
  lineNumber = 850
  lineNumber = 849
  var opresult2735 = callmethod(var_escval, "++", [1], var_c);
  var_escval = opresult2735;
  lineNumber = 851
  lineNumber = 850
  var opresult2737 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult2737;
  return opresult2737;
};
  var call2738 = callmethod(Grace_prelude,"for()do", [1, 1], call2724, block2725);
  lineNumber = 853
  lineNumber = 852
  var string2739 = new GraceString("  %tmp");
  var opresult2741 = callmethod(string2739, "++", [1], var_auto__95__count);
  var string2742 = new GraceString(" = load %object* @.octlit");
  var opresult2744 = callmethod(opresult2741, "++", [1], string2742);
  lineNumber = 853
  var opresult2746 = callmethod(opresult2744, "++", [1], var_auto__95__count);
  lineNumber = 854
  var call2747 = callmethod(this,"out", [1], opresult2746);
  lineNumber = 855
  lineNumber = 854
  var string2748 = new GraceString("  %cmp");
  var opresult2750 = callmethod(string2748, "++", [1], var_auto__95__count);
  var string2751 = new GraceString(" = icmp ne %object %tmp");
  var opresult2753 = callmethod(opresult2750, "++", [1], string2751);
  lineNumber = 855
  var opresult2755 = callmethod(opresult2753, "++", [1], var_auto__95__count);
  var string2756 = new GraceString(", null");
  var opresult2758 = callmethod(opresult2755, "++", [1], string2756);
  lineNumber = 856
  var call2759 = callmethod(this,"out", [1], opresult2758);
  lineNumber = 858
  lineNumber = 856
  var string2760 = new GraceString("  br i1 %cmp");
  var opresult2762 = callmethod(string2760, "++", [1], var_auto__95__count);
  var string2763 = new GraceString(", label %octlit");
  var opresult2765 = callmethod(opresult2762, "++", [1], string2763);
  lineNumber = 857
  var opresult2767 = callmethod(opresult2765, "++", [1], var_auto__95__count);
  var string2768 = new GraceString(".already, label %octlit");
  var opresult2770 = callmethod(opresult2767, "++", [1], string2768);
  lineNumber = 858
  var opresult2772 = callmethod(opresult2770, "++", [1], var_auto__95__count);
  var string2773 = new GraceString(".define");
  var opresult2775 = callmethod(opresult2772, "++", [1], string2773);
  lineNumber = 859
  var call2776 = callmethod(this,"out", [1], opresult2775);
  var string2777 = new GraceString("octlit");
  var opresult2779 = callmethod(string2777, "++", [1], var_auto__95__count);
  var string2780 = new GraceString(".already");
  var opresult2782 = callmethod(opresult2779, "++", [1], string2780);
  lineNumber = 860
  var call2783 = callmethod(this,"beginblock", [1], opresult2782);
  lineNumber = 861
  lineNumber = 860
  var string2784 = new GraceString("  %alreadyoctets");
  var opresult2786 = callmethod(string2784, "++", [1], var_auto__95__count);
  var string2787 = new GraceString(" = load %object* @.octlit");
  var opresult2789 = callmethod(opresult2786, "++", [1], string2787);
  lineNumber = 861
  var opresult2791 = callmethod(opresult2789, "++", [1], var_auto__95__count);
  lineNumber = 862
  var call2792 = callmethod(this,"out", [1], opresult2791);
  var string2793 = new GraceString("  br label %octlit");
  var opresult2795 = callmethod(string2793, "++", [1], var_auto__95__count);
  var string2796 = new GraceString(".end");
  var opresult2798 = callmethod(opresult2795, "++", [1], string2796);
  lineNumber = 863
  var call2799 = callmethod(this,"out", [1], opresult2798);
  var string2800 = new GraceString("octlit");
  var opresult2802 = callmethod(string2800, "++", [1], var_auto__95__count);
  var string2803 = new GraceString(".define");
  var opresult2805 = callmethod(opresult2802, "++", [1], string2803);
  lineNumber = 864
  var call2806 = callmethod(this,"beginblock", [1], opresult2805);
  var string2807 = new GraceString("  %oct");
  var opresult2809 = callmethod(string2807, "++", [1], var_auto__95__count);
  var string2810 = new GraceString(" = getelementptr [");
  var opresult2812 = callmethod(opresult2809, "++", [1], string2810);
  var opresult2814 = callmethod(opresult2812, "++", [1], var_l);
  var string2815 = new GraceString(" x i8]* @.oct");
  var opresult2817 = callmethod(opresult2814, "++", [1], string2815);
  lineNumber = 1
  lineNumber = 864
  var call2818 = callmethod(var_constants,"size", [0]);
  var opresult2820 = callmethod(opresult2817, "++", [1], call2818);
  var string2821 = new GraceString(", i32 0, i32 0");
  var opresult2823 = callmethod(opresult2820, "++", [1], string2821);
  lineNumber = 865
  var call2824 = callmethod(this,"out", [1], opresult2823);
  lineNumber = 867
  lineNumber = 865
  var string2825 = new GraceString("  %defoctets");
  var opresult2827 = callmethod(string2825, "++", [1], var_auto__95__count);
  var string2828 = new GraceString(" = call %object ");
  var opresult2830 = callmethod(opresult2827, "++", [1], string2828);
  lineNumber = 866
  var string2831 = new GraceString("@alloc_Octets(i8* ");
  var opresult2833 = callmethod(opresult2830, "++", [1], string2831);
  lineNumber = 867
  var string2834 = new GraceString("%oct");
  var opresult2836 = callmethod(opresult2833, "++", [1], string2834);
  var opresult2838 = callmethod(opresult2836, "++", [1], var_auto__95__count);
  var string2839 = new GraceString(", i32 ");
  var opresult2841 = callmethod(opresult2838, "++", [1], string2839);
  var opresult2843 = callmethod(opresult2841, "++", [1], var_l);
  var string2844 = new GraceString(")");
  var opresult2846 = callmethod(opresult2843, "++", [1], string2844);
  lineNumber = 868
  var call2847 = callmethod(this,"out", [1], opresult2846);
  lineNumber = 869
  lineNumber = 868
  var string2848 = new GraceString("  store %object %defoctets");
  var opresult2850 = callmethod(string2848, "++", [1], var_auto__95__count);
  var string2851 = new GraceString(", %object* ");
  var opresult2853 = callmethod(opresult2850, "++", [1], string2851);
  lineNumber = 869
  var string2854 = new GraceString("@.octlit");
  var opresult2856 = callmethod(opresult2853, "++", [1], string2854);
  var opresult2858 = callmethod(opresult2856, "++", [1], var_auto__95__count);
  lineNumber = 870
  var call2859 = callmethod(this,"out", [1], opresult2858);
  var string2860 = new GraceString("br label %octlit");
  var opresult2862 = callmethod(string2860, "++", [1], var_auto__95__count);
  var string2863 = new GraceString(".end");
  var opresult2865 = callmethod(opresult2862, "++", [1], string2863);
  lineNumber = 871
  var call2866 = callmethod(this,"out", [1], opresult2865);
  var string2867 = new GraceString("octlit");
  var opresult2869 = callmethod(string2867, "++", [1], var_auto__95__count);
  var string2870 = new GraceString(".end");
  var opresult2872 = callmethod(opresult2869, "++", [1], string2870);
  lineNumber = 872
  var call2873 = callmethod(this,"beginblock", [1], opresult2872);
  lineNumber = 875
  lineNumber = 872
  var string2874 = new GraceString(" %octets");
  var opresult2876 = callmethod(string2874, "++", [1], var_auto__95__count);
  var string2877 = new GraceString(" = phi %object [%alreadyoctets");
  var opresult2879 = callmethod(opresult2876, "++", [1], string2877);
  lineNumber = 873
  var opresult2881 = callmethod(opresult2879, "++", [1], var_auto__95__count);
  var string2882 = new GraceString(", %octlit");
  var opresult2884 = callmethod(opresult2881, "++", [1], string2882);
  var opresult2886 = callmethod(opresult2884, "++", [1], var_auto__95__count);
  var string2887 = new GraceString(".already], ");
  var opresult2889 = callmethod(opresult2886, "++", [1], string2887);
  lineNumber = 874
  var string2890 = new GraceString("[%defoctets");
  var opresult2892 = callmethod(opresult2889, "++", [1], string2890);
  var opresult2894 = callmethod(opresult2892, "++", [1], var_auto__95__count);
  var string2895 = new GraceString(", %octlit");
  var opresult2897 = callmethod(opresult2894, "++", [1], string2895);
  var opresult2899 = callmethod(opresult2897, "++", [1], var_auto__95__count);
  lineNumber = 875
  var string2900 = new GraceString(".define]");
  var opresult2902 = callmethod(opresult2899, "++", [1], string2900);
  lineNumber = 876
  var call2903 = callmethod(this,"out", [1], opresult2902);
  lineNumber = 878
  lineNumber = 876
  var string2904 = new GraceString("@.oct");
  lineNumber = 878
  lineNumber = 1
  lineNumber = 876
  var call2905 = callmethod(var_constants,"size", [0]);
  var opresult2907 = callmethod(string2904, "++", [1], call2905);
  var string2908 = new GraceString(" = private unnamed_addr ");
  var opresult2910 = callmethod(opresult2907, "++", [1], string2908);
  lineNumber = 877
  var string2911 = new GraceString("constant [");
  var opresult2913 = callmethod(opresult2910, "++", [1], string2911);
  var opresult2915 = callmethod(opresult2913, "++", [1], var_l);
  var string2916 = new GraceString(" x i8] c\"");
  var opresult2918 = callmethod(opresult2915, "++", [1], string2916);
  var opresult2920 = callmethod(opresult2918, "++", [1], var_escval);
  var string2921 = new GraceString("\"");
  var opresult2923 = callmethod(opresult2920, "++", [1], string2921);
  var var_con = opresult2923;
  lineNumber = 878
  var call2924 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 881
  lineNumber = 879
  var string2925 = new GraceString("@.octlit");
  var opresult2927 = callmethod(string2925, "++", [1], var_auto__95__count);
  lineNumber = 880
  var string2928 = new GraceString(" = private global %object null");
  var opresult2930 = callmethod(opresult2927, "++", [1], string2928);
  var_con = opresult2930;
  lineNumber = 881
  var call2931 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 883
  lineNumber = 1
  lineNumber = 883
  lineNumber = 882
  var string2932 = new GraceString("%octets");
  var opresult2934 = callmethod(string2932, "++", [1], var_auto__95__count);
  var call2935 = callmethod(var_o,"register:=", [1], opresult2934);
  lineNumber = 884
  lineNumber = 883
  var opresult2937 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2937;
  return opresult2937
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileoctets"] = func2718;
  lineNumber = 931
var func2938 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 886
  var string2939 = new GraceString("; Import of ");
  lineNumber = 1
  lineNumber = 886
  lineNumber = 1
  lineNumber = 886
  var call2940 = callmethod(var_o,"value", [0]);
  var call2941 = callmethod(call2940,"value", [0]);
  var opresult2943 = callmethod(string2939, "++", [1], call2941);
  lineNumber = 887
  var call2944 = callmethod(this,"out", [1], opresult2943);
  lineNumber = 888
  var var_con;
  lineNumber = 1
  lineNumber = 888
  lineNumber = 1
  lineNumber = 888
  lineNumber = 1
  lineNumber = 888
  var call2945 = callmethod(var_o,"value", [0]);
  var call2946 = callmethod(call2945,"value", [0]);
  var call2947 = callmethod(call2946,"_escape", [0]);
  var var_nm = call2947;
  lineNumber = 890
  lineNumber = 889
  var string2948 = new GraceString("@\".module.");
  var opresult2950 = callmethod(string2948, "++", [1], var_nm);
  var string2951 = new GraceString("\"");
  var opresult2953 = callmethod(opresult2950, "++", [1], string2951);
  var var_modg = opresult2953;
  lineNumber = 891
  lineNumber = 890
  var var_sblock = var_bblock;
  lineNumber = 891
  var string2954 = new GraceString("  %tmp");
  var opresult2956 = callmethod(string2954, "++", [1], var_auto__95__count);
  var string2957 = new GraceString(" = load %object* ");
  var opresult2959 = callmethod(opresult2956, "++", [1], string2957);
  var opresult2961 = callmethod(opresult2959, "++", [1], var_modg);
  lineNumber = 892
  var call2962 = callmethod(this,"out", [1], opresult2961);
  lineNumber = 893
  lineNumber = 892
  var string2963 = new GraceString("  %cmp");
  var opresult2965 = callmethod(string2963, "++", [1], var_auto__95__count);
  var string2966 = new GraceString(" = icmp ne %object %tmp");
  var opresult2968 = callmethod(opresult2965, "++", [1], string2966);
  var opresult2970 = callmethod(opresult2968, "++", [1], var_auto__95__count);
  lineNumber = 893
  var string2971 = new GraceString(", null");
  var opresult2973 = callmethod(opresult2970, "++", [1], string2971);
  lineNumber = 894
  var call2974 = callmethod(this,"out", [1], opresult2973);
  lineNumber = 895
  lineNumber = 894
  var string2975 = new GraceString("  br i1 %cmp");
  var opresult2977 = callmethod(string2975, "++", [1], var_auto__95__count);
  var string2978 = new GraceString(", label %\"import.");
  var opresult2980 = callmethod(opresult2977, "++", [1], string2978);
  var opresult2982 = callmethod(opresult2980, "++", [1], var_nm);
  lineNumber = 895
  var string2983 = new GraceString(".already\", label %\"import.");
  var opresult2985 = callmethod(opresult2982, "++", [1], string2983);
  var opresult2987 = callmethod(opresult2985, "++", [1], var_nm);
  var string2988 = new GraceString(".define\"");
  var opresult2990 = callmethod(opresult2987, "++", [1], string2988);
  lineNumber = 896
  var call2991 = callmethod(this,"out", [1], opresult2990);
  var string2992 = new GraceString("import.");
  var opresult2994 = callmethod(string2992, "++", [1], var_nm);
  var string2995 = new GraceString(".already");
  var opresult2997 = callmethod(opresult2994, "++", [1], string2995);
  lineNumber = 897
  var call2998 = callmethod(this,"beginblock", [1], opresult2997);
  var string2999 = new GraceString("  %alreadymod");
  var opresult3001 = callmethod(string2999, "++", [1], var_auto__95__count);
  var string3002 = new GraceString(" = load %object* ");
  var opresult3004 = callmethod(opresult3001, "++", [1], string3002);
  var opresult3006 = callmethod(opresult3004, "++", [1], var_modg);
  lineNumber = 898
  var call3007 = callmethod(this,"out", [1], opresult3006);
  var string3008 = new GraceString("  br label %\"import.");
  var opresult3010 = callmethod(string3008, "++", [1], var_nm);
  var string3011 = new GraceString(".end\"");
  var opresult3013 = callmethod(opresult3010, "++", [1], string3011);
  lineNumber = 899
  var call3014 = callmethod(this,"out", [1], opresult3013);
  var string3015 = new GraceString("import.");
  var opresult3017 = callmethod(string3015, "++", [1], var_nm);
  var string3018 = new GraceString(".define");
  var opresult3020 = callmethod(opresult3017, "++", [1], string3018);
  lineNumber = 900
  var call3021 = callmethod(this,"beginblock", [1], opresult3020);
  lineNumber = 910
  lineNumber = 900
  var call3023 = callmethod(var_staticmodules,"contains", [1], var_nm);
  if (Grace_isTrue(call3023)) {
  lineNumber = 902
  lineNumber = 901
  var string3024 = new GraceString("  %\"tmp_mod_");
  var opresult3026 = callmethod(string3024, "++", [1], var_nm);
  var string3027 = new GraceString("\" = call %object @module_");
  var opresult3029 = callmethod(opresult3026, "++", [1], string3027);
  lineNumber = 902
  var opresult3031 = callmethod(opresult3029, "++", [1], var_nm);
  var string3032 = new GraceString("_init()");
  var opresult3034 = callmethod(opresult3031, "++", [1], string3032);
  lineNumber = 903
  var call3035 = callmethod(this,"out", [1], opresult3034);
  var if3022 = call3035;
  } else {
  lineNumber = 905
  lineNumber = 904
  var string3036 = new GraceString("@\".str.module.");
  var opresult3038 = callmethod(string3036, "++", [1], var_nm);
  var string3039 = new GraceString("\"");
  var opresult3041 = callmethod(opresult3038, "++", [1], string3039);
  var var_mn = opresult3041;
  lineNumber = 905
  lineNumber = 1
  lineNumber = 905
  var string3042 = new GraceString("utf-8");
  var call3043 = callmethod(var_nm,"encode", [1], string3042);
  var call3044 = callmethod(call3043,"size", [0]);
  var opresult3046 = callmethod(call3044, "+", [1], new GraceNum(1));
  var var_l = opresult3046;
  lineNumber = 907
  lineNumber = 908
  lineNumber = 906
  var string3047 = new GraceString(" = private unnamed_addr constant [");
  var opresult3049 = callmethod(var_mn, "++", [1], string3047);
  var opresult3051 = callmethod(opresult3049, "++", [1], var_l);
  var string3052 = new GraceString(" x i8] ");
  var opresult3054 = callmethod(opresult3051, "++", [1], string3052);
  lineNumber = 907
  var string3055 = new GraceString(" c\"");
  var opresult3057 = callmethod(opresult3054, "++", [1], string3055);
  lineNumber = 1
  lineNumber = 907
  var call3058 = callmethod(var_nm,"_escape", [0]);
  var opresult3060 = callmethod(opresult3057, "++", [1], call3058);
  var string3061 = new GraceString("\\00\"");
  var opresult3063 = callmethod(opresult3060, "++", [1], string3061);
  var_con = opresult3063;
  lineNumber = 908
  var call3064 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 910
  lineNumber = 909
  var string3065 = new GraceString("  %\"tmp_mod_");
  var opresult3067 = callmethod(string3065, "++", [1], var_nm);
  var string3068 = new GraceString("\" = call %object @dlmodule(i8 *");
  var opresult3070 = callmethod(opresult3067, "++", [1], string3068);
  lineNumber = 910
  var string3071 = new GraceString(" getelementptr([");
  var opresult3073 = callmethod(opresult3070, "++", [1], string3071);
  var opresult3075 = callmethod(opresult3073, "++", [1], var_l);
  var string3076 = new GraceString(" x i8]* ");
  var opresult3078 = callmethod(opresult3075, "++", [1], string3076);
  var opresult3080 = callmethod(opresult3078, "++", [1], var_mn);
  var string3081 = new GraceString(",i32 0,i32 0))");
  var opresult3083 = callmethod(opresult3080, "++", [1], string3081);
  lineNumber = 911
  var call3084 = callmethod(this,"out", [1], opresult3083);
  var if3022 = call3084;
}
  lineNumber = 913
  lineNumber = 912
  var string3085 = new GraceString("  store %object %\"tmp_mod_");
  var opresult3087 = callmethod(string3085, "++", [1], var_nm);
  lineNumber = 913
  var string3088 = new GraceString("\", %object* @\".module.");
  var opresult3090 = callmethod(opresult3087, "++", [1], string3088);
  var opresult3092 = callmethod(opresult3090, "++", [1], var_nm);
  var string3093 = new GraceString("\"");
  var opresult3095 = callmethod(opresult3092, "++", [1], string3093);
  lineNumber = 914
  var call3096 = callmethod(this,"out", [1], opresult3095);
  lineNumber = 915
  lineNumber = 914
  var string3097 = new GraceString("  store %object %\"tmp_mod_");
  var opresult3099 = callmethod(string3097, "++", [1], var_nm);
  var string3100 = new GraceString("\", %object* @\".module.");
  var opresult3102 = callmethod(opresult3099, "++", [1], string3100);
  lineNumber = 915
  var opresult3104 = callmethod(opresult3102, "++", [1], var_nm);
  var string3105 = new GraceString("\"");
  var opresult3107 = callmethod(opresult3104, "++", [1], string3105);
  lineNumber = 916
  var call3108 = callmethod(this,"out", [1], opresult3107);
  var string3109 = new GraceString("  br label %\"import.");
  var opresult3111 = callmethod(string3109, "++", [1], var_nm);
  var string3112 = new GraceString(".end\"");
  var opresult3114 = callmethod(opresult3111, "++", [1], string3112);
  lineNumber = 917
  var call3115 = callmethod(this,"out", [1], opresult3114);
  var string3116 = new GraceString("import.");
  var opresult3118 = callmethod(string3116, "++", [1], var_nm);
  var string3119 = new GraceString(".end");
  var opresult3121 = callmethod(opresult3118, "++", [1], string3119);
  lineNumber = 918
  var call3122 = callmethod(this,"beginblock", [1], opresult3121);
  lineNumber = 920
  lineNumber = 918
  var string3123 = new GraceString("  %\"tmp_modv_");
  var opresult3125 = callmethod(string3123, "++", [1], var_nm);
  var string3126 = new GraceString("\" = phi %object [%alreadymod");
  var opresult3128 = callmethod(opresult3125, "++", [1], string3126);
  lineNumber = 919
  var opresult3130 = callmethod(opresult3128, "++", [1], var_auto__95__count);
  var string3131 = new GraceString(", %\"import.");
  var opresult3133 = callmethod(opresult3130, "++", [1], string3131);
  var opresult3135 = callmethod(opresult3133, "++", [1], var_nm);
  var string3136 = new GraceString(".already\"], ");
  var opresult3138 = callmethod(opresult3135, "++", [1], string3136);
  lineNumber = 920
  var string3139 = new GraceString("[%\"tmp_mod_");
  var opresult3141 = callmethod(opresult3138, "++", [1], string3139);
  var opresult3143 = callmethod(opresult3141, "++", [1], var_nm);
  var string3144 = new GraceString("\", %\"import.");
  var opresult3146 = callmethod(opresult3143, "++", [1], string3144);
  var opresult3148 = callmethod(opresult3146, "++", [1], var_nm);
  var string3149 = new GraceString(".define\"]");
  var opresult3151 = callmethod(opresult3148, "++", [1], string3149);
  lineNumber = 921
  var call3152 = callmethod(this,"out", [1], opresult3151);
  var string3153 = new GraceString("  %\"var_");
  var opresult3155 = callmethod(string3153, "++", [1], var_nm);
  var string3156 = new GraceString("\" = call %object* @alloc_var()");
  var opresult3158 = callmethod(opresult3155, "++", [1], string3156);
  lineNumber = 922
  var call3159 = callmethod(this,"out", [1], opresult3158);
  lineNumber = 923
  lineNumber = 922
  var string3160 = new GraceString("  store %object %\"tmp_modv_");
  var opresult3162 = callmethod(string3160, "++", [1], var_nm);
  lineNumber = 923
  var string3163 = new GraceString("\", %object* %\"var_");
  var opresult3165 = callmethod(opresult3162, "++", [1], string3163);
  var opresult3167 = callmethod(opresult3165, "++", [1], var_nm);
  var string3168 = new GraceString("\"");
  var opresult3170 = callmethod(opresult3167, "++", [1], string3168);
  lineNumber = 924
  var call3171 = callmethod(this,"out", [1], opresult3170);
  lineNumber = 925
  lineNumber = 924
  var string3172 = new GraceString("@\".module.");
  var opresult3174 = callmethod(string3172, "++", [1], var_nm);
  var string3175 = new GraceString("\" = weak global %object null");
  var opresult3177 = callmethod(opresult3174, "++", [1], string3175);
  var_con = opresult3177;
  lineNumber = 925
  var call3178 = callmethod(var_modules,"push", [1], var_nm);
  lineNumber = 926
  var call3179 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 928
  lineNumber = 927
  var string3180 = new GraceString("declare %object @\"module_");
  var opresult3182 = callmethod(string3180, "++", [1], var_nm);
  var string3183 = new GraceString("_init\"()");
  var opresult3185 = callmethod(opresult3182, "++", [1], string3183);
  var_con = opresult3185;
  lineNumber = 928
  var call3186 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 930
  lineNumber = 929
  var opresult3188 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3188;
  lineNumber = 931
  lineNumber = 1
  lineNumber = 930
  var string3189 = new GraceString("%none");
  var call3190 = callmethod(var_o,"register:=", [1], string3189);
  return call3190
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compileimport"] = func2938;
  lineNumber = 941
var func3191 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 933
  lineNumber = 1
  lineNumber = 933
  var call3192 = callmethod(var_o,"value", [0]);
  lineNumber = 934
  var call3193 = callmethod(this,"compilenode", [1], call3192);
  var var_reg = call3193;
  lineNumber = 938
  lineNumber = 934
  if (Grace_isTrue(var_inBlock)) {
  lineNumber = 935
  var string3195 = new GraceString("  call void @block_return(%object %realself, %object ");
  var opresult3197 = callmethod(string3195, "++", [1], var_reg);
  var string3198 = new GraceString(")");
  var opresult3200 = callmethod(opresult3197, "++", [1], string3198);
  lineNumber = 936
  var call3201 = callmethod(this,"out", [1], opresult3200);
  var if3194 = call3201;
  } else {
  lineNumber = 937
  var string3202 = new GraceString("  ret %object ");
  var opresult3204 = callmethod(string3202, "++", [1], var_reg);
  lineNumber = 938
  var call3205 = callmethod(this,"out", [1], opresult3204);
  var string3206 = new GraceString("postret");
  var opresult3208 = callmethod(string3206, "++", [1], var_auto__95__count);
  lineNumber = 939
  var call3209 = callmethod(this,"beginblock", [1], opresult3208);
  var if3194 = call3209;
}
  lineNumber = 941
  lineNumber = 1
  lineNumber = 940
  var string3210 = new GraceString("%none");
  var call3211 = callmethod(var_o,"register:=", [1], string3210);
  return call3211
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilereturn"] = func3191;
  lineNumber = 957
var func3212 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 944
  lineNumber = 1
  lineNumber = 943
  var call3213 = callmethod(var_o,"value", [0]);
  var var_cnum = call3213;
  lineNumber = 945
  lineNumber = 944
  var bool3214 = new GraceBoolean(false)
  var var_havedot = bool3214;
  lineNumber = 948
  lineNumber = 945
  lineNumber = 948
  var block3215 = Grace_allocObject();
  block3215.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3215.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3215.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3215.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3215.receiver = this;
  block3215.className = 'block<genllvm30:948>';
  block3215.real = function(
var_c
) {
  lineNumber = 949
  lineNumber = 946
  var string3217 = new GraceString(".");
  var opresult3219 = callmethod(var_c, "==", [1], string3217);
  if (Grace_isTrue(opresult3219)) {
  lineNumber = 948
  lineNumber = 947
  var bool3220 = new GraceBoolean(true)
  var_havedot = bool3220;
  var if3216 = bool3220;
}
  return if3216;
};
  var call3221 = callmethod(Grace_prelude,"for()do", [1, 1], var_cnum, block3215);
  lineNumber = 952
  lineNumber = 953
  lineNumber = 1
  lineNumber = 950
  var call3223 = callmethod(var_havedot,"not", [0]);
  if (Grace_isTrue(call3223)) {
  lineNumber = 952
  lineNumber = 951
  var string3224 = new GraceString(".0");
  var opresult3226 = callmethod(var_cnum, "++", [1], string3224);
  var_cnum = opresult3226;
  var if3222 = opresult3226;
}
  lineNumber = 954
  lineNumber = 953
  var string3227 = new GraceString("  %num");
  var opresult3229 = callmethod(string3227, "++", [1], var_auto__95__count);
  var string3230 = new GraceString(" = call %object @alloc_Float64(double ");
  var opresult3232 = callmethod(opresult3229, "++", [1], string3230);
  lineNumber = 954
  var opresult3234 = callmethod(opresult3232, "++", [1], var_cnum);
  var string3235 = new GraceString(")");
  var opresult3237 = callmethod(opresult3234, "++", [1], string3235);
  lineNumber = 955
  var call3238 = callmethod(this,"out", [1], opresult3237);
  lineNumber = 956
  lineNumber = 1
  lineNumber = 956
  lineNumber = 955
  var string3239 = new GraceString("%num");
  var opresult3241 = callmethod(string3239, "++", [1], var_auto__95__count);
  var call3242 = callmethod(var_o,"register:=", [1], opresult3241);
  lineNumber = 957
  lineNumber = 956
  var opresult3244 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3244;
  return opresult3244
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilenum"] = func3212;
  lineNumber = 1113
var func3245 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 962
  lineNumber = 964
  lineNumber = 959
  lineNumber = 964
  lineNumber = 1
  lineNumber = 959
  var call3247 = callmethod(var_o,"line", [0]);
  var opresult3249 = callmethod(var_linenum, "/=", [1], call3247);
  if (Grace_isTrue(opresult3249)) {
  lineNumber = 961
  lineNumber = 1
  lineNumber = 960
  var call3250 = callmethod(var_o,"line", [0]);
  var_linenum = call3250;
  lineNumber = 961
  var string3251 = new GraceString("; Begin line ");
  var opresult3253 = callmethod(string3251, "++", [1], var_linenum);
  lineNumber = 962
  var call3254 = callmethod(this,"out", [1], opresult3253);
  var string3255 = new GraceString("  call void @setline(i32 ");
  var opresult3257 = callmethod(string3255, "++", [1], var_linenum);
  var string3258 = new GraceString(")");
  var opresult3260 = callmethod(opresult3257, "++", [1], string3258);
  lineNumber = 963
  var call3261 = callmethod(this,"out", [1], opresult3260);
  var if3246 = call3261;
}
  lineNumber = 965
  lineNumber = 967
  lineNumber = 1
  lineNumber = 964
  var call3263 = callmethod(var_o,"kind", [0]);
  var string3264 = new GraceString("num");
  var opresult3266 = callmethod(call3263, "==", [1], string3264);
  if (Grace_isTrue(opresult3266)) {
  lineNumber = 965
  lineNumber = 966
  var call3267 = callmethod(this,"compilenum", [1], var_o);
  var if3262 = call3267;
}
  lineNumber = 968
  lineNumber = 967
  var string3268 = new GraceString("");
  var var_l = string3268;
  lineNumber = 1004
  lineNumber = 1005
  lineNumber = 1
  lineNumber = 968
  var call3270 = callmethod(var_o,"kind", [0]);
  var string3271 = new GraceString("string");
  var opresult3273 = callmethod(call3270, "==", [1], string3271);
  if (Grace_isTrue(opresult3273)) {
  lineNumber = 969
  lineNumber = 1
  lineNumber = 969
  var call3274 = callmethod(var_o,"value", [0]);
  var call3275 = Grace_length(call3274);
  var_l = call3275;
  lineNumber = 971
  lineNumber = 970
  var opresult3277 = callmethod(var_l, "+", [1], new GraceNum(1));
  var_l = opresult3277;
  lineNumber = 971
  lineNumber = 1
  lineNumber = 971
  lineNumber = 1
  lineNumber = 971
  lineNumber = 1
  lineNumber = 971
  var call3278 = callmethod(var_o,"value", [0]);
  var call3279 = callmethod(call3278,"_escape", [0]);
  var call3280 = callmethod(var_o,"value:=", [1], call3279);
  lineNumber = 973
  lineNumber = 972
  var string3281 = new GraceString("  %tmp");
  var opresult3283 = callmethod(string3281, "++", [1], var_auto__95__count);
  var string3284 = new GraceString(" = load %object* @.strlit");
  var opresult3286 = callmethod(opresult3283, "++", [1], string3284);
  lineNumber = 973
  var opresult3288 = callmethod(opresult3286, "++", [1], var_auto__95__count);
  lineNumber = 974
  var call3289 = callmethod(this,"out", [1], opresult3288);
  lineNumber = 975
  lineNumber = 974
  var string3290 = new GraceString("  %cmp");
  var opresult3292 = callmethod(string3290, "++", [1], var_auto__95__count);
  var string3293 = new GraceString(" = icmp ne %object %tmp");
  var opresult3295 = callmethod(opresult3292, "++", [1], string3293);
  lineNumber = 975
  var opresult3297 = callmethod(opresult3295, "++", [1], var_auto__95__count);
  var string3298 = new GraceString(", null");
  var opresult3300 = callmethod(opresult3297, "++", [1], string3298);
  lineNumber = 976
  var call3301 = callmethod(this,"out", [1], opresult3300);
  lineNumber = 978
  lineNumber = 976
  var string3302 = new GraceString("  br i1 %cmp");
  var opresult3304 = callmethod(string3302, "++", [1], var_auto__95__count);
  var string3305 = new GraceString(", label %strlit");
  var opresult3307 = callmethod(opresult3304, "++", [1], string3305);
  lineNumber = 977
  var opresult3309 = callmethod(opresult3307, "++", [1], var_auto__95__count);
  var string3310 = new GraceString(".already, label %strlit");
  var opresult3312 = callmethod(opresult3309, "++", [1], string3310);
  lineNumber = 978
  var opresult3314 = callmethod(opresult3312, "++", [1], var_auto__95__count);
  var string3315 = new GraceString(".define");
  var opresult3317 = callmethod(opresult3314, "++", [1], string3315);
  lineNumber = 979
  var call3318 = callmethod(this,"out", [1], opresult3317);
  var string3319 = new GraceString("strlit");
  var opresult3321 = callmethod(string3319, "++", [1], var_auto__95__count);
  var string3322 = new GraceString(".already");
  var opresult3324 = callmethod(opresult3321, "++", [1], string3322);
  lineNumber = 980
  var call3325 = callmethod(this,"beginblock", [1], opresult3324);
  lineNumber = 981
  lineNumber = 980
  var string3326 = new GraceString("  %alreadystring");
  var opresult3328 = callmethod(string3326, "++", [1], var_auto__95__count);
  var string3329 = new GraceString(" = load %object* @.strlit");
  var opresult3331 = callmethod(opresult3328, "++", [1], string3329);
  lineNumber = 981
  var opresult3333 = callmethod(opresult3331, "++", [1], var_auto__95__count);
  lineNumber = 982
  var call3334 = callmethod(this,"out", [1], opresult3333);
  var string3335 = new GraceString("  br label %strlit");
  var opresult3337 = callmethod(string3335, "++", [1], var_auto__95__count);
  var string3338 = new GraceString(".end");
  var opresult3340 = callmethod(opresult3337, "++", [1], string3338);
  lineNumber = 983
  var call3341 = callmethod(this,"out", [1], opresult3340);
  var string3342 = new GraceString("strlit");
  var opresult3344 = callmethod(string3342, "++", [1], var_auto__95__count);
  var string3345 = new GraceString(".define");
  var opresult3347 = callmethod(opresult3344, "++", [1], string3345);
  lineNumber = 984
  var call3348 = callmethod(this,"beginblock", [1], opresult3347);
  var string3349 = new GraceString("  %str");
  var opresult3351 = callmethod(string3349, "++", [1], var_auto__95__count);
  var string3352 = new GraceString(" = getelementptr [");
  var opresult3354 = callmethod(opresult3351, "++", [1], string3352);
  var opresult3356 = callmethod(opresult3354, "++", [1], var_l);
  var string3357 = new GraceString(" x i8]* @.str");
  var opresult3359 = callmethod(opresult3356, "++", [1], string3357);
  lineNumber = 1
  lineNumber = 984
  var call3360 = callmethod(var_constants,"size", [0]);
  var opresult3362 = callmethod(opresult3359, "++", [1], call3360);
  var string3363 = new GraceString(", i32 0, i32 0");
  var opresult3365 = callmethod(opresult3362, "++", [1], string3363);
  lineNumber = 985
  var call3366 = callmethod(this,"out", [1], opresult3365);
  lineNumber = 987
  lineNumber = 985
  var string3367 = new GraceString("  %defstring");
  var opresult3369 = callmethod(string3367, "++", [1], var_auto__95__count);
  var string3370 = new GraceString(" = call %object ");
  var opresult3372 = callmethod(opresult3369, "++", [1], string3370);
  lineNumber = 986
  var string3373 = new GraceString("@alloc_String(i8* ");
  var opresult3375 = callmethod(opresult3372, "++", [1], string3373);
  lineNumber = 987
  var string3376 = new GraceString("%str");
  var opresult3378 = callmethod(opresult3375, "++", [1], string3376);
  var opresult3380 = callmethod(opresult3378, "++", [1], var_auto__95__count);
  var string3381 = new GraceString(")");
  var opresult3383 = callmethod(opresult3380, "++", [1], string3381);
  lineNumber = 988
  var call3384 = callmethod(this,"out", [1], opresult3383);
  lineNumber = 989
  lineNumber = 988
  var string3385 = new GraceString("  store %object %defstring");
  var opresult3387 = callmethod(string3385, "++", [1], var_auto__95__count);
  var string3388 = new GraceString(", %object* ");
  var opresult3390 = callmethod(opresult3387, "++", [1], string3388);
  lineNumber = 989
  var string3391 = new GraceString("@.strlit");
  var opresult3393 = callmethod(opresult3390, "++", [1], string3391);
  var opresult3395 = callmethod(opresult3393, "++", [1], var_auto__95__count);
  lineNumber = 990
  var call3396 = callmethod(this,"out", [1], opresult3395);
  var string3397 = new GraceString("br label %strlit");
  var opresult3399 = callmethod(string3397, "++", [1], var_auto__95__count);
  var string3400 = new GraceString(".end");
  var opresult3402 = callmethod(opresult3399, "++", [1], string3400);
  lineNumber = 991
  var call3403 = callmethod(this,"out", [1], opresult3402);
  var string3404 = new GraceString("strlit");
  var opresult3406 = callmethod(string3404, "++", [1], var_auto__95__count);
  var string3407 = new GraceString(".end");
  var opresult3409 = callmethod(opresult3406, "++", [1], string3407);
  lineNumber = 992
  var call3410 = callmethod(this,"beginblock", [1], opresult3409);
  lineNumber = 995
  lineNumber = 992
  var string3411 = new GraceString(" %string");
  var opresult3413 = callmethod(string3411, "++", [1], var_auto__95__count);
  var string3414 = new GraceString(" = phi %object [%alreadystring");
  var opresult3416 = callmethod(opresult3413, "++", [1], string3414);
  lineNumber = 993
  var opresult3418 = callmethod(opresult3416, "++", [1], var_auto__95__count);
  var string3419 = new GraceString(", %strlit");
  var opresult3421 = callmethod(opresult3418, "++", [1], string3419);
  var opresult3423 = callmethod(opresult3421, "++", [1], var_auto__95__count);
  var string3424 = new GraceString(".already], ");
  var opresult3426 = callmethod(opresult3423, "++", [1], string3424);
  lineNumber = 994
  var string3427 = new GraceString("[%defstring");
  var opresult3429 = callmethod(opresult3426, "++", [1], string3427);
  var opresult3431 = callmethod(opresult3429, "++", [1], var_auto__95__count);
  var string3432 = new GraceString(", %strlit");
  var opresult3434 = callmethod(opresult3431, "++", [1], string3432);
  var opresult3436 = callmethod(opresult3434, "++", [1], var_auto__95__count);
  lineNumber = 995
  var string3437 = new GraceString(".define]");
  var opresult3439 = callmethod(opresult3436, "++", [1], string3437);
  lineNumber = 996
  var call3440 = callmethod(this,"out", [1], opresult3439);
  lineNumber = 998
  lineNumber = 996
  var string3441 = new GraceString("@.str");
  lineNumber = 998
  lineNumber = 1
  lineNumber = 996
  var call3442 = callmethod(var_constants,"size", [0]);
  var opresult3444 = callmethod(string3441, "++", [1], call3442);
  var string3445 = new GraceString(" = private unnamed_addr ");
  var opresult3447 = callmethod(opresult3444, "++", [1], string3445);
  lineNumber = 997
  var string3448 = new GraceString("constant [");
  var opresult3450 = callmethod(opresult3447, "++", [1], string3448);
  var opresult3452 = callmethod(opresult3450, "++", [1], var_l);
  var string3453 = new GraceString(" x i8] c\"");
  var opresult3455 = callmethod(opresult3452, "++", [1], string3453);
  lineNumber = 998
  lineNumber = 1
  lineNumber = 997
  var call3456 = callmethod(var_o,"value", [0]);
  var opresult3458 = callmethod(opresult3455, "++", [1], call3456);
  var string3459 = new GraceString("\\00\"");
  var opresult3461 = callmethod(opresult3458, "++", [1], string3459);
  var var_con = opresult3461;
  lineNumber = 998
  var call3462 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 1001
  lineNumber = 999
  var string3463 = new GraceString("@.strlit");
  var opresult3465 = callmethod(string3463, "++", [1], var_auto__95__count);
  lineNumber = 1000
  var string3466 = new GraceString(" = private global %object null");
  var opresult3468 = callmethod(opresult3465, "++", [1], string3466);
  var_con = opresult3468;
  lineNumber = 1001
  var call3469 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 1003
  lineNumber = 1
  lineNumber = 1003
  lineNumber = 1002
  var string3470 = new GraceString("%string");
  var opresult3472 = callmethod(string3470, "++", [1], var_auto__95__count);
  var call3473 = callmethod(var_o,"register:=", [1], opresult3472);
  lineNumber = 1004
  lineNumber = 1003
  var opresult3475 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3475;
  var if3269 = opresult3475;
}
  lineNumber = 1006
  lineNumber = 1008
  lineNumber = 1
  lineNumber = 1005
  var call3477 = callmethod(var_o,"kind", [0]);
  var string3478 = new GraceString("index");
  var opresult3480 = callmethod(call3477, "==", [1], string3478);
  if (Grace_isTrue(opresult3480)) {
  lineNumber = 1006
  lineNumber = 1007
  var call3481 = callmethod(this,"compileindex", [1], var_o);
  var if3476 = call3481;
}
  lineNumber = 1009
  lineNumber = 1011
  lineNumber = 1
  lineNumber = 1008
  var call3483 = callmethod(var_o,"kind", [0]);
  var string3484 = new GraceString("octets");
  var opresult3486 = callmethod(call3483, "==", [1], string3484);
  if (Grace_isTrue(opresult3486)) {
  lineNumber = 1009
  lineNumber = 1010
  var call3487 = callmethod(this,"compileoctets", [1], var_o);
  var if3482 = call3487;
}
  lineNumber = 1012
  lineNumber = 1014
  lineNumber = 1
  lineNumber = 1011
  var call3489 = callmethod(var_o,"kind", [0]);
  var string3490 = new GraceString("import");
  var opresult3492 = callmethod(call3489, "==", [1], string3490);
  if (Grace_isTrue(opresult3492)) {
  lineNumber = 1012
  lineNumber = 1013
  var call3493 = callmethod(this,"compileimport", [1], var_o);
  var if3488 = call3493;
}
  lineNumber = 1015
  lineNumber = 1017
  lineNumber = 1
  lineNumber = 1014
  var call3495 = callmethod(var_o,"kind", [0]);
  var string3496 = new GraceString("return");
  var opresult3498 = callmethod(call3495, "==", [1], string3496);
  if (Grace_isTrue(opresult3498)) {
  lineNumber = 1015
  lineNumber = 1016
  var call3499 = callmethod(this,"compilereturn", [1], var_o);
  var if3494 = call3499;
}
  lineNumber = 1018
  lineNumber = 1020
  lineNumber = 1
  lineNumber = 1017
  var call3501 = callmethod(var_o,"kind", [0]);
  var string3502 = new GraceString("generic");
  var opresult3504 = callmethod(call3501, "==", [1], string3502);
  if (Grace_isTrue(opresult3504)) {
  lineNumber = 1018
  lineNumber = 1
  lineNumber = 1018
  lineNumber = 1
  lineNumber = 1018
  var call3505 = callmethod(var_o,"value", [0]);
  lineNumber = 1019
  var call3506 = callmethod(this,"compilenode", [1], call3505);
  lineNumber = 1018
  var call3507 = callmethod(var_o,"register:=", [1], call3506);
  var if3500 = call3507;
}
  lineNumber = 1031
  lineNumber = 1033
  lineNumber = 1
  lineNumber = 1020
  var call3509 = callmethod(var_o,"kind", [0]);
  var string3510 = new GraceString("identifier");
  var opresult3512 = callmethod(call3509, "==", [1], string3510);
  lineNumber = 1033
  lineNumber = 1
  lineNumber = 1021
  var call3513 = callmethod(var_o,"value", [0]);
  var string3514 = new GraceString("true");
  var opresult3516 = callmethod(call3513, "==", [1], string3514);
  lineNumber = 1033
  lineNumber = 1
  lineNumber = 1021
  var call3517 = callmethod(var_o,"value", [0]);
  var string3518 = new GraceString("false");
  var opresult3520 = callmethod(call3517, "==", [1], string3518);
  var opresult3522 = callmethod(opresult3516, "|", [1], opresult3520);
  var opresult3524 = callmethod(opresult3512, "&", [1], opresult3522);
  if (Grace_isTrue(opresult3524)) {
  lineNumber = 1023
  lineNumber = 1022
  var var_val = new GraceNum(0);
  lineNumber = 1025
  lineNumber = 1026
  lineNumber = 1
  lineNumber = 1023
  var call3526 = callmethod(var_o,"value", [0]);
  var string3527 = new GraceString("true");
  var opresult3529 = callmethod(call3526, "==", [1], string3527);
  if (Grace_isTrue(opresult3529)) {
  lineNumber = 1025
  lineNumber = 1024
  var_val = new GraceNum(1);
  var if3525 = new GraceNum(1);
}
  lineNumber = 1027
  lineNumber = 1026
  var string3530 = new GraceString("  %bool");
  var opresult3532 = callmethod(string3530, "++", [1], var_auto__95__count);
  var string3533 = new GraceString(" = call %object ");
  var opresult3535 = callmethod(opresult3532, "++", [1], string3533);
  lineNumber = 1027
  var string3536 = new GraceString("@alloc_Boolean(i32 ");
  var opresult3538 = callmethod(opresult3535, "++", [1], string3536);
  var opresult3540 = callmethod(opresult3538, "++", [1], var_val);
  var string3541 = new GraceString(")");
  var opresult3543 = callmethod(opresult3540, "++", [1], string3541);
  lineNumber = 1028
  var call3544 = callmethod(this,"out", [1], opresult3543);
  lineNumber = 1029
  lineNumber = 1
  lineNumber = 1029
  lineNumber = 1028
  var string3545 = new GraceString("%bool");
  var opresult3547 = callmethod(string3545, "++", [1], var_auto__95__count);
  var call3548 = callmethod(var_o,"register:=", [1], opresult3547);
  lineNumber = 1030
  lineNumber = 1029
  var opresult3550 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3550;
  var if3508 = opresult3550;
  } else {
  lineNumber = 1031
  lineNumber = 1033
  lineNumber = 1
  lineNumber = 1030
  var call3552 = callmethod(var_o,"kind", [0]);
  var string3553 = new GraceString("identifier");
  var opresult3555 = callmethod(call3552, "==", [1], string3553);
  if (Grace_isTrue(opresult3555)) {
  lineNumber = 1031
  lineNumber = 1032
  var call3556 = callmethod(this,"compileidentifier", [1], var_o);
  var if3551 = call3556;
}
  var if3508 = if3551;
}
  lineNumber = 1034
  lineNumber = 1036
  lineNumber = 1
  lineNumber = 1033
  var call3558 = callmethod(var_o,"kind", [0]);
  var string3559 = new GraceString("defdec");
  var opresult3561 = callmethod(call3558, "==", [1], string3559);
  if (Grace_isTrue(opresult3561)) {
  lineNumber = 1034
  lineNumber = 1035
  var call3562 = callmethod(this,"compiledefdec", [1], var_o);
  var if3557 = call3562;
}
  lineNumber = 1037
  lineNumber = 1039
  lineNumber = 1
  lineNumber = 1036
  var call3564 = callmethod(var_o,"kind", [0]);
  var string3565 = new GraceString("vardec");
  var opresult3567 = callmethod(call3564, "==", [1], string3565);
  if (Grace_isTrue(opresult3567)) {
  lineNumber = 1037
  lineNumber = 1038
  var call3568 = callmethod(this,"compilevardec", [1], var_o);
  var if3563 = call3568;
}
  lineNumber = 1040
  lineNumber = 1042
  lineNumber = 1
  lineNumber = 1039
  var call3570 = callmethod(var_o,"kind", [0]);
  var string3571 = new GraceString("block");
  var opresult3573 = callmethod(call3570, "==", [1], string3571);
  if (Grace_isTrue(opresult3573)) {
  lineNumber = 1040
  lineNumber = 1041
  var call3574 = callmethod(this,"compileblock", [1], var_o);
  var if3569 = call3574;
}
  lineNumber = 1045
  lineNumber = 1046
  lineNumber = 1
  lineNumber = 1042
  var call3576 = callmethod(var_o,"kind", [0]);
  var string3577 = new GraceString("method");
  var opresult3579 = callmethod(call3576, "==", [1], string3577);
  if (Grace_isTrue(opresult3579)) {
  lineNumber = 1043
  var string3580 = new GraceString("%self");
  lineNumber = 1044
  var call3581 = callmethod(this,"compilemethod", [3], var_o, string3580, var_topLevelMethodPos);
  lineNumber = 1045
  lineNumber = 1044
  var opresult3583 = callmethod(var_topLevelMethodPos, "+", [1], new GraceNum(1));
  var_topLevelMethodPos = opresult3583;
  var if3575 = opresult3583;
}
  lineNumber = 1047
  lineNumber = 1049
  lineNumber = 1
  lineNumber = 1046
  var call3585 = callmethod(var_o,"kind", [0]);
  var string3586 = new GraceString("array");
  var opresult3588 = callmethod(call3585, "==", [1], string3586);
  if (Grace_isTrue(opresult3588)) {
  lineNumber = 1047
  lineNumber = 1048
  var call3589 = callmethod(this,"compilearray", [1], var_o);
  var if3584 = call3589;
}
  lineNumber = 1050
  lineNumber = 1052
  lineNumber = 1
  lineNumber = 1049
  var call3591 = callmethod(var_o,"kind", [0]);
  var string3592 = new GraceString("bind");
  var opresult3594 = callmethod(call3591, "==", [1], string3592);
  if (Grace_isTrue(opresult3594)) {
  lineNumber = 1050
  lineNumber = 1051
  var call3595 = callmethod(this,"compilebind", [1], var_o);
  var if3590 = call3595;
}
  lineNumber = 1053
  lineNumber = 1055
  lineNumber = 1
  lineNumber = 1052
  var call3597 = callmethod(var_o,"kind", [0]);
  var string3598 = new GraceString("while");
  var opresult3600 = callmethod(call3597, "==", [1], string3598);
  if (Grace_isTrue(opresult3600)) {
  lineNumber = 1053
  lineNumber = 1054
  var call3601 = callmethod(this,"compilewhile", [1], var_o);
  var if3596 = call3601;
}
  lineNumber = 1056
  lineNumber = 1058
  lineNumber = 1
  lineNumber = 1055
  var call3603 = callmethod(var_o,"kind", [0]);
  var string3604 = new GraceString("if");
  var opresult3606 = callmethod(call3603, "==", [1], string3604);
  if (Grace_isTrue(opresult3606)) {
  lineNumber = 1056
  lineNumber = 1057
  var call3607 = callmethod(this,"compileif", [1], var_o);
  var if3602 = call3607;
}
  lineNumber = 1059
  lineNumber = 1061
  lineNumber = 1
  lineNumber = 1058
  var call3609 = callmethod(var_o,"kind", [0]);
  var string3610 = new GraceString("class");
  var opresult3612 = callmethod(call3609, "==", [1], string3610);
  if (Grace_isTrue(opresult3612)) {
  lineNumber = 1059
  lineNumber = 1060
  var call3613 = callmethod(this,"compileclass", [1], var_o);
  var if3608 = call3613;
}
  lineNumber = 1062
  lineNumber = 1064
  lineNumber = 1
  lineNumber = 1061
  var call3615 = callmethod(var_o,"kind", [0]);
  var string3616 = new GraceString("object");
  var opresult3618 = callmethod(call3615, "==", [1], string3616);
  if (Grace_isTrue(opresult3618)) {
  lineNumber = 1062
  var string3619 = new GraceString("%self");
  lineNumber = 1063
  var call3620 = callmethod(this,"compileobject", [2], var_o, string3619);
  var if3614 = call3620;
}
  lineNumber = 1065
  lineNumber = 1067
  lineNumber = 1
  lineNumber = 1064
  var call3622 = callmethod(var_o,"kind", [0]);
  var string3623 = new GraceString("member");
  var opresult3625 = callmethod(call3622, "==", [1], string3623);
  if (Grace_isTrue(opresult3625)) {
  lineNumber = 1065
  lineNumber = 1066
  var call3626 = callmethod(this,"compilemember", [1], var_o);
  var if3621 = call3626;
}
  lineNumber = 1068
  lineNumber = 1070
  lineNumber = 1
  lineNumber = 1067
  var call3628 = callmethod(var_o,"kind", [0]);
  var string3629 = new GraceString("for");
  var opresult3631 = callmethod(call3628, "==", [1], string3629);
  if (Grace_isTrue(opresult3631)) {
  lineNumber = 1068
  lineNumber = 1069
  var call3632 = callmethod(this,"compilefor", [1], var_o);
  var if3627 = call3632;
}
  lineNumber = 1106
  lineNumber = 1109
  lineNumber = 1
  lineNumber = 1070
  var call3634 = callmethod(var_o,"kind", [0]);
  var string3635 = new GraceString("call");
  var opresult3637 = callmethod(call3634, "==", [1], string3635);
  if (Grace_isTrue(opresult3637)) {
  lineNumber = 1106
  lineNumber = 1108
  lineNumber = 1
  lineNumber = 1108
  lineNumber = 1
  lineNumber = 1071
  var call3639 = callmethod(var_o,"value", [0]);
  var call3640 = callmethod(call3639,"value", [0]);
  var string3641 = new GraceString("print");
  var opresult3643 = callmethod(call3640, "==", [1], string3641);
  if (Grace_isTrue(opresult3643)) {
  lineNumber = 1073
  var array3644 = new GraceList([
]);

  var var_args = array3644;
  lineNumber = 1075
  lineNumber = 1073
  lineNumber = 1
  lineNumber = 1073
  var call3645 = callmethod(var_o,"with", [0]);
  lineNumber = 1075
  var block3646 = Grace_allocObject();
  block3646.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3646.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3646.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3646.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3646.receiver = this;
  block3646.className = 'block<genllvm30:1075>';
  block3646.real = function(
var_prm
) {
  lineNumber = 1074
  lineNumber = 1075
  var call3647 = callmethod(this,"compilenode", [1], var_prm);
  var var_r = call3647;
  var call3648 = callmethod(var_args,"push", [1], var_r);
  return call3648;
};
  var call3649 = callmethod(Grace_prelude,"for()do", [1, 1], call3645, block3646);
  lineNumber = 1078
  lineNumber = 1077
  var var_parami = new GraceNum(0);
  lineNumber = 1081
  lineNumber = 1078
  lineNumber = 1081
  var block3650 = Grace_allocObject();
  block3650.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3650.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3650.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3650.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3650.receiver = this;
  block3650.className = 'block<genllvm30:1081>';
  block3650.real = function(
var_arg
) {
  lineNumber = 1079
  var string3651 = new GraceString("  store %object ");
  var opresult3653 = callmethod(string3651, "++", [1], var_arg);
  var string3654 = new GraceString(", %object* %params_");
  var opresult3656 = callmethod(opresult3653, "++", [1], string3654);
  var opresult3658 = callmethod(opresult3656, "++", [1], var_parami);
  var string3659 = new GraceString("");
  var opresult3661 = callmethod(opresult3658, "++", [1], string3659);
  lineNumber = 1080
  var call3662 = callmethod(this,"out", [1], opresult3661);
  lineNumber = 1081
  lineNumber = 1080
  var opresult3664 = callmethod(var_parami, "+", [1], new GraceNum(1));
  var_parami = opresult3664;
  return opresult3664;
};
  var call3665 = callmethod(Grace_prelude,"for()do", [1, 1], var_args, block3650);
  lineNumber = 1083
  lineNumber = 1082
  var string3666 = new GraceString("  %call");
  var opresult3668 = callmethod(string3666, "++", [1], var_auto__95__count);
  var string3669 = new GraceString(" = call %object @gracelib_print(%object null, i32 ");
  var opresult3671 = callmethod(opresult3668, "++", [1], string3669);
  lineNumber = 1083
  lineNumber = 1
  lineNumber = 1083
  var call3672 = callmethod(var_args,"size", [0]);
  var opresult3674 = callmethod(opresult3671, "++", [1], call3672);
  var string3675 = new GraceString(", %object* %params)");
  var opresult3677 = callmethod(opresult3674, "++", [1], string3675);
  lineNumber = 1084
  var call3678 = callmethod(this,"out", [1], opresult3677);
  lineNumber = 1085
  lineNumber = 1
  lineNumber = 1085
  lineNumber = 1084
  var string3679 = new GraceString("%call");
  var opresult3681 = callmethod(string3679, "++", [1], var_auto__95__count);
  var call3682 = callmethod(var_o,"register:=", [1], opresult3681);
  lineNumber = 1086
  lineNumber = 1085
  var opresult3684 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3684;
  var if3638 = opresult3684;
  } else {
  lineNumber = 1106
  lineNumber = 1099
  lineNumber = 1
  lineNumber = 1099
  lineNumber = 1
  lineNumber = 1086
  var call3686 = callmethod(var_o,"value", [0]);
  var call3687 = callmethod(call3686,"kind", [0]);
  var string3688 = new GraceString("identifier");
  var opresult3690 = callmethod(call3687, "==", [1], string3688);
  lineNumber = 1099
  lineNumber = 1
  lineNumber = 1099
  lineNumber = 1
  lineNumber = 1087
  var call3691 = callmethod(var_o,"value", [0]);
  var call3692 = callmethod(call3691,"value", [0]);
  var string3693 = new GraceString("length");
  var opresult3695 = callmethod(call3692, "==", [1], string3693);
  var opresult3697 = callmethod(opresult3690, "&", [1], opresult3695);
  if (Grace_isTrue(opresult3697)) {
  lineNumber = 1093
  lineNumber = 1095
  lineNumber = 1
  lineNumber = 1095
  lineNumber = 1
  lineNumber = 1088
  var call3699 = callmethod(var_o,"with", [0]);
  var call3700 = callmethod(call3699,"size", [0]);
  var opresult3702 = callmethod(call3700, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult3702)) {
  lineNumber = 1089
  var string3703 = new GraceString("; PP FOLLOWS");
  lineNumber = 1090
  var call3704 = callmethod(this,"out", [1], string3703);
  var call3705 = callmethod(var_o,"pretty", [1], new GraceNum(0));
  lineNumber = 1091
  var call3706 = callmethod(this,"out", [1], call3705);
  lineNumber = 1092
  lineNumber = 1091
  var string3707 = new GraceString("null");
  var_tmp = string3707;
  var if3698 = string3707;
  } else {
  lineNumber = 1093
  lineNumber = 1
  lineNumber = 1093
  lineNumber = 1
  lineNumber = 1093
  var call3708 = callmethod(var_o,"with", [0]);
  var call3709 = callmethod(call3708,"first", [0]);
  lineNumber = 1094
  var call3710 = callmethod(this,"compilenode", [1], call3709);
  var_tmp = call3710;
  var if3698 = call3710;
}
  lineNumber = 1096
  lineNumber = 1095
  var string3711 = new GraceString("  %call");
  var opresult3713 = callmethod(string3711, "++", [1], var_auto__95__count);
  var string3714 = new GraceString(" = call %object ");
  var opresult3716 = callmethod(opresult3713, "++", [1], string3714);
  lineNumber = 1096
  var string3717 = new GraceString("@gracelib_length(%object ");
  var opresult3719 = callmethod(opresult3716, "++", [1], string3717);
  var opresult3721 = callmethod(opresult3719, "++", [1], var_tmp);
  var string3722 = new GraceString(")");
  var opresult3724 = callmethod(opresult3721, "++", [1], string3722);
  lineNumber = 1097
  var call3725 = callmethod(this,"out", [1], opresult3724);
  lineNumber = 1098
  lineNumber = 1
  lineNumber = 1098
  lineNumber = 1097
  var string3726 = new GraceString("%call");
  var opresult3728 = callmethod(string3726, "++", [1], var_auto__95__count);
  var call3729 = callmethod(var_o,"register:=", [1], opresult3728);
  lineNumber = 1099
  lineNumber = 1098
  var opresult3731 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult3731;
  var if3685 = opresult3731;
  } else {
  lineNumber = 1106
  lineNumber = 1105
  lineNumber = 1
  lineNumber = 1105
  lineNumber = 1
  lineNumber = 1099
  var call3733 = callmethod(var_o,"value", [0]);
  var call3734 = callmethod(call3733,"kind", [0]);
  var string3735 = new GraceString("identifier");
  var opresult3737 = callmethod(call3734, "==", [1], string3735);
  lineNumber = 1105
  lineNumber = 1
  lineNumber = 1105
  lineNumber = 1
  lineNumber = 1100
  var call3738 = callmethod(var_o,"value", [0]);
  var call3739 = callmethod(call3738,"value", [0]);
  var string3740 = new GraceString("escapestring");
  var opresult3742 = callmethod(call3739, "==", [1], string3740);
  var opresult3744 = callmethod(opresult3737, "&", [1], opresult3742);
  if (Grace_isTrue(opresult3744)) {
  lineNumber = 1102
  lineNumber = 1
  lineNumber = 1102
  lineNumber = 1
  lineNumber = 1101
  var call3745 = callmethod(var_o,"with", [0]);
  var call3746 = callmethod(call3745,"first", [0]);
  var_tmp = call3746;
  lineNumber = 1102
  var string3747 = new GraceString("_escape");
  var call3748 = callmethod(var_ast,"astmember", [2], string3747, var_tmp);
  var_tmp = call3748;
  lineNumber = 1103
  var array3749 = new GraceList([
]);

  var call3750 = callmethod(var_ast,"astcall", [2], var_tmp, array3749);
  var_tmp = call3750;
  lineNumber = 1104
  lineNumber = 1
  lineNumber = 1104
  lineNumber = 1105
  var call3751 = callmethod(this,"compilenode", [1], var_tmp);
  lineNumber = 1104
  var call3752 = callmethod(var_o,"register:=", [1], call3751);
  var if3732 = call3752;
  } else {
  lineNumber = 1106
  lineNumber = 1107
  var call3753 = callmethod(this,"compilecall", [1], var_o);
  var if3732 = call3753;
}
  var if3685 = if3732;
}
  var if3638 = if3685;
}
  var if3633 = if3638;
}
  lineNumber = 1110
  lineNumber = 1112
  lineNumber = 1
  lineNumber = 1109
  var call3755 = callmethod(var_o,"kind", [0]);
  var string3756 = new GraceString("op");
  var opresult3758 = callmethod(call3755, "==", [1], string3756);
  if (Grace_isTrue(opresult3758)) {
  lineNumber = 1110
  lineNumber = 1111
  var call3759 = callmethod(this,"compileop", [1], var_o);
  var if3754 = call3759;
}
  lineNumber = 1112
  var string3760 = new GraceString("; compilenode returning ");
  lineNumber = 1
  lineNumber = 1112
  var call3761 = callmethod(var_o,"register", [0]);
  var opresult3763 = callmethod(string3760, "++", [1], call3761);
  lineNumber = 1113
  var call3764 = callmethod(this,"out", [1], opresult3763);
  lineNumber = 1
  lineNumber = 1113
  var call3765 = callmethod(var_o,"register", [0]);
  return call3765
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compilenode"] = func3245;
  lineNumber = 1434
var func3766 = function(argcv) {
  var curarg = 1;
  var var_vl = arguments[curarg];
  curarg++;
  var var_of = arguments[curarg];
  curarg++;
  var var_mn = arguments[curarg];
  curarg++;
  var var_rm = arguments[curarg];
  curarg++;
  var var_bt = arguments[curarg];
  curarg++;
  var var_glpath = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1117
  lineNumber = 1
  lineNumber = 1116
  var call3767 = callmethod(var_sys,"argv", [0]);
  var var_argv = call3767;
  lineNumber = 1118
  var var_cmd;
  lineNumber = 1119
  lineNumber = 1118
  var_values = var_vl;
  lineNumber = 1120
  lineNumber = 1119
  var_outfile = var_of;
  lineNumber = 1121
  lineNumber = 1120
  var_modname = var_mn;
  lineNumber = 1122
  lineNumber = 1121
  var_runmode = var_rm;
  lineNumber = 1123
  lineNumber = 1122
  var_buildtype = var_bt;
  lineNumber = 1124
  lineNumber = 1123
  var_gracelibPath = var_glpath;
  lineNumber = 1125
  var array3768 = new GraceList([
]);

  var var_linkfiles = array3768;
  lineNumber = 1126
  lineNumber = 1125
  var bool3769 = new GraceBoolean(false)
  var var_ext = bool3769;
  lineNumber = 1178
  lineNumber = 1183
  lineNumber = 1126
  var string3771 = new GraceString("make");
  var opresult3773 = callmethod(var_runmode, "==", [1], string3771);
  if (Grace_isTrue(opresult3773)) {
  lineNumber = 1127
  var string3774 = new GraceString("checking imports.");
  lineNumber = 1128
  var call3775 = callmethod(this,"log_verbose", [1], string3774);
  lineNumber = 1178
  lineNumber = 1128
  lineNumber = 1178
  var block3776 = Grace_allocObject();
  block3776.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3776.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3776.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3776.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3776.receiver = this;
  block3776.className = 'block<genllvm30:1178>';
  block3776.real = function(
var_v
) {
  lineNumber = 1181
  lineNumber = 1
  lineNumber = 1129
  var call3778 = callmethod(var_v,"kind", [0]);
  var string3779 = new GraceString("import");
  var opresult3781 = callmethod(call3778, "==", [1], string3779);
  if (Grace_isTrue(opresult3781)) {
  lineNumber = 1131
  lineNumber = 1
  lineNumber = 1131
  lineNumber = 1
  lineNumber = 1130
  var call3782 = callmethod(var_v,"value", [0]);
  var call3783 = callmethod(call3782,"value", [0]);
  var var_nm = call3783;
  lineNumber = 1132
  lineNumber = 1131
  var bool3784 = new GraceBoolean(false)
  var var_exists = bool3784;
  lineNumber = 1135
  lineNumber = 1133
  lineNumber = 1136
  lineNumber = 1132
  var string3786 = new GraceString("native");
  var opresult3788 = callmethod(var_buildtype, "==", [1], string3786);
  lineNumber = 1133
  var string3789 = new GraceString(".gso");
  var opresult3791 = callmethod(var_nm, "++", [1], string3789);
  var call3792 = callmethod(var_io,"exists", [1], opresult3791);
  var opresult3794 = callmethod(opresult3788, "&", [1], call3792);
  if (Grace_isTrue(opresult3794)) {
  lineNumber = 1135
  lineNumber = 1134
  var bool3795 = new GraceBoolean(true)
  var_exists = bool3795;
  var if3785 = bool3795;
}
  lineNumber = 1141
  lineNumber = 1145
  lineNumber = 1
  lineNumber = 1136
  var call3797 = callmethod(var_exists,"not", [0]);
  if (Grace_isTrue(call3797)) {
  lineNumber = 1141
  lineNumber = 1137
  var string3799 = new GraceString(".gco");
  var opresult3801 = callmethod(var_nm, "++", [1], string3799);
  var call3802 = callmethod(var_io,"exists", [1], opresult3801);
  if (Grace_isTrue(call3802)) {
  lineNumber = 1141
  lineNumber = 1138
  var string3804 = new GraceString(".gco");
  var opresult3806 = callmethod(var_nm, "++", [1], string3804);
  var string3807 = new GraceString(".grace");
  var opresult3809 = callmethod(var_nm, "++", [1], string3807);
  var call3810 = callmethod(var_io,"newer", [2], opresult3806, opresult3809);
  if (Grace_isTrue(call3810)) {
  lineNumber = 1140
  lineNumber = 1139
  var bool3811 = new GraceBoolean(true)
  var_exists = bool3811;
  lineNumber = 1140
  var string3812 = new GraceString(".gco");
  var opresult3814 = callmethod(var_nm, "++", [1], string3812);
  var call3815 = callmethod(var_linkfiles,"push", [1], opresult3814);
  lineNumber = 1141
  var call3816 = callmethod(var_staticmodules,"push", [1], var_nm);
  var if3803 = call3816;
}
  var if3798 = if3803;
}
  var if3796 = if3798;
}
  lineNumber = 1171
  lineNumber = 1173
  lineNumber = 1
  lineNumber = 1145
  var call3818 = callmethod(var_exists,"not", [0]);
  if (Grace_isTrue(call3818)) {
  lineNumber = 1148
  lineNumber = 1146
  var string3820 = new GraceString(".gc");
  var opresult3822 = callmethod(var_nm, "++", [1], string3820);
  var call3823 = callmethod(var_io,"exists", [1], opresult3822);
  if (Grace_isTrue(call3823)) {
  lineNumber = 1148
  lineNumber = 1147
  var string3824 = new GraceString(".gc");
  var_ext = string3824;
  var if3819 = string3824;
}
  lineNumber = 1151
  lineNumber = 1149
  var string3826 = new GraceString(".grace");
  var opresult3828 = callmethod(var_nm, "++", [1], string3826);
  var call3829 = callmethod(var_io,"exists", [1], opresult3828);
  if (Grace_isTrue(call3829)) {
  lineNumber = 1151
  lineNumber = 1150
  var string3830 = new GraceString(".grace");
  var_ext = string3830;
  var if3825 = string3830;
}
  lineNumber = 1171
  lineNumber = 1172
  lineNumber = 1152
  var bool3832 = new GraceBoolean(false)
  var opresult3834 = callmethod(var_ext, "/=", [1], bool3832);
  if (Grace_isTrue(opresult3834)) {
  lineNumber = 1154
  lineNumber = 1
  lineNumber = 1153
  var call3835 = callmethod(var_argv,"first", [0]);
  var string3836 = new GraceString(" --target llvm29");
  var opresult3838 = callmethod(call3835, "++", [1], string3836);
  var_cmd = opresult3838;
  lineNumber = 1155
  lineNumber = 1154
  var string3839 = new GraceString(" --make ");
  var opresult3841 = callmethod(var_cmd, "++", [1], string3839);
  var opresult3843 = callmethod(opresult3841, "++", [1], var_nm);
  var opresult3845 = callmethod(opresult3843, "++", [1], var_ext);
  var_cmd = opresult3845;
  lineNumber = 1157
  lineNumber = 1158
  lineNumber = 1
  lineNumber = 1155
  var call3847 = callmethod(var_util,"verbosity", [0]);
  var opresult3849 = callmethod(call3847, ">", [1], new GraceNum(30));
  if (Grace_isTrue(opresult3849)) {
  lineNumber = 1157
  lineNumber = 1156
  var string3850 = new GraceString(" --verbose");
  var opresult3852 = callmethod(var_cmd, "++", [1], string3850);
  var_cmd = opresult3852;
  var if3846 = opresult3852;
}
  lineNumber = 1160
  lineNumber = 1161
  lineNumber = 1
  lineNumber = 1158
  var call3854 = callmethod(var_util,"vtag", [0]);
  if (Grace_isTrue(call3854)) {
  lineNumber = 1160
  lineNumber = 1159
  var string3855 = new GraceString(" --vtag ");
  var opresult3857 = callmethod(var_cmd, "++", [1], string3855);
  lineNumber = 1160
  lineNumber = 1
  lineNumber = 1159
  var call3858 = callmethod(var_util,"vtag", [0]);
  var opresult3860 = callmethod(opresult3857, "++", [1], call3858);
  var_cmd = opresult3860;
  var if3853 = opresult3860;
}
  lineNumber = 1163
  lineNumber = 1164
  lineNumber = 1161
  var string3862 = new GraceString("native");
  var opresult3864 = callmethod(var_buildtype, "==", [1], string3862);
  if (Grace_isTrue(opresult3864)) {
  lineNumber = 1163
  lineNumber = 1162
  var string3865 = new GraceString(" --native --noexec");
  var opresult3867 = callmethod(var_cmd, "++", [1], string3865);
  var_cmd = opresult3867;
  var if3861 = opresult3867;
}
  lineNumber = 1165
  lineNumber = 1164
  lineNumber = 1
  lineNumber = 1164
  var call3869 = callmethod(var_io,"system", [1], var_cmd);
  var call3870 = callmethod(call3869,"not", [0]);
  if (Grace_isTrue(call3870)) {
  lineNumber = 1165
  var string3871 = new GraceString("failed processing import of ");
  var opresult3873 = callmethod(string3871, "++", [1], var_nm);
  var string3874 = new GraceString(".");
  var opresult3876 = callmethod(opresult3873, "++", [1], string3874);
  var call3877 = callmethod(var_util,"syntax_error", [1], opresult3876);
  var if3868 = call3877;
}
  lineNumber = 1168
  lineNumber = 1167
  var bool3878 = new GraceBoolean(true)
  var_exists = bool3878;
  lineNumber = 1168
  var string3879 = new GraceString(".gco");
  var opresult3881 = callmethod(var_nm, "++", [1], string3879);
  var call3882 = callmethod(var_linkfiles,"push", [1], opresult3881);
  lineNumber = 1169
  var call3883 = callmethod(var_staticmodules,"push", [1], var_nm);
  lineNumber = 1171
  lineNumber = 1170
  var bool3884 = new GraceBoolean(false)
  var_ext = bool3884;
  var if3831 = bool3884;
}
  var if3817 = if3831;
}
  lineNumber = 1175
  lineNumber = 1177
  lineNumber = 1173
  var string3886 = new GraceString("sys");
  var opresult3888 = callmethod(var_nm, "==", [1], string3886);
  lineNumber = 1177
  lineNumber = 1173
  var string3889 = new GraceString("io");
  var opresult3891 = callmethod(var_nm, "==", [1], string3889);
  var opresult3893 = callmethod(opresult3888, "|", [1], opresult3891);
  if (Grace_isTrue(opresult3893)) {
  lineNumber = 1175
  lineNumber = 1174
  var bool3894 = new GraceBoolean(true)
  var_exists = bool3894;
  lineNumber = 1175
  var call3895 = callmethod(var_staticmodules,"push", [1], var_nm);
  var if3885 = call3895;
}
  lineNumber = 1178
  lineNumber = 1180
  lineNumber = 1
  lineNumber = 1177
  var call3897 = callmethod(var_exists,"not", [0]);
  if (Grace_isTrue(call3897)) {
  lineNumber = 1178
  var string3898 = new GraceString("failed finding import of ");
  var opresult3900 = callmethod(string3898, "++", [1], var_nm);
  var string3901 = new GraceString(".");
  var opresult3903 = callmethod(opresult3900, "++", [1], string3901);
  var call3904 = callmethod(var_util,"syntax_error", [1], opresult3903);
  var if3896 = call3904;
}
  var if3777 = if3896;
}
  return if3777;
};
  var call3905 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block3776);
  var if3770 = call3905;
}
  lineNumber = 1183
  var string3906 = new GraceString("@.str = private unnamed_addr constant [6 x i8] c\"Hello\\00\"");
  lineNumber = 1184
  var call3907 = callmethod(this,"out", [1], string3906);
  var string3908 = new GraceString("@.str._plus = private unnamed_addr constant [2 x i8] c\"+\\00\"");
  lineNumber = 1185
  var call3909 = callmethod(this,"out", [1], string3908);
  var string3910 = new GraceString("@.str._minus = private unnamed_addr constant [2 x i8] c\"-\\00\"");
  lineNumber = 1186
  var call3911 = callmethod(this,"out", [1], string3910);
  var string3912 = new GraceString("@.str._asterisk = private unnamed_addr constant [2 x i8] c\"*\\00\"");
  lineNumber = 1187
  var call3913 = callmethod(this,"out", [1], string3912);
  var string3914 = new GraceString("@.str._slash = private unnamed_addr constant [2 x i8] c\"/\\00\"");
  lineNumber = 1188
  var call3915 = callmethod(this,"out", [1], string3914);
  var string3916 = new GraceString("@.str._percent = private unnamed_addr constant [2 x i8] c\"%\\00\"");
  lineNumber = 1189
  var call3917 = callmethod(this,"out", [1], string3916);
  var string3918 = new GraceString("@.str._index = private unnamed_addr constant [3 x i8] c\"[]\\00\"");
  lineNumber = 1190
  var call3919 = callmethod(this,"out", [1], string3918);
  var string3920 = new GraceString("@.str._push = private unnamed_addr constant [5 x i8] c\"push\\00\"");
  lineNumber = 1191
  var call3921 = callmethod(this,"out", [1], string3920);
  var string3922 = new GraceString("@.str._iter = private unnamed_addr constant [5 x i8] c\"iter\\00\"");
  lineNumber = 1192
  var call3923 = callmethod(this,"out", [1], string3922);
  var string3924 = new GraceString("@.str._apply = private unnamed_addr constant [6 x i8] c\"apply\\00\"");
  lineNumber = 1193
  var call3925 = callmethod(this,"out", [1], string3924);
  var string3926 = new GraceString("@.str._havemore = private unnamed_addr constant [9 x i8] c\"havemore\\00\"");
  lineNumber = 1194
  var call3927 = callmethod(this,"out", [1], string3926);
  var string3928 = new GraceString("@.str._next = private unnamed_addr constant [5 x i8] c\"next\\00\"");
  lineNumber = 1195
  var call3929 = callmethod(this,"out", [1], string3928);
  var string3930 = new GraceString("@.str._assignment = private unnamed_addr constant [11 x i8] c\"assignment\\00\"");
  lineNumber = 1196
  var call3931 = callmethod(this,"out", [1], string3930);
  var string3932 = new GraceString("@.str.asString = private unnamed_addr constant [9 x i8] c\"asString\\00\"");
  lineNumber = 1197
  var call3933 = callmethod(this,"out", [1], string3932);
  lineNumber = 1198
  lineNumber = 1197
  var string3934 = new GraceString("@.str._compilerRevision = private unnamed_addr constant [41 x i8]");
  lineNumber = 1198
  var string3935 = new GraceString("c\"");
  var opresult3937 = callmethod(string3934, "++", [1], string3935);
  lineNumber = 1
  lineNumber = 1198
  var call3938 = callmethod(var_buildinfo,"gitrevision", [0]);
  var opresult3940 = callmethod(opresult3937, "++", [1], call3938);
  var string3941 = new GraceString("\\00\"");
  var opresult3943 = callmethod(opresult3940, "++", [1], string3941);
  lineNumber = 1199
  var call3944 = callmethod(this,"out", [1], opresult3943);
  var string3945 = new GraceString("@undefined = private global %object null");
  lineNumber = 1200
  var call3946 = callmethod(this,"out", [1], string3945);
  var string3947 = new GraceString("@none = private global %object null");
  lineNumber = 1201
  var call3948 = callmethod(this,"out", [1], string3947);
  var string3949 = new GraceString("@argv = private global %object null");
  lineNumber = 1202
  var call3950 = callmethod(this,"out", [1], string3949);
  var string3951 = new GraceString("%ClassDataStruct = type { i8*, %Method*, i32 }");
  lineNumber = 1203
  var call3952 = callmethod(this,"outprint", [1], string3951);
  var string3953 = new GraceString("%ClassData = type %ClassDataStruct*");
  lineNumber = 1204
  var call3954 = callmethod(this,"outprint", [1], string3953);
  var string3955 = new GraceString("%object = type %ObjectStruct*");
  lineNumber = 1205
  var call3956 = callmethod(this,"outprint", [1], string3955);
  var string3957 = new GraceString("%ObjectStruct = type { i32, %ClassData, [0 x i8] }");
  lineNumber = 1206
  var call3958 = callmethod(this,"outprint", [1], string3957);
  var string3959 = new GraceString("%Method = type {i8*,i32,%object(%object,i32,%object*,i32)*}");
  lineNumber = 1207
  var call3960 = callmethod(this,"outprint", [1], string3959);
  var string3961 = new GraceString("%UserObject = type { i32, i8*, i8*, [0 x %object] }");
  lineNumber = 1208
  var call3962 = callmethod(this,"outprint", [1], string3961);
  var string3963 = new GraceString("define %object @module_");
  var opresult3965 = callmethod(string3963, "++", [1], var_modname);
  var string3966 = new GraceString("_init() {");
  var opresult3968 = callmethod(opresult3965, "++", [1], string3966);
  lineNumber = 1209
  var call3969 = callmethod(this,"out", [1], opresult3968);
  var string3970 = new GraceString("entry:");
  lineNumber = 1210
  var call3971 = callmethod(this,"out", [1], string3970);
  var string3972 = new GraceString("  %self = call %object @alloc_obj2(i32 100, i32 100)");
  lineNumber = 1211
  var call3973 = callmethod(this,"out", [1], string3972);
  lineNumber = 1212
  lineNumber = 1211
  var string3974 = new GraceString("Module<");
  var opresult3976 = callmethod(string3974, "++", [1], var_modname);
  var string3977 = new GraceString(">");
  var opresult3979 = callmethod(opresult3976, "++", [1], string3977);
  var var_modn = opresult3979;
  lineNumber = 1214
  lineNumber = 1212
  var string3980 = new GraceString("@\".str._modcname_");
  var opresult3982 = callmethod(string3980, "++", [1], var_modname);
  var string3983 = new GraceString("\" = private unnamed_addr ");
  var opresult3985 = callmethod(opresult3982, "++", [1], string3983);
  lineNumber = 1214
  lineNumber = 1213
  var string3986 = new GraceString("constant [");
  lineNumber = 1214
  lineNumber = 1
  lineNumber = 1213
  var call3987 = callmethod(var_modn,"size", [0]);
  var opresult3989 = callmethod(call3987, "+", [1], new GraceNum(1));
  var opresult3991 = callmethod(string3986, "++", [1], opresult3989);
  var string3992 = new GraceString(" x i8] c\"");
  var opresult3994 = callmethod(opresult3991, "++", [1], string3992);
  var opresult3996 = callmethod(opresult3994, "++", [1], var_modn);
  var string3997 = new GraceString("\\00\"");
  var opresult3999 = callmethod(opresult3996, "++", [1], string3997);
  var opresult4001 = callmethod(opresult3985, "++", [1], opresult3999);
  var var_con = opresult4001;
  lineNumber = 1214
  var call4002 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 1218
  lineNumber = 1215
  var string4003 = new GraceString("  call void @setclassname(%object %self, ");
  lineNumber = 1218
  lineNumber = 1216
  var string4004 = new GraceString("i8* getelementptr([");
  lineNumber = 1218
  lineNumber = 1
  lineNumber = 1216
  var call4005 = callmethod(var_modn,"size", [0]);
  var opresult4007 = callmethod(call4005, "+", [1], new GraceNum(1));
  var opresult4009 = callmethod(string4004, "++", [1], opresult4007);
  var string4010 = new GraceString(" x i8]* ");
  var opresult4012 = callmethod(opresult4009, "++", [1], string4010);
  var opresult4014 = callmethod(string4003, "++", [1], opresult4012);
  lineNumber = 1218
  lineNumber = 1217
  var string4015 = new GraceString("@\".str._modcname_");
  var opresult4017 = callmethod(string4015, "++", [1], var_modname);
  var string4018 = new GraceString("\",");
  var opresult4020 = callmethod(opresult4017, "++", [1], string4018);
  var opresult4022 = callmethod(opresult4014, "++", [1], opresult4020);
  lineNumber = 1218
  var string4023 = new GraceString("i32 0,i32 0))");
  var opresult4025 = callmethod(opresult4022, "++", [1], string4023);
  lineNumber = 1219
  var call4026 = callmethod(this,"out", [1], opresult4025);
  var string4027 = new GraceString("  %undefined = load %object* @undefined");
  lineNumber = 1220
  var call4028 = callmethod(this,"out", [1], string4027);
  var string4029 = new GraceString("  %none = load %object* @none");
  lineNumber = 1221
  var call4030 = callmethod(this,"out", [1], string4029);
  var string4031 = new GraceString("  %var_argv = call %object* @alloc_var()");
  lineNumber = 1222
  var call4032 = callmethod(this,"out", [1], string4031);
  var string4033 = new GraceString("  %tmp_argv = load %object* @argv");
  lineNumber = 1223
  var call4034 = callmethod(this,"out", [1], string4033);
  var string4035 = new GraceString("  store %object %tmp_argv, %object* %var_argv");
  lineNumber = 1224
  var call4036 = callmethod(this,"out", [1], string4035);
  var string4037 = new GraceString("  %var_HashMap = call %object* @alloc_var()");
  lineNumber = 1225
  var call4038 = callmethod(this,"out", [1], string4037);
  var string4039 = new GraceString("  %tmp_hmco = call %object @alloc_HashMapClassObject()");
  lineNumber = 1226
  var call4040 = callmethod(this,"out", [1], string4039);
  var string4041 = new GraceString("  store %object %tmp_hmco, %object* %var_HashMap");
  lineNumber = 1227
  var call4042 = callmethod(this,"out", [1], string4041);
  var string4043 = new GraceString("  %var_MatchFailed = call %object* @alloc_var()");
  lineNumber = 1228
  var call4044 = callmethod(this,"out", [1], string4043);
  var string4045 = new GraceString("  %tmp_mf = call %object @alloc_obj2(i32 0, i32 0)");
  lineNumber = 1229
  var call4046 = callmethod(this,"out", [1], string4045);
  var string4047 = new GraceString("  store %object %tmp_mf, %object* %var_MatchFailed");
  lineNumber = 1230
  var call4048 = callmethod(this,"out", [1], string4047);
  lineNumber = 1231
  lineNumber = 1230
  var var_tmpo = var_output;
  lineNumber = 1232
  var array4049 = new GraceList([
]);

  var_output = array4049;
  lineNumber = 1247
  lineNumber = 1232
  lineNumber = 1247
  var block4050 = Grace_allocObject();
  block4050.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4050.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4050.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4050.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4050.receiver = this;
  block4050.className = 'block<genllvm30:1247>';
  block4050.real = function(
var_l
) {
  lineNumber = 1249
  lineNumber = 1
  lineNumber = 1233
  var call4052 = callmethod(var_l,"kind", [0]);
  var string4053 = new GraceString("vardec");
  var opresult4055 = callmethod(call4052, "==", [1], string4053);
  lineNumber = 1249
  lineNumber = 1
  lineNumber = 1233
  var call4056 = callmethod(var_l,"kind", [0]);
  var string4057 = new GraceString("defdec");
  var opresult4059 = callmethod(call4056, "==", [1], string4057);
  var opresult4061 = callmethod(opresult4055, "|", [1], opresult4059);
  if (Grace_isTrue(opresult4061)) {
  lineNumber = 1234
  lineNumber = 1
  lineNumber = 1234
  lineNumber = 1
  lineNumber = 1234
  lineNumber = 1
  lineNumber = 1234
  var call4062 = callmethod(var_l,"name", [0]);
  var call4063 = callmethod(call4062,"value", [0]);
  var call4064 = callmethod(call4063,"_escape", [0]);
  var var_tnm = call4064;
  lineNumber = 1235
  var call4065 = callmethod(var_declaredvars,"push", [1], var_tnm);
  lineNumber = 1236
  var string4066 = new GraceString("  %\"var_");
  var opresult4068 = callmethod(string4066, "++", [1], var_tnm);
  var string4069 = new GraceString("\" = call %object* @alloc_var()");
  var opresult4071 = callmethod(opresult4068, "++", [1], string4069);
  lineNumber = 1237
  var call4072 = callmethod(this,"out", [1], opresult4071);
  var string4073 = new GraceString("  store %object %undefined, %object* %\"var_");
  var opresult4075 = callmethod(string4073, "++", [1], var_tnm);
  var string4076 = new GraceString("\"");
  var opresult4078 = callmethod(opresult4075, "++", [1], string4076);
  lineNumber = 1238
  var call4079 = callmethod(this,"out", [1], opresult4078);
  var if4051 = call4079;
  } else {
  lineNumber = 1247
  lineNumber = 1249
  lineNumber = 1
  lineNumber = 1238
  var call4081 = callmethod(var_l,"kind", [0]);
  var string4082 = new GraceString("class");
  var opresult4084 = callmethod(call4081, "==", [1], string4082);
  if (Grace_isTrue(opresult4084)) {
  lineNumber = 1240
  var var_tnmc;
  lineNumber = 1243
  lineNumber = 1245
  lineNumber = 1
  lineNumber = 1245
  lineNumber = 1
  lineNumber = 1240
  var call4086 = callmethod(var_l,"name", [0]);
  var call4087 = callmethod(call4086,"kind", [0]);
  var string4088 = new GraceString("generic");
  var opresult4090 = callmethod(call4087, "==", [1], string4088);
  if (Grace_isTrue(opresult4090)) {
  lineNumber = 1241
  lineNumber = 1
  lineNumber = 1241
  lineNumber = 1
  lineNumber = 1241
  lineNumber = 1
  lineNumber = 1241
  lineNumber = 1
  lineNumber = 1241
  var call4091 = callmethod(var_l,"name", [0]);
  var call4092 = callmethod(call4091,"value", [0]);
  var call4093 = callmethod(call4092,"value", [0]);
  var call4094 = callmethod(call4093,"_escape", [0]);
  var_tnmc = call4094;
  var if4085 = call4094;
  } else {
  lineNumber = 1243
  lineNumber = 1
  lineNumber = 1243
  lineNumber = 1
  lineNumber = 1243
  lineNumber = 1
  lineNumber = 1243
  var call4095 = callmethod(var_l,"name", [0]);
  var call4096 = callmethod(call4095,"value", [0]);
  var call4097 = callmethod(call4096,"_escape", [0]);
  var_tnmc = call4097;
  var if4085 = call4097;
}
  lineNumber = 1245
  var call4098 = callmethod(var_declaredvars,"push", [1], var_tnmc);
  lineNumber = 1246
  var string4099 = new GraceString("  %\"var_");
  var opresult4101 = callmethod(string4099, "++", [1], var_tnmc);
  var string4102 = new GraceString("\" = call %object* @alloc_var()");
  var opresult4104 = callmethod(opresult4101, "++", [1], string4102);
  lineNumber = 1247
  var call4105 = callmethod(this,"out", [1], opresult4104);
  var string4106 = new GraceString("  store %object %undefined, %object* %\"var_");
  var opresult4108 = callmethod(string4106, "++", [1], var_tnmc);
  var string4109 = new GraceString("\"");
  var opresult4111 = callmethod(opresult4108, "++", [1], string4109);
  lineNumber = 1248
  var call4112 = callmethod(this,"out", [1], opresult4111);
  var if4080 = call4112;
}
  var if4051 = if4080;
}
  return if4051;
};
  var call4113 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block4050);
  lineNumber = 1251
  lineNumber = 1250
  lineNumber = 1251
  var block4114 = Grace_allocObject();
  block4114.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4114.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4114.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4114.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4114.receiver = this;
  block4114.className = 'block<genllvm30:1251>';
  block4114.real = function(
var_o
) {
  lineNumber = 1252
  var call4115 = callmethod(this,"compilenode", [1], var_o);
  return call4115;
};
  var call4116 = callmethod(Grace_prelude,"for()do", [1, 1], var_values, block4114);
  lineNumber = 1254
  lineNumber = 1253
  var var_tmpo2 = var_output;
  lineNumber = 1255
  lineNumber = 1254
  var_output = var_tmpo;
  lineNumber = 1255
  var string4117 = new GraceString("  %params = alloca %object, i32 ");
  var opresult4119 = callmethod(string4117, "++", [1], var_paramsUsed);
  lineNumber = 1256
  var call4120 = callmethod(this,"out", [1], opresult4119);
  lineNumber = 1257
  lineNumber = 1256
  var diff4122 = callmethod(var_paramsUsed, "-", [1], new GraceNum(1));
  var opresult4124 = callmethod(new GraceNum(0), "..", [1], diff4122);
  lineNumber = 1257
  var block4125 = Grace_allocObject();
  block4125.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4125.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4125.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4125.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4125.receiver = this;
  block4125.className = 'block<genllvm30:1257>';
  block4125.real = function(
var_i
) {
  var string4126 = new GraceString("  %params_");
  var opresult4128 = callmethod(string4126, "++", [1], var_i);
  var string4129 = new GraceString(" = getelementptr %object* %params, i32 ");
  var opresult4131 = callmethod(opresult4128, "++", [1], string4129);
  var opresult4133 = callmethod(opresult4131, "++", [1], var_i);
  lineNumber = 1258
  var call4134 = callmethod(this,"out", [1], opresult4133);
  return call4134;
};
  var call4135 = callmethod(Grace_prelude,"for()do", [1, 1], opresult4124, block4125);
  lineNumber = 1260
  lineNumber = 1259
  lineNumber = 1260
  var block4136 = Grace_allocObject();
  block4136.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4136.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4136.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4136.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4136.receiver = this;
  block4136.className = 'block<genllvm30:1260>';
  block4136.real = function(
var_l
) {
  lineNumber = 1261
  var call4137 = callmethod(this,"out", [1], var_l);
  return call4137;
};
  var call4138 = callmethod(Grace_prelude,"for()do", [1, 1], var_tmpo2, block4136);
  lineNumber = 1263
  lineNumber = 1262
  var_paramsUsed = new GraceNum(1);
  lineNumber = 1263
  var string4139 = new GraceString("  ret %object %self");
  lineNumber = 1264
  var call4140 = callmethod(this,"out", [1], string4139);
  var string4141 = new GraceString("}");
  lineNumber = 1265
  var call4142 = callmethod(this,"out", [1], string4141);
  var string4143 = new GraceString("define weak i32 @main(i32 %argc, i8** %argv) {");
  lineNumber = 1266
  var call4144 = callmethod(this,"out", [1], string4143);
  var string4145 = new GraceString("entry:");
  lineNumber = 1267
  var call4146 = callmethod(this,"out", [1], string4145);
  var string4147 = new GraceString("  call void @initprofiling()");
  lineNumber = 1268
  var call4148 = callmethod(this,"out", [1], string4147);
  lineNumber = 1276
  lineNumber = 1268
  var string4150 = new GraceString("LogCallGraph");
  lineNumber = 1278
  lineNumber = 1
  lineNumber = 1268
  var call4151 = callmethod(var_util,"extensions", [0]);
  var call4152 = callmethod(call4151,"contains", [1], string4150);
  if (Grace_isTrue(call4152)) {
  lineNumber = 1269
  var string4153 = new GraceString("LogCallGraph");
  lineNumber = 1270
  lineNumber = 1
  lineNumber = 1269
  var call4154 = callmethod(var_util,"extensions", [0]);
  var call4155 = callmethod(call4154,"get", [1], string4153);
  var var_lcgfile = call4155;
  lineNumber = 1272
  lineNumber = 1270
  var string4156 = new GraceString("@.str.logdest = private unnamed_addr ");
  lineNumber = 1272
  lineNumber = 1271
  var string4157 = new GraceString("constant [");
  lineNumber = 1272
  lineNumber = 1
  lineNumber = 1271
  var call4158 = callmethod(var_lcgfile,"size", [0]);
  var opresult4160 = callmethod(call4158, "+", [1], new GraceNum(1));
  var opresult4162 = callmethod(string4157, "++", [1], opresult4160);
  var string4163 = new GraceString(" x i8] c\"");
  var opresult4165 = callmethod(opresult4162, "++", [1], string4163);
  var opresult4167 = callmethod(opresult4165, "++", [1], var_lcgfile);
  var string4168 = new GraceString("\\00\"");
  var opresult4170 = callmethod(opresult4167, "++", [1], string4168);
  var opresult4172 = callmethod(string4156, "++", [1], opresult4170);
  var_con = opresult4172;
  lineNumber = 1272
  var call4173 = callmethod(var_constants,"push", [1], var_con);
  lineNumber = 1276
  lineNumber = 1273
  var string4174 = new GraceString("  call void @enable_callgraph(");
  lineNumber = 1276
  lineNumber = 1274
  var string4175 = new GraceString("i8* getelementptr([");
  lineNumber = 1276
  lineNumber = 1
  lineNumber = 1274
  var call4176 = callmethod(var_lcgfile,"size", [0]);
  var opresult4178 = callmethod(call4176, "+", [1], new GraceNum(1));
  var opresult4180 = callmethod(string4175, "++", [1], opresult4178);
  var string4181 = new GraceString(" x i8]* ");
  var opresult4183 = callmethod(opresult4180, "++", [1], string4181);
  var opresult4185 = callmethod(string4174, "++", [1], opresult4183);
  lineNumber = 1275
  var string4186 = new GraceString("@.str.logdest,");
  var opresult4188 = callmethod(opresult4185, "++", [1], string4186);
  lineNumber = 1276
  var string4189 = new GraceString("i32 0,i32 0))");
  var opresult4191 = callmethod(opresult4188, "++", [1], string4189);
  lineNumber = 1277
  var call4192 = callmethod(this,"out", [1], opresult4191);
  var if4149 = call4192;
}
  lineNumber = 1278
  var string4193 = new GraceString("  call void @gracelib_argv(i8** %argv)");
  lineNumber = 1279
  var call4194 = callmethod(this,"out", [1], string4193);
  var string4195 = new GraceString("  %params = alloca %object, i32 1");
  lineNumber = 1280
  var call4196 = callmethod(this,"out", [1], string4195);
  var string4197 = new GraceString("  %params_0 = getelementptr %object* %params, i32 0");
  lineNumber = 1281
  var call4198 = callmethod(this,"out", [1], string4197);
  var string4199 = new GraceString("  %undefined = call %object @alloc_Undefined()");
  lineNumber = 1282
  var call4200 = callmethod(this,"out", [1], string4199);
  var string4201 = new GraceString("  store %object %undefined, %object* @undefined");
  lineNumber = 1283
  var call4202 = callmethod(this,"out", [1], string4201);
  var string4203 = new GraceString("  %none = call %object @alloc_none()");
  lineNumber = 1284
  var call4204 = callmethod(this,"out", [1], string4203);
  var string4205 = new GraceString("  store %object %none, %object* @none");
  lineNumber = 1285
  var call4206 = callmethod(this,"out", [1], string4205);
  var string4207 = new GraceString("  %tmp_argv = call %object @alloc_List()");
  lineNumber = 1286
  var call4208 = callmethod(this,"out", [1], string4207);
  var string4209 = new GraceString("  %argv_i = alloca i32");
  lineNumber = 1287
  var call4210 = callmethod(this,"out", [1], string4209);
  var string4211 = new GraceString("  store i32 0, i32* %argv_i");
  lineNumber = 1288
  var call4212 = callmethod(this,"out", [1], string4211);
  var string4213 = new GraceString("  br label %argv.cond");
  lineNumber = 1289
  var call4214 = callmethod(this,"out", [1], string4213);
  var string4215 = new GraceString("argv.cond");
  lineNumber = 1290
  var call4216 = callmethod(this,"beginblock", [1], string4215);
  var string4217 = new GraceString("  %argv_tmp1 = load i32* %argv_i, align 4");
  lineNumber = 1291
  var call4218 = callmethod(this,"out", [1], string4217);
  var string4219 = new GraceString("  %argv_cmp = icmp slt i32 %argv_tmp1, %argc");
  lineNumber = 1292
  var call4220 = callmethod(this,"out", [1], string4219);
  var string4221 = new GraceString("  br i1 %argv_cmp, label %argv.body, label %argv.end");
  lineNumber = 1293
  var call4222 = callmethod(this,"out", [1], string4221);
  var string4223 = new GraceString("argv.body");
  lineNumber = 1294
  var call4224 = callmethod(this,"beginblock", [1], string4223);
  var string4225 = new GraceString("  %argv_iv = load i32* %argv_i");
  lineNumber = 1295
  var call4226 = callmethod(this,"out", [1], string4225);
  var string4227 = new GraceString("  %argv_idx = getelementptr i8** %argv, i32 %argv_iv");
  lineNumber = 1296
  var call4228 = callmethod(this,"out", [1], string4227);
  var string4229 = new GraceString("  %argv_val = load i8** %argv_idx");
  lineNumber = 1297
  var call4230 = callmethod(this,"out", [1], string4229);
  var string4231 = new GraceString("  %argv_tmp3 = call %object @alloc_String(i8* %argv_val)");
  lineNumber = 1298
  var call4232 = callmethod(this,"out", [1], string4231);
  var string4233 = new GraceString("  store %object %argv_tmp3, %object* %params_0");
  lineNumber = 1299
  var call4234 = callmethod(this,"out", [1], string4233);
  lineNumber = 1302
  lineNumber = 1299
  var string4235 = new GraceString("  call %object @callmethod(%object %tmp_argv, ");
  lineNumber = 1300
  var string4236 = new GraceString("i8* getelementptr([5 x i8]* @.str._push");
  var opresult4238 = callmethod(string4235, "++", [1], string4236);
  lineNumber = 1301
  var string4239 = new GraceString(",i32 0,i32 0), ");
  var opresult4241 = callmethod(opresult4238, "++", [1], string4239);
  lineNumber = 1302
  var string4242 = new GraceString("i32 0, %object* %params)");
  var opresult4244 = callmethod(opresult4241, "++", [1], string4242);
  lineNumber = 1303
  var call4245 = callmethod(this,"out", [1], opresult4244);
  var string4246 = new GraceString("  %argv_inc = add i32 %argv_iv, 1");
  lineNumber = 1304
  var call4247 = callmethod(this,"out", [1], string4246);
  var string4248 = new GraceString("  store i32 %argv_inc, i32* %argv_i");
  lineNumber = 1305
  var call4249 = callmethod(this,"out", [1], string4248);
  var string4250 = new GraceString("  br label %argv.cond");
  lineNumber = 1306
  var call4251 = callmethod(this,"out", [1], string4250);
  var string4252 = new GraceString("argv.end");
  lineNumber = 1307
  var call4253 = callmethod(this,"beginblock", [1], string4252);
  var string4254 = new GraceString("  call void @module_sys_init_argv(%object %tmp_argv)");
  lineNumber = 1308
  var call4255 = callmethod(this,"out", [1], string4254);
  var string4256 = new GraceString("  %var_argv = call %object* @alloc_var()");
  lineNumber = 1309
  var call4257 = callmethod(this,"out", [1], string4256);
  var string4258 = new GraceString("  store %object %tmp_argv, %object* %var_argv");
  lineNumber = 1310
  var call4259 = callmethod(this,"out", [1], string4258);
  var string4260 = new GraceString("  store %object %tmp_argv, %object* @argv");
  lineNumber = 1311
  var call4261 = callmethod(this,"out", [1], string4260);
  var string4262 = new GraceString("  call %object @module_");
  var opresult4264 = callmethod(string4262, "++", [1], var_modname);
  var string4265 = new GraceString("_init()");
  var opresult4267 = callmethod(opresult4264, "++", [1], string4265);
  lineNumber = 1312
  var call4268 = callmethod(this,"out", [1], opresult4267);
  var string4269 = new GraceString("  call void @gracelib_stats()");
  lineNumber = 1313
  var call4270 = callmethod(this,"out", [1], string4269);
  var string4271 = new GraceString("  ret i32 0");
  lineNumber = 1314
  var call4272 = callmethod(this,"out", [1], string4271);
  var string4273 = new GraceString("}");
  lineNumber = 1315
  var call4274 = callmethod(this,"out", [1], string4273);
  var string4275 = new GraceString("; constant definitions");
  lineNumber = 1316
  var call4276 = callmethod(this,"out", [1], string4275);
  lineNumber = 1317
  lineNumber = 1316
  lineNumber = 1317
  var block4277 = Grace_allocObject();
  block4277.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4277.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4277.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4277.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4277.receiver = this;
  block4277.className = 'block<genllvm30:1317>';
  block4277.real = function(
var_c
) {
  lineNumber = 1318
  var call4278 = callmethod(this,"out", [1], var_c);
  return call4278;
};
  var call4279 = callmethod(Grace_prelude,"for()do", [1, 1], var_constants, block4277);
  lineNumber = 1320
  lineNumber = 1
  lineNumber = 1319
  var call4280 = callmethod(var_subtype,"boolMatrix", [0]);
  var var_mtx = call4280;
  lineNumber = 1321
  lineNumber = 1320
  var string4281 = new GraceString("@.subtypes = private unnamed_addr ");
  lineNumber = 1321
  var string4282 = new GraceString("constant [");
  lineNumber = 1
  lineNumber = 1321
  var call4283 = callmethod(var_mtx,"size", [0]);
  lineNumber = 1
  lineNumber = 1321
  var call4284 = callmethod(var_mtx,"size", [0]);
  var prod4286 = callmethod(call4283, "*", [1], call4284);
  var opresult4288 = callmethod(string4282, "++", [1], prod4286);
  var string4289 = new GraceString(" x i1] [");
  var opresult4291 = callmethod(opresult4288, "++", [1], string4289);
  var opresult4293 = callmethod(string4281, "++", [1], opresult4291);
  lineNumber = 1322
  var call4294 = callmethod(this,"out", [1], opresult4293);
  lineNumber = 1323
  lineNumber = 1322
  var bool4295 = new GraceBoolean(true)
  var var_smfirst = bool4295;
  lineNumber = 1333
  lineNumber = 1323
  lineNumber = 1333
  var block4296 = Grace_allocObject();
  block4296.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4296.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4296.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4296.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4296.receiver = this;
  block4296.className = 'block<genllvm30:1333>';
  block4296.real = function(
var_m1
) {
  lineNumber = 1324
  lineNumber = 1333
  var block4297 = Grace_allocObject();
  block4297.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4297.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4297.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4297.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4297.receiver = this;
  block4297.className = 'block<genllvm30:1333>';
  block4297.real = function(
var_m2
) {
  lineNumber = 1328
  lineNumber = 1325
  if (Grace_isTrue(var_smfirst)) {
  lineNumber = 1327
  lineNumber = 1326
  var bool4299 = new GraceBoolean(false)
  var_smfirst = bool4299;
  var if4298 = bool4299;
  } else {
  lineNumber = 1328
  var string4300 = new GraceString(",");
  lineNumber = 1329
  var call4301 = callmethod(this,"out", [1], string4300);
  var if4298 = call4301;
}
  lineNumber = 1333
  lineNumber = 1330
  if (Grace_isTrue(var_m2)) {
  lineNumber = 1331
  var string4303 = new GraceString("i1 1");
  lineNumber = 1332
  var call4304 = callmethod(this,"out", [1], string4303);
  var if4302 = call4304;
  } else {
  lineNumber = 1333
  var string4305 = new GraceString("i1 0");
  lineNumber = 1334
  var call4306 = callmethod(this,"out", [1], string4305);
  var if4302 = call4306;
}
  return if4302;
};
  var call4307 = callmethod(Grace_prelude,"for()do", [1, 1], var_m1, block4297);
  return call4307;
};
  var call4308 = callmethod(Grace_prelude,"for()do", [1, 1], var_mtx, block4296);
  lineNumber = 1337
  var string4309 = new GraceString("]");
  lineNumber = 1338
  var call4310 = callmethod(this,"out", [1], string4309);
  var string4311 = new GraceString("@.typecount = private unnamed_addr constant i16 ");
  lineNumber = 1
  lineNumber = 1338
  var call4312 = callmethod(var_mtx,"size", [0]);
  var opresult4314 = callmethod(string4311, "++", [1], call4312);
  var string4315 = new GraceString("");
  var opresult4317 = callmethod(opresult4314, "++", [1], string4315);
  lineNumber = 1339
  var call4318 = callmethod(this,"out", [1], opresult4317);
  var string4319 = new GraceString("define private i1 @checksub(i16 %sub, i16 %sup) {");
  lineNumber = 1340
  var call4320 = callmethod(this,"out", [1], string4319);
  var string4321 = new GraceString("entry:");
  lineNumber = 1341
  var call4322 = callmethod(this,"out", [1], string4321);
  var string4323 = new GraceString("  %tc = load i16* @.typecount");
  lineNumber = 1342
  var call4324 = callmethod(this,"out", [1], string4323);
  var string4325 = new GraceString("  %st = load [");
  lineNumber = 1
  lineNumber = 1342
  var call4326 = callmethod(var_mtx,"size", [0]);
  lineNumber = 1
  lineNumber = 1342
  var call4327 = callmethod(var_mtx,"size", [0]);
  var prod4329 = callmethod(call4326, "*", [1], call4327);
  var opresult4331 = callmethod(string4325, "++", [1], prod4329);
  var string4332 = new GraceString(" x i1]* @.subtypes");
  var opresult4334 = callmethod(opresult4331, "++", [1], string4332);
  lineNumber = 1343
  var call4335 = callmethod(this,"out", [1], opresult4334);
  var string4336 = new GraceString("  %ridx = mul i16 %sub, %tc");
  lineNumber = 1344
  var call4337 = callmethod(this,"out", [1], string4336);
  var string4338 = new GraceString("  %idx = add i16 %ridx, %sup");
  lineNumber = 1345
  var call4339 = callmethod(this,"out", [1], string4338);
  var string4340 = new GraceString("  %ptr = getelementptr [");
  lineNumber = 1
  lineNumber = 1345
  var call4341 = callmethod(var_mtx,"size", [0]);
  lineNumber = 1
  lineNumber = 1345
  var call4342 = callmethod(var_mtx,"size", [0]);
  var prod4344 = callmethod(call4341, "*", [1], call4342);
  var opresult4346 = callmethod(string4340, "++", [1], prod4344);
  var string4347 = new GraceString(" x i1]* @.subtypes, i32 0, i16 %idx");
  var opresult4349 = callmethod(opresult4346, "++", [1], string4347);
  lineNumber = 1346
  var call4350 = callmethod(this,"out", [1], opresult4349);
  var string4351 = new GraceString("  %rv = load i1* %ptr");
  lineNumber = 1347
  var call4352 = callmethod(this,"out", [1], string4351);
  var string4353 = new GraceString("  ret i1 %rv");
  lineNumber = 1348
  var call4354 = callmethod(this,"out", [1], string4353);
  var string4355 = new GraceString("}");
  lineNumber = 1349
  var call4356 = callmethod(this,"out", [1], string4355);
  var string4357 = new GraceString("; gracelib");
  lineNumber = 1350
  var call4358 = callmethod(this,"out", [1], string4357);
  var string4359 = new GraceString("declare %object @alloc_obj2(i32, i32)");
  lineNumber = 1351
  var call4360 = callmethod(this,"out", [1], string4359);
  var string4361 = new GraceString("declare void @addmethod2(%object, i8*, %object(%object, i32, %object*, i32)*)");
  lineNumber = 1352
  var call4362 = callmethod(this,"out", [1], string4361);
  var string4363 = new GraceString("declare void @adddatum2(%object, %object, i32)");
  lineNumber = 1353
  var call4364 = callmethod(this,"out", [1], string4363);
  var string4365 = new GraceString("declare %object @alloc_List()");
  lineNumber = 1354
  var call4366 = callmethod(this,"out", [1], string4365);
  var string4367 = new GraceString("declare %object @alloc_Float64(double)");
  lineNumber = 1355
  var call4368 = callmethod(this,"out", [1], string4367);
  var string4369 = new GraceString("declare %object @alloc_String(i8*)");
  lineNumber = 1356
  var call4370 = callmethod(this,"out", [1], string4369);
  var string4371 = new GraceString("declare %object @alloc_Octets(i8*, i32)");
  lineNumber = 1357
  var call4372 = callmethod(this,"out", [1], string4371);
  var string4373 = new GraceString("declare %object @alloc_Boolean(i32)");
  lineNumber = 1358
  var call4374 = callmethod(this,"out", [1], string4373);
  var string4375 = new GraceString("declare %object @alloc_Undefined()");
  lineNumber = 1359
  var call4376 = callmethod(this,"out", [1], string4375);
  var string4377 = new GraceString("declare %object @alloc_none()");
  lineNumber = 1360
  var call4378 = callmethod(this,"out", [1], string4377);
  var string4379 = new GraceString("declare %object @alloc_HashMapClassObject()");
  lineNumber = 1361
  var call4380 = callmethod(this,"out", [1], string4379);
  var string4381 = new GraceString("declare %object @callmethod(%object, i8*, i32, %object*)");
  lineNumber = 1362
  var call4382 = callmethod(this,"out", [1], string4381);
  var string4383 = new GraceString("declare %object @gracelib_print(%object, i32, %object*)");
  lineNumber = 1363
  var call4384 = callmethod(this,"out", [1], string4383);
  var string4385 = new GraceString("declare %object @gracelib_readall(%object, i32, %object*)");
  lineNumber = 1364
  var call4386 = callmethod(this,"out", [1], string4385);
  var string4387 = new GraceString("declare %object @gracelib_length(%object)");
  lineNumber = 1365
  var call4388 = callmethod(this,"out", [1], string4387);
  var string4389 = new GraceString("declare void @set_type(%object, i16)");
  lineNumber = 1366
  var call4390 = callmethod(this,"out", [1], string4389);
  var string4391 = new GraceString("declare void @setclassname(%object, i8*)");
  lineNumber = 1367
  var call4392 = callmethod(this,"out", [1], string4391);
  var string4393 = new GraceString("declare void @enable_callgraph(i8*)");
  lineNumber = 1368
  var call4394 = callmethod(this,"out", [1], string4393);
  var string4395 = new GraceString("declare %object @dlmodule(i8*)");
  lineNumber = 1369
  var call4396 = callmethod(this,"out", [1], string4395);
  var string4397 = new GraceString("declare %object* @alloc_var()");
  lineNumber = 1370
  var call4398 = callmethod(this,"out", [1], string4397);
  var string4399 = new GraceString("declare void @gracelib_argv(i8**)");
  lineNumber = 1371
  var call4400 = callmethod(this,"out", [1], string4399);
  var string4401 = new GraceString("declare void @module_sys_init_argv(%object)");
  lineNumber = 1372
  var call4402 = callmethod(this,"out", [1], string4401);
  var string4403 = new GraceString("declare i1 @istrue(%object)");
  lineNumber = 1373
  var call4404 = callmethod(this,"out", [1], string4403);
  var string4405 = new GraceString("declare void @gracelib_stats()");
  lineNumber = 1374
  var call4406 = callmethod(this,"out", [1], string4405);
  var string4407 = new GraceString("declare void @initprofiling()");
  lineNumber = 1375
  var call4408 = callmethod(this,"out", [1], string4407);
  var string4409 = new GraceString("declare %object** @createclosure(i32)");
  lineNumber = 1376
  var call4410 = callmethod(this,"out", [1], string4409);
  var string4411 = new GraceString("declare void @addtoclosure(%object**, %object*)");
  lineNumber = 1377
  var call4412 = callmethod(this,"out", [1], string4411);
  var string4413 = new GraceString("declare void @addclosuremethod(%object, i8*, %object(%object,");
  lineNumber = 1378
  var call4414 = callmethod(this,"out", [1], string4413);
  var string4415 = new GraceString("    i32, %object*, %object**)*, %object**)");
  lineNumber = 1379
  var call4416 = callmethod(this,"out", [1], string4415);
  var string4417 = new GraceString("declare void @setline(i32)");
  lineNumber = 1380
  var call4418 = callmethod(this,"out", [1], string4417);
  var string4419 = new GraceString("declare void @block_return(%object, %object)");
  lineNumber = 1381
  var call4420 = callmethod(this,"out", [1], string4419);
  var string4421 = new GraceString("declare void @block_savedest(%object)");
  lineNumber = 1382
  var call4422 = callmethod(this,"out", [1], string4421);
  var string4423 = new GraceString("declare %object @process_varargs(%object*, i32, i32)");
  lineNumber = 1383
  var call4424 = callmethod(this,"out", [1], string4423);
  var string4425 = new GraceString("; libc functions");
  lineNumber = 1384
  var call4426 = callmethod(this,"out", [1], string4425);
  var string4427 = new GraceString("declare i32 @puts(i8*)");
  lineNumber = 1385
  var call4428 = callmethod(this,"out", [1], string4427);
  var string4429 = new GraceString("declare i8* @malloc(i32)");
  lineNumber = 1386
  var call4430 = callmethod(this,"out", [1], string4429);
  var string4431 = new GraceString("writing file.");
  lineNumber = 1387
  var call4432 = callmethod(this,"log_verbose", [1], string4431);
  lineNumber = 1388
  lineNumber = 1387
  lineNumber = 1388
  var block4433 = Grace_allocObject();
  block4433.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4433.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4433.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4433.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4433.receiver = this;
  block4433.className = 'block<genllvm30:1388>';
  block4433.real = function(
var_x
) {
  lineNumber = 1389
  var call4434 = callmethod(this,"outprint", [1], var_x);
  return call4434;
};
  var call4435 = callmethod(Grace_prelude,"for()do", [1, 1], var_output, block4433);
  lineNumber = 1434
  lineNumber = 1437
  lineNumber = 1391
  var string4437 = new GraceString("make");
  var opresult4439 = callmethod(var_runmode, "==", [1], string4437);
  if (Grace_isTrue(opresult4439)) {
  lineNumber = 1392
  lineNumber = 1
  lineNumber = 1392
  var call4440 = callmethod(var_outfile,"close", [0]);
  lineNumber = 1394
  lineNumber = 1393
  var string4441 = new GraceString("llvm-as -o ");
  var opresult4443 = callmethod(string4441, "++", [1], var_modname);
  var string4444 = new GraceString(".gco ");
  var opresult4446 = callmethod(opresult4443, "++", [1], string4444);
  var opresult4448 = callmethod(opresult4446, "++", [1], var_modname);
  var string4449 = new GraceString(".ll");
  var opresult4451 = callmethod(opresult4448, "++", [1], string4449);
  var_cmd = opresult4451;
  lineNumber = 1396
  lineNumber = 1394
  lineNumber = 1
  lineNumber = 1394
  var call4453 = callmethod(var_io,"system", [1], var_cmd);
  var call4454 = callmethod(call4453,"not", [0]);
  if (Grace_isTrue(call4454)) {
  lineNumber = 1395
  var string4455 = new GraceString("Failed LLVM assembling");
  lineNumber = 1396
  lineNumber = 1
  lineNumber = 1395
  var call4456 = callmethod(var_io,"error", [0]);
  var call4457 = callmethod(call4456,"write", [1], string4455);
  lineNumber = 1396
  var string4458 = new GraceString("Fatal.");
  lineNumber = 1397
  var call4459 = callmethod(this,"raise", [1], string4458);
  var if4452 = call4459;
}
  lineNumber = 1398
  var string4460 = new GraceString("linking.");
  lineNumber = 1399
  var call4461 = callmethod(this,"log_verbose", [1], string4460);
  lineNumber = 1400
  lineNumber = 1399
  var string4462 = new GraceString("llvm-link -o ");
  var opresult4464 = callmethod(string4462, "++", [1], var_modname);
  var string4465 = new GraceString(".bc ");
  var opresult4467 = callmethod(opresult4464, "++", [1], string4465);
  var_cmd = opresult4467;
  lineNumber = 1400
  var string4468 = new GraceString(".o");
  var string4469 = new GraceString(".bc");
  var call4470 = callmethod(var_gracelibPath,"replace()with", [1, 1], string4468, string4469);
  var opresult4472 = callmethod(var_cmd, "++", [1], call4470);
  var string4473 = new GraceString(" ");
  var opresult4475 = callmethod(opresult4472, "++", [1], string4473);
  var_cmd = opresult4475;
  lineNumber = 1402
  lineNumber = 1401
  var opresult4477 = callmethod(var_cmd, "++", [1], var_modname);
  var string4478 = new GraceString(".gco");
  var opresult4480 = callmethod(opresult4477, "++", [1], string4478);
  var_cmd = opresult4480;
  lineNumber = 1404
  lineNumber = 1402
  lineNumber = 1404
  var block4481 = Grace_allocObject();
  block4481.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block4481.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block4481.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block4481.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block4481.receiver = this;
  block4481.className = 'block<genllvm30:1404>';
  block4481.real = function(
var_fn
) {
  lineNumber = 1403
  var string4482 = new GraceString(" ");
  var opresult4484 = callmethod(var_cmd, "++", [1], string4482);
  var opresult4486 = callmethod(opresult4484, "++", [1], var_fn);
  var_cmd = opresult4486;
  return opresult4486;
};
  var call4487 = callmethod(Grace_prelude,"for()do", [1, 1], var_linkfiles, block4481);
  lineNumber = 1407
  lineNumber = 1405
  lineNumber = 1
  lineNumber = 1405
  var call4489 = callmethod(var_io,"system", [1], var_cmd);
  var call4490 = callmethod(call4489,"not", [0]);
  if (Grace_isTrue(call4490)) {
  lineNumber = 1406
  var string4491 = new GraceString("Failed LLVM linking");
  lineNumber = 1407
  lineNumber = 1
  lineNumber = 1406
  var call4492 = callmethod(var_io,"error", [0]);
  var call4493 = callmethod(call4492,"write", [1], string4491);
  lineNumber = 1407
  var string4494 = new GraceString("Fatal.");
  lineNumber = 1408
  var call4495 = callmethod(this,"raise", [1], string4494);
  var if4488 = call4495;
}
  lineNumber = 1428
  lineNumber = 1431
  lineNumber = 1409
  var string4497 = new GraceString("native");
  var opresult4499 = callmethod(var_buildtype, "==", [1], string4497);
  lineNumber = 1431
  lineNumber = 1
  lineNumber = 1431
  lineNumber = 1
  lineNumber = 1409
  var call4500 = callmethod(var_util,"noexec", [0]);
  var call4501 = callmethod(call4500,"not", [0]);
  var opresult4503 = callmethod(opresult4499, "&", [1], call4501);
  if (Grace_isTrue(opresult4503)) {
  lineNumber = 1410
  var string4504 = new GraceString("compiling to native.");
  lineNumber = 1411
  var call4505 = callmethod(this,"log_verbose", [1], string4504);
  lineNumber = 1413
  lineNumber = 1411
  var string4506 = new GraceString("llc -o ");
  var opresult4508 = callmethod(string4506, "++", [1], var_modname);
  var string4509 = new GraceString(".s -relocation-model=pic ");
  var opresult4511 = callmethod(opresult4508, "++", [1], string4509);
  var opresult4513 = callmethod(opresult4511, "++", [1], var_modname);
  lineNumber = 1412
  var string4514 = new GraceString(".bc");
  var opresult4516 = callmethod(opresult4513, "++", [1], string4514);
  var_cmd = opresult4516;
  lineNumber = 1415
  lineNumber = 1413
  lineNumber = 1
  lineNumber = 1413
  var call4518 = callmethod(var_io,"system", [1], var_cmd);
  var call4519 = callmethod(call4518,"not", [0]);
  if (Grace_isTrue(call4519)) {
  lineNumber = 1414
  var string4520 = new GraceString("failed native assembly compilation");
  lineNumber = 1415
  lineNumber = 1
  lineNumber = 1414
  var call4521 = callmethod(var_io,"error", [0]);
  var call4522 = callmethod(call4521,"write", [1], string4520);
  lineNumber = 1415
  var string4523 = new GraceString("fatal.");
  lineNumber = 1416
  var call4524 = callmethod(this,"raise", [1], string4523);
  var if4517 = call4524;
}
  lineNumber = 1419
  lineNumber = 1418
  var string4525 = new GraceString("ld -ldl -o /dev/null 2>/dev/null");
  var_cmd = string4525;
  lineNumber = 1425
  lineNumber = 1419
  var call4527 = callmethod(var_io,"system", [1], var_cmd);
  if (Grace_isTrue(call4527)) {
  lineNumber = 1422
  lineNumber = 1420
  var string4528 = new GraceString("gcc -fPIC -Wl,--export-dynamic -o ");
  var opresult4530 = callmethod(string4528, "++", [1], var_modname);
  var string4531 = new GraceString(" -ldl ");
  var opresult4533 = callmethod(opresult4530, "++", [1], string4531);
  lineNumber = 1421
  var opresult4535 = callmethod(opresult4533, "++", [1], var_modname);
  var string4536 = new GraceString(".s");
  var opresult4538 = callmethod(opresult4535, "++", [1], string4536);
  var_cmd = opresult4538;
  var if4526 = opresult4538;
  } else {
  lineNumber = 1425
  lineNumber = 1423
  var string4539 = new GraceString("gcc -fPIC -Wl,--export-dynamic -o ");
  var opresult4541 = callmethod(string4539, "++", [1], var_modname);
  var string4542 = new GraceString(" ");
  var opresult4544 = callmethod(opresult4541, "++", [1], string4542);
  lineNumber = 1424
  var opresult4546 = callmethod(opresult4544, "++", [1], var_modname);
  var string4547 = new GraceString(".s");
  var opresult4549 = callmethod(opresult4546, "++", [1], string4547);
  var_cmd = opresult4549;
  var if4526 = opresult4549;
}
  lineNumber = 1428
  lineNumber = 1426
  lineNumber = 1
  lineNumber = 1426
  var call4551 = callmethod(var_io,"system", [1], var_cmd);
  var call4552 = callmethod(call4551,"not", [0]);
  if (Grace_isTrue(call4552)) {
  lineNumber = 1427
  var string4553 = new GraceString("failed native assembly compilation");
  lineNumber = 1428
  lineNumber = 1
  lineNumber = 1427
  var call4554 = callmethod(var_io,"error", [0]);
  var call4555 = callmethod(call4554,"write", [1], string4553);
  lineNumber = 1428
  var string4556 = new GraceString("fatal.");
  lineNumber = 1429
  var call4557 = callmethod(this,"raise", [1], string4556);
  var if4550 = call4557;
}
  var if4496 = if4550;
}
  lineNumber = 1431
  var string4558 = new GraceString("done.");
  lineNumber = 1432
  var call4559 = callmethod(this,"log_verbose", [1], string4558);
  lineNumber = 1434
  lineNumber = 1436
  lineNumber = 1432
  var string4561 = new GraceString("run");
  var opresult4563 = callmethod(var_buildtype, "==", [1], string4561);
  if (Grace_isTrue(opresult4563)) {
  lineNumber = 1434
  lineNumber = 1433
  var string4564 = new GraceString("lli ./");
  var opresult4566 = callmethod(string4564, "++", [1], var_modname);
  var string4567 = new GraceString(".bc");
  var opresult4569 = callmethod(opresult4566, "++", [1], string4567);
  var_cmd = opresult4569;
  lineNumber = 1434
  var call4570 = callmethod(var_io,"system", [1], var_cmd);
  var if4560 = call4570;
}
  var if4436 = if4560;
}
  return if4436
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["compile"] = func3766;
  return this;
}
var lineNumber = 0;
var stdout_txt = document.getElementById("stdout_txt");
var stdin_txt = document.getElementById("stdout_txt");
var stderr_txt = document.getElementById("stderr_txt");
var superDepth = null;
var invocationCount = 0;

function GraceString(s) {
    this._value = s;
}

GraceString.prototype = {
    methods: {
        "++": function(argcv, other) {
            var o = callmethod(other, "asString", [0]);
            return new GraceString(this._value + o._value);
        },
        "at": function(argcv, other) {
            var o = callmethod(other, 'asString', [0]);
            var idx = parseInt(o._value) - 1;
            return new GraceString(this._value.charAt(idx));
        },
        "size": function(argcv) {
            return new GraceNum(this._value.length);
        },
        "_escape": function(argcv) {
            var tmp = callmethod(this, "replace()with", [2],
                    new GraceString("\\"), new GraceString("\\\\"));
            tmp = callmethod(tmp, "replace()with", [2],
                    new GraceString("\""), new GraceString("\\\""));
            tmp = callmethod(tmp, "replace()with", [2],
                    new GraceString("\n"), new GraceString("\\n"));
            return tmp;
        },
        "replace()with": function(argcv, what, wth) {
            var s = this._value;
            var os = "";
            var sl = what._value.length;
            while ((i = s.indexOf(what._value)) != -1) {
                os += s.substr(0, i);
                os += wth._value;
                s = s.substr(i + sl);
            }
            os += s;
            return new GraceString(os);
        },
        "substringFrom()to": function(argcv, from, to) {
            var s = this._value;
            return new GraceString(s.substring(from._value - 1, to._value));
        },
        "asString": function(argcv) { return this ; },
        "encode": function(argcv) { return this ; }, // TODO this is a hack
        "==": function(argcv, other) {
            if (this == other)
                return new GraceBoolean(true);
            if (this.prototype == other.prototype
                    && this._value == other._value)
                return new GraceBoolean(true);
            return new GraceBoolean(false);
        },
        "!=": function(argcv, other) {
            var t = callmethod(this, "==", [1], other);
            return callmethod(t, "not", [0]);
        },
        "/=": function(argcv, other) {
            var t = callmethod(this, "==", [1], other);
            return callmethod(t, "not", [0]);
        },
        "iterator": function(argcv) {
            return new GraceStringIterator(this);
        },
        "ord": function(argcv) {
            return new GraceNum(this._value.charCodeAt(0));
        },
        "hashcode": function(argcv) {
            var hc = 0;
            for (var i=0; i<this._value.length; i++) {
                hc *= 23;
                hc += this._value.charCodeAt(i);
                hc %= 0x100000000;
            }
            return new GraceNum(hc);
        },
        "match()matchesBinding()else": function(argcv, pat, b, e) {
            return callmethod(pat, "matchObject()matchesBinding()else", [3],
                    this, b, e);
        },
        "matchObject()matchesBinding()else": function(argcv, obj, b, e) {
            var bl = callmethod(this, "==", [1], obj);
            if (Grace_isTrue(bl)) {
                return callmethod(b, "apply", [1], obj);
            } else {
                return callmethod(e, "apply", [1], obj);
            }
        },
        "indices": function(argcv) {
            var l = [];
            for (var i=1; i<=this._value.length; i++)
                l.push(new GraceNum(i));
            return new GraceList(l);
        },
        "asNumber": function(argcv) {
            return new GraceNum(0 + this._value);
        },
        "match": function(argcv, o) {
            if (Grace_isTrue(callmethod(this, "==", [1], o)))
                return new GraceSuccessfulMatch(o);
            return new GraceFailedMatch(o);
        },
    },
    className: "String"
};
GraceString.prototype.methods["[]"] = GraceString.prototype.methods["at"];

function GraceNum(n) {
    this._value = n;
}

GraceNum.prototype = {
    methods: {
        "+": function(argcv, other) {
            var s = this._value + other._value;
            return new GraceNum(s)
        },
        "*": function(argcv, other) {
            var s = this._value * other._value;
            return new GraceNum(s)
        },
        "/": function(argcv, other) {
            var s = this._value / other._value;
            return new GraceNum(s)
        },
        "-": function(argcv, other) {
            var s = this._value - other._value;
            return new GraceNum(s)
        },
        "%": function(argcv, other) {
            var s = this._value % other._value;
            return new GraceNum(s)
        },
        "++": function(argcv, other) {
            var t = callmethod(this, "asString", [0]);
            return callmethod(t, "++", [1], other);
        },
        "..": function(argcv, other) {
            var o = callmethod(other, "asString", [0]);
            var ub = parseInt(o._value);
            var l = [];
            for (var i=this._value; i<=ub; i++)
                l.push(new GraceNum(i));
            return new GraceList(l);
        },
        "<": function(argcv, other) {
            var s = this._value < other._value;
            return new GraceBoolean(s)
        },
        ">": function(argcv, other) {
            var s = this._value > other._value;
            return new GraceBoolean(s)
        },
        "<=": function(argcv, other) {
            var s = this._value <= other._value;
            return new GraceBoolean(s)
        },
        ">=": function(argcv, other) {
            var s = this._value >= other._value;
            return new GraceBoolean(s)
        },
        "prefix-": function(argcv) {
            return new GraceNum(-this._value)
        },
        "asString": function(argcv) {
            return new GraceString("" + this._value)
        },
        "==": function(argcv, other) {
            if (this == other)
                return new GraceBoolean(true);
            if (this.className == other.className
                    && this._value == other._value)
                return new GraceBoolean(true);
            return new GraceBoolean(false);
        },
        "!=": function(argcv, other) {
            var t = callmethod(this, "==", [1], other);
            return callmethod(t, "not", [0]);
        },
        "/=": function(argcv, other) {
            var t = callmethod(this, "==", [1], other);
            return callmethod(t, "not", [0]);
        },
        "hashcode": function(argcv) {
            return new GraceNum(parseInt("" + (this._value * 10)));
        },
        "match()matchesBinding()else": function(argcv, pat, b, e) {
            return callmethod(pat, "matchObject()matchesBinding()else", [3],
                    this, b, e);
        },
        "matchObject()matchesBinding()else": function(argcv, obj, b, e) {
            var bl = callmethod(this, "==", [1], obj);
            if (Grace_isTrue(bl)) {
                return callmethod(b, "apply", [1], obj);
            } else {
                return callmethod(e, "apply", [1], obj);
            }
        },
        "inBase": function(argcv, other) {
            var mine = this._value;
            var base = other._value;
            var symbols = "0123456789abcdefghijklmnopqrstuvwxyz";
            var str = "";
            var before = "";
            if (mine < 0) {
                before = '-';
                mine = -mine;
            }
            while (mine != 0) {
                var r = mine % base;
                str = symbols[r] + str;
                mine = (mine - r) / base;
            }
            if (before)
                str = before + str;
            return new GraceString(str); 
        },
        "truncate": function(argcv) {
            if (this._value < 0)
                return new GraceNum(Math.ceil(this._value));
            return new GraceNum(Math.floor(this._value));
        },
        "match": function(argcv, o) {
            if (Grace_isTrue(callmethod(this, "==", [1], o)))
                return new GraceSuccessfulMatch(o);
            return new GraceFailedMatch(o);
        },
    },
    className: "Number",
};

function GraceBoolean(b) {
    this._value = b;
}
GraceBoolean.prototype = {
    methods: {
        "not": function(argcv) {
            return new GraceBoolean(!this._value)
        },
        "prefix!": function(argcv) {
            return new GraceBoolean(!this._value)
        },
        "&": function(argcv, other) {
            var s = this._value && other._value;
            return new GraceBoolean(s)
        },
        "|": function(argcv, other) {
            var s = this._value || other._value;
            return new GraceBoolean(s)
        },
        "&&": function(argcv, other) {
            if (!this._value)
                return this;
            if (other instanceof GraceBoolean)
                return other;
            if (other.superobj instanceof GraceBoolean)
                return other;
            var o = callmethod(other, "apply", [0]);
            return o;
        },
        "||": function(argcv, other) {
            if (this._value)
                return this;
            if (other instanceof GraceBoolean)
                return other;
            if (other.superobj instanceof GraceBoolean)
                return other;
            var o = callmethod(other, "apply", [0]);
            return o;
        },
        "andAlso": function(argcv, other) {
            if (this._value) {
                return callmethod(other, "apply", [0]);
            }
            return this;
        },
        "orElse": function(argcv, other) {
            if (!this._value) {
                return callmethod(other, "apply", [0]);
            }
            return this;
        },
        "asString": function(argcv) {
            return new GraceString("" + this._value)
        },
        "==": function(argcv, other) {
            if (this == other)
                return new GraceBoolean(true);
            if (this.prototype == other.prototype
                    && this._value == other._value)
                return new GraceBoolean(true);
            return new GraceBoolean(false);
        },
        "!=": function(argcv, other) {
            var t = callmethod(this, "==", [1], other);
            return callmethod(t, "not", [0]);
        },
        "/=": function(argcv, other) {
            var t = callmethod(this, "==", [1], other);
            return callmethod(t, "not", [0]);
        },
        "match()matchesBinding()else": function(argcv, pat, b, e) {
            return callmethod(pat, "matchObject()matchesBinding()else", [3],
                    this, b, e);
        },
        "match": function(argcv, o) {
            if (Grace_isTrue(callmethod(this, "==", [1], o)))
                return new GraceSuccessfulMatch(o);
            return new GraceFailedMatch(o);
        },
    },
    className: "Boolean",
};
function GraceList(l) {
    this._value = l;
}
GraceList.prototype = {
    methods: {
        "push": function(argcv, val) {
            this._value.push(val);
        },
        "size": function(argcv) {
            //dbg("called size: " + this._value.length);
            return new GraceNum(this._value.length);
        },
        "pop": function(argcv) {
            return this._value.pop();
        },
        "at": function(argcv, other) {
            var o = callmethod(other, "asString", [0]);
            var idx = parseInt(o._value);
            return this._value[idx-1];
        },
        "[]": function(argcv, other) {
            var o = callmethod(other, "asString", [0]);
            var idx = parseInt(o._value);
            return this._value[idx-1];
        },
        "at()put": function(argcv, idx, val) {
            this._value[idx._value-1] = val;
        },
        "[]:=": function(argcv, idx, val) {
            this._value[idx._value-1] = val;
        },
        "asString": function(argcv) {
            var s = "[";
            s += this._value.length + ": "
            for (var i=0; i<this._value.length; i++) {
                var v = this._value[i];
                if (v.methods["asString"])
                    s += callmethod(v, "asString", [0])._value + ", ";
                else {
                    var q = dbgp(v, 2);
                    s += "((" + q + ")), "
                }
            }
            s += "]";
            return new GraceString(s);
        },
        "contains": function(argcv, other) {
            for (var i=0; i<this._value.length; i++) {
                var v = this._value[i];
                if (Grace_isTrue(callmethod(v, "==", [1], other)))
                    return new GraceBoolean(true);
            }
            return new GraceBoolean(false);
        },
        "==": function(argcv, other) {
            if (this == other)
                return new GraceBoolean(true);
            return new GraceBoolean(false);
        },
        "!=": function(argcv, other) {
            var t = callmethod(this, "==", [1], other);
            return callmethod(t, "not", [0]);
        },
        "/=": function(argcv, other) {
            var t = callmethod(this, "==", [1], other);
            return callmethod(t, "not", [0]);
        },
        "match()matchesBinding()else": function(argcv, pat, b, e) {
            return callmethod(pat, "matchObject()matchesBinding()else", [3],
                    this, b, e);
        },
        "prepended": function(argcv, item) {
            var l = [item];
            for (var i=0; i<this._value.length; i++)
                l.push(this._value[i]);
            return new GraceList(l);
        },
        "iterator": function(argcv) {
            return new GraceListIterator(this._value);
        },
        "indices": function(argcv) {
            var l = [];
            for (var i=1; i<=this._value.length; i++)
                l.push(new GraceNum(i));
            return new GraceList(l);
        },
        "first": function(argcv) {
            return this._value[0];
        },
        "last": function(argcv) {
            return this._value[this._value.length-1];
        },
    },
    className: "List",
};

function Grace_isTrue(o) {
    if (o._value === false)
        return false;
    if (o._value === true)
        return true;
    if (o.superobj != null)
        return Grace_isTrue(o.superobj);
}

function Grace_egal(o1, o2) {
    if (o1 == o2)
        return new GraceBoolean(true);
    if (o1.mutable || o2.mutable)
        return new GraceBoolean(false);
    var t1 = classType(o1);
    var t2 = classType(o2);
    var tm = callmethod(callmethod(t1, "match", [1], o2),
            "&&", [1], callmethod(t2, "match", [1], o1));
    if (!Grace_isTrue(tm))
        return new GraceBoolean(false);
    for (d in o1.methods) {
        if (d == "outer")
            continue;
        var meth = o1.methods[d];
        var tmp = o2;
        while (tmp != null && tmp != undefined
                && typeof(tmp.methods[d]) != "function")
            tmp = tmp.superobj;
        if (tmp == null || tmp == undefined)
            return new GraceBoolean(false);
        if (meth == tmp.methods[d])
            continue;
        if (meth.def && !tmp.methods[d].def)
            return new GraceBoolean(false);
        if (!meth.def && meth != tmp.methods[d])
            return new GraceBoolean(false);
        if (o1.data[d] && !tmp.data[d])
            return new GraceBoolean(false);
        var leftdata = o1.data[d];
        var rightdata = tmp.data[d];
        if (!Grace_isTrue(callmethod(leftdata, "==", [1], rightdata)))
            return new GraceBoolean(false);
    }
    return new GraceBoolean(true);
}

function Grace_print(obj) {
    var s = callmethod(obj, "asString", [0]);
    stdout_txt.value += s._value + "\n";
    return var_nothing;
}
function Grace_length(obj) {
    return new GraceNum(obj._value.length);
}
function GraceObject() {

}
GraceObject.prototype = {
    methods: {
        "==": function(argcv, o) {
            return new GraceBoolean(this == o);
        },
        "!=": function(argcv, o) {
            var b = this.methods["=="].call(this, o);
            return b.methods["not"].call(b);
        },
        "/=": function(argcv, o) {
            var b = this.methods["=="].call(this, o);
            return b.methods["not"].call(b);
        },
        "asString": function(argcv) {
            var s = "object {";
            for (var i in this.data) {
                s += "var " + i + " = " + this.data[i]._value;
            }
            return new GraceString(s + "}");
        },
    },
    data: {}
};
GraceObjectMethods = {
    "==": function(argcv, o) {
        return Grace_egal(this, o);
    },
    "!=": function(argcv, other) {
        var t = callmethod(this, "==", [1], other);
        return callmethod(t, "not", [0]);
    },
    "/=": function(argcv, other) {
        var t = callmethod(this, "==", [1], other);
        return callmethod(t, "not", [0]);
    },
    "asString": function(argcv) {
        var s = "object {";
        for (var i in this.data) {
            s += "var " + i + " = " + this.data[i]._value + " ";
        }
        return new GraceString(s + "}");
    },
};
function Grace_allocObject() {
    return {
        methods: {
            "==": GraceObjectMethods["=="],
            "!=": GraceObjectMethods["!="],
            "/=": GraceObjectMethods["/="],
            "asString": GraceObjectMethods["asString"],
        },
        superobj: null,
        data: {},
        className: "Object",
        mutable: false,
    };
}
function GraceMatchResult(result, bindings) {
    this.data["result"] = result;
    if (bindings == undefined)
        bindings = new GraceList([]);
    this.data["bindings"] = bindings;
    this._value = this.superobj._value;
}
GraceMatchResult.prototype = Grace_allocObject();
GraceMatchResult.prototype.methods.result = function() {
    return this.data["result"];
}
GraceMatchResult.prototype.methods.bindings = function() {
    return this.data["bindings"];
}
GraceMatchResult.prototype.methods.asString = function() {
    var s = ""
    if (Grace_isTrue(this))
        s = "SuccessfulMatch(result = ";
    else
        s = "FailedMatch(result = ";
    s += callmethod(this.data["result"], "asString", [0])._value;
    s += ", bindings = ";
    s += callmethod(this.data["bindings"], "asString", [0])._value;
    s += ")";
    return new GraceString(s);
}
function GraceSuccessfulMatch(result, bindings) {
    this.superobj = new GraceBoolean(true);
    this.data = {};
    this.data["result"] = result;
    if (bindings == undefined)
        bindings = new GraceList([]);
    this.data["bindings"] = bindings;
    this._value = this.superobj._value;
}
function GraceFailedMatch(result, bindings) {
    this.superobj = new GraceBoolean(false);
    this.data = {};
    this.data["result"] = result;
    if (bindings == undefined)
        bindings = new GraceList([]);
    this.data["bindings"] = bindings;
    this._value = this.superobj._value;
}
GraceSuccessfulMatch.prototype = GraceMatchResult.prototype;
GraceFailedMatch.prototype = GraceMatchResult.prototype;

function GraceType(name) {
    this.name = name;
    this.className = name;
    this.typeMethods = [];
}
GraceType.prototype = {
    methods: {
        "match": function(argcv, other) {
            var i;
            for (i=0; i<this.typeMethods.length; i++) {
                var m = this.typeMethods[i];
                if (!other.methods[m]) {
                    var tmp = other;
                    var found = false;
                    while (tmp.superobj != null) {
                        tmp = tmp.superobj;
                        if (tmp.methods[m]) {
                            found = true;
                            break
                        }
                    }
                    if (!found)
                        return new GraceFailedMatch(other);
                }
            }
            return new GraceSuccessfulMatch(other,
                    new GraceList([]));
        },
    },
    typeMethods: [],
    className: "Type",
};
function classType(obj) {
    var t = new GraceType(obj.className);
    var o = obj;
    while (o != null) {
        var i;
        for (m in o.methods)
            t.typeMethods.push(m);
        o = o.superobj;
    }
    return t;
}
var var_String = classType(new GraceString(""));
var var_Number = classType(new GraceNum(1));
var var_Boolean = classType(new GraceBoolean(true));
var var_Type = classType(var_Boolean);
var type_String = var_String;
var type_Number = var_Number;
var type_Boolean = var_Boolean;
var var_Block = new GraceType("Block");
var_Block.typeMethods.push("apply");
var_Block.typeMethods.push("applyIndirectly");
var_Block.typeMethods.push("match");
var type_Block = var_Block;
var var_None = new GraceType("None");
var_None.typeMethods.push("==");
var_None.typeMethods.push("!=");
var type_None = var_None;
var var_Void = var_None;
var type_Void = var_None;
var var_MatchFailed = Grace_allocObject();
var_HashMap = { methods: { 'new': function() { return new GraceHashMap(); } } };
function GraceHashMap() {
    this.table = {};
    this.size = 0;
}
GraceHashMap.prototype = Grace_allocObject();
GraceHashMap.prototype.methods.put = function(argcv, k, v) {
    var hc = callmethod(k, "hashcode", [0]);
    hc = hc._value;
    while (this.table[hc]) {
        if (Grace_isTrue(callmethod(this.table[hc].key, "==", [1], k)))
            break;
        hc++;
    }
    this.size++;
    this.table[hc] = {key: k, value: v};
    return this;
}
GraceHashMap.prototype.methods.get = function(argcv, k) {
    var hc = callmethod(k, "hashcode", [0]);
    hc = hc._value;
    while (this.table[hc]) {
        if (Grace_isTrue(callmethod(this.table[hc].key, "==", [1], k)))
            return this.table[hc].value;
        hc++;
    }
    stderr_txt.value += "Key not found in HashMap at line " + lineNumber + ".\n";
    for (var i=callStack.length; i>0; i--)
        stderr_txt.value += "  From call to " + callStack[i-1] + ".\n";
    throw "Key not found in HashMap";
}
GraceHashMap.prototype.methods.contains = function(argcv, k) {
    var hc = callmethod(k, "hashcode", [0]);
    hc = hc._value;
    while (this.table[hc]) {
        if (Grace_isTrue(callmethod(this.table[hc].key, "==", [1], k)))
            return new GraceBoolean(true);
        hc++;
    }
    return new GraceBoolean(false);
}
GraceHashMap.prototype.methods.asString = function() {
    var s = "[{";
    var first = true;
    for (h in this.table) {
        p = this.table[h];
        if (first)
            first = false;
        else
            s += ", ";
        s += callmethod(p.key, "asString", [0])._value;
        s += ": ";
        s += callmethod(p.value, "asString", [0])._value;
    }
    s += "}]";
    return new GraceString(s);
}
function GraceListIterator(l) {
    this._value = l;
    this._index = 0;
    this._max = l.length;
}
GraceListIterator.prototype = Grace_allocObject();
GraceListIterator.prototype.methods.havemore = function() {
    return new GraceBoolean(this._index < this._max);
}
GraceListIterator.prototype.methods.next = function() {
    var rv = this._value[this._index];
    this._index++;
    return rv;
}
function GraceStringIterator(s) {
    this._value = s._value;
    this._index = 0;
    this._max = s._value.length;
}
GraceStringIterator.prototype = Grace_allocObject();
GraceStringIterator.prototype.methods.havemore = function() {
    return new GraceBoolean(this._index < this._max);
}
GraceStringIterator.prototype.methods.next = function() {
    var rv = new GraceString(this._value.charAt(this._index));
    this._index++;
    return rv;
}

var stdout = Grace_allocObject();
stdout.methods.write = function(s) {
    stdout_txt.value += s._value;
}
var stdin = Grace_allocObject();
stdin.methods.read = function() {
    return new GraceString(stdin_txt.value);
}
stdin.methods.iterator = function() {
    return callmethod(new GraceString(stdin_txt.value), "iterator", [0]);
}
var stderr = Grace_allocObject();
stderr.methods.write = function(s) {
    stderr_txt.value += s._value;
}
stdout.methods.close = function() {};
stderr.methods.close = function() {};
stdin.methods.close = function() {};
function gracecode_io() {
    this.methods.output = function() {
        return this._output;        
    };
    this._output = stdout;
    this.methods.input = function() {
        return this._input;        
    };
    this._input = stdin;
    this.methods.error = function() {
        return this._error;        
    };
    this._error = stderr;
    return this;
}

function gracecode_sys() {
    this.methods.argv = function() {
        return new GraceList([
            new GraceString("minigrace"),
            new GraceString("--target"),
            new GraceString("js"),
        ]);
    };
    this.methods.exit = function() {
        throw "SystemExit";
    };
    return this;
}

function gracecode_unicode() {
    this.methods = {
        isLetter: function(argcv, s) {
            if (typeof s._value == "string")
                var i = s._value.charCodeAt(0);
            else
                var i = s._value;
            return new GraceBoolean((i >= 65 && i <= 90) || (i >= 97 && i <= 122));
        },
        isNumber: function(argcv, s) {
            if (typeof s._value == "string")
                var i = s._value.charCodeAt(0);
            else
                var i = s._value;
            return new GraceBoolean((i >= 48 && i <= 57));
        },
        isSymbolMathematical: function(argcv, ord) {
            var s = ord._value
            if ((s == 45) || (s == 43) || (s == 47) || (s == 42)
                    || s == 62 || s == 60 || s == 61 || s == 126) {
                return new GraceBoolean(true);
            }
            return new GraceBoolean(false);
        },
        isSeparator: function(argcv, s) {
            if (s == " ") {
                return new GraceBoolean(true);
            }
            return new GraceBoolean(false);
        },
        isControl: function(argcv, s) {
            return new GraceBoolean(false);
        },
        name: function(argcv, s) {
            return new GraceString("UNICODE CHARACTER " + s.methods["ord"].call(s)._value + " (no Unicode character database; names unknown)");
        },
        create: function(argcv, n) {
            return new GraceString(String.fromCharCode(n._value));
        },
    };
    return this;
}

var util_module = false;
function gracecode_util() {
    if (util_module != false)
        return util_module;
    this.methods = {
        outfile: function(argcv) {
            return stdout;
        },
        infile: function(argcv) {
            return stdin;
        },
        parseargs: function(argcv) {
        },
        target: function(argcv) {
            return new GraceString(document.getElementById('mode').value);
        },
        modname: function(argcv) {
            return new GraceString("USER");
        },
        setline: function(argcv, i) {
            lineNumber = i._value;
            this._linenum = i;
        },
        linenum: function(argcv) {
            return this._linenum;
        },
        linepos: function(argcv) {
            return this._linepos;
        },
        setPosition: function(argcv, l, p) {
            lineNumber = l._value;
            this._linenum = l;
            this._linepos = p;
        },
        buildtype: function(argcv) {
            return new GraceString("normal");
        },
        runmode: function(argcv) {
            return new GraceString("normal");
        },
        gracelibPath: function(argcv) {
            return new GraceString("gracelib.h");
        },
        verbosity: function(argcv) {
            return new GraceNum(30);
        },
        log_verbose: function(argcv, s) {
            stderr_txt.value += "minigrace: " + s._value + "\n";
        },
        outprint: function(argcv, s) {
            stdout_txt.value += s._value + "\n";
        },
        engine: function(argcv) {
            return new GraceString("js");
        },
        debug: function(argcv, s) {
            dbg(s._value);
        },
        type_error: function(argcv, s) {
            stderr_txt.value += "<USER>:" + this._linenum._value + ":" +
                this._linepos._value + ": type error: " + s._value;
            throw "ErrorExit";
        },
        syntax_error: function(argcv, s) {
            stderr_txt.value += "<USER>:" + this._linenum._value + ":" +
                this._linepos._value + ": syntax error: " + s._value;
            throw "ErrorExit";
        },
        warning: function(argcv, s) {
            stderr_txt.value += "<USER>:" + this._linenum._value + ":" +
                this._linepos._value + ": warning: " + s._value;
        },
        hex: function(argcv, n) {
            var hexdigits = "0123456789abcdef"
            var s = ""
            var num = n._value
            while (num > 0) {
                var i = num % 16
                s = s + hexdigits.charAt(i)
                num = num - i
                num = num / 16
            }
            return new GraceString(s)
        },
        join: function(argcv, joiner, iterable) {
            var s = "";
            var ind = callmethod(iterable, "indices", [0]);
            for (var i=0; i<ind._value.length; i++) {
                if (i > 0)
                    s += ",";
                s += callmethod(callmethod(iterable, "at", [1], new GraceNum(i + 1)),
                        "asString", [0])._value;
            }
            return new GraceString(s);
        },
        "runOnNew()else": function(argcv, b,e) {
            return callmethod(b, "apply", [0]);
        },
        "extensions": function(argcv) {
            return extensionsMap;
        }
    };
    this._linenum = new GraceNum(1);
    this._linepos = new GraceNum(1);
    util_module = this;
    return this;
}
function checkmethodcall(func, methname, obj, args) {
    var i = 0;
    var pt = func.paramTypes;
    for (i=0; i<args.length, i<pt.length; i++) {
        var p = pt[i];
        if (!p || p.length == 0)
            continue;
        var t = p[0];
        if (!Grace_isTrue(callmethod(t, "match", [1], args[i]))) {
            stderr_txt.value += "Runtime type error: expected " + t.className + " for argument " + p[1] + " (" + (i+1) + ") of " + methname + ", called at line " + lineNumber + ".\n";
            for (var i=callStack.length; i>0; i--)
                stderr_txt.value += "  From call to " + callStack[i-1] + ".\n";
            throw "Runtime type error";
        }
    }
}
var callStack = [];
var overrideReceiver = null;
function callmethodsuper(obj, methname, argcv) {
    overrideReceiver = obj;
    var args = Array.prototype.slice.call(arguments, 1);
    args.splice(0, 0, superDepth.superobj);
    return callmethod.apply(null, args);
}
function callmethod(obj, methname, argcv) {
    var meth = obj.methods[methname];
    var origSuperDepth = superDepth;
    superDepth = obj;
    if (typeof(meth) != "function") {
        var s = obj
        while (s.superobj != null) {
            s = s.superobj;
            meth = s.methods[methname];
            if (typeof(meth) == "function") {
                superDepth = s;
                break;
            }
        }
    }
    if (typeof(meth) != "function") {
        stderr_txt.value += "No such method '" + methname + "' on " + obj.className + ", called at line " + lineNumber + ".\n";
        for (var i=callStack.length; i>0; i--)
            stderr_txt.value += "  From call to " + callStack[i-1] + ".\n";
        stderr_txt.value += "Methods are:\n";
        for (var mn in obj.methods) {
            stderr_txt.value += "  " + mn + "\n";
        }
        throw "No such method '" + methname + "'";
    }
    if (overrideReceiver != null) {
        obj = overrideReceiver;
        overrideReceiver = null;
    }
    callStack.push(obj.className + "." + methname + " at line " + lineNumber);
    var args = Array.prototype.slice.call(arguments, 3);
    if (meth.paramTypes)
        checkmethodcall(meth, methname, obj, args);
    args.unshift(argcv)
    var ret = meth.apply(obj, args);
    superDepth = origSuperDepth;
    callStack.pop();
    return ret;
}
function matchCase(obj, cases, elsecase) {
    var i = 0;
    for (i = 0; i<cases.length; i++) {
        var ret = callmethod(cases[i], "match", [1], obj);
        if (Grace_isTrue(ret))
            return callmethod(ret, "result", [0]);
    }
    if (elsecase != false)
        return callmethod(elsecase, "apply", [1], obj);
    return new GraceFailedMatch(obj);
}
function ReturnException(v, target) {
    this.returnvalue = v;
    this.target = target;
}
ReturnException.prototype = {
    'exctype': 'return',
};
var importedModules = {};
function do_import(modname, func) {
    if (importedModules[modname]) {
        return importedModules[modname];
    }
    var f = func.call(Grace_allocModule(modname));
    importedModules[modname] = f;
    return f;
}
function dbgp(o, d) {
    if (d == undefined)
        d = 0;
    var i;
    var ind = "";
    for (i=0; i<d; i++)
        ind += "  ";
    if (typeof(o) == "function") {
        return "function";
    }
    if (typeof(o) == "number") {
        return "" + o;
    }
    if (typeof(o) == "boolean") {
        return "" + o;
    }
    if (typeof(o) == "string") {
        return '"' + o + '"';
    }
    var s = "Object{\n";
    for (var t in o) {
        s += ind + "  " + t + ": " + dbgp(o[t], d + 1) + "\n";
    }
    return s + ind + "}";
}
function dbg(o) {
    stderr_txt.value += dbgp(o, 0) + "\n";
}
var extensionsMap = callmethod(var_HashMap, "new", [0]);
callmethod(extensionsMap, "put", [2], new GraceString("ShadowingWarnOnly"), extensionsMap);
var var_nothing = new GraceObject();
var_nothing.methods.asString = function() {return new GraceString("noSuchValue");}
var var_noSuchValue = var_nothing;
var ellipsis = Grace_allocObject();
ellipsis.methods.asString = function() {return new GraceString("ellipsis");}
var Grace_native_prelude = Grace_allocObject();
var Grace_prelude = Grace_native_prelude;
var var___95__prelude = Grace_native_prelude;
Grace_prelude.methods["while()do"] = function(argcv, c, b) {
    while (Grace_isTrue(callmethod(c, "apply", [0]))) {
        callmethod(b, "apply", [0]);
    }
    return var_nothing;
}
Grace_prelude.methods["for()do"] = function(argcv, c, b) {
    var iter = callmethod(c, "iterator", [0]);
    while (Grace_isTrue(callmethod(iter, "havemore", [0]))) {
        var val = callmethod(iter, "next", [0]);
        callmethod(b, "apply", [1], val);
    }
    return var_nothing;
}
Grace_prelude.methods["_methods"] = function() {
    var meths = [];
    for (m in this.methods)
        meths.push(new GraceString(m));
    var l = new GraceList(meths);
    return l;
}
function Grace_allocModule(modname) {
    var mod = Grace_allocObject();
    mod.methods.outer = function() {
        return this.outer;
    }
    mod.outer = Grace_prelude;
    mod.className = "module<" + modname + ">";
    return mod;
}
function gracecode_lexer() {
  lineNumber = 2
// Import of io
  var var_io = do_import("io", gracecode_io);
  lineNumber = 3
// Import of sys
  var var_sys = do_import("sys", gracecode_sys);
  lineNumber = 4
// Import of util
  var var_util = do_import("util", gracecode_util);
  lineNumber = 7
// Import of unicode
  var var_unicode = do_import("unicode", gracecode_unicode);
  lineNumber = 18
var func0 = function(argcv) {
  var curarg = 1;
  var var_c = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 9
  lineNumber = 8
  var string2 = new GraceString("0");
  var string3 = new GraceString("1");
  var string4 = new GraceString("2");
  var string5 = new GraceString("3");
  var string6 = new GraceString("4");
  var string7 = new GraceString("5");
  var string8 = new GraceString("6");
  var string9 = new GraceString("7");
  var string10 = new GraceString("8");
  lineNumber = 9
  var string11 = new GraceString("9");
  var string12 = new GraceString("a");
  var string13 = new GraceString("b");
  var string14 = new GraceString("c");
  var string15 = new GraceString("d");
  var string16 = new GraceString("e");
  var string17 = new GraceString("f");
  var array1 = new GraceList([
string2,
string3,
string4,
string5,
string6,
string7,
string8,
string9,
string10,
string11,
string12,
string13,
string14,
string15,
string16,
string17,
]);

  var var_chars = array1;
  lineNumber = 11
  lineNumber = 10
  var var_ret = new GraceNum(0);
  lineNumber = 12
  lineNumber = 11
  var var_i = new GraceNum(0);
  lineNumber = 17
  lineNumber = 12
  lineNumber = 17
  var block18 = Grace_allocObject();
  block18.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block18.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block18.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block18.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block18.receiver = this;
  block18.className = 'block<lexer:17>';
  block18.real = function(
var_cr
) {
  lineNumber = 15
  lineNumber = 16
  lineNumber = 13
  var opresult21 = callmethod(var_cr, "==", [1], var_c);
  if (Grace_isTrue(opresult21)) {
  lineNumber = 15
  lineNumber = 14
  var_ret = var_i;
  var if19 = var_i;
}
  lineNumber = 17
  lineNumber = 16
  var opresult23 = callmethod(var_i, "+", [1], new GraceNum(1));
  var_i = opresult23;
  return opresult23;
};
  var call24 = callmethod(Grace_prelude,"for()do", [1, 1], var_chars, block18);
  lineNumber = 18
  return var_ret
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["hexdecchar"] = func0;
  lineNumber = 659
  var obj25 = Grace_allocObject();
  obj25.outer = this;
    var reader_lexer_outer26 = function() {
    return this.outer;
  }
  obj25.methods["outer"] = reader_lexer_outer26;
function obj_init_25() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func27 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 24
  lineNumber = 23
  var var_lineNumber = new GraceNum(1);
  lineNumber = 25
  lineNumber = 24
  var var_linePosition = new GraceNum(0);
  lineNumber = 26
  lineNumber = 25
  var var_startPosition = new GraceNum(1);
  lineNumber = 28
  lineNumber = 26
  var var_indentLevel = new GraceNum(0);
  lineNumber = 28
  lineNumber = 1
  var obj28 = Grace_allocObject();
  obj28.outer = this;
    var reader_lexer_outer29 = function() {
    return this.outer;
  }
  obj28.methods["outer"] = reader_lexer_outer29;
function obj_init_28() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func30 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj31 = Grace_allocObject();
  obj31.outer = this;
    var reader_lexer_outer32 = function() {
    return this.outer;
  }
  obj31.methods["outer"] = reader_lexer_outer32;
function obj_init_31() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 29
  var string33 = new GraceString("identifier");
  obj31.data["kind"] = string33;
    var reader_lexer_kind34 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind34.def = true;
  obj31.methods["kind"] = reader_lexer_kind34;
  lineNumber = 30
  obj31.data["value"] = var_s;
    var reader_lexer_value35 = function() {
    return this.data["value"];
  }
  reader_lexer_value35.def = true;
  obj31.methods["value"] = reader_lexer_value35;
  lineNumber = 31
  obj31.data["line"] = var_lineNumber;
    var reader_lexer_line36 = function() {
    return this.data["line"];
  }
  reader_lexer_line36.def = true;
  obj31.methods["line"] = reader_lexer_line36;
  lineNumber = 32
  obj31.data["indent"] = var_indentLevel;
    var reader_lexer_indent37 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent37.def = true;
  obj31.methods["indent"] = reader_lexer_indent37;
  lineNumber = 33
  obj31.data["linePos"] = var_startPosition;
    var reader_lexer_linePos38 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos38.def = true;
  obj31.methods["linePos"] = reader_lexer_linePos38;
  superDepth = origSuperDepth;
}
obj_init_31.apply(obj31, []);
  return obj31
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj28.methods["new"] = func30;
  superDepth = origSuperDepth;
}
obj_init_28.apply(obj28, []);
  var var_IdentifierToken = obj28;
  lineNumber = 35
  lineNumber = 1
  var obj39 = Grace_allocObject();
  obj39.outer = this;
    var reader_lexer_outer40 = function() {
    return this.outer;
  }
  obj39.methods["outer"] = reader_lexer_outer40;
function obj_init_39() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func41 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj42 = Grace_allocObject();
  obj42.outer = this;
    var reader_lexer_outer43 = function() {
    return this.outer;
  }
  obj42.methods["outer"] = reader_lexer_outer43;
function obj_init_42() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 36
  var string44 = new GraceString("string");
  obj42.data["kind"] = string44;
    var reader_lexer_kind45 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind45.def = true;
  obj42.methods["kind"] = reader_lexer_kind45;
  lineNumber = 37
  obj42.data["value"] = var_s;
    var reader_lexer_value46 = function() {
    return this.data["value"];
  }
  reader_lexer_value46.def = true;
  obj42.methods["value"] = reader_lexer_value46;
  lineNumber = 38
  obj42.data["line"] = var_lineNumber;
    var reader_lexer_line47 = function() {
    return this.data["line"];
  }
  reader_lexer_line47.def = true;
  obj42.methods["line"] = reader_lexer_line47;
  lineNumber = 39
  obj42.data["indent"] = var_indentLevel;
    var reader_lexer_indent48 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent48.def = true;
  obj42.methods["indent"] = reader_lexer_indent48;
  lineNumber = 40
  obj42.data["linePos"] = var_startPosition;
    var reader_lexer_linePos49 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos49.def = true;
  obj42.methods["linePos"] = reader_lexer_linePos49;
  superDepth = origSuperDepth;
}
obj_init_42.apply(obj42, []);
  return obj42
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj39.methods["new"] = func41;
  superDepth = origSuperDepth;
}
obj_init_39.apply(obj39, []);
  var var_StringToken = obj39;
  lineNumber = 42
  lineNumber = 1
  var obj50 = Grace_allocObject();
  obj50.outer = this;
    var reader_lexer_outer51 = function() {
    return this.outer;
  }
  obj50.methods["outer"] = reader_lexer_outer51;
function obj_init_50() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func52 = function(argcv) {
  var curarg = 1;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj53 = Grace_allocObject();
  obj53.outer = this;
    var reader_lexer_outer54 = function() {
    return this.outer;
  }
  obj53.methods["outer"] = reader_lexer_outer54;
function obj_init_53() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 43
  var string55 = new GraceString("octets");
  obj53.data["kind"] = string55;
    var reader_lexer_kind56 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind56.def = true;
  obj53.methods["kind"] = reader_lexer_kind56;
  lineNumber = 44
  obj53.data["value"] = var_s;
    var reader_lexer_value57 = function() {
    return this.data["value"];
  }
  reader_lexer_value57.def = true;
  obj53.methods["value"] = reader_lexer_value57;
  lineNumber = 45
  obj53.data["line"] = var_lineNumber;
    var reader_lexer_line58 = function() {
    return this.data["line"];
  }
  reader_lexer_line58.def = true;
  obj53.methods["line"] = reader_lexer_line58;
  lineNumber = 46
  obj53.data["indent"] = var_indentLevel;
    var reader_lexer_indent59 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent59.def = true;
  obj53.methods["indent"] = reader_lexer_indent59;
  lineNumber = 47
  obj53.data["linePos"] = var_startPosition;
    var reader_lexer_linePos60 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos60.def = true;
  obj53.methods["linePos"] = reader_lexer_linePos60;
  superDepth = origSuperDepth;
}
obj_init_53.apply(obj53, []);
  return obj53
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj50.methods["new"] = func52;
  superDepth = origSuperDepth;
}
obj_init_50.apply(obj50, []);
  var var_OctetsToken = obj50;
  lineNumber = 55
  lineNumber = 1
  var obj61 = Grace_allocObject();
  obj61.outer = this;
    var reader_lexer_outer62 = function() {
    return this.outer;
  }
  obj61.methods["outer"] = reader_lexer_outer62;
function obj_init_61() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func63 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj64 = Grace_allocObject();
  obj64.outer = this;
    var reader_lexer_outer65 = function() {
    return this.outer;
  }
  obj64.methods["outer"] = reader_lexer_outer65;
function obj_init_64() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 50
  var string66 = new GraceString("lbrace");
  obj64.data["kind"] = string66;
    var reader_lexer_kind67 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind67.def = true;
  obj64.methods["kind"] = reader_lexer_kind67;
  lineNumber = 51
  var string68 = new GraceString("{");
  obj64.data["value"] = string68;
    var reader_lexer_value69 = function() {
    return this.data["value"];
  }
  reader_lexer_value69.def = true;
  obj64.methods["value"] = reader_lexer_value69;
  lineNumber = 52
  obj64.data["line"] = var_lineNumber;
    var reader_lexer_line70 = function() {
    return this.data["line"];
  }
  reader_lexer_line70.def = true;
  obj64.methods["line"] = reader_lexer_line70;
  lineNumber = 53
  obj64.data["indent"] = var_indentLevel;
    var reader_lexer_indent71 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent71.def = true;
  obj64.methods["indent"] = reader_lexer_indent71;
  lineNumber = 54
  obj64.data["linePos"] = var_startPosition;
    var reader_lexer_linePos72 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos72.def = true;
  obj64.methods["linePos"] = reader_lexer_linePos72;
  superDepth = origSuperDepth;
}
obj_init_64.apply(obj64, []);
  return obj64
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj61.methods["new"] = func63;
  superDepth = origSuperDepth;
}
obj_init_61.apply(obj61, []);
  var var_LBraceToken = obj61;
  lineNumber = 62
  lineNumber = 1
  var obj73 = Grace_allocObject();
  obj73.outer = this;
    var reader_lexer_outer74 = function() {
    return this.outer;
  }
  obj73.methods["outer"] = reader_lexer_outer74;
function obj_init_73() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func75 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj76 = Grace_allocObject();
  obj76.outer = this;
    var reader_lexer_outer77 = function() {
    return this.outer;
  }
  obj76.methods["outer"] = reader_lexer_outer77;
function obj_init_76() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 57
  var string78 = new GraceString("rbrace");
  obj76.data["kind"] = string78;
    var reader_lexer_kind79 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind79.def = true;
  obj76.methods["kind"] = reader_lexer_kind79;
  lineNumber = 58
  var string80 = new GraceString("}");
  obj76.data["value"] = string80;
    var reader_lexer_value81 = function() {
    return this.data["value"];
  }
  reader_lexer_value81.def = true;
  obj76.methods["value"] = reader_lexer_value81;
  lineNumber = 59
  obj76.data["line"] = var_lineNumber;
    var reader_lexer_line82 = function() {
    return this.data["line"];
  }
  reader_lexer_line82.def = true;
  obj76.methods["line"] = reader_lexer_line82;
  lineNumber = 60
  obj76.data["indent"] = var_indentLevel;
    var reader_lexer_indent83 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent83.def = true;
  obj76.methods["indent"] = reader_lexer_indent83;
  lineNumber = 61
  obj76.data["linePos"] = var_startPosition;
    var reader_lexer_linePos84 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos84.def = true;
  obj76.methods["linePos"] = reader_lexer_linePos84;
  superDepth = origSuperDepth;
}
obj_init_76.apply(obj76, []);
  return obj76
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj73.methods["new"] = func75;
  superDepth = origSuperDepth;
}
obj_init_73.apply(obj73, []);
  var var_RBraceToken = obj73;
  lineNumber = 69
  lineNumber = 1
  var obj85 = Grace_allocObject();
  obj85.outer = this;
    var reader_lexer_outer86 = function() {
    return this.outer;
  }
  obj85.methods["outer"] = reader_lexer_outer86;
function obj_init_85() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func87 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj88 = Grace_allocObject();
  obj88.outer = this;
    var reader_lexer_outer89 = function() {
    return this.outer;
  }
  obj88.methods["outer"] = reader_lexer_outer89;
function obj_init_88() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 64
  var string90 = new GraceString("lparen");
  obj88.data["kind"] = string90;
    var reader_lexer_kind91 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind91.def = true;
  obj88.methods["kind"] = reader_lexer_kind91;
  lineNumber = 65
  var string92 = new GraceString("(");
  obj88.data["value"] = string92;
    var reader_lexer_value93 = function() {
    return this.data["value"];
  }
  reader_lexer_value93.def = true;
  obj88.methods["value"] = reader_lexer_value93;
  lineNumber = 66
  obj88.data["line"] = var_lineNumber;
    var reader_lexer_line94 = function() {
    return this.data["line"];
  }
  reader_lexer_line94.def = true;
  obj88.methods["line"] = reader_lexer_line94;
  lineNumber = 67
  obj88.data["indent"] = var_indentLevel;
    var reader_lexer_indent95 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent95.def = true;
  obj88.methods["indent"] = reader_lexer_indent95;
  lineNumber = 68
  obj88.data["linePos"] = var_startPosition;
    var reader_lexer_linePos96 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos96.def = true;
  obj88.methods["linePos"] = reader_lexer_linePos96;
  superDepth = origSuperDepth;
}
obj_init_88.apply(obj88, []);
  return obj88
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj85.methods["new"] = func87;
  superDepth = origSuperDepth;
}
obj_init_85.apply(obj85, []);
  var var_LParenToken = obj85;
  lineNumber = 76
  lineNumber = 1
  var obj97 = Grace_allocObject();
  obj97.outer = this;
    var reader_lexer_outer98 = function() {
    return this.outer;
  }
  obj97.methods["outer"] = reader_lexer_outer98;
function obj_init_97() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func99 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj100 = Grace_allocObject();
  obj100.outer = this;
    var reader_lexer_outer101 = function() {
    return this.outer;
  }
  obj100.methods["outer"] = reader_lexer_outer101;
function obj_init_100() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 71
  var string102 = new GraceString("rparen");
  obj100.data["kind"] = string102;
    var reader_lexer_kind103 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind103.def = true;
  obj100.methods["kind"] = reader_lexer_kind103;
  lineNumber = 72
  var string104 = new GraceString(")");
  obj100.data["value"] = string104;
    var reader_lexer_value105 = function() {
    return this.data["value"];
  }
  reader_lexer_value105.def = true;
  obj100.methods["value"] = reader_lexer_value105;
  lineNumber = 73
  obj100.data["line"] = var_lineNumber;
    var reader_lexer_line106 = function() {
    return this.data["line"];
  }
  reader_lexer_line106.def = true;
  obj100.methods["line"] = reader_lexer_line106;
  lineNumber = 74
  obj100.data["indent"] = var_indentLevel;
    var reader_lexer_indent107 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent107.def = true;
  obj100.methods["indent"] = reader_lexer_indent107;
  lineNumber = 75
  obj100.data["linePos"] = var_startPosition;
    var reader_lexer_linePos108 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos108.def = true;
  obj100.methods["linePos"] = reader_lexer_linePos108;
  superDepth = origSuperDepth;
}
obj_init_100.apply(obj100, []);
  return obj100
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj97.methods["new"] = func99;
  superDepth = origSuperDepth;
}
obj_init_97.apply(obj97, []);
  var var_RParenToken = obj97;
  lineNumber = 83
  lineNumber = 1
  var obj109 = Grace_allocObject();
  obj109.outer = this;
    var reader_lexer_outer110 = function() {
    return this.outer;
  }
  obj109.methods["outer"] = reader_lexer_outer110;
function obj_init_109() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func111 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj112 = Grace_allocObject();
  obj112.outer = this;
    var reader_lexer_outer113 = function() {
    return this.outer;
  }
  obj112.methods["outer"] = reader_lexer_outer113;
function obj_init_112() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 78
  var string114 = new GraceString("lsquare");
  obj112.data["kind"] = string114;
    var reader_lexer_kind115 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind115.def = true;
  obj112.methods["kind"] = reader_lexer_kind115;
  lineNumber = 79
  var string116 = new GraceString("[");
  obj112.data["value"] = string116;
    var reader_lexer_value117 = function() {
    return this.data["value"];
  }
  reader_lexer_value117.def = true;
  obj112.methods["value"] = reader_lexer_value117;
  lineNumber = 80
  obj112.data["line"] = var_lineNumber;
    var reader_lexer_line118 = function() {
    return this.data["line"];
  }
  reader_lexer_line118.def = true;
  obj112.methods["line"] = reader_lexer_line118;
  lineNumber = 81
  obj112.data["indent"] = var_indentLevel;
    var reader_lexer_indent119 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent119.def = true;
  obj112.methods["indent"] = reader_lexer_indent119;
  lineNumber = 82
  obj112.data["linePos"] = var_startPosition;
    var reader_lexer_linePos120 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos120.def = true;
  obj112.methods["linePos"] = reader_lexer_linePos120;
  superDepth = origSuperDepth;
}
obj_init_112.apply(obj112, []);
  return obj112
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj109.methods["new"] = func111;
  superDepth = origSuperDepth;
}
obj_init_109.apply(obj109, []);
  var var_LSquareToken = obj109;
  lineNumber = 90
  lineNumber = 1
  var obj121 = Grace_allocObject();
  obj121.outer = this;
    var reader_lexer_outer122 = function() {
    return this.outer;
  }
  obj121.methods["outer"] = reader_lexer_outer122;
function obj_init_121() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func123 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj124 = Grace_allocObject();
  obj124.outer = this;
    var reader_lexer_outer125 = function() {
    return this.outer;
  }
  obj124.methods["outer"] = reader_lexer_outer125;
function obj_init_124() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 85
  var string126 = new GraceString("rsquare");
  obj124.data["kind"] = string126;
    var reader_lexer_kind127 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind127.def = true;
  obj124.methods["kind"] = reader_lexer_kind127;
  lineNumber = 86
  var string128 = new GraceString("]");
  obj124.data["value"] = string128;
    var reader_lexer_value129 = function() {
    return this.data["value"];
  }
  reader_lexer_value129.def = true;
  obj124.methods["value"] = reader_lexer_value129;
  lineNumber = 87
  obj124.data["line"] = var_lineNumber;
    var reader_lexer_line130 = function() {
    return this.data["line"];
  }
  reader_lexer_line130.def = true;
  obj124.methods["line"] = reader_lexer_line130;
  lineNumber = 88
  obj124.data["indent"] = var_indentLevel;
    var reader_lexer_indent131 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent131.def = true;
  obj124.methods["indent"] = reader_lexer_indent131;
  lineNumber = 89
  obj124.data["linePos"] = var_startPosition;
    var reader_lexer_linePos132 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos132.def = true;
  obj124.methods["linePos"] = reader_lexer_linePos132;
  superDepth = origSuperDepth;
}
obj_init_124.apply(obj124, []);
  return obj124
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj121.methods["new"] = func123;
  superDepth = origSuperDepth;
}
obj_init_121.apply(obj121, []);
  var var_RSquareToken = obj121;
  lineNumber = 97
  lineNumber = 1
  var obj133 = Grace_allocObject();
  obj133.outer = this;
    var reader_lexer_outer134 = function() {
    return this.outer;
  }
  obj133.methods["outer"] = reader_lexer_outer134;
function obj_init_133() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func135 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj136 = Grace_allocObject();
  obj136.outer = this;
    var reader_lexer_outer137 = function() {
    return this.outer;
  }
  obj136.methods["outer"] = reader_lexer_outer137;
function obj_init_136() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 92
  var string138 = new GraceString("comma");
  obj136.data["kind"] = string138;
    var reader_lexer_kind139 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind139.def = true;
  obj136.methods["kind"] = reader_lexer_kind139;
  lineNumber = 93
  var string140 = new GraceString(",");
  obj136.data["value"] = string140;
    var reader_lexer_value141 = function() {
    return this.data["value"];
  }
  reader_lexer_value141.def = true;
  obj136.methods["value"] = reader_lexer_value141;
  lineNumber = 94
  obj136.data["line"] = var_lineNumber;
    var reader_lexer_line142 = function() {
    return this.data["line"];
  }
  reader_lexer_line142.def = true;
  obj136.methods["line"] = reader_lexer_line142;
  lineNumber = 95
  obj136.data["indent"] = var_indentLevel;
    var reader_lexer_indent143 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent143.def = true;
  obj136.methods["indent"] = reader_lexer_indent143;
  lineNumber = 96
  obj136.data["linePos"] = var_startPosition;
    var reader_lexer_linePos144 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos144.def = true;
  obj136.methods["linePos"] = reader_lexer_linePos144;
  superDepth = origSuperDepth;
}
obj_init_136.apply(obj136, []);
  return obj136
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj133.methods["new"] = func135;
  superDepth = origSuperDepth;
}
obj_init_133.apply(obj133, []);
  var var_CommaToken = obj133;
  lineNumber = 104
  lineNumber = 1
  var obj145 = Grace_allocObject();
  obj145.outer = this;
    var reader_lexer_outer146 = function() {
    return this.outer;
  }
  obj145.methods["outer"] = reader_lexer_outer146;
function obj_init_145() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func147 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj148 = Grace_allocObject();
  obj148.outer = this;
    var reader_lexer_outer149 = function() {
    return this.outer;
  }
  obj148.methods["outer"] = reader_lexer_outer149;
function obj_init_148() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 99
  var string150 = new GraceString("colon");
  obj148.data["kind"] = string150;
    var reader_lexer_kind151 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind151.def = true;
  obj148.methods["kind"] = reader_lexer_kind151;
  lineNumber = 100
  var string152 = new GraceString(":");
  obj148.data["value"] = string152;
    var reader_lexer_value153 = function() {
    return this.data["value"];
  }
  reader_lexer_value153.def = true;
  obj148.methods["value"] = reader_lexer_value153;
  lineNumber = 101
  obj148.data["line"] = var_lineNumber;
    var reader_lexer_line154 = function() {
    return this.data["line"];
  }
  reader_lexer_line154.def = true;
  obj148.methods["line"] = reader_lexer_line154;
  lineNumber = 102
  obj148.data["indent"] = var_indentLevel;
    var reader_lexer_indent155 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent155.def = true;
  obj148.methods["indent"] = reader_lexer_indent155;
  lineNumber = 103
  obj148.data["linePos"] = var_startPosition;
    var reader_lexer_linePos156 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos156.def = true;
  obj148.methods["linePos"] = reader_lexer_linePos156;
  superDepth = origSuperDepth;
}
obj_init_148.apply(obj148, []);
  return obj148
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj145.methods["new"] = func147;
  superDepth = origSuperDepth;
}
obj_init_145.apply(obj145, []);
  var var_ColonToken = obj145;
  lineNumber = 111
  lineNumber = 1
  var obj157 = Grace_allocObject();
  obj157.outer = this;
    var reader_lexer_outer158 = function() {
    return this.outer;
  }
  obj157.methods["outer"] = reader_lexer_outer158;
function obj_init_157() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func159 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj160 = Grace_allocObject();
  obj160.outer = this;
    var reader_lexer_outer161 = function() {
    return this.outer;
  }
  obj160.methods["outer"] = reader_lexer_outer161;
function obj_init_160() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 106
  var string162 = new GraceString("dot");
  obj160.data["kind"] = string162;
    var reader_lexer_kind163 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind163.def = true;
  obj160.methods["kind"] = reader_lexer_kind163;
  lineNumber = 107
  var string164 = new GraceString(".");
  obj160.data["value"] = string164;
    var reader_lexer_value165 = function() {
    return this.data["value"];
  }
  reader_lexer_value165.def = true;
  obj160.methods["value"] = reader_lexer_value165;
  lineNumber = 108
  obj160.data["line"] = var_lineNumber;
    var reader_lexer_line166 = function() {
    return this.data["line"];
  }
  reader_lexer_line166.def = true;
  obj160.methods["line"] = reader_lexer_line166;
  lineNumber = 109
  obj160.data["indent"] = var_indentLevel;
    var reader_lexer_indent167 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent167.def = true;
  obj160.methods["indent"] = reader_lexer_indent167;
  lineNumber = 110
  obj160.data["linePos"] = var_startPosition;
    var reader_lexer_linePos168 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos168.def = true;
  obj160.methods["linePos"] = reader_lexer_linePos168;
  superDepth = origSuperDepth;
}
obj_init_160.apply(obj160, []);
  return obj160
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj157.methods["new"] = func159;
  superDepth = origSuperDepth;
}
obj_init_157.apply(obj157, []);
  var var_DotToken = obj157;
  lineNumber = 112
  lineNumber = 1
  var obj169 = Grace_allocObject();
  obj169.outer = this;
    var reader_lexer_outer170 = function() {
    return this.outer;
  }
  obj169.methods["outer"] = reader_lexer_outer170;
function obj_init_169() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func171 = function(argcv) {
  var curarg = 1;
  var var_v = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj172 = Grace_allocObject();
  obj172.outer = this;
    var reader_lexer_outer173 = function() {
    return this.outer;
  }
  obj172.methods["outer"] = reader_lexer_outer173;
function obj_init_172() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 113
  var string174 = new GraceString("num");
  obj172.data["kind"] = string174;
    var reader_lexer_kind175 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind175.def = true;
  obj172.methods["kind"] = reader_lexer_kind175;
  lineNumber = 114
  obj172.data["value"] = var_v;
    var reader_lexer_value176 = function() {
    return this.data["value"];
  }
  reader_lexer_value176.def = true;
  obj172.methods["value"] = reader_lexer_value176;
  lineNumber = 115
  obj172.data["line"] = var_lineNumber;
    var reader_lexer_line177 = function() {
    return this.data["line"];
  }
  reader_lexer_line177.def = true;
  obj172.methods["line"] = reader_lexer_line177;
  lineNumber = 116
  obj172.data["indent"] = var_indentLevel;
    var reader_lexer_indent178 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent178.def = true;
  obj172.methods["indent"] = reader_lexer_indent178;
  lineNumber = 117
  obj172.data["linePos"] = var_startPosition;
    var reader_lexer_linePos179 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos179.def = true;
  obj172.methods["linePos"] = reader_lexer_linePos179;
  superDepth = origSuperDepth;
}
obj_init_172.apply(obj172, []);
  return obj172
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj169.methods["new"] = func171;
  superDepth = origSuperDepth;
}
obj_init_169.apply(obj169, []);
  var var_NumToken = obj169;
  lineNumber = 119
  lineNumber = 1
  var obj180 = Grace_allocObject();
  obj180.outer = this;
    var reader_lexer_outer181 = function() {
    return this.outer;
  }
  obj180.methods["outer"] = reader_lexer_outer181;
function obj_init_180() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func182 = function(argcv) {
  var curarg = 1;
  var var_v = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj183 = Grace_allocObject();
  obj183.outer = this;
    var reader_lexer_outer184 = function() {
    return this.outer;
  }
  obj183.methods["outer"] = reader_lexer_outer184;
function obj_init_183() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 120
  var string185 = new GraceString("keyword");
  obj183.data["kind"] = string185;
    var reader_lexer_kind186 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind186.def = true;
  obj183.methods["kind"] = reader_lexer_kind186;
  lineNumber = 121
  obj183.data["value"] = var_v;
    var reader_lexer_value187 = function() {
    return this.data["value"];
  }
  reader_lexer_value187.def = true;
  obj183.methods["value"] = reader_lexer_value187;
  lineNumber = 122
  obj183.data["line"] = var_lineNumber;
    var reader_lexer_line188 = function() {
    return this.data["line"];
  }
  reader_lexer_line188.def = true;
  obj183.methods["line"] = reader_lexer_line188;
  lineNumber = 123
  obj183.data["indent"] = var_indentLevel;
    var reader_lexer_indent189 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent189.def = true;
  obj183.methods["indent"] = reader_lexer_indent189;
  lineNumber = 124
  obj183.data["linePos"] = var_startPosition;
    var reader_lexer_linePos190 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos190.def = true;
  obj183.methods["linePos"] = reader_lexer_linePos190;
  superDepth = origSuperDepth;
}
obj_init_183.apply(obj183, []);
  return obj183
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj180.methods["new"] = func182;
  superDepth = origSuperDepth;
}
obj_init_180.apply(obj180, []);
  var var_KeywordToken = obj180;
  lineNumber = 126
  lineNumber = 1
  var obj191 = Grace_allocObject();
  obj191.outer = this;
    var reader_lexer_outer192 = function() {
    return this.outer;
  }
  obj191.methods["outer"] = reader_lexer_outer192;
function obj_init_191() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func193 = function(argcv) {
  var curarg = 1;
  var var_v = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj194 = Grace_allocObject();
  obj194.outer = this;
    var reader_lexer_outer195 = function() {
    return this.outer;
  }
  obj194.methods["outer"] = reader_lexer_outer195;
function obj_init_194() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 127
  var string196 = new GraceString("op");
  obj194.data["kind"] = string196;
    var reader_lexer_kind197 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind197.def = true;
  obj194.methods["kind"] = reader_lexer_kind197;
  lineNumber = 128
  obj194.data["value"] = var_v;
    var reader_lexer_value198 = function() {
    return this.data["value"];
  }
  reader_lexer_value198.def = true;
  obj194.methods["value"] = reader_lexer_value198;
  lineNumber = 129
  obj194.data["line"] = var_lineNumber;
    var reader_lexer_line199 = function() {
    return this.data["line"];
  }
  reader_lexer_line199.def = true;
  obj194.methods["line"] = reader_lexer_line199;
  lineNumber = 130
  obj194.data["indent"] = var_indentLevel;
    var reader_lexer_indent200 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent200.def = true;
  obj194.methods["indent"] = reader_lexer_indent200;
  lineNumber = 131
  obj194.data["linePos"] = var_startPosition;
    var reader_lexer_linePos201 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos201.def = true;
  obj194.methods["linePos"] = reader_lexer_linePos201;
  superDepth = origSuperDepth;
}
obj_init_194.apply(obj194, []);
  return obj194
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj191.methods["new"] = func193;
  superDepth = origSuperDepth;
}
obj_init_191.apply(obj191, []);
  var var_OpToken = obj191;
  lineNumber = 139
  lineNumber = 1
  var obj202 = Grace_allocObject();
  obj202.outer = this;
    var reader_lexer_outer203 = function() {
    return this.outer;
  }
  obj202.methods["outer"] = reader_lexer_outer203;
function obj_init_202() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func204 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj205 = Grace_allocObject();
  obj205.outer = this;
    var reader_lexer_outer206 = function() {
    return this.outer;
  }
  obj205.methods["outer"] = reader_lexer_outer206;
function obj_init_205() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 134
  var string207 = new GraceString("arrow");
  obj205.data["kind"] = string207;
    var reader_lexer_kind208 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind208.def = true;
  obj205.methods["kind"] = reader_lexer_kind208;
  lineNumber = 135
  var string209 = new GraceString("->");
  obj205.data["value"] = string209;
    var reader_lexer_value210 = function() {
    return this.data["value"];
  }
  reader_lexer_value210.def = true;
  obj205.methods["value"] = reader_lexer_value210;
  lineNumber = 136
  obj205.data["line"] = var_lineNumber;
    var reader_lexer_line211 = function() {
    return this.data["line"];
  }
  reader_lexer_line211.def = true;
  obj205.methods["line"] = reader_lexer_line211;
  lineNumber = 137
  obj205.data["indent"] = var_indentLevel;
    var reader_lexer_indent212 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent212.def = true;
  obj205.methods["indent"] = reader_lexer_indent212;
  lineNumber = 138
  obj205.data["linePos"] = var_startPosition;
    var reader_lexer_linePos213 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos213.def = true;
  obj205.methods["linePos"] = reader_lexer_linePos213;
  superDepth = origSuperDepth;
}
obj_init_205.apply(obj205, []);
  return obj205
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj202.methods["new"] = func204;
  superDepth = origSuperDepth;
}
obj_init_202.apply(obj202, []);
  var var_ArrowToken = obj202;
  lineNumber = 146
  lineNumber = 1
  var obj214 = Grace_allocObject();
  obj214.outer = this;
    var reader_lexer_outer215 = function() {
    return this.outer;
  }
  obj214.methods["outer"] = reader_lexer_outer215;
function obj_init_214() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func216 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj217 = Grace_allocObject();
  obj217.outer = this;
    var reader_lexer_outer218 = function() {
    return this.outer;
  }
  obj217.methods["outer"] = reader_lexer_outer218;
function obj_init_217() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 141
  var string219 = new GraceString("bind");
  obj217.data["kind"] = string219;
    var reader_lexer_kind220 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind220.def = true;
  obj217.methods["kind"] = reader_lexer_kind220;
  lineNumber = 142
  var string221 = new GraceString(":=");
  obj217.data["value"] = string221;
    var reader_lexer_value222 = function() {
    return this.data["value"];
  }
  reader_lexer_value222.def = true;
  obj217.methods["value"] = reader_lexer_value222;
  lineNumber = 143
  obj217.data["line"] = var_lineNumber;
    var reader_lexer_line223 = function() {
    return this.data["line"];
  }
  reader_lexer_line223.def = true;
  obj217.methods["line"] = reader_lexer_line223;
  lineNumber = 144
  obj217.data["indent"] = var_indentLevel;
    var reader_lexer_indent224 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent224.def = true;
  obj217.methods["indent"] = reader_lexer_indent224;
  lineNumber = 145
  obj217.data["linePos"] = var_startPosition;
    var reader_lexer_linePos225 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos225.def = true;
  obj217.methods["linePos"] = reader_lexer_linePos225;
  superDepth = origSuperDepth;
}
obj_init_217.apply(obj217, []);
  return obj217
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj214.methods["new"] = func216;
  superDepth = origSuperDepth;
}
obj_init_214.apply(obj214, []);
  var var_BindToken = obj214;
  lineNumber = 153
  lineNumber = 1
  var obj226 = Grace_allocObject();
  obj226.outer = this;
    var reader_lexer_outer227 = function() {
    return this.outer;
  }
  obj226.methods["outer"] = reader_lexer_outer227;
function obj_init_226() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func228 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj229 = Grace_allocObject();
  obj229.outer = this;
    var reader_lexer_outer230 = function() {
    return this.outer;
  }
  obj229.methods["outer"] = reader_lexer_outer230;
function obj_init_229() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 148
  var string231 = new GraceString("semicolon");
  obj229.data["kind"] = string231;
    var reader_lexer_kind232 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind232.def = true;
  obj229.methods["kind"] = reader_lexer_kind232;
  lineNumber = 149
  var string233 = new GraceString(";");
  obj229.data["value"] = string233;
    var reader_lexer_value234 = function() {
    return this.data["value"];
  }
  reader_lexer_value234.def = true;
  obj229.methods["value"] = reader_lexer_value234;
  lineNumber = 150
  obj229.data["line"] = var_lineNumber;
    var reader_lexer_line235 = function() {
    return this.data["line"];
  }
  reader_lexer_line235.def = true;
  obj229.methods["line"] = reader_lexer_line235;
  lineNumber = 151
  obj229.data["indent"] = var_indentLevel;
    var reader_lexer_indent236 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent236.def = true;
  obj229.methods["indent"] = reader_lexer_indent236;
  lineNumber = 152
  obj229.data["linePos"] = var_startPosition;
    var reader_lexer_linePos237 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos237.def = true;
  obj229.methods["linePos"] = reader_lexer_linePos237;
  superDepth = origSuperDepth;
}
obj_init_229.apply(obj229, []);
  return obj229
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj226.methods["new"] = func228;
  superDepth = origSuperDepth;
}
obj_init_226.apply(obj226, []);
  var var_SemicolonToken = obj226;
  lineNumber = 160
  lineNumber = 1
  var obj238 = Grace_allocObject();
  obj238.outer = this;
    var reader_lexer_outer239 = function() {
    return this.outer;
  }
  obj238.methods["outer"] = reader_lexer_outer239;
function obj_init_238() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func240 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj241 = Grace_allocObject();
  obj241.outer = this;
    var reader_lexer_outer242 = function() {
    return this.outer;
  }
  obj241.methods["outer"] = reader_lexer_outer242;
function obj_init_241() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 155
  var string243 = new GraceString("lgeneric");
  obj241.data["kind"] = string243;
    var reader_lexer_kind244 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind244.def = true;
  obj241.methods["kind"] = reader_lexer_kind244;
  lineNumber = 156
  var string245 = new GraceString("<");
  obj241.data["value"] = string245;
    var reader_lexer_value246 = function() {
    return this.data["value"];
  }
  reader_lexer_value246.def = true;
  obj241.methods["value"] = reader_lexer_value246;
  lineNumber = 157
  obj241.data["line"] = var_lineNumber;
    var reader_lexer_line247 = function() {
    return this.data["line"];
  }
  reader_lexer_line247.def = true;
  obj241.methods["line"] = reader_lexer_line247;
  lineNumber = 158
  obj241.data["indent"] = var_indentLevel;
    var reader_lexer_indent248 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent248.def = true;
  obj241.methods["indent"] = reader_lexer_indent248;
  lineNumber = 159
  obj241.data["linePos"] = var_startPosition;
    var reader_lexer_linePos249 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos249.def = true;
  obj241.methods["linePos"] = reader_lexer_linePos249;
  superDepth = origSuperDepth;
}
obj_init_241.apply(obj241, []);
  return obj241
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj238.methods["new"] = func240;
  superDepth = origSuperDepth;
}
obj_init_238.apply(obj238, []);
  var var_LGenericToken = obj238;
  lineNumber = 167
  lineNumber = 1
  var obj250 = Grace_allocObject();
  obj250.outer = this;
    var reader_lexer_outer251 = function() {
    return this.outer;
  }
  obj250.methods["outer"] = reader_lexer_outer251;
function obj_init_250() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func252 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj253 = Grace_allocObject();
  obj253.outer = this;
    var reader_lexer_outer254 = function() {
    return this.outer;
  }
  obj253.methods["outer"] = reader_lexer_outer254;
function obj_init_253() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 162
  var string255 = new GraceString("rgeneric");
  obj253.data["kind"] = string255;
    var reader_lexer_kind256 = function() {
    return this.data["kind"];
  }
  reader_lexer_kind256.def = true;
  obj253.methods["kind"] = reader_lexer_kind256;
  lineNumber = 163
  var string257 = new GraceString(">");
  obj253.data["value"] = string257;
    var reader_lexer_value258 = function() {
    return this.data["value"];
  }
  reader_lexer_value258.def = true;
  obj253.methods["value"] = reader_lexer_value258;
  lineNumber = 164
  obj253.data["line"] = var_lineNumber;
    var reader_lexer_line259 = function() {
    return this.data["line"];
  }
  reader_lexer_line259.def = true;
  obj253.methods["line"] = reader_lexer_line259;
  lineNumber = 165
  obj253.data["indent"] = var_indentLevel;
    var reader_lexer_indent260 = function() {
    return this.data["indent"];
  }
  reader_lexer_indent260.def = true;
  obj253.methods["indent"] = reader_lexer_indent260;
  lineNumber = 166
  obj253.data["linePos"] = var_startPosition;
    var reader_lexer_linePos261 = function() {
    return this.data["linePos"];
  }
  reader_lexer_linePos261.def = true;
  obj253.methods["linePos"] = reader_lexer_linePos261;
  superDepth = origSuperDepth;
}
obj_init_253.apply(obj253, []);
  return obj253
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj250.methods["new"] = func252;
  superDepth = origSuperDepth;
}
obj_init_250.apply(obj250, []);
  var var_RGenericToken = obj250;
  lineNumber = 659
  var obj262 = Grace_allocObject();
  obj262.outer = this;
    var reader_lexer_outer263 = function() {
    return this.outer;
  }
  obj262.methods["outer"] = reader_lexer_outer263;
function obj_init_262() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func264 = function(argcv) {
  var curarg = 1;
  var var_tokens = arguments[curarg];
  curarg++;
  var var_mode = arguments[curarg];
  curarg++;
  var var_accum = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 186
  lineNumber = 185
  var bool265 = new GraceBoolean(false)
  var var_done = bool265;
  lineNumber = 187
  lineNumber = 186
  var var_tok = new GraceNum(0);
  lineNumber = 296
  lineNumber = 299
  lineNumber = 187
  var string267 = new GraceString("n");
  var opresult269 = callmethod(var_mode, "/=", [1], string267);
  lineNumber = 299
  lineNumber = 1
  lineNumber = 187
  var call270 = callmethod(var_accum,"size", [0]);
  var opresult272 = callmethod(call270, ">", [1], new GraceNum(0));
  var opresult274 = callmethod(opresult269, "|", [1], opresult272);
  if (Grace_isTrue(opresult274)) {
  lineNumber = 199
  lineNumber = 200
  lineNumber = 188
  var string276 = new GraceString("i");
  var opresult278 = callmethod(var_mode, "==", [1], string276);
  if (Grace_isTrue(opresult278)) {
  lineNumber = 189
  var call279 = callmethod(var_IdentifierToken,"new", [1], var_accum);
  var_tok = call279;
  lineNumber = 195
  lineNumber = 197
  lineNumber = 190
  var string281 = new GraceString("object");
  var opresult283 = callmethod(var_accum, "==", [1], string281);
  lineNumber = 197
  lineNumber = 190
  var string284 = new GraceString("method");
  var opresult286 = callmethod(var_accum, "==", [1], string284);
  var opresult288 = callmethod(opresult283, "|", [1], opresult286);
  lineNumber = 197
  lineNumber = 191
  var string289 = new GraceString("var");
  var opresult291 = callmethod(var_accum, "==", [1], string289);
  var opresult293 = callmethod(opresult288, "|", [1], opresult291);
  lineNumber = 197
  lineNumber = 191
  var string294 = new GraceString("type");
  var opresult296 = callmethod(var_accum, "==", [1], string294);
  var opresult298 = callmethod(opresult293, "|", [1], opresult296);
  lineNumber = 197
  lineNumber = 192
  var string299 = new GraceString("import");
  var opresult301 = callmethod(var_accum, "==", [1], string299);
  var opresult303 = callmethod(opresult298, "|", [1], opresult301);
  lineNumber = 197
  lineNumber = 192
  var string304 = new GraceString("class");
  var opresult306 = callmethod(var_accum, "==", [1], string304);
  var opresult308 = callmethod(opresult303, "|", [1], opresult306);
  lineNumber = 197
  lineNumber = 193
  var string309 = new GraceString("return");
  var opresult311 = callmethod(var_accum, "==", [1], string309);
  var opresult313 = callmethod(opresult308, "|", [1], opresult311);
  lineNumber = 197
  lineNumber = 193
  var string314 = new GraceString("def");
  var opresult316 = callmethod(var_accum, "==", [1], string314);
  var opresult318 = callmethod(opresult313, "|", [1], opresult316);
  lineNumber = 197
  lineNumber = 194
  var string319 = new GraceString("inherits");
  var opresult321 = callmethod(var_accum, "==", [1], string319);
  var opresult323 = callmethod(opresult318, "|", [1], opresult321);
  if (Grace_isTrue(opresult323)) {
  lineNumber = 195
  var call324 = callmethod(var_KeywordToken,"new", [1], var_accum);
  var_tok = call324;
  var if280 = call324;
}
  lineNumber = 197
  var call325 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 199
  lineNumber = 198
  var bool326 = new GraceBoolean(true)
  var_done = bool326;
  var if275 = bool326;
}
  lineNumber = 240
  lineNumber = 241
  lineNumber = 200
  var string328 = new GraceString("I");
  var opresult330 = callmethod(var_mode, "==", [1], string328);
  if (Grace_isTrue(opresult330)) {
  lineNumber = 201
  var call331 = callmethod(var_IdentifierToken,"new", [1], var_accum);
  var_tok = call331;
  lineNumber = 202
  var call332 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 204
  lineNumber = 203
  var bool333 = new GraceBoolean(true)
  var_done = bool333;
  var if327 = bool333;
  } else {
  lineNumber = 240
  lineNumber = 208
  lineNumber = 204
  var string335 = new GraceString("\"");
  var opresult337 = callmethod(var_mode, "==", [1], string335);
  if (Grace_isTrue(opresult337)) {
  lineNumber = 205
  var call338 = callmethod(var_StringToken,"new", [1], var_accum);
  var_tok = call338;
  lineNumber = 206
  var call339 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 208
  lineNumber = 207
  var bool340 = new GraceBoolean(true)
  var_done = bool340;
  var if334 = bool340;
  } else {
  lineNumber = 240
  lineNumber = 212
  lineNumber = 208
  var string342 = new GraceString("x");
  var opresult344 = callmethod(var_mode, "==", [1], string342);
  if (Grace_isTrue(opresult344)) {
  lineNumber = 209
  var call345 = callmethod(var_OctetsToken,"new", [1], var_accum);
  var_tok = call345;
  lineNumber = 210
  var call346 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 212
  lineNumber = 211
  var bool347 = new GraceBoolean(true)
  var_done = bool347;
  var if341 = bool347;
  } else {
  lineNumber = 240
  lineNumber = 216
  lineNumber = 212
  var string349 = new GraceString(",");
  var opresult351 = callmethod(var_mode, "==", [1], string349);
  if (Grace_isTrue(opresult351)) {
  lineNumber = 214
  lineNumber = 1
  lineNumber = 213
  var call352 = callmethod(var_CommaToken,"new", [0]);
  var_tok = call352;
  lineNumber = 214
  var call353 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 216
  lineNumber = 215
  var bool354 = new GraceBoolean(true)
  var_done = bool354;
  var if348 = bool354;
  } else {
  lineNumber = 240
  lineNumber = 220
  lineNumber = 216
  var string356 = new GraceString(".");
  var opresult358 = callmethod(var_mode, "==", [1], string356);
  if (Grace_isTrue(opresult358)) {
  lineNumber = 218
  lineNumber = 1
  lineNumber = 217
  var call359 = callmethod(var_DotToken,"new", [0]);
  var_tok = call359;
  lineNumber = 218
  var call360 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 220
  lineNumber = 219
  var bool361 = new GraceBoolean(true)
  var_done = bool361;
  var if355 = bool361;
  } else {
  lineNumber = 240
  lineNumber = 224
  lineNumber = 220
  var string363 = new GraceString("{");
  var opresult365 = callmethod(var_mode, "==", [1], string363);
  if (Grace_isTrue(opresult365)) {
  lineNumber = 222
  lineNumber = 1
  lineNumber = 221
  var call366 = callmethod(var_LBraceToken,"new", [0]);
  var_tok = call366;
  lineNumber = 222
  var call367 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 224
  lineNumber = 223
  var bool368 = new GraceBoolean(true)
  var_done = bool368;
  var if362 = bool368;
  } else {
  lineNumber = 240
  lineNumber = 228
  lineNumber = 224
  var string370 = new GraceString("}");
  var opresult372 = callmethod(var_mode, "==", [1], string370);
  if (Grace_isTrue(opresult372)) {
  lineNumber = 226
  lineNumber = 1
  lineNumber = 225
  var call373 = callmethod(var_RBraceToken,"new", [0]);
  var_tok = call373;
  lineNumber = 226
  var call374 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 228
  lineNumber = 227
  var bool375 = new GraceBoolean(true)
  var_done = bool375;
  var if369 = bool375;
  } else {
  lineNumber = 240
  lineNumber = 232
  lineNumber = 228
  var string377 = new GraceString("(");
  var opresult379 = callmethod(var_mode, "==", [1], string377);
  if (Grace_isTrue(opresult379)) {
  lineNumber = 230
  lineNumber = 1
  lineNumber = 229
  var call380 = callmethod(var_LParenToken,"new", [0]);
  var_tok = call380;
  lineNumber = 230
  var call381 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 232
  lineNumber = 231
  var bool382 = new GraceBoolean(true)
  var_done = bool382;
  var if376 = bool382;
  } else {
  lineNumber = 240
  lineNumber = 236
  lineNumber = 232
  var string384 = new GraceString(")");
  var opresult386 = callmethod(var_mode, "==", [1], string384);
  if (Grace_isTrue(opresult386)) {
  lineNumber = 234
  lineNumber = 1
  lineNumber = 233
  var call387 = callmethod(var_RParenToken,"new", [0]);
  var_tok = call387;
  lineNumber = 234
  var call388 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 236
  lineNumber = 235
  var bool389 = new GraceBoolean(true)
  var_done = bool389;
  var if383 = bool389;
  } else {
  lineNumber = 240
  lineNumber = 241
  lineNumber = 236
  var string391 = new GraceString("[");
  var opresult393 = callmethod(var_mode, "==", [1], string391);
  if (Grace_isTrue(opresult393)) {
  lineNumber = 238
  lineNumber = 1
  lineNumber = 237
  var call394 = callmethod(var_LSquareToken,"new", [0]);
  var_tok = call394;
  lineNumber = 238
  var call395 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 240
  lineNumber = 239
  var bool396 = new GraceBoolean(true)
  var_done = bool396;
  var if390 = bool396;
}
  var if383 = if390;
}
  var if376 = if383;
}
  var if369 = if376;
}
  var if362 = if369;
}
  var if355 = if362;
}
  var if348 = if355;
}
  var if341 = if348;
}
  var if334 = if341;
}
  var if327 = if334;
}
  lineNumber = 296
  lineNumber = 298
  lineNumber = 241
  var string398 = new GraceString("]");
  var opresult400 = callmethod(var_mode, "==", [1], string398);
  if (Grace_isTrue(opresult400)) {
  lineNumber = 243
  lineNumber = 1
  lineNumber = 242
  var call401 = callmethod(var_RSquareToken,"new", [0]);
  var_tok = call401;
  lineNumber = 243
  var call402 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 245
  lineNumber = 244
  var bool403 = new GraceBoolean(true)
  var_done = bool403;
  var if397 = bool403;
  } else {
  lineNumber = 296
  lineNumber = 249
  lineNumber = 245
  var string405 = new GraceString("<");
  var opresult407 = callmethod(var_mode, "==", [1], string405);
  if (Grace_isTrue(opresult407)) {
  lineNumber = 247
  lineNumber = 1
  lineNumber = 246
  var call408 = callmethod(var_LGenericToken,"new", [0]);
  var_tok = call408;
  lineNumber = 247
  var call409 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 249
  lineNumber = 248
  var bool410 = new GraceBoolean(true)
  var_done = bool410;
  var if404 = bool410;
  } else {
  lineNumber = 296
  lineNumber = 253
  lineNumber = 249
  var string412 = new GraceString(">");
  var opresult414 = callmethod(var_mode, "==", [1], string412);
  if (Grace_isTrue(opresult414)) {
  lineNumber = 251
  lineNumber = 1
  lineNumber = 250
  var call415 = callmethod(var_RGenericToken,"new", [0]);
  var_tok = call415;
  lineNumber = 251
  var call416 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 253
  lineNumber = 252
  var bool417 = new GraceBoolean(true)
  var_done = bool417;
  var if411 = bool417;
  } else {
  lineNumber = 296
  lineNumber = 257
  lineNumber = 253
  var string419 = new GraceString(";");
  var opresult421 = callmethod(var_mode, "==", [1], string419);
  if (Grace_isTrue(opresult421)) {
  lineNumber = 255
  lineNumber = 1
  lineNumber = 254
  var call422 = callmethod(var_SemicolonToken,"new", [0]);
  var_tok = call422;
  lineNumber = 255
  var call423 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 257
  lineNumber = 256
  var bool424 = new GraceBoolean(true)
  var_done = bool424;
  var if418 = bool424;
  } else {
  lineNumber = 296
  lineNumber = 274
  lineNumber = 257
  var string426 = new GraceString("m");
  var opresult428 = callmethod(var_mode, "==", [1], string426);
  if (Grace_isTrue(opresult428)) {
  lineNumber = 258
  var call429 = callmethod(var_NumToken,"new", [1], var_accum);
  var_tok = call429;
  lineNumber = 259
  lineNumber = 260
  var call430 = callmethod(this,"makeNumToken", [1], var_accum);
  var_tok = call430;
  lineNumber = 268
  lineNumber = 272
  lineNumber = 1
  lineNumber = 260
  var call432 = callmethod(var_tokens,"size", [0]);
  var opresult434 = callmethod(call432, ">", [1], new GraceNum(1));
  if (Grace_isTrue(opresult434)) {
  lineNumber = 268
  lineNumber = 271
  lineNumber = 1
  lineNumber = 271
  lineNumber = 1
  lineNumber = 261
  var call436 = callmethod(var_tokens,"last", [0]);
  var call437 = callmethod(call436,"kind", [0]);
  var string438 = new GraceString("dot");
  var opresult440 = callmethod(call437, "==", [1], string438);
  if (Grace_isTrue(opresult440)) {
  lineNumber = 262
  lineNumber = 1
  lineNumber = 262
  var call441 = callmethod(var_tokens,"pop", [0]);
  lineNumber = 268
  lineNumber = 270
  lineNumber = 1
  lineNumber = 270
  lineNumber = 1
  lineNumber = 263
  var call443 = callmethod(var_tokens,"last", [0]);
  var call444 = callmethod(call443,"kind", [0]);
  var string445 = new GraceString("num");
  var opresult447 = callmethod(call444, "==", [1], string445);
  if (Grace_isTrue(opresult447)) {
  lineNumber = 265
  lineNumber = 1
  lineNumber = 264
  var call448 = callmethod(var_tokens,"pop", [0]);
  var_tok = call448;
  lineNumber = 265
  lineNumber = 1
  lineNumber = 265
  var call449 = callmethod(var_tok,"value", [0]);
  var string450 = new GraceString(".");
  var opresult452 = callmethod(call449, "++", [1], string450);
  var opresult454 = callmethod(opresult452, "++", [1], var_accum);
  var call455 = callmethod(var_NumToken,"new", [1], opresult454);
  var_tok = call455;
  var if442 = call455;
  } else {
  lineNumber = 268
  lineNumber = 267
  var string456 = new GraceString("found .");
  var opresult458 = callmethod(string456, "++", [1], var_accum);
  lineNumber = 268
  var string459 = new GraceString(", expected term");
  var opresult461 = callmethod(opresult458, "++", [1], string459);
  lineNumber = 267
  var call462 = callmethod(var_util,"syntax_error", [1], opresult461);
  var if442 = call462;
}
  var if435 = if442;
}
  var if431 = if435;
}
  lineNumber = 272
  var call463 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 274
  lineNumber = 273
  var bool464 = new GraceBoolean(true)
  var_done = bool464;
  var if425 = bool464;
  } else {
  lineNumber = 296
  lineNumber = 285
  lineNumber = 274
  var string466 = new GraceString("o");
  var opresult468 = callmethod(var_mode, "==", [1], string466);
  if (Grace_isTrue(opresult468)) {
  lineNumber = 275
  var call469 = callmethod(var_OpToken,"new", [1], var_accum);
  var_tok = call469;
  lineNumber = 282
  lineNumber = 283
  lineNumber = 276
  var string471 = new GraceString("->");
  var opresult473 = callmethod(var_accum, "==", [1], string471);
  if (Grace_isTrue(opresult473)) {
  lineNumber = 278
  lineNumber = 1
  lineNumber = 277
  var call474 = callmethod(var_ArrowToken,"new", [0]);
  var_tok = call474;
  var if470 = call474;
  } else {
  lineNumber = 282
  lineNumber = 280
  lineNumber = 278
  var string476 = new GraceString(":=");
  var opresult478 = callmethod(var_accum, "==", [1], string476);
  if (Grace_isTrue(opresult478)) {
  lineNumber = 280
  lineNumber = 1
  lineNumber = 279
  var call479 = callmethod(var_BindToken,"new", [0]);
  var_tok = call479;
  var if475 = call479;
  } else {
  lineNumber = 282
  lineNumber = 283
  lineNumber = 280
  var string481 = new GraceString(":");
  var opresult483 = callmethod(var_accum, "==", [1], string481);
  if (Grace_isTrue(opresult483)) {
  lineNumber = 282
  lineNumber = 1
  lineNumber = 281
  var call484 = callmethod(var_ColonToken,"new", [0]);
  var_tok = call484;
  var if480 = call484;
}
  var if475 = if480;
}
  var if470 = if475;
}
  lineNumber = 283
  var call485 = callmethod(var_tokens,"push", [1], var_tok);
  lineNumber = 285
  lineNumber = 284
  var bool486 = new GraceBoolean(true)
  var_done = bool486;
  var if465 = bool486;
  } else {
  lineNumber = 296
  lineNumber = 288
  lineNumber = 285
  var string488 = new GraceString("d");
  var opresult490 = callmethod(var_mode, "==", [1], string488);
  if (Grace_isTrue(opresult490)) {
  lineNumber = 287
  lineNumber = 1
  lineNumber = 286
  var call491 = callmethod(var_accum,"size", [0]);
  var_indentLevel = call491;
  lineNumber = 288
  lineNumber = 287
  var bool492 = new GraceBoolean(true)
  var_done = bool492;
  var if487 = bool492;
  } else {
  lineNumber = 296
  lineNumber = 290
  lineNumber = 288
  var string494 = new GraceString("n");
  var opresult496 = callmethod(var_mode, "==", [1], string494);
  if (Grace_isTrue(opresult496)) {
  lineNumber = 290
  lineNumber = 289
  var bool497 = new GraceBoolean(true)
  var_done = bool497;
  var if493 = bool497;
  } else {
  lineNumber = 296
  lineNumber = 292
  lineNumber = 290
  var string499 = new GraceString("c");
  var opresult501 = callmethod(var_mode, "==", [1], string499);
  if (Grace_isTrue(opresult501)) {
  lineNumber = 292
  lineNumber = 291
  var bool502 = new GraceBoolean(true)
  var_done = bool502;
  var if498 = bool502;
  } else {
  lineNumber = 296
  lineNumber = 292
  if (Grace_isTrue(var_done)) {
  var if503 = undefined;
  } else {
  lineNumber = 296
  lineNumber = 295
  var string504 = new GraceString("Lexing error: no handler for mode ");
  var opresult506 = callmethod(string504, "++", [1], var_mode);
  lineNumber = 296
  var string507 = new GraceString(" with accum ");
  var opresult509 = callmethod(opresult506, "++", [1], string507);
  var opresult511 = callmethod(opresult509, "++", [1], var_accum);
  lineNumber = 295
  var call512 = callmethod(var_util,"syntax_error", [1], opresult511);
  var if503 = call512;
}
  var if498 = if503;
}
  var if493 = if498;
}
  var if487 = if493;
}
  var if465 = if487;
}
  var if425 = if465;
}
  var if418 = if425;
}
  var if411 = if418;
}
  var if404 = if411;
}
  var if397 = if404;
}
  var if266 = if397;
}
  lineNumber = 300
  lineNumber = 299
  var_startPosition = var_linePosition;
  return var_linePosition
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj262.methods["modechange"] = func264;
var func513 = function(argcv) {
  var curarg = 1;
  var var_str = arguments[curarg];
  curarg++;
  var var_base = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 304
  lineNumber = 303
  var string514 = new GraceString("0123456789abcdefghijklmnopqrstuvqxyz");
  var var_digits = string514;
  lineNumber = 305
  lineNumber = 304
  var var_val = new GraceNum(0);
  lineNumber = 318
  lineNumber = 305
  lineNumber = 318
  var block515 = Grace_allocObject();
  block515.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block515.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block515.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block515.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block515.receiver = this;
  block515.className = 'block<lexer:318>';
  block515.real = function(
var_c
) {
  lineNumber = 307
  lineNumber = 1
  lineNumber = 306
  var call516 = callmethod(var_c,"ord", [0]);
  var var_n = call516;
  lineNumber = 308
  lineNumber = 307
  var prod518 = callmethod(var_val, "*", [1], var_base);
  var_val = prod518;
  lineNumber = 309
  lineNumber = 308
  var var_inc = new GraceNum(0);
  lineNumber = 313
  lineNumber = 314
  lineNumber = 309
  var opresult521 = callmethod(var_n, ">=", [1], new GraceNum(48));
  lineNumber = 314
  lineNumber = 309
  var opresult523 = callmethod(var_n, "<=", [1], new GraceNum(57));
  var opresult525 = callmethod(opresult521, "&", [1], opresult523);
  if (Grace_isTrue(opresult525)) {
  lineNumber = 311
  lineNumber = 310
  var diff527 = callmethod(var_n, "-", [1], new GraceNum(48));
  var_inc = diff527;
  var if519 = diff527;
  } else {
  lineNumber = 313
  lineNumber = 312
  var diff529 = callmethod(var_n, "-", [1], new GraceNum(87));
  var_inc = diff529;
  var if519 = diff529;
}
  lineNumber = 315
  lineNumber = 317
  lineNumber = 314
  var opresult532 = callmethod(var_inc, ">=", [1], var_base);
  if (Grace_isTrue(opresult532)) {
  lineNumber = 315
  var string533 = new GraceString("no such digit '");
  var opresult535 = callmethod(string533, "++", [1], var_c);
  var string536 = new GraceString("' in base ");
  var opresult538 = callmethod(opresult535, "++", [1], string536);
  var opresult540 = callmethod(opresult538, "++", [1], var_base);
  var string541 = new GraceString("");
  var opresult543 = callmethod(opresult540, "++", [1], string541);
  var call544 = callmethod(var_util,"syntax_error", [1], opresult543);
  var if530 = call544;
}
  lineNumber = 318
  lineNumber = 317
  var opresult546 = callmethod(var_val, "+", [1], var_inc);
  var_val = opresult546;
  return opresult546;
};
  var call547 = callmethod(Grace_prelude,"for()do", [1, 1], var_str, block515);
  lineNumber = 319
  return var_val
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj262.methods["fromBase"] = func513;
var func548 = function(argcv) {
  var curarg = 1;
  var var_accum = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 323
  lineNumber = 322
  var var_base = new GraceNum(10);
  lineNumber = 324
  lineNumber = 323
  var string549 = new GraceString("");
  var var_sofar = string549;
  lineNumber = 333
  lineNumber = 324
  lineNumber = 333
  var block550 = Grace_allocObject();
  block550.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block550.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block550.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block550.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block550.receiver = this;
  block550.className = 'block<lexer:333>';
  block550.real = function(
var_c
) {
  lineNumber = 334
  lineNumber = 325
  var string552 = new GraceString("x");
  var opresult554 = callmethod(var_c, "==", [1], string552);
  if (Grace_isTrue(opresult554)) {
  lineNumber = 327
  lineNumber = 1
  lineNumber = 326
  var call555 = callmethod(var_sofar,"asNumber", [0]);
  var_base = call555;
  lineNumber = 329
  lineNumber = 330
  lineNumber = 327
  var opresult558 = callmethod(var_base, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult558)) {
  lineNumber = 329
  lineNumber = 328
  var_base = new GraceNum(16);
  var if556 = new GraceNum(16);
}
  lineNumber = 331
  lineNumber = 330
  var string559 = new GraceString("");
  var_sofar = string559;
  var if551 = string559;
  } else {
  lineNumber = 333
  lineNumber = 332
  var opresult561 = callmethod(var_sofar, "++", [1], var_c);
  var_sofar = opresult561;
  var if551 = opresult561;
}
  return if551;
};
  var call562 = callmethod(Grace_prelude,"for()do", [1, 1], var_accum, block550);
  lineNumber = 335
  lineNumber = 1
  lineNumber = 335
  var call563 = callmethod(this,"fromBase", [2], var_sofar, var_base);
  var call564 = callmethod(call563,"asString", [0]);
  var call565 = callmethod(var_NumToken,"new", [1], call564);
  return call565
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj262.methods["makeNumToken"] = func548;
var func566 = function(argcv) {
  var curarg = 1;
  var var_ov = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 346
  lineNumber = 341
  var call568 = callmethod(var_unicode,"isLetter", [1], var_ov);
  var call569 = callmethod(var_unicode,"isNumber", [1], var_ov);
  var opresult571 = callmethod(call568, "|", [1], call569);
  lineNumber = 342
  var opresult573 = callmethod(var_ov, "==", [1], new GraceNum(95));
  var opresult575 = callmethod(opresult571, "|", [1], opresult573);
  lineNumber = 341
  lineNumber = 342
  var opresult577 = callmethod(var_ov, "==", [1], new GraceNum(39));
  var opresult579 = callmethod(opresult575, "|", [1], opresult577);
  if (Grace_isTrue(opresult579)) {
  lineNumber = 344
  var bool580 = new GraceBoolean(true)
  var if567 = bool580;
  } else {
  lineNumber = 346
  var bool581 = new GraceBoolean(false)
  var if567 = bool581;
}
  return if567
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj262.methods["isidentifierchar"] = func566;
var func582 = function(argcv) {
  var curarg = 1;
  var var_c = arguments[curarg];
  curarg++;
  var var_ordval = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 353
  lineNumber = 352
  var bool583 = new GraceBoolean(false)
  var var_ret = bool583;
  lineNumber = 359
  lineNumber = 360
  lineNumber = 353
  var string585 = new GraceString("-");
  var opresult587 = callmethod(var_c, "==", [1], string585);
  lineNumber = 360
  lineNumber = 353
  var string588 = new GraceString("&");
  var opresult590 = callmethod(var_c, "==", [1], string588);
  var opresult592 = callmethod(opresult587, "|", [1], opresult590);
  lineNumber = 360
  lineNumber = 353
  var string593 = new GraceString("|");
  var opresult595 = callmethod(var_c, "==", [1], string593);
  var opresult597 = callmethod(opresult592, "|", [1], opresult595);
  lineNumber = 360
  lineNumber = 353
  var string598 = new GraceString(":");
  var opresult600 = callmethod(var_c, "==", [1], string598);
  var opresult602 = callmethod(opresult597, "|", [1], opresult600);
  lineNumber = 360
  lineNumber = 354
  var string603 = new GraceString("%");
  var opresult605 = callmethod(var_c, "==", [1], string603);
  var opresult607 = callmethod(opresult602, "|", [1], opresult605);
  lineNumber = 360
  lineNumber = 354
  var string608 = new GraceString("^");
  var opresult610 = callmethod(var_c, "==", [1], string608);
  var opresult612 = callmethod(opresult607, "|", [1], opresult610);
  lineNumber = 360
  lineNumber = 355
  var string613 = new GraceString("*");
  var opresult615 = callmethod(var_c, "==", [1], string613);
  var opresult617 = callmethod(opresult612, "|", [1], opresult615);
  lineNumber = 360
  lineNumber = 355
  var string618 = new GraceString("/");
  var opresult620 = callmethod(var_c, "==", [1], string618);
  var opresult622 = callmethod(opresult617, "|", [1], opresult620);
  lineNumber = 360
  lineNumber = 355
  var string623 = new GraceString("+");
  var opresult625 = callmethod(var_c, "==", [1], string623);
  var opresult627 = callmethod(opresult622, "|", [1], opresult625);
  lineNumber = 360
  lineNumber = 355
  var string628 = new GraceString("!");
  var opresult630 = callmethod(var_c, "==", [1], string628);
  var opresult632 = callmethod(opresult627, "|", [1], opresult630);
  if (Grace_isTrue(opresult632)) {
  lineNumber = 357
  lineNumber = 356
  var bool633 = new GraceBoolean(true)
  var_ret = bool633;
  var if584 = bool633;
  } else {
  lineNumber = 359
  lineNumber = 357
  var call635 = callmethod(var_unicode,"isSymbolMathematical", [1], var_ordval);
  if (Grace_isTrue(call635)) {
  lineNumber = 359
  lineNumber = 358
  var bool636 = new GraceBoolean(true)
  var_ret = bool636;
  var if634 = bool636;
}
  var if584 = if634;
}
  lineNumber = 360
  return var_ret
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj262.methods["isoperatorchar"] = func582;
var func637 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 366
  lineNumber = 1
  lineNumber = 366
  var call638 = callmethod(var_util,"infile", [0]);
  lineNumber = 367
  var call639 = callmethod(this,"lexfile", [1], call638);
  return call639
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj262.methods["lexinput"] = func637;
var func640 = function(argcv) {
  var curarg = 1;
  var var_file = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 370
  var string641 = new GraceString("reading source.");
  var call642 = callmethod(var_util,"log_verbose", [1], string641);
  lineNumber = 373
  lineNumber = 1
  lineNumber = 371
  var call643 = callmethod(var_file,"read", [0]);
  var var_input = call643;
  lineNumber = 374
  var array644 = new GraceList([
]);

  var var_tokens = array644;
  lineNumber = 375
  lineNumber = 374
  var string645 = new GraceString("n");
  var var_mode = string645;
  lineNumber = 376
  lineNumber = 375
  var var_newmode = var_mode;
  lineNumber = 377
  lineNumber = 376
  var bool646 = new GraceBoolean(false)
  var var_instr = bool646;
  lineNumber = 378
  lineNumber = 377
  var bool647 = new GraceBoolean(false)
  var var_inBackticks = bool647;
  lineNumber = 379
  lineNumber = 378
  var bool648 = new GraceBoolean(false)
  var var_backtickIdent = bool648;
  lineNumber = 380
  lineNumber = 379
  var string649 = new GraceString("");
  var var_accum = string649;
  lineNumber = 381
  lineNumber = 380
  var bool650 = new GraceBoolean(false)
  var var_escaped = bool650;
  lineNumber = 382
  lineNumber = 381
  var string651 = new GraceString("");
  var var_prev = string651;
  lineNumber = 383
  lineNumber = 382
  var var_unichars = new GraceNum(0);
  lineNumber = 384
  lineNumber = 383
  var var_codepoint = new GraceNum(0);
  lineNumber = 385
  lineNumber = 384
  var var_interpdepth = new GraceNum(0);
  lineNumber = 386
  lineNumber = 385
  var bool652 = new GraceBoolean(false)
  var var_interpString = bool652;
  lineNumber = 387
  lineNumber = 386
  var bool653 = new GraceBoolean(true)
  var var_atStart = bool653;
  lineNumber = 388
  lineNumber = 387
  var_linePosition = new GraceNum(0);
  lineNumber = 388
  var string654 = new GraceString("lexing.");
  var call655 = callmethod(var_util,"log_verbose", [1], string654);
  lineNumber = 657
  lineNumber = 389
  lineNumber = 657
  var block656 = Grace_allocObject();
  block656.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block656.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block656.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block656.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block656.receiver = this;
  block656.className = 'block<lexer:657>';
  block656.real = function(
var_c
) {
  lineNumber = 391
  lineNumber = 390
  var opresult658 = callmethod(var_linePosition, "+", [1], new GraceNum(1));
  var_linePosition = opresult658;
  lineNumber = 391
  var call659 = callmethod(var_util,"setPosition", [2], var_lineNumber, var_linePosition);
  lineNumber = 393
  lineNumber = 392
  var string660 = new GraceString("");
  var var_ct = string660;
  lineNumber = 394
  lineNumber = 1
  lineNumber = 393
  var call661 = callmethod(var_c,"ord", [0]);
  var var_ordval = call661;
  lineNumber = 399
  lineNumber = 394
  var call663 = callmethod(var_unicode,"isSeparator", [1], var_ordval);
  var opresult665 = callmethod(var_ordval, "/=", [1], new GraceNum(32));
  var opresult667 = callmethod(call663, "&", [1], opresult665);
  lineNumber = 395
  var opresult669 = callmethod(var_ordval, "/=", [1], new GraceNum(8232));
  var opresult671 = callmethod(opresult667, "&", [1], opresult669);
  lineNumber = 394
  lineNumber = 395
  var opresult673 = callmethod(var_ordval, "==", [1], new GraceNum(9));
  var opresult675 = callmethod(opresult671, "|", [1], opresult673);
  if (Grace_isTrue(opresult675)) {
  lineNumber = 399
  lineNumber = 398
  var string676 = new GraceString("illegal whitespace in input: ");
  lineNumber = 399
  var string677 = new GraceString("");
  var opresult679 = callmethod(string677, "++", [1], var_ordval);
  var string680 = new GraceString(", ");
  var opresult682 = callmethod(opresult679, "++", [1], string680);
  var call683 = callmethod(var_unicode,"name", [1], var_c);
  var opresult685 = callmethod(opresult682, "++", [1], call683);
  var string686 = new GraceString("");
  var opresult688 = callmethod(opresult685, "++", [1], string686);
  var opresult690 = callmethod(string676, "++", [1], opresult688);
  lineNumber = 398
  var call691 = callmethod(var_util,"syntax_error", [1], opresult690);
  var if662 = call691;
}
  lineNumber = 407
  lineNumber = 401
  var call693 = callmethod(var_unicode,"isControl", [1], var_ordval);
  var opresult695 = callmethod(var_ordval, "/=", [1], new GraceNum(10));
  var opresult697 = callmethod(call693, "&", [1], opresult695);
  lineNumber = 402
  var opresult699 = callmethod(var_ordval, "/=", [1], new GraceNum(13));
  var opresult701 = callmethod(opresult697, "&", [1], opresult699);
  if (Grace_isTrue(opresult701)) {
  lineNumber = 407
  lineNumber = 405
  var string702 = new GraceString("illegal control character in ");
  lineNumber = 407
  lineNumber = 406
  var string703 = new GraceString("input: #");
  var opresult705 = callmethod(string703, "++", [1], var_ordval);
  var string706 = new GraceString(" on line ");
  var opresult708 = callmethod(opresult705, "++", [1], string706);
  var opresult710 = callmethod(opresult708, "++", [1], var_lineNumber);
  var string711 = new GraceString("");
  var opresult713 = callmethod(opresult710, "++", [1], string711);
  var opresult715 = callmethod(string702, "++", [1], opresult713);
  lineNumber = 407
  var string716 = new GraceString(" character ");
  var opresult718 = callmethod(string716, "++", [1], var_linePosition);
  var string719 = new GraceString(".");
  var opresult721 = callmethod(opresult718, "++", [1], string719);
  var opresult723 = callmethod(opresult715, "++", [1], opresult721);
  lineNumber = 405
  var call724 = callmethod(var_util,"syntax_error", [1], opresult723);
  var if692 = call724;
}
  lineNumber = 415
  lineNumber = 417
  lineNumber = 409
  lineNumber = 417
  lineNumber = 409
  var opresult727 = callmethod(var_linePosition, "==", [1], new GraceNum(1));
  var opresult729 = callmethod(var_atStart, "&", [1], opresult727);
  if (Grace_isTrue(opresult729)) {
  lineNumber = 415
  lineNumber = 416
  lineNumber = 410
  var string731 = new GraceString("#");
  var opresult733 = callmethod(var_c, "==", [1], string731);
  if (Grace_isTrue(opresult733)) {
  lineNumber = 412
  lineNumber = 411
  var string734 = new GraceString("c");
  var_mode = string734;
  lineNumber = 413
  lineNumber = 412
  var_newmode = var_mode;
  var if730 = var_mode;
  } else {
  lineNumber = 415
  lineNumber = 414
  var bool735 = new GraceBoolean(false)
  var_atStart = bool735;
  var if730 = bool735;
}
  var if725 = if730;
}
  lineNumber = 492
  lineNumber = 494
  lineNumber = 417
  var opresult738 = callmethod(var_instr, "|", [1], var_inBackticks);
  if (Grace_isTrue(opresult738)) {
  var if736 = undefined;
  } else {
  lineNumber = 492
  lineNumber = 494
  lineNumber = 419
  var string740 = new GraceString("c");
  var opresult742 = callmethod(var_mode, "/=", [1], string740);
  if (Grace_isTrue(opresult742)) {
  lineNumber = 423
  lineNumber = 424
  lineNumber = 421
  var string744 = new GraceString(" ");
  var opresult746 = callmethod(var_c, "==", [1], string744);
  lineNumber = 424
  lineNumber = 421
  var string747 = new GraceString("d");
  var opresult749 = callmethod(var_mode, "/=", [1], string747);
  var opresult751 = callmethod(opresult746, "&", [1], opresult749);
  if (Grace_isTrue(opresult751)) {
  lineNumber = 423
  lineNumber = 422
  var string752 = new GraceString("n");
  var_newmode = string752;
  var if743 = string752;
}
  lineNumber = 432
  lineNumber = 434
  lineNumber = 424
  var string754 = new GraceString("\"");
  var opresult756 = callmethod(var_c, "==", [1], string754);
  if (Grace_isTrue(opresult756)) {
  lineNumber = 427
  lineNumber = 426
  var string757 = new GraceString("\"");
  var_newmode = string757;
  lineNumber = 428
  lineNumber = 427
  var bool758 = new GraceBoolean(true)
  var_instr = bool758;
  lineNumber = 432
  lineNumber = 433
  lineNumber = 428
  var string760 = new GraceString("x");
  var opresult762 = callmethod(var_prev, "==", [1], string760);
  if (Grace_isTrue(opresult762)) {
  lineNumber = 431
  lineNumber = 430
  var string763 = new GraceString("x");
  var_newmode = string763;
  lineNumber = 432
  lineNumber = 431
  var string764 = new GraceString("n");
  var_mode = string764;
  var if759 = string764;
}
  var if753 = if759;
}
  lineNumber = 437
  lineNumber = 438
  lineNumber = 434
  var string766 = new GraceString("`");
  var opresult768 = callmethod(var_c, "==", [1], string766);
  if (Grace_isTrue(opresult768)) {
  lineNumber = 436
  lineNumber = 435
  var string769 = new GraceString("I");
  var_newmode = string769;
  lineNumber = 437
  lineNumber = 436
  var bool770 = new GraceBoolean(true)
  var_inBackticks = bool770;
  var if765 = bool770;
}
  lineNumber = 438
  lineNumber = 439
  var call771 = callmethod(this,"isidentifierchar", [1], var_ordval);
  var_ct = call771;
  lineNumber = 441
  lineNumber = 439
  if (Grace_isTrue(var_ct)) {
  lineNumber = 441
  lineNumber = 440
  var string773 = new GraceString("i");
  var_newmode = string773;
  var if772 = string773;
}
  lineNumber = 443
  lineNumber = 442
  var opresult775 = callmethod(var_ordval, ">=", [1], new GraceNum(48));
  lineNumber = 443
  lineNumber = 442
  var opresult777 = callmethod(var_ordval, "<=", [1], new GraceNum(57));
  var opresult779 = callmethod(opresult775, "&", [1], opresult777);
  var_ct = opresult779;
  lineNumber = 445
  lineNumber = 446
  lineNumber = 443
  lineNumber = 446
  lineNumber = 443
  var string781 = new GraceString("i");
  var opresult783 = callmethod(var_mode, "/=", [1], string781);
  var opresult785 = callmethod(var_ct, "&", [1], opresult783);
  if (Grace_isTrue(opresult785)) {
  lineNumber = 445
  lineNumber = 444
  var string786 = new GraceString("m");
  var_newmode = string786;
  var if780 = string786;
}
  lineNumber = 448
  lineNumber = 449
  lineNumber = 446
  var opresult789 = callmethod(var_ordval, ">=", [1], new GraceNum(97));
  lineNumber = 449
  lineNumber = 446
  var opresult791 = callmethod(var_ordval, "<=", [1], new GraceNum(122));
  var opresult793 = callmethod(opresult789, "&", [1], opresult791);
  lineNumber = 449
  lineNumber = 446
  var string794 = new GraceString("m");
  var opresult796 = callmethod(var_mode, "==", [1], string794);
  var opresult798 = callmethod(opresult793, "&", [1], opresult796);
  if (Grace_isTrue(opresult798)) {
  lineNumber = 448
  lineNumber = 447
  var string799 = new GraceString("m");
  var_newmode = string799;
  var if787 = string799;
}
  lineNumber = 459
  lineNumber = 460
  lineNumber = 449
  var string801 = new GraceString("i");
  var opresult803 = callmethod(var_mode, "==", [1], string801);
  lineNumber = 460
  lineNumber = 449
  var string804 = new GraceString("<");
  var opresult806 = callmethod(var_c, "==", [1], string804);
  var opresult808 = callmethod(opresult803, "&", [1], opresult806);
  if (Grace_isTrue(opresult808)) {
  lineNumber = 451
  lineNumber = 450
  var string809 = new GraceString("<");
  var_newmode = string809;
  var if800 = string809;
  } else {
  lineNumber = 459
  lineNumber = 457
  lineNumber = 451
  var string811 = new GraceString("i");
  var opresult813 = callmethod(var_mode, "==", [1], string811);
  lineNumber = 457
  lineNumber = 451
  var string814 = new GraceString(">");
  var opresult816 = callmethod(var_mode, "==", [1], string814);
  var opresult818 = callmethod(opresult813, "|", [1], opresult816);
  lineNumber = 457
  lineNumber = 452
  var string819 = new GraceString(">");
  var opresult821 = callmethod(var_c, "==", [1], string819);
  var opresult823 = callmethod(opresult818, "&", [1], opresult821);
  if (Grace_isTrue(opresult823)) {
  lineNumber = 454
  lineNumber = 456
  lineNumber = 453
  var string825 = new GraceString(">");
  var opresult827 = callmethod(var_mode, "==", [1], string825);
  if (Grace_isTrue(opresult827)) {
  lineNumber = 454
  lineNumber = 455
  var call828 = callmethod(this,"modechange", [3], var_tokens, var_mode, var_accum);
  var if824 = call828;
}
  lineNumber = 457
  lineNumber = 456
  var string829 = new GraceString(">");
  var_newmode = string829;
  var if810 = string829;
  } else {
  lineNumber = 459
  lineNumber = 457
  lineNumber = 460
  var call831 = callmethod(this,"isoperatorchar", [2], var_c, var_ordval);
  if (Grace_isTrue(call831)) {
  lineNumber = 459
  lineNumber = 458
  var string832 = new GraceString("o");
  var_newmode = string832;
  var if830 = string832;
}
  var if810 = if830;
}
  var if800 = if810;
}
  lineNumber = 464
  lineNumber = 465
  lineNumber = 460
  var string834 = new GraceString("(");
  var opresult836 = callmethod(var_c, "==", [1], string834);
  lineNumber = 465
  lineNumber = 460
  var string837 = new GraceString(")");
  var opresult839 = callmethod(var_c, "==", [1], string837);
  var opresult841 = callmethod(opresult836, "|", [1], opresult839);
  lineNumber = 465
  lineNumber = 460
  var string842 = new GraceString(",");
  var opresult844 = callmethod(var_c, "==", [1], string842);
  var opresult846 = callmethod(opresult841, "|", [1], opresult844);
  lineNumber = 465
  lineNumber = 460
  var string847 = new GraceString(".");
  var opresult849 = callmethod(var_c, "==", [1], string847);
  var opresult851 = callmethod(opresult846, "|", [1], opresult849);
  lineNumber = 465
  lineNumber = 461
  var string852 = new GraceString("{");
  var opresult854 = callmethod(var_c, "==", [1], string852);
  var opresult856 = callmethod(opresult851, "|", [1], opresult854);
  lineNumber = 465
  lineNumber = 461
  var string857 = new GraceString("}");
  var opresult859 = callmethod(var_c, "==", [1], string857);
  var opresult861 = callmethod(opresult856, "|", [1], opresult859);
  lineNumber = 465
  lineNumber = 461
  var string862 = new GraceString("[");
  var opresult864 = callmethod(var_c, "==", [1], string862);
  var opresult866 = callmethod(opresult861, "|", [1], opresult864);
  lineNumber = 465
  lineNumber = 461
  var string867 = new GraceString("]");
  var opresult869 = callmethod(var_c, "==", [1], string867);
  var opresult871 = callmethod(opresult866, "|", [1], opresult869);
  lineNumber = 465
  lineNumber = 462
  var string872 = new GraceString(";");
  var opresult874 = callmethod(var_c, "==", [1], string872);
  var opresult876 = callmethod(opresult871, "|", [1], opresult874);
  if (Grace_isTrue(opresult876)) {
  lineNumber = 464
  lineNumber = 463
  var_newmode = var_c;
  var if833 = var_c;
}
  lineNumber = 469
  lineNumber = 470
  lineNumber = 465
  var string878 = new GraceString(".");
  var opresult880 = callmethod(var_c, "==", [1], string878);
  lineNumber = 470
  lineNumber = 465
  var string881 = new GraceString(".");
  var opresult883 = callmethod(var_accum, "==", [1], string881);
  var opresult885 = callmethod(opresult880, "&", [1], opresult883);
  if (Grace_isTrue(opresult885)) {
  lineNumber = 468
  lineNumber = 467
  var string886 = new GraceString("o");
  var_mode = string886;
  lineNumber = 469
  lineNumber = 468
  var_newmode = var_mode;
  var if877 = var_mode;
}
  lineNumber = 474
  lineNumber = 475
  lineNumber = 470
  var string888 = new GraceString("/");
  var opresult890 = callmethod(var_c, "==", [1], string888);
  lineNumber = 475
  lineNumber = 470
  var string891 = new GraceString("/");
  var opresult893 = callmethod(var_accum, "==", [1], string891);
  var opresult895 = callmethod(opresult890, "&", [1], opresult893);
  if (Grace_isTrue(opresult895)) {
  lineNumber = 473
  lineNumber = 472
  var string896 = new GraceString("c");
  var_mode = string896;
  lineNumber = 474
  lineNumber = 473
  var_newmode = var_mode;
  var if887 = var_mode;
}
  lineNumber = 483
  lineNumber = 477
  lineNumber = 476
  lineNumber = 486
  lineNumber = 475
  var opresult899 = callmethod(var_newmode, "==", [1], var_mode);
  lineNumber = 486
  lineNumber = 475
  var string900 = new GraceString("n");
  var opresult902 = callmethod(var_mode, "==", [1], string900);
  var opresult904 = callmethod(opresult899, "&", [1], opresult902);
  lineNumber = 476
  lineNumber = 1
  lineNumber = 476
  var call905 = callmethod(var_unicode,"isSeparator", [1], var_ordval);
  var call906 = callmethod(call905,"not", [0]);
  var opresult908 = callmethod(opresult904, "&", [1], call906);
  lineNumber = 477
  lineNumber = 1
  lineNumber = 477
  var call909 = callmethod(var_unicode,"isControl", [1], var_ordval);
  var call910 = callmethod(call909,"not", [0]);
  var opresult912 = callmethod(opresult908, "&", [1], call910);
  if (Grace_isTrue(opresult912)) {
  lineNumber = 483
  lineNumber = 478
  lineNumber = 1
  lineNumber = 478
  var call914 = callmethod(var_unicode,"isSeparator", [1], var_ordval);
  var call915 = callmethod(call914,"not", [0]);
  lineNumber = 479
  var opresult917 = callmethod(var_ordval, "/=", [1], new GraceNum(10));
  var opresult919 = callmethod(call915, "&", [1], opresult917);
  lineNumber = 478
  lineNumber = 479
  var opresult921 = callmethod(var_ordval, "/=", [1], new GraceNum(13));
  var opresult923 = callmethod(opresult919, "&", [1], opresult921);
  lineNumber = 478
  lineNumber = 480
  var opresult925 = callmethod(var_ordval, "/=", [1], new GraceNum(32));
  var opresult927 = callmethod(opresult923, "&", [1], opresult925);
  if (Grace_isTrue(opresult927)) {
  lineNumber = 483
  lineNumber = 481
  var string928 = new GraceString("unknown character in ");
  lineNumber = 483
  lineNumber = 482
  var string929 = new GraceString("input: #");
  var opresult931 = callmethod(string929, "++", [1], var_ordval);
  var string932 = new GraceString("");
  var opresult934 = callmethod(opresult931, "++", [1], string932);
  var opresult936 = callmethod(string928, "++", [1], opresult934);
  lineNumber = 483
  var string937 = new GraceString(" '");
  var opresult939 = callmethod(string937, "++", [1], var_c);
  var string940 = new GraceString("', ");
  var opresult942 = callmethod(opresult939, "++", [1], string940);
  var call943 = callmethod(var_unicode,"name", [1], var_c);
  var opresult945 = callmethod(opresult942, "++", [1], call943);
  var string946 = new GraceString("");
  var opresult948 = callmethod(opresult945, "++", [1], string946);
  var opresult950 = callmethod(opresult936, "++", [1], opresult948);
  lineNumber = 481
  var call951 = callmethod(var_util,"syntax_error", [1], opresult950);
  var if913 = call951;
}
  var if897 = if913;
}
  lineNumber = 492
  lineNumber = 493
  lineNumber = 486
  var string953 = new GraceString(".");
  var opresult955 = callmethod(var_c, "==", [1], string953);
  lineNumber = 493
  lineNumber = 486
  var string956 = new GraceString("..");
  var opresult958 = callmethod(var_accum, "==", [1], string956);
  var opresult960 = callmethod(opresult955, "&", [1], opresult958);
  if (Grace_isTrue(opresult960)) {
  lineNumber = 489
  lineNumber = 488
  var string961 = new GraceString("n");
  var_mode = string961;
  lineNumber = 490
  lineNumber = 489
  var_newmode = var_mode;
  lineNumber = 490
  var string962 = new GraceString("i");
  var string963 = new GraceString("...");
  lineNumber = 491
  var call964 = callmethod(this,"modechange", [3], var_tokens, string962, string963);
  lineNumber = 492
  lineNumber = 491
  var string965 = new GraceString("");
  var_accum = string965;
  var if952 = string965;
}
  var if739 = if952;
}
  var if736 = if739;
}
  lineNumber = 498
  lineNumber = 499
  lineNumber = 494
  var string967 = new GraceString("x");
  var opresult969 = callmethod(var_mode, "==", [1], string967);
  lineNumber = 499
  lineNumber = 494
  var string970 = new GraceString("\"");
  var opresult972 = callmethod(var_c, "==", [1], string970);
  var opresult974 = callmethod(opresult969, "&", [1], opresult972);
  lineNumber = 499
  lineNumber = 1
  lineNumber = 494
  var call975 = callmethod(var_escaped,"not", [0]);
  var opresult977 = callmethod(opresult974, "&", [1], call975);
  if (Grace_isTrue(opresult977)) {
  lineNumber = 497
  lineNumber = 496
  var string978 = new GraceString("n");
  var_newmode = string978;
  lineNumber = 498
  lineNumber = 497
  var bool979 = new GraceBoolean(false)
  var_instr = bool979;
  var if966 = bool979;
}
  lineNumber = 508
  lineNumber = 510
  lineNumber = 499
  var string981 = new GraceString("\"");
  var opresult983 = callmethod(var_mode, "==", [1], string981);
  lineNumber = 510
  lineNumber = 499
  var string984 = new GraceString("\"");
  var opresult986 = callmethod(var_c, "==", [1], string984);
  var opresult988 = callmethod(opresult983, "&", [1], opresult986);
  lineNumber = 510
  lineNumber = 1
  lineNumber = 499
  var call989 = callmethod(var_escaped,"not", [0]);
  var opresult991 = callmethod(opresult988, "&", [1], call989);
  if (Grace_isTrue(opresult991)) {
  lineNumber = 502
  lineNumber = 501
  var string992 = new GraceString("n");
  var_newmode = string992;
  lineNumber = 503
  lineNumber = 502
  var bool993 = new GraceBoolean(false)
  var_instr = bool993;
  lineNumber = 508
  lineNumber = 503
  if (Grace_isTrue(var_interpString)) {
  lineNumber = 504
  lineNumber = 505
  var call995 = callmethod(this,"modechange", [3], var_tokens, var_mode, var_accum);
  var string996 = new GraceString(")");
  var string997 = new GraceString(")");
  lineNumber = 506
  var call998 = callmethod(this,"modechange", [3], var_tokens, string996, string997);
  lineNumber = 507
  lineNumber = 506
  var_mode = var_newmode;
  lineNumber = 508
  lineNumber = 507
  var bool999 = new GraceBoolean(false)
  var_interpString = bool999;
  var if994 = bool999;
}
  var if980 = if994;
}
  lineNumber = 515
  lineNumber = 516
  lineNumber = 510
  var string1001 = new GraceString("I");
  var opresult1003 = callmethod(var_mode, "==", [1], string1001);
  var opresult1005 = callmethod(opresult1003, "&", [1], var_inBackticks);
  lineNumber = 516
  lineNumber = 510
  var string1006 = new GraceString("`");
  var opresult1008 = callmethod(var_c, "==", [1], string1006);
  var opresult1010 = callmethod(opresult1005, "&", [1], opresult1008);
  if (Grace_isTrue(opresult1010)) {
  lineNumber = 513
  lineNumber = 512
  var string1011 = new GraceString("n");
  var_newmode = string1011;
  lineNumber = 514
  lineNumber = 513
  var bool1012 = new GraceBoolean(false)
  var_inBackticks = bool1012;
  lineNumber = 515
  lineNumber = 514
  var bool1013 = new GraceBoolean(true)
  var_backtickIdent = bool1013;
  var if1000 = bool1013;
}
  lineNumber = 639
  lineNumber = 640
  lineNumber = 516
  var opresult1016 = callmethod(var_newmode, "/=", [1], var_mode);
  if (Grace_isTrue(opresult1016)) {
  lineNumber = 519
  lineNumber = 520
  var call1017 = callmethod(this,"modechange", [3], var_tokens, var_mode, var_accum);
  lineNumber = 526
  lineNumber = 527
  lineNumber = 520
  var string1019 = new GraceString("}");
  var opresult1021 = callmethod(var_newmode, "==", [1], string1019);
  lineNumber = 527
  lineNumber = 520
  var opresult1023 = callmethod(var_interpdepth, ">", [1], new GraceNum(0));
  var opresult1025 = callmethod(opresult1021, "&", [1], opresult1023);
  if (Grace_isTrue(opresult1025)) {
  lineNumber = 521
  var string1026 = new GraceString(")");
  var string1027 = new GraceString(")");
  lineNumber = 522
  var call1028 = callmethod(this,"modechange", [3], var_tokens, string1026, string1027);
  var string1029 = new GraceString("o");
  var string1030 = new GraceString("++");
  lineNumber = 523
  var call1031 = callmethod(this,"modechange", [3], var_tokens, string1029, string1030);
  lineNumber = 524
  lineNumber = 523
  var string1032 = new GraceString("\"");
  var_newmode = string1032;
  lineNumber = 525
  lineNumber = 524
  var bool1033 = new GraceBoolean(true)
  var_instr = bool1033;
  lineNumber = 526
  lineNumber = 525
  var diff1035 = callmethod(var_interpdepth, "-", [1], new GraceNum(1));
  var_interpdepth = diff1035;
  var if1018 = diff1035;
}
  lineNumber = 528
  lineNumber = 527
  var_mode = var_newmode;
  lineNumber = 535
  lineNumber = 536
  lineNumber = 528
  var opresult1038 = callmethod(var_instr, "|", [1], var_inBackticks);
  if (Grace_isTrue(opresult1038)) {
  lineNumber = 533
  lineNumber = 532
  var string1039 = new GraceString("");
  var_accum = string1039;
  var if1036 = string1039;
  } else {
  lineNumber = 535
  lineNumber = 534
  var_accum = var_c;
  var if1036 = var_c;
}
  lineNumber = 543
  lineNumber = 544
  lineNumber = 536
  var string1041 = new GraceString("(");
  var opresult1043 = callmethod(var_mode, "==", [1], string1041);
  lineNumber = 544
  lineNumber = 536
  var string1044 = new GraceString(")");
  var opresult1046 = callmethod(var_mode, "==", [1], string1044);
  var opresult1048 = callmethod(opresult1043, "|", [1], opresult1046);
  lineNumber = 544
  lineNumber = 536
  var string1049 = new GraceString("[");
  var opresult1051 = callmethod(var_mode, "==", [1], string1049);
  var opresult1053 = callmethod(opresult1048, "|", [1], opresult1051);
  lineNumber = 544
  lineNumber = 537
  var string1054 = new GraceString("]");
  var opresult1056 = callmethod(var_mode, "==", [1], string1054);
  var opresult1058 = callmethod(opresult1053, "|", [1], opresult1056);
  lineNumber = 544
  lineNumber = 537
  var string1059 = new GraceString("{");
  var opresult1061 = callmethod(var_mode, "==", [1], string1059);
  var opresult1063 = callmethod(opresult1058, "|", [1], opresult1061);
  lineNumber = 544
  lineNumber = 538
  var string1064 = new GraceString("}");
  var opresult1066 = callmethod(var_mode, "==", [1], string1064);
  var opresult1068 = callmethod(opresult1063, "|", [1], opresult1066);
  if (Grace_isTrue(opresult1068)) {
  lineNumber = 539
  lineNumber = 540
  var call1069 = callmethod(this,"modechange", [3], var_tokens, var_mode, var_accum);
  lineNumber = 541
  lineNumber = 540
  var string1070 = new GraceString("n");
  var_mode = string1070;
  lineNumber = 542
  lineNumber = 541
  var string1071 = new GraceString("n");
  var_newmode = string1071;
  lineNumber = 543
  lineNumber = 542
  var string1072 = new GraceString("");
  var_accum = string1072;
  var if1040 = string1072;
}
  lineNumber = 545
  lineNumber = 544
  var bool1073 = new GraceBoolean(false)
  var_backtickIdent = bool1073;
  var if1014 = bool1073;
  } else {
  lineNumber = 639
  lineNumber = 545
  if (Grace_isTrue(var_instr)) {
  lineNumber = 552
  lineNumber = 555
  lineNumber = 546
  var string1076 = new GraceString("\n");
  var opresult1078 = callmethod(var_c, "==", [1], string1076);
  if (Grace_isTrue(opresult1078)) {
  lineNumber = 552
  lineNumber = 554
  lineNumber = 547
  var opresult1081 = callmethod(var_interpdepth, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1081)) {
  lineNumber = 549
  lineNumber = 548
  var string1082 = new GraceString("Runaway string ");
  lineNumber = 549
  var string1083 = new GraceString("interpolation");
  var opresult1085 = callmethod(string1082, "++", [1], string1083);
  lineNumber = 548
  var call1086 = callmethod(var_util,"syntax_error", [1], opresult1085);
  var if1079 = call1086;
  } else {
  lineNumber = 552
  lineNumber = 551
  var string1087 = new GraceString("Newlines not permitted ");
  lineNumber = 552
  var string1088 = new GraceString("in string literals");
  var opresult1090 = callmethod(string1087, "++", [1], string1088);
  lineNumber = 551
  var call1091 = callmethod(var_util,"syntax_error", [1], opresult1090);
  var if1079 = call1091;
}
  var if1075 = if1079;
}
  lineNumber = 624
  lineNumber = 555
  if (Grace_isTrue(var_escaped)) {
  lineNumber = 591
  lineNumber = 592
  lineNumber = 556
  var string1094 = new GraceString("n");
  var opresult1096 = callmethod(var_c, "==", [1], string1094);
  if (Grace_isTrue(opresult1096)) {
  lineNumber = 559
  lineNumber = 558
  var string1097 = new GraceString("\n");
  var opresult1099 = callmethod(var_accum, "++", [1], string1097);
  var_accum = opresult1099;
  var if1093 = opresult1099;
  } else {
  lineNumber = 591
  lineNumber = 564
  lineNumber = 559
  var string1101 = new GraceString("u");
  var opresult1103 = callmethod(var_c, "==", [1], string1101);
  if (Grace_isTrue(opresult1103)) {
  lineNumber = 563
  lineNumber = 562
  var_unichars = new GraceNum(4);
  lineNumber = 564
  lineNumber = 563
  var_codepoint = new GraceNum(0);
  var if1100 = new GraceNum(0);
  } else {
  lineNumber = 591
  lineNumber = 569
  lineNumber = 564
  var string1105 = new GraceString("U");
  var opresult1107 = callmethod(var_c, "==", [1], string1105);
  if (Grace_isTrue(opresult1107)) {
  lineNumber = 568
  lineNumber = 567
  var_unichars = new GraceNum(6);
  lineNumber = 569
  lineNumber = 568
  var_codepoint = new GraceNum(0);
  var if1104 = new GraceNum(0);
  } else {
  lineNumber = 591
  lineNumber = 572
  lineNumber = 569
  var string1109 = new GraceString("t");
  var opresult1111 = callmethod(var_c, "==", [1], string1109);
  if (Grace_isTrue(opresult1111)) {
  lineNumber = 572
  lineNumber = 571
  var string1112 = new GraceString("\u0009");
  var opresult1114 = callmethod(var_accum, "++", [1], string1112);
  var_accum = opresult1114;
  var if1108 = opresult1114;
  } else {
  lineNumber = 591
  lineNumber = 575
  lineNumber = 572
  var string1116 = new GraceString("r");
  var opresult1118 = callmethod(var_c, "==", [1], string1116);
  if (Grace_isTrue(opresult1118)) {
  lineNumber = 575
  lineNumber = 574
  var string1119 = new GraceString("\u000d");
  var opresult1121 = callmethod(var_accum, "++", [1], string1119);
  var_accum = opresult1121;
  var if1115 = opresult1121;
  } else {
  lineNumber = 591
  lineNumber = 578
  lineNumber = 575
  var string1123 = new GraceString("b");
  var opresult1125 = callmethod(var_c, "==", [1], string1123);
  if (Grace_isTrue(opresult1125)) {
  lineNumber = 578
  lineNumber = 577
  var string1126 = new GraceString("\u0008");
  var opresult1128 = callmethod(var_accum, "++", [1], string1126);
  var_accum = opresult1128;
  var if1122 = opresult1128;
  } else {
  lineNumber = 591
  lineNumber = 581
  lineNumber = 578
  var string1130 = new GraceString("l");
  var opresult1132 = callmethod(var_c, "==", [1], string1130);
  if (Grace_isTrue(opresult1132)) {
  lineNumber = 581
  lineNumber = 580
  var string1133 = new GraceString("\u8202");
  var opresult1135 = callmethod(var_accum, "++", [1], string1133);
  var_accum = opresult1135;
  var if1129 = opresult1135;
  } else {
  lineNumber = 591
  lineNumber = 584
  lineNumber = 581
  var string1137 = new GraceString("f");
  var opresult1139 = callmethod(var_c, "==", [1], string1137);
  if (Grace_isTrue(opresult1139)) {
  lineNumber = 584
  lineNumber = 583
  var string1140 = new GraceString("\u000c");
  var opresult1142 = callmethod(var_accum, "++", [1], string1140);
  var_accum = opresult1142;
  var if1136 = opresult1142;
  } else {
  lineNumber = 591
  lineNumber = 587
  lineNumber = 584
  var string1144 = new GraceString("e");
  var opresult1146 = callmethod(var_c, "==", [1], string1144);
  if (Grace_isTrue(opresult1146)) {
  lineNumber = 587
  lineNumber = 586
  var string1147 = new GraceString("\u00b1");
  var opresult1149 = callmethod(var_accum, "++", [1], string1147);
  var_accum = opresult1149;
  var if1143 = opresult1149;
  } else {
  lineNumber = 591
  lineNumber = 590
  var opresult1151 = callmethod(var_accum, "++", [1], var_c);
  var_accum = opresult1151;
  var if1143 = opresult1151;
}
  var if1136 = if1143;
}
  var if1129 = if1136;
}
  var if1122 = if1129;
}
  var if1115 = if1122;
}
  var if1108 = if1115;
}
  var if1104 = if1108;
}
  var if1100 = if1104;
}
  var if1093 = if1100;
}
  lineNumber = 593
  lineNumber = 592
  var bool1152 = new GraceBoolean(false)
  var_escaped = bool1152;
  var if1092 = bool1152;
  } else {
  lineNumber = 624
  lineNumber = 596
  lineNumber = 593
  var string1154 = new GraceString("\\");
  var opresult1156 = callmethod(var_c, "==", [1], string1154);
  if (Grace_isTrue(opresult1156)) {
  lineNumber = 596
  lineNumber = 595
  var bool1157 = new GraceBoolean(true)
  var_escaped = bool1157;
  var if1153 = bool1157;
  } else {
  lineNumber = 624
  lineNumber = 609
  lineNumber = 596
  var opresult1160 = callmethod(var_unichars, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1160)) {
  lineNumber = 602
  lineNumber = 601
  var diff1162 = callmethod(var_unichars, "-", [1], new GraceNum(1));
  var_unichars = diff1162;
  lineNumber = 603
  lineNumber = 602
  var prod1164 = callmethod(var_codepoint, "*", [1], new GraceNum(16));
  var_codepoint = prod1164;
  lineNumber = 603
  lineNumber = 604
  lineNumber = 1
  lineNumber = 604
  lineNumber = 1
  var call1165 = callmethod(superDepth, "outer", [0]);
  var call1166 = callmethod(call1165,"outer", [0]);
  var call1167 = callmethod(call1166,"hexdecchar", [1], var_c);
  var opresult1169 = callmethod(var_codepoint, "+", [1], call1167);
  var_codepoint = opresult1169;
  lineNumber = 607
  lineNumber = 609
  lineNumber = 604
  var opresult1172 = callmethod(var_unichars, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1172)) {
  lineNumber = 607
  var call1173 = callmethod(var_unicode,"create", [1], var_codepoint);
  var opresult1175 = callmethod(var_accum, "++", [1], call1173);
  var_accum = opresult1175;
  var if1170 = opresult1175;
}
  var if1158 = if1170;
  } else {
  lineNumber = 624
  lineNumber = 622
  lineNumber = 609
  var string1177 = new GraceString("{");
  var opresult1179 = callmethod(var_c, "==", [1], string1177);
  if (Grace_isTrue(opresult1179)) {
  lineNumber = 613
  lineNumber = 614
  lineNumber = 1
  lineNumber = 610
  var call1181 = callmethod(var_interpString,"not", [0]);
  if (Grace_isTrue(call1181)) {
  lineNumber = 611
  var string1182 = new GraceString("(");
  var string1183 = new GraceString("(");
  lineNumber = 612
  var call1184 = callmethod(this,"modechange", [3], var_tokens, string1182, string1183);
  lineNumber = 613
  lineNumber = 612
  var bool1185 = new GraceBoolean(true)
  var_interpString = bool1185;
  var if1180 = bool1185;
}
  lineNumber = 614
  lineNumber = 615
  var call1186 = callmethod(this,"modechange", [3], var_tokens, var_mode, var_accum);
  var string1187 = new GraceString("o");
  var string1188 = new GraceString("++");
  lineNumber = 616
  var call1189 = callmethod(this,"modechange", [3], var_tokens, string1187, string1188);
  var string1190 = new GraceString("(");
  var string1191 = new GraceString("(");
  lineNumber = 617
  var call1192 = callmethod(this,"modechange", [3], var_tokens, string1190, string1191);
  lineNumber = 618
  lineNumber = 617
  var string1193 = new GraceString("n");
  var_mode = string1193;
  lineNumber = 619
  lineNumber = 618
  var string1194 = new GraceString("n");
  var_newmode = string1194;
  lineNumber = 620
  lineNumber = 619
  var string1195 = new GraceString("");
  var_accum = string1195;
  lineNumber = 621
  lineNumber = 620
  var bool1196 = new GraceBoolean(false)
  var_instr = bool1196;
  lineNumber = 622
  lineNumber = 621
  var opresult1198 = callmethod(var_interpdepth, "+", [1], new GraceNum(1));
  var_interpdepth = opresult1198;
  var if1176 = opresult1198;
  } else {
  lineNumber = 624
  lineNumber = 623
  var opresult1200 = callmethod(var_accum, "++", [1], var_c);
  var_accum = opresult1200;
  var if1176 = opresult1200;
}
  var if1158 = if1176;
}
  var if1153 = if1158;
}
  var if1092 = if1153;
}
  var if1074 = if1092;
  } else {
  lineNumber = 639
  lineNumber = 625
  if (Grace_isTrue(var_inBackticks)) {
  lineNumber = 628
  lineNumber = 630
  lineNumber = 626
  var string1203 = new GraceString("\n");
  var opresult1205 = callmethod(var_c, "==", [1], string1203);
  if (Grace_isTrue(opresult1205)) {
  lineNumber = 628
  lineNumber = 627
  var string1206 = new GraceString("Newlines not permitted in");
  lineNumber = 628
  var string1207 = new GraceString("backtick identifiers");
  var opresult1209 = callmethod(string1206, "++", [1], string1207);
  lineNumber = 627
  var call1210 = callmethod(var_util,"syntax_error", [1], opresult1209);
  var if1202 = call1210;
}
  lineNumber = 631
  lineNumber = 630
  var opresult1212 = callmethod(var_accum, "++", [1], var_c);
  var_accum = opresult1212;
  var if1201 = opresult1212;
  } else {
  lineNumber = 639
  lineNumber = 637
  lineNumber = 631
  var string1214 = new GraceString("\n");
  var opresult1216 = callmethod(var_c, "==", [1], string1214);
  lineNumber = 637
  lineNumber = 631
  var string1217 = new GraceString("\u000d");
  var opresult1219 = callmethod(var_c, "==", [1], string1217);
  var opresult1221 = callmethod(opresult1216, "|", [1], opresult1219);
  if (Grace_isTrue(opresult1221)) {
  lineNumber = 633
  lineNumber = 634
  var call1222 = callmethod(this,"modechange", [3], var_tokens, var_mode, var_accum);
  lineNumber = 635
  lineNumber = 634
  var string1223 = new GraceString("d");
  var_mode = string1223;
  lineNumber = 636
  lineNumber = 635
  var string1224 = new GraceString("d");
  var_newmode = string1224;
  lineNumber = 637
  lineNumber = 636
  var string1225 = new GraceString("");
  var_accum = string1225;
  var if1213 = string1225;
  } else {
  lineNumber = 639
  lineNumber = 638
  var opresult1227 = callmethod(var_accum, "++", [1], var_c);
  var_accum = opresult1227;
  var if1213 = opresult1227;
}
  var if1201 = if1213;
}
  var if1074 = if1201;
}
  var if1014 = if1074;
}
  lineNumber = 645
  lineNumber = 640
  lineNumber = 646
  lineNumber = 640
  var string1229 = new GraceString("...");
  var opresult1231 = callmethod(var_accum, "==", [1], string1229);
  var block1232 = Grace_allocObject();
  block1232.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1232.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1232.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1232.receiver = this;
  block1232.className = 'block<lexer:640>';
  block1232.real = function(
) {
  var string1233 = new GraceString("o");
  var opresult1235 = callmethod(var_mode, "==", [1], string1233);
  return opresult1235;
};
  var opresult1237 = callmethod(opresult1231, "&&", [1], block1232);
  if (Grace_isTrue(opresult1237)) {
  lineNumber = 641
  var string1238 = new GraceString("i");
  var string1239 = new GraceString("...");
  lineNumber = 642
  var call1240 = callmethod(this,"modechange", [3], var_tokens, string1238, string1239);
  lineNumber = 643
  lineNumber = 642
  var string1241 = new GraceString("n");
  var_newmode = string1241;
  lineNumber = 644
  lineNumber = 643
  var_mode = var_newmode;
  lineNumber = 645
  lineNumber = 644
  var string1242 = new GraceString("");
  var_accum = string1242;
  var if1228 = string1242;
}
  lineNumber = 654
  lineNumber = 656
  lineNumber = 646
  var string1244 = new GraceString("\n");
  var opresult1246 = callmethod(var_c, "==", [1], string1244);
  if (Grace_isTrue(opresult1246)) {
  lineNumber = 652
  lineNumber = 651
  var opresult1248 = callmethod(var_lineNumber, "+", [1], new GraceNum(1));
  var_lineNumber = opresult1248;
  lineNumber = 653
  lineNumber = 652
  var_linePosition = new GraceNum(0);
  lineNumber = 654
  lineNumber = 653
  var_startPosition = new GraceNum(1);
  lineNumber = 654
  var call1249 = callmethod(var_util,"setPosition", [2], var_lineNumber, new GraceNum(0));
  var if1243 = call1249;
}
  lineNumber = 657
  lineNumber = 656
  var_prev = var_c;
  return var_c;
};
  var call1250 = callmethod(Grace_prelude,"for()do", [1, 1], var_input, block656);
  lineNumber = 658
  lineNumber = 659
  var call1251 = callmethod(this,"modechange", [3], var_tokens, var_mode, var_accum);
  return var_tokens
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj262.methods["lexfile"] = func640;
  superDepth = origSuperDepth;
}
obj_init_262.apply(obj262, []);
  return obj262
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj25.methods["new"] = func27;
  superDepth = origSuperDepth;
}
obj_init_25.apply(obj25, []);
  var var_LexerClass = obj25;
  lineNumber = 1
var func1252 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 21
  return var_LexerClass
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["LexerClass"] = func1252;
  lineNumber = 666
var func1253 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  return var_LexerClass
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["Lexer"] = func1253;
  return this;
}
function gracecode_parser() {
  lineNumber = 2
// Import of io
  var var_io = do_import("io", gracecode_io);
  lineNumber = 3
// Import of ast
  var var_ast = do_import("ast", gracecode_ast);
  lineNumber = 4
// Import of util
  var var_util = do_import("util", gracecode_util);
  lineNumber = 6
// Import of subtype
  var var_subtype = do_import("subtype", gracecode_subtype);
  lineNumber = 7
  lineNumber = 6
  var var_lastline = new GraceNum(0);
  lineNumber = 1
var func0 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 6
  return var_lastline
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["lastline"] = func0;
  lineNumber = 1
var func1 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_lastline = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["lastline:="] = func1;
  lineNumber = 8
  lineNumber = 7
  var var_linenum = new GraceNum(0);
  lineNumber = 1
var func2 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 7
  return var_linenum
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["linenum"] = func2;
  lineNumber = 1
var func3 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_linenum = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["linenum:="] = func3;
  lineNumber = 9
  lineNumber = 8
  var var_lastIndent = new GraceNum(0);
  lineNumber = 1
var func4 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 8
  return var_lastIndent
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["lastIndent"] = func4;
  lineNumber = 1
var func5 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_lastIndent = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["lastIndent:="] = func5;
  lineNumber = 10
  lineNumber = 9
  var bool6 = new GraceBoolean(false)
  var var_indentFreePass = bool6;
  lineNumber = 1
var func7 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 9
  return var_indentFreePass
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["indentFreePass"] = func7;
  lineNumber = 1
var func8 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_indentFreePass = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["indentFreePass:="] = func8;
  lineNumber = 11
  lineNumber = 10
  var var_minIndentLevel = new GraceNum(0);
  lineNumber = 1
var func9 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 10
  return var_minIndentLevel
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["minIndentLevel"] = func9;
  lineNumber = 1
var func10 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_minIndentLevel = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["minIndentLevel:="] = func10;
  lineNumber = 12
  lineNumber = 11
  var var_statementIndent = new GraceNum(0);
  lineNumber = 1
var func11 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 11
  return var_statementIndent
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["statementIndent"] = func11;
  lineNumber = 1
var func12 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_statementIndent = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["statementIndent:="] = func12;
  lineNumber = 13
  var var_statementToken;
  lineNumber = 1
var func13 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 12
  return var_statementToken
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["statementToken"] = func13;
  lineNumber = 1
var func14 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_statementToken = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["statementToken:="] = func14;
  lineNumber = 14
  lineNumber = 13
  var var_tokens = new GraceNum(0);
  lineNumber = 1
var func15 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 13
  return var_tokens
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tokens"] = func15;
  lineNumber = 1
var func16 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_tokens = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tokens:="] = func16;
  lineNumber = 15
  var array17 = new GraceList([
]);

  var var_values = array17;
  lineNumber = 1
var func18 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 14
  return var_values
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["values"] = func18;
  lineNumber = 1
var func19 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_values = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["values:="] = func19;
  lineNumber = 18
  lineNumber = 15
  var var_auto__95__count = new GraceNum(0);
  lineNumber = 1
var func20 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 15
  return var_auto__95__count
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["auto_count"] = func20;
  lineNumber = 1
var func21 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_auto__95__count = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["auto_count:="] = func21;
  lineNumber = 19
  var var_sym;
  lineNumber = 1
var func22 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 18
  return var_sym
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["sym"] = func22;
  lineNumber = 1
var func23 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_sym = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["sym:="] = func23;
  lineNumber = 23
  var var_lastToken;
  lineNumber = 1
var func24 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 19
  return var_lastToken
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["lastToken"] = func24;
  lineNumber = 1
var func25 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_lastToken = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["lastToken:="] = func25;
  lineNumber = 38
var func26 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 25
  lineNumber = 24
  var_lastToken = var_sym;
  lineNumber = 38
  lineNumber = 40
  lineNumber = 1
  lineNumber = 25
  var call28 = callmethod(var_tokens,"size", [0]);
  var opresult30 = callmethod(call28, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult30)) {
  lineNumber = 27
  lineNumber = 26
  var_lastline = var_linenum;
  lineNumber = 28
  lineNumber = 1
  lineNumber = 27
  var call31 = callmethod(var_sym,"indent", [0]);
  var_lastIndent = call31;
  lineNumber = 29
  lineNumber = 1
  lineNumber = 28
  var call32 = callmethod(var_tokens,"pop", [0]);
  var_sym = call32;
  lineNumber = 30
  lineNumber = 1
  lineNumber = 29
  var call33 = callmethod(var_sym,"line", [0]);
  var_linenum = call33;
  lineNumber = 30
  lineNumber = 1
  lineNumber = 30
  var call34 = callmethod(var_sym,"line", [0]);
  lineNumber = 1
  lineNumber = 30
  var call35 = callmethod(var_sym,"linePos", [0]);
  var call36 = callmethod(var_util,"setPosition", [2], call34, call35);
  var if27 = call36;
  } else {
  lineNumber = 38
  var obj37 = Grace_allocObject();
  obj37.outer = this;
    var reader_parser_outer38 = function() {
    return this.outer;
  }
  obj37.methods["outer"] = reader_parser_outer38;
function obj_init_37() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 33
  var string39 = new GraceString("eof");
  obj37.data["kind"] = string39;
    var reader_parser_kind40 = function() {
    return this.data["kind"];
  }
  obj37.methods["kind"] = reader_parser_kind40;
  obj37.data["kind"] = string39;
  var writer_parser_kind40 = function(argcv, o) {
    this.data["kind"] = o;
  }
  obj37.methods["kind:="] = writer_parser_kind40;
obj37.mutable = true;
  lineNumber = 35
  lineNumber = 34
  var opresult42 = callmethod(var_linenum, "+", [1], new GraceNum(1));
  obj37.data["line"] = opresult42;
    var reader_parser_line43 = function() {
    return this.data["line"];
  }
  obj37.methods["line"] = reader_parser_line43;
  obj37.data["line"] = opresult42;
  var writer_parser_line43 = function(argcv, o) {
    this.data["line"] = o;
  }
  obj37.methods["line:="] = writer_parser_line43;
obj37.mutable = true;
  lineNumber = 35
  obj37.data["linePos"] = new GraceNum(0);
    var reader_parser_linePos44 = function() {
    return this.data["linePos"];
  }
  obj37.methods["linePos"] = reader_parser_linePos44;
  obj37.data["linePos"] = new GraceNum(0);
  var writer_parser_linePos44 = function(argcv, o) {
    this.data["linePos"] = o;
  }
  obj37.methods["linePos:="] = writer_parser_linePos44;
obj37.mutable = true;
  lineNumber = 36
  obj37.data["indent"] = new GraceNum(0);
    var reader_parser_indent45 = function() {
    return this.data["indent"];
  }
  obj37.methods["indent"] = reader_parser_indent45;
  obj37.data["indent"] = new GraceNum(0);
  var writer_parser_indent45 = function(argcv, o) {
    this.data["indent"] = o;
  }
  obj37.methods["indent:="] = writer_parser_indent45;
obj37.mutable = true;
  lineNumber = 37
  var string46 = new GraceString("");
  obj37.data["value"] = string46;
    var reader_parser_value47 = function() {
    return this.data["value"];
  }
  obj37.methods["value"] = reader_parser_value47;
  obj37.data["value"] = string46;
  var writer_parser_value47 = function(argcv, o) {
    this.data["value"] = o;
  }
  obj37.methods["value:="] = writer_parser_value47;
obj37.mutable = true;
  superDepth = origSuperDepth;
}
obj_init_37.apply(obj37, []);
  var_sym = obj37;
  var if27 = obj37;
}
  return if27
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["next"] = func26;
  lineNumber = 46
var func48 = function(argcv) {
  var curarg = 1;
  var var_t = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1
  lineNumber = 45
  var call49 = callmethod(var_sym,"kind", [0]);
  var opresult51 = callmethod(call49, "==", [1], var_t);
  return opresult51
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["accept"] = func48;
  lineNumber = 54
var func52 = function(argcv) {
  var curarg = 1;
  var var_t = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1
  lineNumber = 52
  var call53 = callmethod(var_sym,"kind", [0]);
  var opresult55 = callmethod(call53, "==", [1], var_t);
  lineNumber = 54
  lineNumber = 52
  lineNumber = 54
  lineNumber = 1
  lineNumber = 52
  var call56 = callmethod(var_sym,"line", [0]);
  var opresult58 = callmethod(var_lastline, "==", [1], call56);
  lineNumber = 54
  lineNumber = 1
  lineNumber = 53
  var call59 = callmethod(var_sym,"indent", [0]);
  var opresult61 = callmethod(call59, ">", [1], var_lastIndent);
  var opresult63 = callmethod(opresult58, "|", [1], opresult61);
  var opresult65 = callmethod(opresult55, "&", [1], opresult63);
  return opresult65
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["acceptSameLine"] = func52;
  lineNumber = 61
var func66 = function(argcv) {
  var curarg = 1;
  var var_t = arguments[curarg];
  curarg++;
  var var_other = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1
  lineNumber = 59
  var call67 = callmethod(var_sym,"kind", [0]);
  var opresult69 = callmethod(call67, "==", [1], var_t);
  lineNumber = 61
  lineNumber = 1
  lineNumber = 59
  var call70 = callmethod(var_other,"line", [0]);
  lineNumber = 61
  lineNumber = 1
  lineNumber = 59
  var call71 = callmethod(var_sym,"line", [0]);
  var opresult73 = callmethod(call70, "==", [1], call71);
  lineNumber = 61
  lineNumber = 1
  lineNumber = 60
  var call74 = callmethod(var_sym,"indent", [0]);
  lineNumber = 61
  lineNumber = 1
  lineNumber = 60
  var call75 = callmethod(var_other,"indent", [0]);
  var opresult77 = callmethod(call74, ">", [1], call75);
  var opresult79 = callmethod(opresult73, "|", [1], opresult77);
  var opresult81 = callmethod(opresult69, "&", [1], opresult79);
  return opresult81
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["accept()onLineOf"] = func66;
  lineNumber = 67
var func82 = function(argcv) {
  var curarg = 1;
  var var_t = arguments[curarg];
  curarg++;
  var var_other = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1
  lineNumber = 65
  var call83 = callmethod(var_sym,"kind", [0]);
  var opresult85 = callmethod(call83, "==", [1], var_t);
  lineNumber = 67
  lineNumber = 1
  lineNumber = 65
  var call86 = callmethod(var_other,"line", [0]);
  lineNumber = 67
  lineNumber = 1
  lineNumber = 65
  var call87 = callmethod(var_sym,"line", [0]);
  var opresult89 = callmethod(call86, "==", [1], call87);
  lineNumber = 67
  lineNumber = 1
  lineNumber = 66
  var call90 = callmethod(var_sym,"indent", [0]);
  lineNumber = 67
  lineNumber = 1
  lineNumber = 66
  var call91 = callmethod(var_other,"indent", [0]);
  var opresult93 = callmethod(call90, ">", [1], call91);
  var opresult95 = callmethod(opresult89, "|", [1], opresult93);
  lineNumber = 67
  lineNumber = 1
  lineNumber = 66
  var call96 = callmethod(var_lastToken,"line", [0]);
  lineNumber = 67
  lineNumber = 1
  lineNumber = 66
  var call97 = callmethod(var_sym,"line", [0]);
  var opresult99 = callmethod(call96, "==", [1], call97);
  var opresult101 = callmethod(opresult95, "|", [1], opresult99);
  var opresult103 = callmethod(opresult85, "&", [1], opresult101);
  return opresult103
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["accept()onLineOfLastOr"] = func82;
  lineNumber = 71
var func104 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 70
  lineNumber = 71
  lineNumber = 1
  lineNumber = 70
  var call105 = callmethod(var_sym,"line", [0]);
  var opresult107 = callmethod(var_lastline, "==", [1], call105);
  lineNumber = 71
  lineNumber = 1
  lineNumber = 70
  var call108 = callmethod(var_sym,"indent", [0]);
  var opresult110 = callmethod(call108, ">", [1], var_lastIndent);
  var opresult112 = callmethod(opresult107, "|", [1], opresult110);
  return opresult112
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["tokenOnSameLine"] = func104;
  lineNumber = 77
var func113 = function(argcv) {
  var curarg = 1;
  var var_t = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 76
  lineNumber = 77
  lineNumber = 1
  lineNumber = 74
  var call115 = callmethod(var_sym,"kind", [0]);
  var opresult117 = callmethod(call115, "==", [1], var_t);
  if (Grace_isTrue(opresult117)) {
  lineNumber = 76
  lineNumber = 75
  var bool118 = new GraceBoolean(true)
  return bool118
  var if114 = undefined;
}
  lineNumber = 77
  var string119 = new GraceString("expected ");
  var opresult121 = callmethod(string119, "++", [1], var_t);
  var string122 = new GraceString(", got ");
  var opresult124 = callmethod(opresult121, "++", [1], string122);
  lineNumber = 1
  lineNumber = 77
  var call125 = callmethod(var_sym,"kind", [0]);
  var opresult127 = callmethod(opresult124, "++", [1], call125);
  var string128 = new GraceString(": ");
  var opresult130 = callmethod(opresult127, "++", [1], string128);
  lineNumber = 1
  lineNumber = 77
  var call131 = callmethod(var_sym,"value", [0]);
  var opresult133 = callmethod(opresult130, "++", [1], call131);
  var string134 = new GraceString("");
  var opresult136 = callmethod(opresult133, "++", [1], string134);
  var call137 = callmethod(var_util,"syntax_error", [1], opresult136);
  return call137
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["expect"] = func113;
  lineNumber = 87
var func138 = function(argcv) {
  var curarg = 1;
  var var_t = arguments[curarg];
  curarg++;
  var var_s = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 83
  lineNumber = 84
  lineNumber = 1
  lineNumber = 81
  var call140 = callmethod(var_sym,"kind", [0]);
  var opresult142 = callmethod(call140, "==", [1], var_t);
  if (Grace_isTrue(opresult142)) {
  lineNumber = 83
  lineNumber = 82
  var bool143 = new GraceBoolean(true)
  return bool143
  var if139 = undefined;
}
  lineNumber = 86
  lineNumber = 87
  lineNumber = 1
  lineNumber = 84
  var call145 = callmethod(var_sym,"kind", [0]);
  var opresult147 = callmethod(call145, "==", [1], var_s);
  if (Grace_isTrue(opresult147)) {
  lineNumber = 86
  lineNumber = 85
  var bool148 = new GraceBoolean(true)
  return bool148
  var if144 = undefined;
}
  lineNumber = 87
  var string149 = new GraceString("expected ");
  var opresult151 = callmethod(string149, "++", [1], var_t);
  var string152 = new GraceString(", got ");
  var opresult154 = callmethod(opresult151, "++", [1], string152);
  lineNumber = 1
  lineNumber = 87
  var call155 = callmethod(var_sym,"kind", [0]);
  var opresult157 = callmethod(opresult154, "++", [1], call155);
  var string158 = new GraceString(": ");
  var opresult160 = callmethod(opresult157, "++", [1], string158);
  lineNumber = 1
  lineNumber = 87
  var call161 = callmethod(var_sym,"value", [0]);
  var opresult163 = callmethod(opresult160, "++", [1], call161);
  var string164 = new GraceString("");
  var opresult166 = callmethod(opresult163, "++", [1], string164);
  var call167 = callmethod(var_util,"syntax_error", [1], opresult166);
  return call167
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["expect()or"] = func138;
  lineNumber = 98
var func168 = function(argcv) {
  var curarg = 1;
  var var_t = arguments[curarg];
  curarg++;
  var var_s = arguments[curarg];
  curarg++;
  var var_u = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 97
  lineNumber = 98
  lineNumber = 1
  lineNumber = 91
  var call170 = callmethod(var_sym,"kind", [0]);
  var opresult172 = callmethod(call170, "==", [1], var_t);
  if (Grace_isTrue(opresult172)) {
  lineNumber = 93
  lineNumber = 92
  var bool173 = new GraceBoolean(true)
  return bool173
  var if169 = undefined;
  } else {
  lineNumber = 97
  lineNumber = 95
  lineNumber = 1
  lineNumber = 93
  var call175 = callmethod(var_sym,"kind", [0]);
  var opresult177 = callmethod(call175, "==", [1], var_s);
  if (Grace_isTrue(opresult177)) {
  lineNumber = 95
  lineNumber = 94
  var bool178 = new GraceBoolean(true)
  return bool178
  var if174 = undefined;
  } else {
  lineNumber = 97
  lineNumber = 98
  lineNumber = 1
  lineNumber = 95
  var call180 = callmethod(var_sym,"kind", [0]);
  var opresult182 = callmethod(call180, "==", [1], var_u);
  if (Grace_isTrue(opresult182)) {
  lineNumber = 97
  lineNumber = 96
  var bool183 = new GraceBoolean(true)
  return bool183
  var if179 = undefined;
}
  var if174 = if179;
}
  var if169 = if174;
}
  lineNumber = 98
  var string184 = new GraceString("expected ");
  var opresult186 = callmethod(string184, "++", [1], var_t);
  var string187 = new GraceString(" or ");
  var opresult189 = callmethod(opresult186, "++", [1], string187);
  var opresult191 = callmethod(opresult189, "++", [1], var_s);
  var string192 = new GraceString(" or ");
  var opresult194 = callmethod(opresult191, "++", [1], string192);
  var opresult196 = callmethod(opresult194, "++", [1], var_u);
  var string197 = new GraceString(", got ");
  var opresult199 = callmethod(opresult196, "++", [1], string197);
  lineNumber = 1
  lineNumber = 98
  var call200 = callmethod(var_sym,"kind", [0]);
  var opresult202 = callmethod(opresult199, "++", [1], call200);
  var string203 = new GraceString(": ");
  var opresult205 = callmethod(opresult202, "++", [1], string203);
  lineNumber = 1
  lineNumber = 98
  var call206 = callmethod(var_sym,"value", [0]);
  var opresult208 = callmethod(opresult205, "++", [1], call206);
  var string209 = new GraceString("");
  var opresult211 = callmethod(opresult208, "++", [1], string209);
  var call212 = callmethod(var_util,"syntax_error", [1], opresult211);
  return call212
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["expect()or()or"] = func168;
  lineNumber = 105
var func213 = function(argcv) {
  var curarg = 1;
  var var_ablock = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 103
  lineNumber = 1
  lineNumber = 102
  var call214 = callmethod(var_tokens,"size", [0]);
  var var_sz = call214;
  lineNumber = 103
  lineNumber = 1
  lineNumber = 103
  var call215 = callmethod(var_ablock,"apply", [0]);
  lineNumber = 105
  lineNumber = 107
  lineNumber = 1
  lineNumber = 104
  var call217 = callmethod(var_tokens,"size", [0]);
  var opresult219 = callmethod(call217, "==", [1], var_sz);
  if (Grace_isTrue(opresult219)) {
  lineNumber = 105
  var string220 = new GraceString("unable to consume token");
  var call221 = callmethod(var_util,"syntax_error", [1], string220);
  var if216 = call221;
}
  return if216
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["expectConsume"] = func213;
  lineNumber = 113
var func222 = function(argcv) {
  var curarg = 1;
  var var_ablock = arguments[curarg];
  curarg++;
  var var_tblock = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 111
  lineNumber = 1
  lineNumber = 110
  var call223 = callmethod(var_tokens,"size", [0]);
  var var_sz = call223;
  lineNumber = 111
  lineNumber = 1
  lineNumber = 111
  var call224 = callmethod(var_ablock,"apply", [0]);
  lineNumber = 113
  lineNumber = 115
  lineNumber = 1
  lineNumber = 112
  var call226 = callmethod(var_tokens,"size", [0]);
  var opresult228 = callmethod(call226, "/=", [1], var_sz);
  if (Grace_isTrue(opresult228)) {
  lineNumber = 113
  lineNumber = 1
  lineNumber = 113
  var call229 = callmethod(var_tblock,"apply", [0]);
  var if225 = call229;
}
  return if225
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["ifConsume()then"] = func222;
  lineNumber = 121
var func230 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 119
  lineNumber = 1
  lineNumber = 119
  var call231 = callmethod(var_sym,"value", [0]);
  lineNumber = 120
  lineNumber = 1
  lineNumber = 119
  var call232 = callmethod(var_ast,"numNode", [0]);
  var call233 = callmethod(call232,"new", [1], call231);
  var var_o = call233;
  lineNumber = 120
  var call234 = callmethod(var_values,"push", [1], var_o);
  lineNumber = 121
  var call235 = callmethod(this,"next", [0]);
  return call235
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pushnum"] = func230;
  lineNumber = 128
var func236 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 126
  lineNumber = 1
  lineNumber = 126
  var call237 = callmethod(var_sym,"value", [0]);
  lineNumber = 127
  lineNumber = 1
  lineNumber = 126
  var call238 = callmethod(var_ast,"octetsNode", [0]);
  var call239 = callmethod(call238,"new", [1], call237);
  var var_o = call239;
  lineNumber = 127
  var call240 = callmethod(var_values,"push", [1], var_o);
  lineNumber = 128
  var call241 = callmethod(this,"next", [0]);
  return call241
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pushoctets"] = func236;
  lineNumber = 135
var func242 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 133
  lineNumber = 1
  lineNumber = 133
  var call243 = callmethod(var_sym,"value", [0]);
  lineNumber = 134
  lineNumber = 1
  lineNumber = 133
  var call244 = callmethod(var_ast,"stringNode", [0]);
  var call245 = callmethod(call244,"new", [1], call243);
  var var_o = call245;
  lineNumber = 134
  var call246 = callmethod(var_values,"push", [1], var_o);
  lineNumber = 135
  var call247 = callmethod(this,"next", [0]);
  return call247
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pushstring"] = func242;
  lineNumber = 147
var func248 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 141
  lineNumber = 1
  lineNumber = 141
  var call249 = callmethod(var_sym,"value", [0]);
  var bool250 = new GraceBoolean(false)
  lineNumber = 142
  lineNumber = 1
  lineNumber = 141
  var call251 = callmethod(var_ast,"identifierNode", [0]);
  var call252 = callmethod(call251,"new", [2], call249, bool250);
  var var_o = call252;
  lineNumber = 145
  lineNumber = 146
  lineNumber = 1
  lineNumber = 142
  var call254 = callmethod(var_o,"value", [0]);
  var string255 = new GraceString("_");
  var opresult257 = callmethod(call254, "==", [1], string255);
  if (Grace_isTrue(opresult257)) {
  lineNumber = 144
  lineNumber = 1
  lineNumber = 144
  lineNumber = 143
  var string258 = new GraceString("__");
  var opresult260 = callmethod(string258, "++", [1], var_auto__95__count);
  var call261 = callmethod(var_o,"value:=", [1], opresult260);
  lineNumber = 145
  lineNumber = 144
  var opresult263 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult263;
  var if253 = opresult263;
}
  lineNumber = 146
  var call264 = callmethod(var_values,"push", [1], var_o);
  lineNumber = 147
  var call265 = callmethod(this,"next", [0]);
  return call265
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pushidentifier"] = func248;
  lineNumber = 156
var func266 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 151
  var string268 = new GraceString("identifier");
  lineNumber = 159
  var call269 = callmethod(this,"accept", [1], string268);
  if (Grace_isTrue(call269)) {
  lineNumber = 152
  var call270 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 153
  var call271 = callmethod(this,"generic", [0]);
  var if267 = call271;
  } else {
  lineNumber = 156
  lineNumber = 155
  var string273 = new GraceString("lbrace");
  lineNumber = 158
  var call274 = callmethod(this,"accept", [1], string273);
  if (Grace_isTrue(call274)) {
  lineNumber = 156
  var call275 = callmethod(this,"doanontype", [0]);
  var if272 = call275;
}
  var if267 = if272;
}
  return if267
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["dotypeterm"] = func266;
  lineNumber = 209
var func276 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 163
  lineNumber = 162
  var bool277 = new GraceBoolean(false)
  var var_overallType = bool277;
  lineNumber = 164
  lineNumber = 163
  var bool278 = new GraceBoolean(false)
  var var_tp = bool278;
  lineNumber = 165
  lineNumber = 164
  var bool279 = new GraceBoolean(false)
  var var_op = bool279;
  lineNumber = 166
  var array280 = new GraceList([
]);

  var var_unionTypes = array280;
  var call281 = callmethod(this,"dotypeterm", [0]);
  lineNumber = 168
  lineNumber = 1
  lineNumber = 167
  var call282 = callmethod(var_values,"pop", [0]);
  var_overallType = call282;
  lineNumber = 174
  lineNumber = 168
  var block283 = Grace_allocObject();
  block283.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block283.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block283.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block283.receiver = this;
  block283.className = 'block<parser:168>';
  block283.real = function(
) {
  var string284 = new GraceString("op");
  var call285 = callmethod(this,"acceptSameLine", [1], string284);
  lineNumber = 1
  lineNumber = 168
  var call286 = callmethod(var_sym,"value", [0]);
  var string287 = new GraceString("|");
  var opresult289 = callmethod(call286, "==", [1], string287);
  var opresult291 = callmethod(call285, "&", [1], opresult289);
  return opresult291;
};
  lineNumber = 174
  var block292 = Grace_allocObject();
  block292.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block292.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block292.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block292.receiver = this;
  block292.className = 'block<parser:174>';
  block292.real = function(
) {
  lineNumber = 170
  lineNumber = 172
  lineNumber = 1
  lineNumber = 169
  var call294 = callmethod(var_unionTypes,"size", [0]);
  var opresult296 = callmethod(call294, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult296)) {
  lineNumber = 170
  var call297 = callmethod(var_unionTypes,"push", [1], var_overallType);
  var if293 = call297;
}
  lineNumber = 172
  var call298 = callmethod(this,"next", [0]);
  lineNumber = 173
  var call299 = callmethod(this,"dotypeterm", [0]);
  lineNumber = 174
  lineNumber = 1
  lineNumber = 174
  var call300 = callmethod(var_values,"pop", [0]);
  var call301 = callmethod(var_unionTypes,"push", [1], call300);
  return call301;
};
  var call302 = callmethod(Grace_prelude,"while()do", [1, 1], block283, block292);
  lineNumber = 186
  lineNumber = 188
  lineNumber = 1
  lineNumber = 176
  var call304 = callmethod(var_unionTypes,"size", [0]);
  var opresult306 = callmethod(call304, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult306)) {
  lineNumber = 178
  lineNumber = 177
  var string307 = new GraceString("Union<");
  var var_unionName = string307;
  lineNumber = 180
  lineNumber = 178
  lineNumber = 180
  var block308 = Grace_allocObject();
  block308.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block308.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block308.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block308.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block308.receiver = this;
  block308.className = 'block<parser:180>';
  block308.real = function(
var_ut
) {
  lineNumber = 179
  var string309 = new GraceString("");
  var opresult311 = callmethod(string309, "++", [1], var_unionName);
  var string312 = new GraceString("|");
  var opresult314 = callmethod(opresult311, "++", [1], string312);
  lineNumber = 180
  lineNumber = 1
  lineNumber = 179
  var call315 = callmethod(var_ut,"value", [0]);
  var opresult317 = callmethod(opresult314, "++", [1], call315);
  var string318 = new GraceString("");
  var opresult320 = callmethod(opresult317, "++", [1], string318);
  var_unionName = opresult320;
  return opresult320;
};
  var call321 = callmethod(Grace_prelude,"for()do", [1, 1], var_unionTypes, block308);
  lineNumber = 182
  lineNumber = 181
  var string322 = new GraceString("");
  var opresult324 = callmethod(string322, "++", [1], var_unionName);
  var string325 = new GraceString("|>");
  var opresult327 = callmethod(opresult324, "++", [1], string325);
  var_unionName = opresult327;
  lineNumber = 182
  var array328 = new GraceList([
]);

  lineNumber = 183
  lineNumber = 1
  lineNumber = 182
  var call329 = callmethod(var_ast,"typeNode", [0]);
  var call330 = callmethod(call329,"new", [2], var_unionName, array328);
  var_overallType = call330;
  lineNumber = 184
  lineNumber = 183
  lineNumber = 184
  var block331 = Grace_allocObject();
  block331.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block331.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block331.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block331.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block331.receiver = this;
  block331.className = 'block<parser:184>';
  block331.real = function(
var_ut
) {
  lineNumber = 185
  lineNumber = 1
  lineNumber = 184
  var call332 = callmethod(var_overallType,"unionTypes", [0]);
  var call333 = callmethod(call332,"push", [1], var_ut);
  return call333;
};
  var call334 = callmethod(Grace_prelude,"for()do", [1, 1], var_unionTypes, block331);
  lineNumber = 186
  var call335 = callmethod(var_subtype,"addType", [1], var_overallType);
  var if303 = call335;
}
  lineNumber = 189
  var array336 = new GraceList([
]);

  var var_intersectionTypes = array336;
  lineNumber = 195
  lineNumber = 189
  var block337 = Grace_allocObject();
  block337.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block337.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block337.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block337.receiver = this;
  block337.className = 'block<parser:189>';
  block337.real = function(
) {
  var string338 = new GraceString("op");
  var call339 = callmethod(this,"acceptSameLine", [1], string338);
  lineNumber = 1
  lineNumber = 189
  var call340 = callmethod(var_sym,"value", [0]);
  var string341 = new GraceString("&");
  var opresult343 = callmethod(call340, "==", [1], string341);
  var opresult345 = callmethod(call339, "&", [1], opresult343);
  return opresult345;
};
  lineNumber = 195
  var block346 = Grace_allocObject();
  block346.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block346.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block346.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block346.receiver = this;
  block346.className = 'block<parser:195>';
  block346.real = function(
) {
  lineNumber = 191
  lineNumber = 193
  lineNumber = 1
  lineNumber = 190
  var call348 = callmethod(var_intersectionTypes,"size", [0]);
  var opresult350 = callmethod(call348, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult350)) {
  lineNumber = 191
  var call351 = callmethod(var_intersectionTypes,"push", [1], var_overallType);
  var if347 = call351;
}
  lineNumber = 193
  var call352 = callmethod(this,"next", [0]);
  lineNumber = 194
  var call353 = callmethod(this,"dotypeterm", [0]);
  lineNumber = 195
  lineNumber = 1
  lineNumber = 195
  var call354 = callmethod(var_values,"pop", [0]);
  var call355 = callmethod(var_intersectionTypes,"push", [1], call354);
  return call355;
};
  var call356 = callmethod(Grace_prelude,"while()do", [1, 1], block337, block346);
  lineNumber = 207
  lineNumber = 209
  lineNumber = 1
  lineNumber = 197
  var call358 = callmethod(var_intersectionTypes,"size", [0]);
  var opresult360 = callmethod(call358, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult360)) {
  lineNumber = 199
  lineNumber = 198
  var string361 = new GraceString("Intersection<");
  var var_intersectionName = string361;
  lineNumber = 201
  lineNumber = 199
  lineNumber = 201
  var block362 = Grace_allocObject();
  block362.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block362.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block362.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block362.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block362.receiver = this;
  block362.className = 'block<parser:201>';
  block362.real = function(
var_it
) {
  lineNumber = 200
  var string363 = new GraceString("");
  var opresult365 = callmethod(string363, "++", [1], var_intersectionName);
  var string366 = new GraceString("&");
  var opresult368 = callmethod(opresult365, "++", [1], string366);
  lineNumber = 201
  lineNumber = 1
  lineNumber = 200
  var call369 = callmethod(var_it,"value", [0]);
  var opresult371 = callmethod(opresult368, "++", [1], call369);
  var string372 = new GraceString("");
  var opresult374 = callmethod(opresult371, "++", [1], string372);
  var_intersectionName = opresult374;
  return opresult374;
};
  var call375 = callmethod(Grace_prelude,"for()do", [1, 1], var_intersectionTypes, block362);
  lineNumber = 203
  lineNumber = 202
  var string376 = new GraceString("&>");
  var opresult378 = callmethod(var_intersectionName, "++", [1], string376);
  var_intersectionName = opresult378;
  lineNumber = 203
  var array379 = new GraceList([
]);

  lineNumber = 204
  lineNumber = 1
  lineNumber = 203
  var call380 = callmethod(var_ast,"typeNode", [0]);
  var call381 = callmethod(call380,"new", [2], var_intersectionName, array379);
  var_overallType = call381;
  lineNumber = 205
  lineNumber = 204
  lineNumber = 205
  var block382 = Grace_allocObject();
  block382.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block382.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block382.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block382.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block382.receiver = this;
  block382.className = 'block<parser:205>';
  block382.real = function(
var_it
) {
  lineNumber = 206
  lineNumber = 1
  lineNumber = 205
  var call383 = callmethod(var_overallType,"intersectionTypes", [0]);
  var call384 = callmethod(call383,"push", [1], var_it);
  return call384;
};
  var call385 = callmethod(Grace_prelude,"for()do", [1, 1], var_intersectionTypes, block382);
  lineNumber = 207
  var call386 = callmethod(var_subtype,"addType", [1], var_overallType);
  var if357 = call386;
}
  lineNumber = 209
  var call387 = callmethod(var_values,"push", [1], var_overallType);
  return call387
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["dotyperef"] = func276;
  lineNumber = 301
var func388 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 214
  var string390 = new GraceString("lbrace");
  lineNumber = 303
  var call391 = callmethod(this,"accept", [1], string390);
  if (Grace_isTrue(call391)) {
  lineNumber = 215
  var call392 = callmethod(this,"next", [0]);
  lineNumber = 217
  lineNumber = 216
  var opresult394 = callmethod(var_statementIndent, "+", [1], new GraceNum(1));
  var var_minInd = opresult394;
  lineNumber = 218
  lineNumber = 217
  var var_startIndent = var_statementIndent;
  lineNumber = 219
  var var_ident1;
  lineNumber = 220
  lineNumber = 219
  var var_s = var_sym;
  lineNumber = 221
  var var_tmp;
  lineNumber = 222
  var array395 = new GraceList([
]);

  var var_params = array395;
  lineNumber = 223
  var array396 = new GraceList([
]);

  var var_body = array396;
  lineNumber = 224
  lineNumber = 223
  var bool397 = new GraceBoolean(true)
  var var_havearrow = bool397;
  lineNumber = 225
  lineNumber = 224
  var bool398 = new GraceBoolean(false)
  var var_found = bool398;
  lineNumber = 226
  lineNumber = 225
  var var_i = new GraceNum(0);
  lineNumber = 227
  lineNumber = 226
  var var_toks = var_tokens;
  lineNumber = 228
  lineNumber = 227
  var bool399 = new GraceBoolean(false)
  var var_isMatchingBlock = bool399;
  lineNumber = 229
  lineNumber = 228
  var_statementToken = var_sym;
  lineNumber = 231
  lineNumber = 232
  lineNumber = 1
  lineNumber = 229
  var call401 = callmethod(var_sym,"kind", [0]);
  var string402 = new GraceString("lparen");
  var opresult404 = callmethod(call401, "==", [1], string402);
  if (Grace_isTrue(opresult404)) {
  lineNumber = 231
  lineNumber = 230
  var bool405 = new GraceBoolean(true)
  var_isMatchingBlock = bool405;
  var if400 = bool405;
}
  lineNumber = 274
  lineNumber = 232
  var block406 = Grace_allocObject();
  block406.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block406.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block406.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block406.receiver = this;
  block406.className = 'block<parser:232>';
  block406.real = function(
) {
  var call407 = callmethod(this,"expression", [0]);
  return call407;
};
  lineNumber = 274
  var block408 = Grace_allocObject();
  block408.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block408.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block408.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block408.receiver = this;
  block408.className = 'block<parser:274>';
  block408.real = function(
) {
  lineNumber = 233
  var string410 = new GraceString("comma");
  lineNumber = 276
  var call411 = callmethod(this,"accept", [1], string410);
  lineNumber = 233
  var string412 = new GraceString("arrow");
  var call413 = callmethod(this,"accept", [1], string412);
  var opresult415 = callmethod(call411, "|", [1], call413);
  var string416 = new GraceString("colon");
  var call417 = callmethod(this,"accept", [1], string416);
  var opresult419 = callmethod(opresult415, "|", [1], call417);
  if (Grace_isTrue(opresult419)) {
  lineNumber = 236
  lineNumber = 1
  lineNumber = 235
  var call420 = callmethod(var_values,"pop", [0]);
  var_ident1 = call420;
  lineNumber = 242
  lineNumber = 236
  var string422 = new GraceString("colon");
  lineNumber = 243
  var call423 = callmethod(this,"accept", [1], string422);
  if (Grace_isTrue(call423)) {
  lineNumber = 239
  var call424 = callmethod(this,"next", [0]);
  lineNumber = 240
  var call425 = callmethod(this,"expression", [0]);
  lineNumber = 242
  lineNumber = 1
  lineNumber = 242
  lineNumber = 1
  lineNumber = 241
  var call426 = callmethod(var_values,"pop", [0]);
  var call427 = callmethod(var_ident1,"dtype:=", [1], call426);
  var if421 = call427;
}
  lineNumber = 243
  var call428 = callmethod(var_params,"push", [1], var_ident1);
  lineNumber = 246
  lineNumber = 247
  lineNumber = 1
  lineNumber = 244
  var call430 = callmethod(var_ident1,"kind", [0]);
  var string431 = new GraceString("identifier");
  var opresult433 = callmethod(call430, "!=", [1], string431);
  if (Grace_isTrue(opresult433)) {
  lineNumber = 246
  lineNumber = 245
  var bool434 = new GraceBoolean(true)
  var_isMatchingBlock = bool434;
  var if429 = bool434;
}
  lineNumber = 249
  lineNumber = 247
  var block436 = Grace_allocObject();
  block436.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block436.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block436.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block436.receiver = this;
  block436.className = 'block<parser:247>';
  block436.real = function(
) {
  var string437 = new GraceString("comma");
  var call438 = callmethod(this,"accept", [1], string437);
  return call438;
};
  var opresult440 = callmethod(var_isMatchingBlock, "&&", [1], block436);
  if (Grace_isTrue(opresult440)) {
  lineNumber = 249
  lineNumber = 248
  var string441 = new GraceString("matching blocks can have only ");
  lineNumber = 249
  var string442 = new GraceString("one parameter");
  var opresult444 = callmethod(string441, "++", [1], string442);
  lineNumber = 248
  var call445 = callmethod(var_util,"syntax_error", [1], opresult444);
  var if435 = call445;
}
  lineNumber = 261
  lineNumber = 251
  var block446 = Grace_allocObject();
  block446.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block446.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block446.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block446.receiver = this;
  block446.className = 'block<parser:251>';
  block446.real = function(
) {
  var string447 = new GraceString("comma");
  var call448 = callmethod(this,"accept", [1], string447);
  return call448;
};
  lineNumber = 261
  var block449 = Grace_allocObject();
  block449.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block449.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block449.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block449.receiver = this;
  block449.className = 'block<parser:261>';
  block449.real = function(
) {
  lineNumber = 253
  var call450 = callmethod(this,"next", [0]);
  lineNumber = 254
  var call451 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 256
  lineNumber = 1
  lineNumber = 255
  var call452 = callmethod(var_values,"pop", [0]);
  var_ident1 = call452;
  lineNumber = 260
  lineNumber = 256
  var string454 = new GraceString("colon");
  lineNumber = 261
  var call455 = callmethod(this,"accept", [1], string454);
  if (Grace_isTrue(call455)) {
  lineNumber = 257
  var call456 = callmethod(this,"next", [0]);
  lineNumber = 258
  var call457 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 260
  lineNumber = 1
  lineNumber = 260
  lineNumber = 1
  lineNumber = 259
  var call458 = callmethod(var_values,"pop", [0]);
  var call459 = callmethod(var_ident1,"dtype:=", [1], call458);
  var if453 = call459;
}
  lineNumber = 261
  var call460 = callmethod(var_params,"push", [1], var_ident1);
  return call460;
};
  var call461 = callmethod(Grace_prelude,"while()do", [1, 1], block446, block449);
  lineNumber = 264
  lineNumber = 263
  lineNumber = 1
  lineNumber = 263
  var string463 = new GraceString("arrow");
  lineNumber = 266
  var call464 = callmethod(this,"accept", [1], string463);
  var call465 = callmethod(call464,"not", [0]);
  if (Grace_isTrue(call465)) {
  lineNumber = 264
  var string466 = new GraceString("block parameter list not terminated ->.");
  var call467 = callmethod(var_util,"syntax_error", [1], string466);
  var if462 = call467;
}
  lineNumber = 266
  var call468 = callmethod(this,"next", [0]);
  var if409 = call468;
  } else {
  lineNumber = 274
  lineNumber = 267
  var string470 = new GraceString("bind");
  lineNumber = 273
  var call471 = callmethod(this,"accept", [1], string470);
  if (Grace_isTrue(call471)) {
  lineNumber = 269
  lineNumber = 1
  lineNumber = 268
  var call472 = callmethod(var_values,"pop", [0]);
  var var_lhs = call472;
  lineNumber = 269
  var call473 = callmethod(this,"next", [0]);
  lineNumber = 270
  var call474 = callmethod(this,"expression", [0]);
  lineNumber = 272
  lineNumber = 1
  lineNumber = 271
  var call475 = callmethod(var_values,"pop", [0]);
  var var_rhs = call475;
  lineNumber = 272
  lineNumber = 1
  lineNumber = 272
  var call476 = callmethod(var_ast,"bindNode", [0]);
  var call477 = callmethod(call476,"new", [2], var_lhs, var_rhs);
  var call478 = callmethod(var_body,"push", [1], call477);
  var if469 = call478;
  } else {
  lineNumber = 274
  lineNumber = 1
  lineNumber = 274
  var call479 = callmethod(var_values,"pop", [0]);
  var call480 = callmethod(var_body,"push", [1], call479);
  var if469 = call480;
}
  var if409 = if469;
}
  return if409;
};
  lineNumber = 277
  var call481 = callmethod(this,"ifConsume()then", [1, 1], block406, block408);
  lineNumber = 278
  lineNumber = 277
  var string483 = new GraceString("arrow");
  lineNumber = 280
  var call484 = callmethod(this,"accept", [1], string483);
  if (Grace_isTrue(call484)) {
  lineNumber = 278
  var call485 = callmethod(this,"next", [0]);
  var if482 = call485;
}
  lineNumber = 281
  lineNumber = 1
  lineNumber = 280
  var call486 = callmethod(var_values,"size", [0]);
  var var_ln = call486;
  lineNumber = 285
  lineNumber = 286
  lineNumber = 1
  lineNumber = 281
  var call488 = callmethod(var_sym,"line", [0]);
  lineNumber = 286
  lineNumber = 1
  lineNumber = 281
  var call489 = callmethod(var_lastToken,"line", [0]);
  var opresult491 = callmethod(call488, "==", [1], call489);
  if (Grace_isTrue(opresult491)) {
  lineNumber = 283
  lineNumber = 1
  lineNumber = 282
  var call492 = callmethod(var_sym,"linePos", [0]);
  var diff494 = callmethod(call492, "-", [1], new GraceNum(1));
  var_minIndentLevel = diff494;
  var if487 = diff494;
  } else {
  lineNumber = 285
  lineNumber = 284
  var_minIndentLevel = var_minInd;
  var if487 = var_minInd;
}
  lineNumber = 290
  lineNumber = 286
  var block495 = Grace_allocObject();
  block495.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block495.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block495.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block495.receiver = this;
  block495.className = 'block<parser:286>';
  block495.real = function(
) {
  lineNumber = 1
  lineNumber = 286
  var string496 = new GraceString("rbrace");
  var call497 = callmethod(this,"accept", [1], string496);
  var call498 = callmethod(call497,"not", [0]);
  return call498;
};
  lineNumber = 290
  var block499 = Grace_allocObject();
  block499.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block499.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block499.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block499.receiver = this;
  block499.className = 'block<parser:290>';
  block499.real = function(
) {
  lineNumber = 288
  var block500 = Grace_allocObject();
  block500.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block500.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block500.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block500.receiver = this;
  block500.className = 'block<parser:288>';
  block500.real = function(
) {
  var call501 = callmethod(this,"statement", [0]);
  return call501;
};
  lineNumber = 289
  var call502 = callmethod(this,"expectConsume", [1], block500);
  lineNumber = 290
  lineNumber = 1
  lineNumber = 289
  var call503 = callmethod(var_values,"pop", [0]);
  var_tmp = call503;
  lineNumber = 290
  var call504 = callmethod(var_body,"push", [1], var_tmp);
  return call504;
};
  var call505 = callmethod(Grace_prelude,"while()do", [1, 1], block495, block499);
  lineNumber = 293
  lineNumber = 292
  var diff507 = callmethod(var_minInd, "-", [1], new GraceNum(1));
  var_minIndentLevel = diff507;
  lineNumber = 294
  lineNumber = 293
  var_statementIndent = var_startIndent;
  lineNumber = 294
  var call508 = callmethod(this,"next", [0]);
  lineNumber = 295
  lineNumber = 296
  lineNumber = 1
  lineNumber = 295
  var call509 = callmethod(var_ast,"blockNode", [0]);
  var call510 = callmethod(call509,"new", [2], var_params, var_body);
  var var_o = call510;
  lineNumber = 299
  lineNumber = 296
  if (Grace_isTrue(var_isMatchingBlock)) {
  lineNumber = 299
  lineNumber = 300
  lineNumber = 1
  lineNumber = 297
  var call513 = callmethod(var_params,"size", [0]);
  var opresult515 = callmethod(call513, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult515)) {
  lineNumber = 299
  lineNumber = 1
  lineNumber = 299
  lineNumber = 1
  lineNumber = 298
  var call516 = callmethod(var_params,"first", [0]);
  var call517 = callmethod(var_o,"matchingPattern:=", [1], call516);
  var if512 = call517;
}
  var if511 = if512;
}
  lineNumber = 301
  var call518 = callmethod(var_values,"push", [1], var_o);
  var if389 = call518;
}
  return if389
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["block"] = func388;
  lineNumber = 411
var func519 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 309
  var string521 = new GraceString("identifier");
  lineNumber = 412
  var call522 = callmethod(this,"accept", [1], string521);
  lineNumber = 309
  lineNumber = 1
  lineNumber = 309
  var call523 = callmethod(var_sym,"value", [0]);
  var string524 = new GraceString("if");
  var opresult526 = callmethod(call523, "==", [1], string524);
  var opresult528 = callmethod(call522, "&", [1], opresult526);
  if (Grace_isTrue(opresult528)) {
  lineNumber = 310
  var call529 = callmethod(this,"next", [0]);
  lineNumber = 311
  var call530 = callmethod(this,"expression", [0]);
  lineNumber = 313
  lineNumber = 1
  lineNumber = 312
  var call531 = callmethod(var_values,"pop", [0]);
  var var_cond = call531;
  lineNumber = 321
  var array532 = new GraceList([
]);

  var var_body = array532;
  lineNumber = 322
  var array533 = new GraceList([
]);

  var var_elseblock = array533;
  lineNumber = 323
  lineNumber = 322
  var var_curelse = var_elseblock;
  lineNumber = 324
  var var_v;
  lineNumber = 325
  lineNumber = 324
  var var_localMin = var_minIndentLevel;
  lineNumber = 326
  lineNumber = 325
  var var_localStatementIndent = var_statementIndent;
  lineNumber = 327
  lineNumber = 326
  var opresult535 = callmethod(var_statementIndent, "+", [1], new GraceNum(1));
  var var_minInd = opresult535;
  lineNumber = 407
  lineNumber = 327
  var string537 = new GraceString("identifier");
  lineNumber = 409
  var call538 = callmethod(this,"accept", [1], string537);
  lineNumber = 327
  lineNumber = 1
  lineNumber = 327
  var call539 = callmethod(var_sym,"value", [0]);
  var string540 = new GraceString("then");
  var opresult542 = callmethod(call539, "==", [1], string540);
  var opresult544 = callmethod(call538, "&", [1], opresult542);
  if (Grace_isTrue(opresult544)) {
  lineNumber = 328
  var call545 = callmethod(this,"next", [0]);
  lineNumber = 341
  lineNumber = 329
  var string547 = new GraceString("lbrace");
  lineNumber = 343
  var call548 = callmethod(this,"accept", [1], string547);
  if (Grace_isTrue(call548)) {
  lineNumber = 330
  var call549 = callmethod(this,"next", [0]);
  lineNumber = 335
  lineNumber = 336
  lineNumber = 1
  lineNumber = 331
  var call551 = callmethod(var_sym,"line", [0]);
  lineNumber = 336
  lineNumber = 1
  lineNumber = 331
  var call552 = callmethod(var_lastToken,"line", [0]);
  var opresult554 = callmethod(call551, "==", [1], call552);
  if (Grace_isTrue(opresult554)) {
  lineNumber = 333
  lineNumber = 1
  lineNumber = 332
  var call555 = callmethod(var_sym,"linePos", [0]);
  var diff557 = callmethod(call555, "-", [1], new GraceNum(1));
  var_minIndentLevel = diff557;
  var if550 = diff557;
  } else {
  lineNumber = 335
  lineNumber = 334
  var_minIndentLevel = var_minInd;
  var if550 = var_minInd;
}
  lineNumber = 339
  lineNumber = 336
  var block558 = Grace_allocObject();
  block558.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block558.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block558.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block558.receiver = this;
  block558.className = 'block<parser:336>';
  block558.real = function(
) {
  lineNumber = 1
  lineNumber = 336
  var string559 = new GraceString("rbrace");
  var call560 = callmethod(this,"accept", [1], string559);
  var call561 = callmethod(call560,"not", [0]);
  return call561;
};
  lineNumber = 339
  var block562 = Grace_allocObject();
  block562.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block562.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block562.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block562.receiver = this;
  block562.className = 'block<parser:339>';
  block562.real = function(
) {
  lineNumber = 337
  var call563 = callmethod(this,"statement", [0]);
  lineNumber = 339
  lineNumber = 1
  lineNumber = 338
  var call564 = callmethod(var_values,"pop", [0]);
  var_v = call564;
  lineNumber = 339
  var call565 = callmethod(var_body,"push", [1], var_v);
  return call565;
};
  var call566 = callmethod(Grace_prelude,"while()do", [1, 1], block558, block562);
  lineNumber = 341
  var call567 = callmethod(this,"next", [0]);
  var if546 = call567;
}
  lineNumber = 344
  var var_econd;
  lineNumber = 345
  var var_eif;
  lineNumber = 346
  var var_newelse;
  lineNumber = 347
  var var_ebody;
  lineNumber = 383
  lineNumber = 347
  var block568 = Grace_allocObject();
  block568.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block568.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block568.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block568.receiver = this;
  block568.className = 'block<parser:347>';
  block568.real = function(
) {
  var string569 = new GraceString("identifier");
  var call570 = callmethod(this,"accept", [1], string569);
  lineNumber = 1
  lineNumber = 347
  var call571 = callmethod(var_sym,"value", [0]);
  var string572 = new GraceString("elseif");
  var opresult574 = callmethod(call571, "==", [1], string572);
  var opresult576 = callmethod(call570, "&", [1], opresult574);
  return opresult576;
};
  lineNumber = 383
  var block577 = Grace_allocObject();
  block577.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block577.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block577.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block577.receiver = this;
  block577.className = 'block<parser:383>';
  block577.real = function(
) {
  lineNumber = 351
  lineNumber = 350
  var_statementToken = var_sym;
  lineNumber = 351
  var call578 = callmethod(this,"next", [0]);
  lineNumber = 352
  var call579 = callmethod(this,"expression", [0]);
  lineNumber = 354
  lineNumber = 1
  lineNumber = 353
  var call580 = callmethod(var_values,"pop", [0]);
  var_econd = call580;
  lineNumber = 356
  lineNumber = 354
  lineNumber = 1
  lineNumber = 354
  var string582 = new GraceString("identifier");
  lineNumber = 358
  var call583 = callmethod(this,"accept", [1], string582);
  lineNumber = 354
  lineNumber = 1
  lineNumber = 355
  var call584 = callmethod(var_sym,"value", [0]);
  var string585 = new GraceString("then");
  var opresult587 = callmethod(call584, "==", [1], string585);
  var opresult589 = callmethod(call583, "&", [1], opresult587);
  var call590 = callmethod(opresult589,"not", [0]);
  if (Grace_isTrue(call590)) {
  lineNumber = 356
  var string591 = new GraceString("elseif with no then.");
  var call592 = callmethod(var_util,"syntax_error", [1], string591);
  var if581 = call592;
}
  lineNumber = 358
  var call593 = callmethod(this,"next", [0]);
  lineNumber = 360
  var array594 = new GraceList([
]);

  var_ebody = array594;
  lineNumber = 361
  lineNumber = 360
  lineNumber = 1
  lineNumber = 360
  var string596 = new GraceString("lbrace");
  lineNumber = 363
  var call597 = callmethod(this,"accept", [1], string596);
  var call598 = callmethod(call597,"not", [0]);
  if (Grace_isTrue(call598)) {
  lineNumber = 361
  var string599 = new GraceString("expected {.");
  var call600 = callmethod(var_util,"syntax_error", [1], string599);
  var if595 = call600;
}
  lineNumber = 363
  var call601 = callmethod(this,"next", [0]);
  lineNumber = 368
  lineNumber = 369
  lineNumber = 1
  lineNumber = 364
  var call603 = callmethod(var_sym,"line", [0]);
  lineNumber = 369
  lineNumber = 1
  lineNumber = 364
  var call604 = callmethod(var_lastToken,"line", [0]);
  var opresult606 = callmethod(call603, "==", [1], call604);
  if (Grace_isTrue(opresult606)) {
  lineNumber = 366
  lineNumber = 1
  lineNumber = 365
  var call607 = callmethod(var_sym,"linePos", [0]);
  var diff609 = callmethod(call607, "-", [1], new GraceNum(1));
  var_minIndentLevel = diff609;
  var if602 = diff609;
  } else {
  lineNumber = 368
  lineNumber = 367
  var_minIndentLevel = var_minInd;
  var if602 = var_minInd;
}
  lineNumber = 372
  lineNumber = 369
  var block610 = Grace_allocObject();
  block610.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block610.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block610.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block610.receiver = this;
  block610.className = 'block<parser:369>';
  block610.real = function(
) {
  lineNumber = 1
  lineNumber = 369
  var string611 = new GraceString("rbrace");
  var call612 = callmethod(this,"accept", [1], string611);
  var call613 = callmethod(call612,"not", [0]);
  return call613;
};
  lineNumber = 372
  var block614 = Grace_allocObject();
  block614.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block614.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block614.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block614.receiver = this;
  block614.className = 'block<parser:372>';
  block614.real = function(
) {
  lineNumber = 370
  var call615 = callmethod(this,"statement", [0]);
  lineNumber = 372
  lineNumber = 1
  lineNumber = 371
  var call616 = callmethod(var_values,"pop", [0]);
  var_v = call616;
  lineNumber = 372
  var call617 = callmethod(var_ebody,"push", [1], var_v);
  return call617;
};
  var call618 = callmethod(Grace_prelude,"while()do", [1, 1], block610, block614);
  lineNumber = 374
  var call619 = callmethod(this,"next", [0]);
  lineNumber = 376
  var array620 = new GraceList([
]);

  var_newelse = array620;
  lineNumber = 379
  lineNumber = 1
  lineNumber = 376
  var call621 = callmethod(var_ast,"ifNode", [0]);
  var call622 = callmethod(call621,"new", [3], var_econd, var_ebody, var_newelse);
  var_eif = call622;
  lineNumber = 379
  var call623 = callmethod(var_curelse,"push", [1], var_eif);
  lineNumber = 383
  lineNumber = 382
  var_curelse = var_newelse;
  return var_newelse;
};
  var call624 = callmethod(Grace_prelude,"while()do", [1, 1], block568, block577);
  lineNumber = 400
  lineNumber = 384
  var string626 = new GraceString("identifier");
  lineNumber = 403
  var call627 = callmethod(this,"accept", [1], string626);
  lineNumber = 384
  lineNumber = 1
  lineNumber = 384
  var call628 = callmethod(var_sym,"value", [0]);
  var string629 = new GraceString("else");
  var opresult631 = callmethod(call628, "==", [1], string629);
  var opresult633 = callmethod(call627, "&", [1], opresult631);
  if (Grace_isTrue(opresult633)) {
  lineNumber = 385
  var call634 = callmethod(this,"next", [0]);
  lineNumber = 400
  lineNumber = 386
  var string636 = new GraceString("lbrace");
  lineNumber = 402
  var call637 = callmethod(this,"accept", [1], string636);
  if (Grace_isTrue(call637)) {
  lineNumber = 389
  var call638 = callmethod(this,"next", [0]);
  lineNumber = 394
  lineNumber = 395
  lineNumber = 1
  lineNumber = 390
  var call640 = callmethod(var_sym,"line", [0]);
  lineNumber = 395
  lineNumber = 1
  lineNumber = 390
  var call641 = callmethod(var_lastToken,"line", [0]);
  var opresult643 = callmethod(call640, "==", [1], call641);
  if (Grace_isTrue(opresult643)) {
  lineNumber = 392
  lineNumber = 1
  lineNumber = 391
  var call644 = callmethod(var_sym,"linePos", [0]);
  var diff646 = callmethod(call644, "-", [1], new GraceNum(1));
  var_minIndentLevel = diff646;
  var if639 = diff646;
  } else {
  lineNumber = 394
  lineNumber = 393
  var_minIndentLevel = var_minInd;
  var if639 = var_minInd;
}
  lineNumber = 398
  lineNumber = 395
  var block647 = Grace_allocObject();
  block647.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block647.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block647.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block647.receiver = this;
  block647.className = 'block<parser:395>';
  block647.real = function(
) {
  lineNumber = 1
  lineNumber = 395
  var string648 = new GraceString("rbrace");
  var call649 = callmethod(this,"accept", [1], string648);
  var call650 = callmethod(call649,"not", [0]);
  return call650;
};
  lineNumber = 398
  var block651 = Grace_allocObject();
  block651.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block651.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block651.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block651.receiver = this;
  block651.className = 'block<parser:398>';
  block651.real = function(
) {
  lineNumber = 396
  var call652 = callmethod(this,"statement", [0]);
  lineNumber = 398
  lineNumber = 1
  lineNumber = 397
  var call653 = callmethod(var_values,"pop", [0]);
  var_v = call653;
  lineNumber = 398
  var call654 = callmethod(var_curelse,"push", [1], var_v);
  return call654;
};
  var call655 = callmethod(Grace_prelude,"while()do", [1, 1], block647, block651);
  lineNumber = 400
  var call656 = callmethod(this,"next", [0]);
  var if635 = call656;
}
  var if625 = if635;
}
  lineNumber = 403
  lineNumber = 404
  lineNumber = 1
  lineNumber = 403
  var call657 = callmethod(var_ast,"ifNode", [0]);
  var call658 = callmethod(call657,"new", [3], var_cond, var_body, var_elseblock);
  var var_o = call658;
  lineNumber = 404
  var call659 = callmethod(var_values,"push", [1], var_o);
  var if536 = call659;
  } else {
  lineNumber = 407
  var string660 = new GraceString("if with no then");
  var call661 = callmethod(var_util,"syntax_error", [1], string660);
  var if536 = call661;
}
  lineNumber = 410
  lineNumber = 409
  var_minIndentLevel = var_localMin;
  lineNumber = 411
  lineNumber = 410
  var_statementIndent = var_localStatementIndent;
  var if520 = var_localStatementIndent;
}
  return if520
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["doif"] = func519;
  lineNumber = 436
var func662 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 417
  var string664 = new GraceString("identifier");
  lineNumber = 439
  var call665 = callmethod(this,"accept", [1], string664);
  lineNumber = 417
  lineNumber = 1
  lineNumber = 417
  var call666 = callmethod(var_sym,"value", [0]);
  var string667 = new GraceString("for");
  var opresult669 = callmethod(call666, "==", [1], string667);
  var opresult671 = callmethod(call665, "&", [1], opresult669);
  if (Grace_isTrue(opresult671)) {
  lineNumber = 418
  var call672 = callmethod(this,"next", [0]);
  lineNumber = 420
  var var_over;
  var call673 = callmethod(this,"expression", [0]);
  lineNumber = 422
  lineNumber = 1
  lineNumber = 421
  var call674 = callmethod(var_values,"pop", [0]);
  var_over = call674;
  lineNumber = 423
  var array675 = new GraceList([
]);

  var var_body = array675;
  lineNumber = 424
  var var_variable;
  lineNumber = 425
  var var_localMin;
  lineNumber = 426
  lineNumber = 425
  var opresult677 = callmethod(var_statementIndent, "+", [1], new GraceNum(1));
  var var_minInd = opresult677;
  lineNumber = 436
  lineNumber = 426
  var string679 = new GraceString("identifier");
  lineNumber = 438
  var call680 = callmethod(this,"accept", [1], string679);
  lineNumber = 426
  lineNumber = 1
  lineNumber = 426
  var call681 = callmethod(var_sym,"value", [0]);
  var string682 = new GraceString("each");
  var opresult684 = callmethod(call681, "==", [1], string682);
  lineNumber = 1
  lineNumber = 427
  var call685 = callmethod(var_sym,"value", [0]);
  var string686 = new GraceString("do");
  var opresult688 = callmethod(call685, "==", [1], string686);
  var opresult690 = callmethod(opresult684, "|", [1], opresult688);
  var opresult692 = callmethod(call680, "&", [1], opresult690);
  if (Grace_isTrue(opresult692)) {
  lineNumber = 428
  var call693 = callmethod(this,"next", [0]);
  lineNumber = 429
  var string694 = new GraceString("lbrace");
  lineNumber = 430
  var call695 = callmethod(this,"expect", [1], string694);
  var call696 = callmethod(this,"block", [0]);
  lineNumber = 432
  lineNumber = 1
  lineNumber = 431
  var call697 = callmethod(var_values,"pop", [0]);
  var var_blk = call697;
  lineNumber = 432
  lineNumber = 433
  lineNumber = 1
  lineNumber = 432
  var call698 = callmethod(var_ast,"forNode", [0]);
  var call699 = callmethod(call698,"new", [2], var_over, var_blk);
  var var_o = call699;
  lineNumber = 433
  var call700 = callmethod(var_values,"push", [1], var_o);
  lineNumber = 435
  lineNumber = 434
  var diff702 = callmethod(var_minInd, "-", [1], new GraceNum(1));
  var_minIndentLevel = diff702;
  var if678 = diff702;
  } else {
  lineNumber = 436
  var string703 = new GraceString("expected 'do'");
  var call704 = callmethod(var_util,"syntax_error", [1], string703);
  var if678 = call704;
}
  var if663 = if678;
}
  return if663
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["dofor"] = func662;
  lineNumber = 448
var func705 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 444
  var string707 = new GraceString("identifier");
  lineNumber = 451
  var call708 = callmethod(this,"accept", [1], string707);
  if (Grace_isTrue(call708)) {
  lineNumber = 448
  lineNumber = 450
  lineNumber = 1
  lineNumber = 445
  var call710 = callmethod(var_sym,"value", [0]);
  var string711 = new GraceString("if");
  var opresult713 = callmethod(call710, "==", [1], string711);
  if (Grace_isTrue(opresult713)) {
  lineNumber = 446
  var call714 = callmethod(this,"doif", [0]);
  var if709 = call714;
  } else {
  lineNumber = 448
  var call715 = callmethod(this,"pushidentifier", [0]);
  var if709 = call715;
}
  var if706 = if709;
}
  return if706
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["identifier"] = func705;
  lineNumber = 475
var func716 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 454
  var string718 = new GraceString("op");
  lineNumber = 477
  var call719 = callmethod(this,"accept", [1], string718);
  if (Grace_isTrue(call719)) {
  lineNumber = 456
  lineNumber = 1
  lineNumber = 455
  var call720 = callmethod(var_sym,"value", [0]);
  var var_op = call720;
  lineNumber = 457
  var var_val;
  var call721 = callmethod(this,"next", [0]);
  lineNumber = 467
  lineNumber = 458
  var string723 = new GraceString("lparen");
  lineNumber = 469
  var call724 = callmethod(this,"accept", [1], string723);
  if (Grace_isTrue(call724)) {
  lineNumber = 459
  var call725 = callmethod(this,"next", [0]);
  lineNumber = 461
  lineNumber = 460
  var string727 = new GraceString("rparen");
  lineNumber = 463
  var call728 = callmethod(this,"accept", [1], string727);
  if (Grace_isTrue(call728)) {
  lineNumber = 461
  var string729 = new GraceString("empty () in expression");
  var call730 = callmethod(var_util,"syntax_error", [1], string729);
  var if726 = call730;
}
  lineNumber = 463
  var call731 = callmethod(this,"expression", [0]);
  lineNumber = 464
  var string732 = new GraceString("rparen");
  lineNumber = 465
  var call733 = callmethod(this,"expect", [1], string732);
  var call734 = callmethod(this,"next", [0]);
  var if722 = call734;
  } else {
  lineNumber = 467
  var call735 = callmethod(this,"term", [0]);
  var if722 = call735;
}
  lineNumber = 469
  var call736 = callmethod(this,"dotrest", [0]);
  lineNumber = 470
  var call737 = callmethod(this,"callrest", [0]);
  lineNumber = 471
  var call738 = callmethod(this,"postfixsquare", [0]);
  lineNumber = 473
  lineNumber = 1
  lineNumber = 472
  var call739 = callmethod(var_values,"pop", [0]);
  var_val = call739;
  lineNumber = 473
  var string740 = new GraceString("prefix");
  var opresult742 = callmethod(string740, "++", [1], var_op);
  lineNumber = 474
  lineNumber = 1
  lineNumber = 473
  var call743 = callmethod(var_ast,"memberNode", [0]);
  var call744 = callmethod(call743,"new", [2], opresult742, var_val);
  var var_mem = call744;
  lineNumber = 474
  lineNumber = 1
  lineNumber = 474
  var call746 = callmethod(var_mem,"value", [0]);
  lineNumber = 1
  lineNumber = 474
  var call747 = callmethod(var_ast,"callWithPart", [0]);
  var call748 = callmethod(call747,"new", [1], call746);
  var array745 = new GraceList([
call748,
]);

  lineNumber = 475
  lineNumber = 1
  lineNumber = 474
  var call749 = callmethod(var_ast,"callNode", [0]);
  var call750 = callmethod(call749,"new", [2], var_mem, array745);
  var var_call = call750;
  lineNumber = 475
  var call751 = callmethod(var_values,"push", [1], var_call);
  var if717 = call751;
}
  return if717
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["prefixop"] = func716;
  lineNumber = 496
var func752 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 480
  var string754 = new GraceString("lgeneric");
  lineNumber = 498
  var call755 = callmethod(this,"accept", [1], string754);
  if (Grace_isTrue(call755)) {
  lineNumber = 482
  lineNumber = 1
  lineNumber = 481
  var call756 = callmethod(var_values,"pop", [0]);
  var var_id = call756;
  lineNumber = 483
  var array757 = new GraceList([
]);

  var var_gens = array757;
  var call758 = callmethod(this,"next", [0]);
  lineNumber = 491
  lineNumber = 484
  var block759 = Grace_allocObject();
  block759.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block759.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block759.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block759.receiver = this;
  block759.className = 'block<parser:484>';
  block759.real = function(
) {
  var string760 = new GraceString("identifier");
  var call761 = callmethod(this,"accept", [1], string760);
  return call761;
};
  lineNumber = 491
  var block762 = Grace_allocObject();
  block762.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block762.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block762.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block762.receiver = this;
  block762.className = 'block<parser:491>';
  block762.real = function(
) {
  lineNumber = 485
  var call763 = callmethod(this,"identifier", [0]);
  lineNumber = 486
  var call764 = callmethod(this,"generic", [0]);
  lineNumber = 487
  lineNumber = 1
  lineNumber = 487
  var call765 = callmethod(var_values,"pop", [0]);
  var call766 = callmethod(var_gens,"push", [1], call765);
  lineNumber = 491
  lineNumber = 488
  var string768 = new GraceString("comma");
  lineNumber = 493
  var call769 = callmethod(this,"accept", [1], string768);
  if (Grace_isTrue(call769)) {
  lineNumber = 489
  var call770 = callmethod(this,"next", [0]);
  var if767 = call770;
  } else {
  lineNumber = 491
  var string771 = new GraceString("rgeneric");
  lineNumber = 492
  var call772 = callmethod(this,"expect", [1], string771);
  var if767 = call772;
}
  return if767;
};
  var call773 = callmethod(Grace_prelude,"while()do", [1, 1], block759, block762);
  lineNumber = 494
  var string774 = new GraceString("rgeneric");
  lineNumber = 495
  var call775 = callmethod(this,"expect", [1], string774);
  var call776 = callmethod(this,"next", [0]);
  lineNumber = 496
  lineNumber = 1
  lineNumber = 496
  var call777 = callmethod(var_ast,"genericNode", [0]);
  var call778 = callmethod(call777,"new", [2], var_id, var_gens);
  var call779 = callmethod(var_values,"push", [1], call778);
  var if753 = call779;
}
  return if753
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["generic"] = func752;
  lineNumber = 543
var func780 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 502
  lineNumber = 500
  var string782 = new GraceString("identifier");
  lineNumber = 503
  var call783 = callmethod(this,"accept", [1], string782);
  lineNumber = 500
  lineNumber = 1
  lineNumber = 500
  var call784 = callmethod(var_sym,"value", [0]);
  var string785 = new GraceString("match");
  var opresult787 = callmethod(call784, "==", [1], string785);
  var opresult789 = callmethod(call783, "&", [1], opresult787);
  var call790 = callmethod(opresult789,"prefix!", [0]);
  if (Grace_isTrue(call790)) {
  lineNumber = 502
  lineNumber = 501
  return new GraceNum(0)
  var if781 = undefined;
}
  lineNumber = 504
  lineNumber = 503
  var var_localmin = var_minIndentLevel;
  lineNumber = 504
  var call791 = callmethod(this,"next", [0]);
  lineNumber = 505
  var string792 = new GraceString("lparen");
  lineNumber = 506
  var call793 = callmethod(this,"expect", [1], string792);
  var call794 = callmethod(this,"next", [0]);
  lineNumber = 507
  var block795 = Grace_allocObject();
  block795.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block795.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block795.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block795.receiver = this;
  block795.className = 'block<parser:507>';
  block795.real = function(
) {
  var call796 = callmethod(this,"expression", [0]);
  return call796;
};
  lineNumber = 508
  var call797 = callmethod(this,"expectConsume", [1], block795);
  lineNumber = 509
  lineNumber = 1
  lineNumber = 508
  var call798 = callmethod(var_values,"pop", [0]);
  var var_matchee = call798;
  lineNumber = 509
  var string799 = new GraceString("rparen");
  lineNumber = 510
  var call800 = callmethod(this,"expect", [1], string799);
  var call801 = callmethod(this,"next", [0]);
  lineNumber = 512
  var array802 = new GraceList([
]);

  var var_cases = array802;
  lineNumber = 513
  lineNumber = 512
  var bool803 = new GraceBoolean(false)
  var var_elsecase = bool803;
  lineNumber = 525
  lineNumber = 513
  var block804 = Grace_allocObject();
  block804.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block804.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block804.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block804.receiver = this;
  block804.className = 'block<parser:513>';
  block804.real = function(
) {
  var string805 = new GraceString("identifier");
  var call806 = callmethod(this,"accept", [1], string805);
  lineNumber = 1
  lineNumber = 513
  var call807 = callmethod(var_sym,"value", [0]);
  var string808 = new GraceString("case");
  var opresult810 = callmethod(call807, "==", [1], string808);
  var opresult812 = callmethod(call806, "&", [1], opresult810);
  return opresult812;
};
  lineNumber = 525
  var block813 = Grace_allocObject();
  block813.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block813.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block813.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block813.receiver = this;
  block813.className = 'block<parser:525>';
  block813.real = function(
) {
  lineNumber = 514
  var call814 = callmethod(this,"next", [0]);
  lineNumber = 523
  lineNumber = 515
  var string816 = new GraceString("lbrace");
  lineNumber = 525
  var call817 = callmethod(this,"accept", [1], string816);
  if (Grace_isTrue(call817)) {
  lineNumber = 516
  var call818 = callmethod(this,"block", [0]);
  var if815 = call818;
  } else {
  lineNumber = 523
  lineNumber = 517
  var string820 = new GraceString("lparen");
  lineNumber = 522
  var call821 = callmethod(this,"accept", [1], string820);
  if (Grace_isTrue(call821)) {
  lineNumber = 518
  var call822 = callmethod(this,"next", [0]);
  lineNumber = 519
  var call823 = callmethod(this,"expression", [0]);
  lineNumber = 520
  var string824 = new GraceString("rparen");
  lineNumber = 521
  var call825 = callmethod(this,"expect", [1], string824);
  var call826 = callmethod(this,"next", [0]);
  var if819 = call826;
  } else {
  lineNumber = 523
  var string827 = new GraceString("no argument to case");
  var call828 = callmethod(var_util,"syntax_error", [1], string827);
  var if819 = call828;
}
  var if815 = if819;
}
  lineNumber = 525
  lineNumber = 1
  lineNumber = 525
  var call829 = callmethod(var_values,"pop", [0]);
  var call830 = callmethod(var_cases,"push", [1], call829);
  return call830;
};
  var call831 = callmethod(Grace_prelude,"while()do", [1, 1], block804, block813);
  lineNumber = 540
  lineNumber = 527
  var string833 = new GraceString("identifier");
  lineNumber = 541
  var call834 = callmethod(this,"accept", [1], string833);
  lineNumber = 527
  lineNumber = 1
  lineNumber = 527
  var call835 = callmethod(var_sym,"value", [0]);
  var string836 = new GraceString("else");
  var opresult838 = callmethod(call835, "==", [1], string836);
  var opresult840 = callmethod(call834, "&", [1], opresult838);
  if (Grace_isTrue(opresult840)) {
  lineNumber = 528
  var call841 = callmethod(this,"next", [0]);
  lineNumber = 537
  lineNumber = 529
  var string843 = new GraceString("lbrace");
  lineNumber = 539
  var call844 = callmethod(this,"accept", [1], string843);
  if (Grace_isTrue(call844)) {
  lineNumber = 530
  var call845 = callmethod(this,"block", [0]);
  var if842 = call845;
  } else {
  lineNumber = 537
  lineNumber = 531
  var string847 = new GraceString("lparen");
  lineNumber = 536
  var call848 = callmethod(this,"accept", [1], string847);
  if (Grace_isTrue(call848)) {
  lineNumber = 532
  var call849 = callmethod(this,"next", [0]);
  lineNumber = 533
  var call850 = callmethod(this,"expression", [0]);
  lineNumber = 534
  var string851 = new GraceString("rparen");
  lineNumber = 535
  var call852 = callmethod(this,"expect", [1], string851);
  var call853 = callmethod(this,"next", [0]);
  var if846 = call853;
  } else {
  lineNumber = 537
  var string854 = new GraceString("no argument to case");
  var call855 = callmethod(var_util,"syntax_error", [1], string854);
  var if846 = call855;
}
  var if842 = if846;
}
  lineNumber = 540
  lineNumber = 1
  lineNumber = 539
  var call856 = callmethod(var_values,"pop", [0]);
  var_elsecase = call856;
  var if832 = call856;
}
  lineNumber = 541
  lineNumber = 1
  lineNumber = 541
  var call857 = callmethod(var_ast,"matchCaseNode", [0]);
  var call858 = callmethod(call857,"new", [3], var_matchee, var_cases, var_elsecase);
  var call859 = callmethod(var_values,"push", [1], call858);
  lineNumber = 543
  lineNumber = 542
  var_minIndentLevel = var_localmin;
  return var_localmin
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["matchcase"] = func780;
  lineNumber = 568
var func860 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 547
  var string862 = new GraceString("num");
  lineNumber = 570
  var call863 = callmethod(this,"accept", [1], string862);
  if (Grace_isTrue(call863)) {
  lineNumber = 548
  var call864 = callmethod(this,"pushnum", [0]);
  var if861 = call864;
  } else {
  lineNumber = 568
  lineNumber = 549
  var string866 = new GraceString("string");
  lineNumber = 551
  var call867 = callmethod(this,"accept", [1], string866);
  if (Grace_isTrue(call867)) {
  lineNumber = 550
  var call868 = callmethod(this,"pushstring", [0]);
  var if865 = call868;
  } else {
  lineNumber = 568
  lineNumber = 551
  var string870 = new GraceString("octets");
  lineNumber = 553
  var call871 = callmethod(this,"accept", [1], string870);
  if (Grace_isTrue(call871)) {
  lineNumber = 552
  var call872 = callmethod(this,"pushoctets", [0]);
  var if869 = call872;
  } else {
  lineNumber = 568
  lineNumber = 553
  var string874 = new GraceString("identifier");
  lineNumber = 555
  var call875 = callmethod(this,"accept", [1], string874);
  lineNumber = 553
  lineNumber = 1
  lineNumber = 553
  var call876 = callmethod(var_sym,"value", [0]);
  var string877 = new GraceString("match");
  var opresult879 = callmethod(call876, "==", [1], string877);
  var opresult881 = callmethod(call875, "&", [1], opresult879);
  if (Grace_isTrue(opresult881)) {
  lineNumber = 554
  var call882 = callmethod(this,"matchcase", [0]);
  var if873 = call882;
  } else {
  lineNumber = 568
  lineNumber = 555
  var string884 = new GraceString("identifier");
  lineNumber = 560
  var call885 = callmethod(this,"accept", [1], string884);
  if (Grace_isTrue(call885)) {
  lineNumber = 556
  var call886 = callmethod(this,"identifier", [0]);
  lineNumber = 558
  lineNumber = 557
  var string888 = new GraceString("lgeneric");
  lineNumber = 560
  var call889 = callmethod(this,"accept", [1], string888);
  if (Grace_isTrue(call889)) {
  lineNumber = 558
  var call890 = callmethod(this,"generic", [0]);
  var if887 = call890;
}
  var if883 = if887;
  } else {
  lineNumber = 568
  lineNumber = 560
  var string892 = new GraceString("keyword");
  lineNumber = 562
  var call893 = callmethod(this,"accept", [1], string892);
  lineNumber = 560
  lineNumber = 1
  lineNumber = 560
  var call894 = callmethod(var_sym,"value", [0]);
  var string895 = new GraceString("object");
  var opresult897 = callmethod(call894, "==", [1], string895);
  var opresult899 = callmethod(call893, "&", [1], opresult897);
  if (Grace_isTrue(opresult899)) {
  lineNumber = 561
  var call900 = callmethod(this,"doobject", [0]);
  var if891 = call900;
  } else {
  lineNumber = 568
  lineNumber = 562
  var string902 = new GraceString("lbrace");
  lineNumber = 564
  var call903 = callmethod(this,"accept", [1], string902);
  if (Grace_isTrue(call903)) {
  lineNumber = 563
  var call904 = callmethod(this,"block", [0]);
  var if901 = call904;
  } else {
  lineNumber = 568
  lineNumber = 564
  var string906 = new GraceString("lsquare");
  lineNumber = 566
  var call907 = callmethod(this,"accept", [1], string906);
  if (Grace_isTrue(call907)) {
  lineNumber = 565
  var call908 = callmethod(this,"doarray", [0]);
  var if905 = call908;
  } else {
  lineNumber = 568
  lineNumber = 566
  var string910 = new GraceString("op");
  lineNumber = 570
  var call911 = callmethod(this,"accept", [1], string910);
  if (Grace_isTrue(call911)) {
  lineNumber = 568
  var call912 = callmethod(this,"prefixop", [0]);
  var if909 = call912;
}
  var if905 = if909;
}
  var if901 = if905;
}
  var if891 = if901;
}
  var if883 = if891;
}
  var if873 = if883;
}
  var if869 = if873;
}
  var if865 = if869;
}
  var if861 = if865;
}
  return if861
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["term"] = func860;
  lineNumber = 591
var func913 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 586
  lineNumber = 577
  var string915 = new GraceString("lparen");
  lineNumber = 588
  var call916 = callmethod(this,"accept", [1], string915);
  if (Grace_isTrue(call916)) {
  lineNumber = 579
  lineNumber = 578
  var var_tmpStatementToken = var_statementToken;
  lineNumber = 580
  lineNumber = 579
  var_statementToken = var_sym;
  lineNumber = 580
  var call917 = callmethod(this,"next", [0]);
  lineNumber = 581
  var call918 = callmethod(this,"expression", [0]);
  lineNumber = 582
  var string919 = new GraceString("rparen");
  lineNumber = 583
  var call920 = callmethod(this,"expect", [1], string919);
  lineNumber = 584
  lineNumber = 583
  var_statementToken = var_tmpStatementToken;
  lineNumber = 584
  var call921 = callmethod(this,"next", [0]);
  var if914 = call921;
  } else {
  lineNumber = 586
  var call922 = callmethod(this,"term", [0]);
  var if914 = call922;
}
  lineNumber = 588
  var call923 = callmethod(this,"dotrest", [0]);
  lineNumber = 589
  var call924 = callmethod(this,"callrest", [0]);
  lineNumber = 590
  var call925 = callmethod(this,"postfixsquare", [0]);
  lineNumber = 591
  var call926 = callmethod(this,"expressionrest", [0]);
  return call926
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["expression"] = func913;
  lineNumber = 608
var func927 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 597
  var string929 = new GraceString("lsquare");
  lineNumber = 610
  var call930 = callmethod(this,"acceptSameLine", [1], string929);
  if (Grace_isTrue(call930)) {
  lineNumber = 598
  var call931 = callmethod(this,"next", [0]);
  lineNumber = 600
  lineNumber = 1
  lineNumber = 599
  var call932 = callmethod(var_values,"pop", [0]);
  var var_expr = call932;
  lineNumber = 600
  var call933 = callmethod(this,"expression", [0]);
  lineNumber = 602
  lineNumber = 1
  lineNumber = 601
  var call934 = callmethod(var_values,"pop", [0]);
  var var_index = call934;
  lineNumber = 602
  var string935 = new GraceString("rsquare");
  lineNumber = 603
  var call936 = callmethod(this,"expect", [1], string935);
  var call937 = callmethod(this,"next", [0]);
  lineNumber = 604
  lineNumber = 605
  lineNumber = 1
  lineNumber = 604
  var call938 = callmethod(var_ast,"indexNode", [0]);
  var call939 = callmethod(call938,"new", [2], var_expr, var_index);
  var var_o = call939;
  lineNumber = 605
  var call940 = callmethod(var_values,"push", [1], var_o);
  lineNumber = 606
  var call941 = callmethod(this,"dotrest", [0]);
  lineNumber = 607
  var call942 = callmethod(this,"callrest", [0]);
  lineNumber = 608
  var call943 = callmethod(this,"postfixsquare", [0]);
  var if928 = call943;
}
  return if928
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["postfixsquare"] = func927;
  lineNumber = 622
var func944 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 620
  lineNumber = 621
  lineNumber = 616
  var string946 = new GraceString("*");
  var opresult948 = callmethod(var_o, "==", [1], string946);
  if (Grace_isTrue(opresult948)) {
  lineNumber = 618
  lineNumber = 617
  return new GraceNum(10)
  var if945 = undefined;
  } else {
  lineNumber = 620
  lineNumber = 621
  lineNumber = 618
  var string950 = new GraceString("/");
  var opresult952 = callmethod(var_o, "==", [1], string950);
  if (Grace_isTrue(opresult952)) {
  lineNumber = 620
  lineNumber = 619
  return new GraceNum(10)
  var if949 = undefined;
}
  var if945 = if949;
}
  lineNumber = 622
  lineNumber = 621
  return new GraceNum(5)
  return undefined
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["oprec"] = func944;
  lineNumber = 630
var func953 = function(argcv) {
  var curarg = 1;
  var var_ops = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 628
  lineNumber = 630
  lineNumber = 1
  lineNumber = 626
  var call955 = callmethod(var_ops,"size", [0]);
  var opresult957 = callmethod(call955, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult957)) {
  lineNumber = 628
  lineNumber = 1
  lineNumber = 627
  var call958 = callmethod(var_ops,"last", [0]);
  var var_o = call958;
  lineNumber = 628
  lineNumber = 629
  var call959 = callmethod(this,"oprec", [1], var_o);
  return call959
  var if954 = undefined;
}
  lineNumber = 630
  return new GraceNum(0)
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["toprec"] = func953;
  lineNumber = 721
var func960 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 638
  var string962 = new GraceString("op");
  lineNumber = 724
  var call963 = callmethod(this,"accept", [1], string962);
  if (Grace_isTrue(call963)) {
  lineNumber = 640
  var array964 = new GraceList([
]);

  var var_terms = array964;
  lineNumber = 641
  var array965 = new GraceList([
]);

  var var_ops = array965;
  lineNumber = 642
  var var_o;
  lineNumber = 643
  var var_o2;
  lineNumber = 644
  var var_tmp2;
  lineNumber = 645
  lineNumber = 1
  lineNumber = 644
  var call966 = callmethod(var_values,"pop", [0]);
  var var_tmp = call966;
  lineNumber = 645
  var call967 = callmethod(var_terms,"push", [1], var_tmp);
  lineNumber = 647
  var var_prec;
  lineNumber = 648
  lineNumber = 647
  var bool968 = new GraceBoolean(true)
  var var_allarith = bool968;
  lineNumber = 649
  lineNumber = 648
  var var_opcount = new GraceNum(0);
  lineNumber = 650
  lineNumber = 649
  var string969 = new GraceString("");
  var var_opdtype = string969;
  lineNumber = 708
  lineNumber = 650
  var block970 = Grace_allocObject();
  block970.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block970.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block970.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block970.receiver = this;
  block970.className = 'block<parser:650>';
  block970.real = function(
) {
  var string971 = new GraceString("op");
  var call972 = callmethod(this,"accept()onLineOfLastOr", [1, 1], string971, var_statementToken);
  return call972;
};
  lineNumber = 708
  var block973 = Grace_allocObject();
  block973.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block973.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block973.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block973.receiver = this;
  block973.className = 'block<parser:708>';
  block973.real = function(
) {
  lineNumber = 652
  lineNumber = 651
  var opresult975 = callmethod(var_opcount, "+", [1], new GraceNum(1));
  var_opcount = opresult975;
  lineNumber = 653
  lineNumber = 1
  lineNumber = 652
  var call976 = callmethod(var_sym,"value", [0]);
  var_o = call976;
  lineNumber = 653
  var call977 = callmethod(this,"next", [0]);
  lineNumber = 654
  lineNumber = 655
  var call978 = callmethod(this,"oprec", [1], var_o);
  var_prec = call978;
  lineNumber = 657
  lineNumber = 658
  lineNumber = 655
  var string980 = new GraceString("*");
  var opresult982 = callmethod(var_o, "/=", [1], string980);
  lineNumber = 658
  lineNumber = 655
  var string983 = new GraceString("/");
  var opresult985 = callmethod(var_o, "/=", [1], string983);
  var opresult987 = callmethod(opresult982, "&", [1], opresult985);
  lineNumber = 658
  lineNumber = 655
  var string988 = new GraceString("+");
  var opresult990 = callmethod(var_o, "/=", [1], string988);
  var opresult992 = callmethod(opresult987, "&", [1], opresult990);
  lineNumber = 658
  lineNumber = 655
  var string993 = new GraceString("-");
  var opresult995 = callmethod(var_o, "/=", [1], string993);
  var opresult997 = callmethod(opresult992, "&", [1], opresult995);
  if (Grace_isTrue(opresult997)) {
  lineNumber = 657
  lineNumber = 656
  var bool998 = new GraceBoolean(false)
  var_allarith = bool998;
  var if979 = bool998;
}
  lineNumber = 663
  lineNumber = 665
  lineNumber = 658
  var string1000 = new GraceString("");
  var opresult1002 = callmethod(var_opdtype, "/=", [1], string1000);
  lineNumber = 665
  lineNumber = 658
  var opresult1004 = callmethod(var_opdtype, "/=", [1], var_o);
  var opresult1006 = callmethod(opresult1002, "&", [1], opresult1004);
  lineNumber = 665
  lineNumber = 1
  lineNumber = 658
  var call1007 = callmethod(var_allarith,"not", [0]);
  var opresult1009 = callmethod(opresult1006, "&", [1], call1007);
  if (Grace_isTrue(opresult1009)) {
  lineNumber = 663
  lineNumber = 662
  var string1010 = new GraceString("mixed operators without parentheses: ");
  lineNumber = 663
  var opresult1012 = callmethod(string1010, "++", [1], var_opdtype);
  var string1013 = new GraceString(" and ");
  var opresult1015 = callmethod(opresult1012, "++", [1], string1013);
  var opresult1017 = callmethod(opresult1015, "++", [1], var_o);
  lineNumber = 662
  var call1018 = callmethod(var_util,"syntax_error", [1], opresult1017);
  var if999 = call1018;
}
  lineNumber = 666
  lineNumber = 668
  lineNumber = 665
  var string1020 = new GraceString("=");
  var opresult1022 = callmethod(var_o, "==", [1], string1020);
  if (Grace_isTrue(opresult1022)) {
  lineNumber = 666
  var string1023 = new GraceString("bare '=' outside of def declaration");
  var call1024 = callmethod(var_util,"syntax_error", [1], string1023);
  var if1019 = call1024;
}
  lineNumber = 669
  lineNumber = 668
  var_opdtype = var_o;
  lineNumber = 679
  lineNumber = 669
  var block1025 = Grace_allocObject();
  block1025.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1025.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1025.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1025.receiver = this;
  block1025.className = 'block<parser:669>';
  block1025.real = function(
) {
  lineNumber = 1
  lineNumber = 669
  var call1026 = callmethod(var_ops,"size", [0]);
  var opresult1028 = callmethod(call1026, ">", [1], new GraceNum(0));
  var call1029 = callmethod(this,"toprec", [1], var_ops);
  var opresult1031 = callmethod(var_prec, "<=", [1], call1029);
  var opresult1033 = callmethod(opresult1028, "&", [1], opresult1031);
  return opresult1033;
};
  lineNumber = 679
  var block1034 = Grace_allocObject();
  block1034.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1034.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1034.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1034.receiver = this;
  block1034.className = 'block<parser:679>';
  block1034.real = function(
) {
  lineNumber = 676
  lineNumber = 1
  lineNumber = 675
  var call1035 = callmethod(var_ops,"pop", [0]);
  var_o2 = call1035;
  lineNumber = 677
  lineNumber = 1
  lineNumber = 676
  var call1036 = callmethod(var_terms,"pop", [0]);
  var_tmp2 = call1036;
  lineNumber = 678
  lineNumber = 1
  lineNumber = 677
  var call1037 = callmethod(var_terms,"pop", [0]);
  var_tmp = call1037;
  lineNumber = 678
  lineNumber = 679
  lineNumber = 1
  lineNumber = 678
  var call1038 = callmethod(var_ast,"opNode", [0]);
  var call1039 = callmethod(call1038,"new", [3], var_o2, var_tmp, var_tmp2);
  var_tmp = call1039;
  lineNumber = 679
  var call1040 = callmethod(var_terms,"push", [1], var_tmp);
  return call1040;
};
  var call1041 = callmethod(Grace_prelude,"while()do", [1, 1], block1025, block1034);
  lineNumber = 681
  var call1042 = callmethod(var_ops,"push", [1], var_o);
  lineNumber = 697
  lineNumber = 682
  var string1044 = new GraceString("lparen");
  lineNumber = 704
  var call1045 = callmethod(this,"accept", [1], string1044);
  if (Grace_isTrue(call1045)) {
  lineNumber = 689
  var call1046 = callmethod(this,"next", [0]);
  lineNumber = 691
  lineNumber = 690
  var string1048 = new GraceString("rparen");
  lineNumber = 693
  var call1049 = callmethod(this,"accept", [1], string1048);
  if (Grace_isTrue(call1049)) {
  lineNumber = 691
  var string1050 = new GraceString("empty () in expression (maybe empty interpolated {} block)");
  var call1051 = callmethod(var_util,"syntax_error", [1], string1050);
  var if1047 = call1051;
}
  lineNumber = 693
  var call1052 = callmethod(this,"expression", [0]);
  lineNumber = 694
  var string1053 = new GraceString("rparen");
  lineNumber = 695
  var call1054 = callmethod(this,"expect", [1], string1053);
  var call1055 = callmethod(this,"next", [0]);
  var if1043 = call1055;
  } else {
  lineNumber = 697
  var call1056 = callmethod(this,"term", [0]);
  var if1043 = call1056;
}
  lineNumber = 704
  var call1057 = callmethod(this,"dotrest", [0]);
  lineNumber = 705
  var call1058 = callmethod(this,"callrest", [0]);
  lineNumber = 706
  var call1059 = callmethod(this,"postfixsquare", [0]);
  lineNumber = 708
  lineNumber = 1
  lineNumber = 707
  var call1060 = callmethod(var_values,"pop", [0]);
  var_tmp = call1060;
  lineNumber = 708
  var call1061 = callmethod(var_terms,"push", [1], var_tmp);
  return call1061;
};
  var call1062 = callmethod(Grace_prelude,"while()do", [1, 1], block970, block973);
  lineNumber = 716
  lineNumber = 710
  var block1063 = Grace_allocObject();
  block1063.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1063.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1063.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1063.receiver = this;
  block1063.className = 'block<parser:710>';
  block1063.real = function(
) {
  lineNumber = 1
  lineNumber = 710
  var call1064 = callmethod(var_ops,"size", [0]);
  var opresult1066 = callmethod(call1064, ">", [1], new GraceNum(0));
  return opresult1066;
};
  lineNumber = 716
  var block1067 = Grace_allocObject();
  block1067.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1067.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1067.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1067.receiver = this;
  block1067.className = 'block<parser:716>';
  block1067.real = function(
) {
  lineNumber = 713
  lineNumber = 1
  lineNumber = 712
  var call1068 = callmethod(var_ops,"pop", [0]);
  var_o = call1068;
  lineNumber = 714
  lineNumber = 1
  lineNumber = 713
  var call1069 = callmethod(var_terms,"pop", [0]);
  var_tmp2 = call1069;
  lineNumber = 715
  lineNumber = 1
  lineNumber = 714
  var call1070 = callmethod(var_terms,"pop", [0]);
  var_tmp = call1070;
  lineNumber = 715
  lineNumber = 716
  lineNumber = 1
  lineNumber = 715
  var call1071 = callmethod(var_ast,"opNode", [0]);
  var call1072 = callmethod(call1071,"new", [3], var_o, var_tmp, var_tmp2);
  var_tmp = call1072;
  lineNumber = 716
  var call1073 = callmethod(var_terms,"push", [1], var_tmp);
  return call1073;
};
  var call1074 = callmethod(Grace_prelude,"while()do", [1, 1], block1063, block1067);
  lineNumber = 719
  lineNumber = 1
  lineNumber = 718
  var call1075 = callmethod(var_terms,"pop", [0]);
  var_tmp = call1075;
  lineNumber = 719
  var call1076 = callmethod(var_values,"push", [1], var_tmp);
  lineNumber = 721
  lineNumber = 723
  lineNumber = 1
  lineNumber = 720
  var call1078 = callmethod(var_terms,"size", [0]);
  var opresult1080 = callmethod(call1078, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1080)) {
  lineNumber = 721
  var string1081 = new GraceString("values left on term stack");
  var call1082 = callmethod(var_util,"syntax_error", [1], string1081);
  var if1077 = call1082;
}
  var if961 = if1077;
}
  return if961
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["expressionrest"] = func960;
  lineNumber = 741
var func1083 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 730
  var string1085 = new GraceString("dot");
  lineNumber = 745
  var call1086 = callmethod(this,"accept", [1], string1085);
  if (Grace_isTrue(call1086)) {
  lineNumber = 732
  lineNumber = 1
  lineNumber = 731
  var call1087 = callmethod(var_values,"pop", [0]);
  var var_lookuptarget = call1087;
  lineNumber = 732
  var call1088 = callmethod(this,"next", [0]);
  lineNumber = 741
  lineNumber = 733
  var string1090 = new GraceString("identifier");
  lineNumber = 744
  var call1091 = callmethod(this,"accept", [1], string1090);
  if (Grace_isTrue(call1091)) {
  lineNumber = 734
  lineNumber = 1
  lineNumber = 734
  var call1092 = callmethod(var_sym,"value", [0]);
  lineNumber = 735
  lineNumber = 1
  lineNumber = 734
  var call1093 = callmethod(var_ast,"memberNode", [0]);
  var call1094 = callmethod(call1093,"new", [2], call1092, var_lookuptarget);
  var var_dro = call1094;
  lineNumber = 735
  var call1095 = callmethod(var_values,"push", [1], var_dro);
  lineNumber = 736
  var call1096 = callmethod(this,"next", [0]);
  lineNumber = 741
  lineNumber = 737
  var string1098 = new GraceString("dot");
  lineNumber = 743
  var call1099 = callmethod(this,"accept", [1], string1098);
  if (Grace_isTrue(call1099)) {
  lineNumber = 738
  var call1100 = callmethod(this,"dotrest", [0]);
  var if1097 = call1100;
  } else {
  lineNumber = 741
  lineNumber = 740
  lineNumber = 739
  var string1102 = new GraceString("lparen");
  lineNumber = 743
  var call1103 = callmethod(this,"accept", [1], string1102);
  lineNumber = 739
  var string1104 = new GraceString("lbrace");
  var call1105 = callmethod(this,"accept", [1], string1104);
  var opresult1107 = callmethod(call1103, "|", [1], call1105);
  lineNumber = 740
  var string1108 = new GraceString("num");
  lineNumber = 739
  var call1109 = callmethod(this,"accept", [1], string1108);
  var opresult1111 = callmethod(opresult1107, "|", [1], call1109);
  lineNumber = 740
  var string1112 = new GraceString("string");
  var call1113 = callmethod(this,"accept", [1], string1112);
  var opresult1115 = callmethod(opresult1111, "|", [1], call1113);
  var string1116 = new GraceString("lsquare");
  var call1117 = callmethod(this,"accept", [1], string1116);
  var opresult1119 = callmethod(opresult1115, "|", [1], call1117);
  if (Grace_isTrue(opresult1119)) {
  lineNumber = 741
  var call1120 = callmethod(this,"callrest", [0]);
  var if1101 = call1120;
}
  var if1097 = if1101;
}
  var if1089 = if1097;
}
  var if1084 = if1089;
}
  return if1084
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["dotrest"] = func1083;
  lineNumber = 857
var func1121 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 753
  lineNumber = 754
  lineNumber = 1
  lineNumber = 751
  var call1123 = callmethod(var_values,"size", [0]);
  var opresult1125 = callmethod(call1123, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1125)) {
  lineNumber = 753
  lineNumber = 752
  return new GraceNum(0)
  var if1122 = undefined;
}
  lineNumber = 755
  lineNumber = 1
  lineNumber = 754
  var call1126 = callmethod(var_values,"pop", [0]);
  var var_meth = call1126;
  lineNumber = 759
  lineNumber = 761
  lineNumber = 1
  lineNumber = 755
  var call1128 = callmethod(var_meth,"kind", [0]);
  var string1129 = new GraceString("identifier");
  var opresult1131 = callmethod(call1128, "!=", [1], string1129);
  if (Grace_isTrue(opresult1131)) {
  lineNumber = 759
  lineNumber = 760
  lineNumber = 1
  lineNumber = 756
  var call1133 = callmethod(var_meth,"kind", [0]);
  var string1134 = new GraceString("member");
  var opresult1136 = callmethod(call1133, "!=", [1], string1134);
  if (Grace_isTrue(opresult1136)) {
  lineNumber = 757
  var call1137 = callmethod(var_values,"push", [1], var_meth);
  lineNumber = 759
  lineNumber = 758
  return new GraceNum(0)
  var if1132 = undefined;
}
  var if1127 = if1132;
}
  lineNumber = 762
  var var_methn;
  lineNumber = 763
  var var_tmp;
  lineNumber = 764
  lineNumber = 763
  var bool1138 = new GraceBoolean(false)
  var var_ln = bool1138;
  lineNumber = 765
  var array1139 = new GraceList([
]);

  var var_signature = array1139;
  lineNumber = 766
  lineNumber = 1
  lineNumber = 766
  lineNumber = 1
  lineNumber = 765
  var call1140 = callmethod(var_ast,"callWithPart", [0]);
  var call1141 = callmethod(call1140,"new", [0]);
  var var_part = call1141;
  lineNumber = 766
  var call1142 = callmethod(var_signature,"push", [1], var_part);
  lineNumber = 768
  lineNumber = 767
  var bool1143 = new GraceBoolean(false)
  var var_hadcall = bool1143;
  lineNumber = 769
  lineNumber = 768
  var var_tok = var_lastToken;
  lineNumber = 770
  lineNumber = 769
  var var_startInd = var_minIndentLevel;
  lineNumber = 838
  lineNumber = 770
  var string1145 = new GraceString("lparen");
  lineNumber = 840
  var call1146 = callmethod(this,"acceptSameLine", [1], string1145);
  if (Grace_isTrue(call1146)) {
  lineNumber = 772
  lineNumber = 771
  var_tok = var_sym;
  lineNumber = 773
  lineNumber = 772
  var bool1147 = new GraceBoolean(true)
  var_hadcall = bool1147;
  lineNumber = 774
  lineNumber = 1
  lineNumber = 773
  var call1148 = callmethod(var_meth,"value", [0]);
  var_methn = call1148;
  lineNumber = 775
  lineNumber = 1
  lineNumber = 774
  var call1149 = callmethod(var_part,"name:=", [1], var_methn);
  lineNumber = 775
  var call1150 = callmethod(this,"next", [0]);
  lineNumber = 806
  lineNumber = 776
  var block1151 = Grace_allocObject();
  block1151.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1151.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1151.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1151.receiver = this;
  block1151.className = 'block<parser:776>';
  block1151.real = function(
) {
  var call1152 = callmethod(this,"expression", [0]);
  return call1152;
};
  lineNumber = 806
  var block1153 = Grace_allocObject();
  block1153.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1153.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1153.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1153.receiver = this;
  block1153.className = 'block<parser:806>';
  block1153.real = function(
) {
  lineNumber = 786
  lineNumber = 778
  var string1155 = new GraceString("colon");
  lineNumber = 788
  var call1156 = callmethod(this,"accept", [1], string1155);
  if (Grace_isTrue(call1156)) {
  lineNumber = 780
  lineNumber = 1
  lineNumber = 779
  var call1157 = callmethod(var_values,"pop", [0]);
  var_tmp = call1157;
  lineNumber = 781
  lineNumber = 783
  lineNumber = 1
  lineNumber = 780
  var call1159 = callmethod(var_tmp,"kind", [0]);
  var string1160 = new GraceString("identifier");
  var opresult1162 = callmethod(call1159, "!=", [1], string1160);
  if (Grace_isTrue(opresult1162)) {
  lineNumber = 781
  var string1163 = new GraceString("colon must follow identifier");
  var call1164 = callmethod(var_util,"syntax_error", [1], string1163);
  var if1158 = call1164;
}
  lineNumber = 783
  var call1165 = callmethod(this,"next", [0]);
  lineNumber = 784
  var block1166 = Grace_allocObject();
  block1166.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1166.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1166.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1166.receiver = this;
  block1166.className = 'block<parser:784>';
  block1166.real = function(
) {
  var call1167 = callmethod(this,"expression", [0]);
  return call1167;
};
  lineNumber = 785
  var call1168 = callmethod(this,"expectConsume", [1], block1166);
  lineNumber = 786
  lineNumber = 1
  lineNumber = 786
  lineNumber = 1
  lineNumber = 785
  var call1169 = callmethod(var_values,"pop", [0]);
  var call1170 = callmethod(var_tmp,"dtype:=", [1], call1169);
  lineNumber = 786
  var call1171 = callmethod(var_values,"push", [1], var_tmp);
  var if1154 = call1171;
}
  lineNumber = 802
  lineNumber = 788
  var block1172 = Grace_allocObject();
  block1172.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1172.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1172.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1172.receiver = this;
  block1172.className = 'block<parser:788>';
  block1172.real = function(
) {
  var string1173 = new GraceString("comma");
  var call1174 = callmethod(this,"accept", [1], string1173);
  return call1174;
};
  lineNumber = 802
  var block1175 = Grace_allocObject();
  block1175.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1175.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1175.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1175.receiver = this;
  block1175.className = 'block<parser:802>';
  block1175.real = function(
) {
  lineNumber = 790
  lineNumber = 1
  lineNumber = 789
  var call1176 = callmethod(var_values,"pop", [0]);
  var_tmp = call1176;
  lineNumber = 790
  lineNumber = 791
  lineNumber = 1
  lineNumber = 790
  var call1177 = callmethod(var_part,"args", [0]);
  var call1178 = callmethod(call1177,"push", [1], var_tmp);
  lineNumber = 791
  var call1179 = callmethod(this,"next", [0]);
  lineNumber = 792
  var block1180 = Grace_allocObject();
  block1180.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1180.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1180.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1180.receiver = this;
  block1180.className = 'block<parser:792>';
  block1180.real = function(
) {
  var call1181 = callmethod(this,"expression", [0]);
  return call1181;
};
  lineNumber = 794
  var call1182 = callmethod(this,"expectConsume", [1], block1180);
  lineNumber = 802
  lineNumber = 794
  var string1184 = new GraceString("colon");
  lineNumber = 804
  var call1185 = callmethod(this,"accept", [1], string1184);
  if (Grace_isTrue(call1185)) {
  lineNumber = 796
  lineNumber = 1
  lineNumber = 795
  var call1186 = callmethod(var_values,"pop", [0]);
  var_tmp = call1186;
  lineNumber = 797
  lineNumber = 799
  lineNumber = 1
  lineNumber = 796
  var call1188 = callmethod(var_tmp,"kind", [0]);
  var string1189 = new GraceString("identifier");
  var opresult1191 = callmethod(call1188, "!=", [1], string1189);
  if (Grace_isTrue(opresult1191)) {
  lineNumber = 797
  var string1192 = new GraceString("colon must follow identifier");
  var call1193 = callmethod(var_util,"syntax_error", [1], string1192);
  var if1187 = call1193;
}
  lineNumber = 799
  var call1194 = callmethod(this,"next", [0]);
  lineNumber = 800
  var block1195 = Grace_allocObject();
  block1195.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1195.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1195.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1195.receiver = this;
  block1195.className = 'block<parser:800>';
  block1195.real = function(
) {
  var call1196 = callmethod(this,"expression", [0]);
  return call1196;
};
  lineNumber = 801
  var call1197 = callmethod(this,"expectConsume", [1], block1195);
  lineNumber = 802
  lineNumber = 1
  lineNumber = 802
  lineNumber = 1
  lineNumber = 801
  var call1198 = callmethod(var_values,"pop", [0]);
  var call1199 = callmethod(var_tmp,"dtype:=", [1], call1198);
  lineNumber = 802
  var call1200 = callmethod(var_values,"push", [1], var_tmp);
  var if1183 = call1200;
}
  return if1183;
};
  var call1201 = callmethod(Grace_prelude,"while()do", [1, 1], block1172, block1175);
  lineNumber = 806
  lineNumber = 1
  lineNumber = 805
  var call1202 = callmethod(var_values,"pop", [0]);
  var_tmp = call1202;
  lineNumber = 806
  lineNumber = 807
  lineNumber = 1
  lineNumber = 806
  var call1203 = callmethod(var_part,"args", [0]);
  var call1204 = callmethod(call1203,"push", [1], var_tmp);
  return call1204;
};
  lineNumber = 808
  var call1205 = callmethod(this,"ifConsume()then", [1, 1], block1151, block1153);
  var string1206 = new GraceString("rparen");
  lineNumber = 809
  var call1207 = callmethod(this,"expect", [1], string1206);
  lineNumber = 810
  lineNumber = 809
  var_ln = var_linenum;
  lineNumber = 810
  var call1208 = callmethod(this,"next", [0]);
  var if1144 = call1208;
  } else {
  lineNumber = 838
  lineNumber = 813
  lineNumber = 812
  lineNumber = 811
  var string1210 = new GraceString("string");
  lineNumber = 823
  var call1211 = callmethod(this,"accept()onLineOf", [1, 1], string1210, var_tok);
  lineNumber = 811
  var string1212 = new GraceString("num");
  var call1213 = callmethod(this,"accept()onLineOf", [1, 1], string1212, var_tok);
  var opresult1215 = callmethod(call1211, "|", [1], call1213);
  lineNumber = 812
  var string1216 = new GraceString("lbrace");
  lineNumber = 811
  var call1217 = callmethod(this,"accept()onLineOf", [1, 1], string1216, var_tok);
  var opresult1219 = callmethod(opresult1215, "|", [1], call1217);
  lineNumber = 813
  var string1220 = new GraceString("identifier");
  lineNumber = 812
  var call1221 = callmethod(this,"accept()onLineOf", [1, 1], string1220, var_tok);
  lineNumber = 813
  lineNumber = 1
  lineNumber = 813
  var call1222 = callmethod(var_sym,"value", [0]);
  var string1223 = new GraceString("true");
  var opresult1225 = callmethod(call1222, "==", [1], string1223);
  lineNumber = 1
  lineNumber = 814
  var call1226 = callmethod(var_sym,"value", [0]);
  var string1227 = new GraceString("false");
  var opresult1229 = callmethod(call1226, "==", [1], string1227);
  var opresult1231 = callmethod(opresult1225, "|", [1], opresult1229);
  var opresult1233 = callmethod(call1221, "&", [1], opresult1231);
  var opresult1235 = callmethod(opresult1219, "|", [1], opresult1233);
  if (Grace_isTrue(opresult1235)) {
  lineNumber = 816
  lineNumber = 815
  var_tok = var_sym;
  lineNumber = 817
  lineNumber = 816
  var bool1236 = new GraceBoolean(true)
  var_hadcall = bool1236;
  lineNumber = 818
  lineNumber = 1
  lineNumber = 817
  var call1237 = callmethod(var_meth,"value", [0]);
  var_methn = call1237;
  lineNumber = 819
  lineNumber = 1
  lineNumber = 818
  var call1238 = callmethod(var_part,"name:=", [1], var_methn);
  lineNumber = 820
  lineNumber = 819
  var_ln = var_linenum;
  lineNumber = 820
  var call1239 = callmethod(this,"term", [0]);
  lineNumber = 822
  lineNumber = 1
  lineNumber = 821
  var call1240 = callmethod(var_values,"pop", [0]);
  var var_ar = call1240;
  lineNumber = 822
  lineNumber = 823
  lineNumber = 1
  lineNumber = 822
  var call1241 = callmethod(var_part,"args", [0]);
  var call1242 = callmethod(call1241,"push", [1], var_ar);
  var if1209 = call1242;
  } else {
  lineNumber = 838
  lineNumber = 825
  lineNumber = 1
  lineNumber = 823
  var call1244 = callmethod(var_meth,"kind", [0]);
  var string1245 = new GraceString("identifier");
  var opresult1247 = callmethod(call1244, "==", [1], string1245);
  if (Grace_isTrue(opresult1247)) {
  lineNumber = 824
  var call1248 = callmethod(var_values,"push", [1], var_meth);
  var if1243 = call1248;
  } else {
  lineNumber = 838
  lineNumber = 837
  lineNumber = 1
  lineNumber = 825
  var call1250 = callmethod(var_meth,"kind", [0]);
  var string1251 = new GraceString("member");
  var opresult1253 = callmethod(call1250, "==", [1], string1251);
  if (Grace_isTrue(opresult1253)) {
  lineNumber = 827
  lineNumber = 1
  lineNumber = 826
  var call1254 = callmethod(var_meth,"in", [0]);
  var var_root = call1254;
  lineNumber = 828
  lineNumber = 827
  var var_outroot = var_meth;
  lineNumber = 831
  lineNumber = 828
  var block1255 = Grace_allocObject();
  block1255.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1255.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1255.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1255.receiver = this;
  block1255.className = 'block<parser:828>';
  block1255.real = function(
) {
  lineNumber = 1
  lineNumber = 828
  var call1256 = callmethod(var_root,"kind", [0]);
  var string1257 = new GraceString("member");
  var opresult1259 = callmethod(call1256, "==", [1], string1257);
  return opresult1259;
};
  lineNumber = 831
  var block1260 = Grace_allocObject();
  block1260.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1260.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1260.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1260.receiver = this;
  block1260.className = 'block<parser:831>';
  block1260.real = function(
) {
  lineNumber = 830
  lineNumber = 829
  var_outroot = var_root;
  lineNumber = 831
  lineNumber = 1
  lineNumber = 830
  var call1261 = callmethod(var_root,"in", [0]);
  var_root = call1261;
  return call1261;
};
  var call1262 = callmethod(Grace_prelude,"while()do", [1, 1], block1255, block1260);
  lineNumber = 835
  lineNumber = 837
  lineNumber = 1
  lineNumber = 832
  var call1264 = callmethod(var_root,"kind", [0]);
  var string1265 = new GraceString("identifier");
  var opresult1267 = callmethod(call1264, "==", [1], string1265);
  if (Grace_isTrue(opresult1267)) {
  lineNumber = 833
  var call1268 = callmethod(var_values,"push", [1], var_meth);
  var if1263 = call1268;
  } else {
  lineNumber = 835
  var call1269 = callmethod(var_values,"push", [1], var_meth);
  var if1263 = call1269;
}
  var if1249 = if1263;
  } else {
  lineNumber = 838
  var call1270 = callmethod(var_values,"push", [1], var_meth);
  var if1249 = call1270;
}
  var if1243 = if1249;
}
  var if1209 = if1243;
}
  var if1144 = if1209;
}
  lineNumber = 854
  lineNumber = 840
  if (Grace_isTrue(var_hadcall)) {
  lineNumber = 851
  lineNumber = 841
  var string1273 = new GraceString("identifier");
  lineNumber = 853
  var call1274 = callmethod(this,"accept()onLineOfLastOr", [1, 1], string1273, var_tok);
  if (Grace_isTrue(call1274)) {
  lineNumber = 843
  var bool1275 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 843
  var call1276 = callmethod(var_ast,"identifierNode", [0]);
  var call1277 = callmethod(call1276,"new", [2], var_methn, bool1275);
  lineNumber = 844
  var call1278 = callmethod(this,"callmprest", [3], call1277, var_signature, var_tok);
  var_methn = call1278;
  lineNumber = 851
  lineNumber = 852
  lineNumber = 1
  lineNumber = 844
  var call1280 = callmethod(var_meth,"kind", [0]);
  var string1281 = new GraceString("member");
  var opresult1283 = callmethod(call1280, "==", [1], string1281);
  if (Grace_isTrue(opresult1283)) {
  lineNumber = 848
  lineNumber = 1
  lineNumber = 848
  var call1284 = callmethod(var_methn,"value", [0]);
  lineNumber = 1
  lineNumber = 848
  var call1285 = callmethod(var_meth,"in", [0]);
  lineNumber = 849
  lineNumber = 1
  lineNumber = 848
  var call1286 = callmethod(var_ast,"memberNode", [0]);
  var call1287 = callmethod(call1286,"new", [2], call1284, call1285);
  var_meth = call1287;
  var if1279 = call1287;
  } else {
  lineNumber = 851
  lineNumber = 850
  var_meth = var_methn;
  var if1279 = var_methn;
}
  var if1272 = if1279;
}
  lineNumber = 853
  lineNumber = 854
  lineNumber = 1
  lineNumber = 853
  var call1288 = callmethod(var_ast,"callNode", [0]);
  var call1289 = callmethod(call1288,"new", [2], var_meth, var_signature);
  var_tmp = call1289;
  lineNumber = 854
  var call1290 = callmethod(var_values,"push", [1], var_tmp);
  var if1271 = call1290;
}
  lineNumber = 857
  lineNumber = 856
  var_minIndentLevel = var_startInd;
  lineNumber = 857
  var call1291 = callmethod(this,"dotrest", [0]);
  return call1291
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["callrest"] = func1121;
  lineNumber = 916
var func1292 = function(argcv) {
  var curarg = 1;
  var var_meth = arguments[curarg];
  curarg++;
  var var_signature = arguments[curarg];
  curarg++;
  var var_tok = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 865
  lineNumber = 1
  lineNumber = 864
  var call1293 = callmethod(var_meth,"value", [0]);
  var var_methname = call1293;
  lineNumber = 866
  var var_nxt;
  lineNumber = 867
  lineNumber = 866
  var var_ln = var_linenum;
  lineNumber = 868
  var var_part;
  lineNumber = 913
  lineNumber = 869
  var block1294 = Grace_allocObject();
  block1294.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1294.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1294.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1294.receiver = this;
  block1294.className = 'block<parser:869>';
  block1294.real = function(
) {
  lineNumber = 868
  var string1295 = new GraceString("identifier");
  lineNumber = 869
  var call1296 = callmethod(this,"accept()onLineOf", [1, 1], string1295, var_tok);
  var string1297 = new GraceString("identifier");
  lineNumber = 868
  var call1298 = callmethod(this,"accept()onLineOf", [1, 1], string1297, var_lastToken);
  var opresult1300 = callmethod(call1296, "|", [1], call1298);
  return opresult1300;
};
  lineNumber = 913
  var block1301 = Grace_allocObject();
  block1301.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1301.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1301.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1301.receiver = this;
  block1301.className = 'block<parser:913>';
  block1301.real = function(
) {
  lineNumber = 873
  lineNumber = 1
  lineNumber = 873
  lineNumber = 1
  lineNumber = 872
  var call1302 = callmethod(var_ast,"callWithPart", [0]);
  var call1303 = callmethod(call1302,"new", [0]);
  var_part = call1303;
  lineNumber = 873
  var call1304 = callmethod(var_signature,"push", [1], var_part);
  lineNumber = 875
  lineNumber = 874
  var string1305 = new GraceString("()");
  var opresult1307 = callmethod(var_methname, "++", [1], string1305);
  var_methname = opresult1307;
  lineNumber = 875
  var call1308 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 877
  lineNumber = 1
  lineNumber = 876
  var call1309 = callmethod(var_values,"pop", [0]);
  var_nxt = call1309;
  lineNumber = 878
  lineNumber = 877
  lineNumber = 878
  lineNumber = 1
  lineNumber = 877
  var call1310 = callmethod(var_nxt,"value", [0]);
  var opresult1312 = callmethod(var_methname, "++", [1], call1310);
  var_methname = opresult1312;
  lineNumber = 879
  lineNumber = 1
  lineNumber = 879
  lineNumber = 1
  lineNumber = 878
  var call1313 = callmethod(var_nxt,"value", [0]);
  var call1314 = callmethod(var_part,"name:=", [1], call1313);
  lineNumber = 880
  lineNumber = 879
  var bool1315 = new GraceBoolean(false)
  var var_isTerm = bool1315;
  lineNumber = 882
  lineNumber = 881
  lineNumber = 880
  lineNumber = 1
  lineNumber = 880
  var string1317 = new GraceString("lparen");
  lineNumber = 884
  var call1318 = callmethod(this,"accept", [1], string1317);
  var call1319 = callmethod(call1318,"not", [0]);
  lineNumber = 880
  lineNumber = 1
  lineNumber = 880
  var string1320 = new GraceString("lbrace");
  var call1321 = callmethod(this,"accept", [1], string1320);
  var call1322 = callmethod(call1321,"not", [0]);
  var opresult1324 = callmethod(call1319, "&", [1], call1322);
  lineNumber = 881
  lineNumber = 1
  lineNumber = 881
  var string1325 = new GraceString("string");
  lineNumber = 880
  var call1326 = callmethod(this,"accept", [1], string1325);
  var call1327 = callmethod(call1326,"not", [0]);
  var opresult1329 = callmethod(opresult1324, "&", [1], call1327);
  lineNumber = 881
  lineNumber = 1
  lineNumber = 881
  var string1330 = new GraceString("num");
  var call1331 = callmethod(this,"accept", [1], string1330);
  var call1332 = callmethod(call1331,"not", [0]);
  var opresult1334 = callmethod(opresult1329, "&", [1], call1332);
  if (Grace_isTrue(opresult1334)) {
  lineNumber = 882
  var string1335 = new GraceString("multi-part method name parameters require .");
  var call1336 = callmethod(var_util,"syntax_error", [1], string1335);
  var if1316 = call1336;
}
  lineNumber = 892
  lineNumber = 887
  lineNumber = 886
  lineNumber = 885
  lineNumber = 884
  var string1338 = new GraceString("lbrace");
  lineNumber = 894
  var call1339 = callmethod(this,"accept()onLineOfLastOr", [1, 1], string1338, var_tok);
  lineNumber = 885
  var string1340 = new GraceString("string");
  lineNumber = 884
  var call1341 = callmethod(this,"accept()onLineOfLastOr", [1, 1], string1340, var_tok);
  var opresult1343 = callmethod(call1339, "|", [1], call1341);
  lineNumber = 886
  var string1344 = new GraceString("num");
  lineNumber = 885
  var call1345 = callmethod(this,"accept()onLineOfLastOr", [1, 1], string1344, var_tok);
  var opresult1347 = callmethod(opresult1343, "|", [1], call1345);
  lineNumber = 887
  var string1348 = new GraceString("identifier");
  lineNumber = 886
  var call1349 = callmethod(this,"accept()onLineOfLastOr", [1, 1], string1348, var_tok);
  lineNumber = 887
  lineNumber = 1
  lineNumber = 888
  var call1350 = callmethod(var_sym,"value", [0]);
  var string1351 = new GraceString("true");
  var opresult1353 = callmethod(call1350, "==", [1], string1351);
  lineNumber = 887
  lineNumber = 1
  lineNumber = 889
  var call1354 = callmethod(var_sym,"value", [0]);
  var string1355 = new GraceString("false");
  var opresult1357 = callmethod(call1354, "==", [1], string1355);
  var opresult1359 = callmethod(opresult1353, "|", [1], opresult1357);
  var opresult1361 = callmethod(call1349, "&", [1], opresult1359);
  var opresult1363 = callmethod(opresult1347, "|", [1], opresult1361);
  if (Grace_isTrue(opresult1363)) {
  lineNumber = 891
  lineNumber = 890
  var bool1364 = new GraceBoolean(true)
  var_isTerm = bool1364;
  var if1337 = bool1364;
  } else {
  lineNumber = 892
  var call1365 = callmethod(this,"next", [0]);
  var if1337 = call1365;
}
  lineNumber = 903
  lineNumber = 894
  if (Grace_isTrue(var_isTerm)) {
  lineNumber = 896
  lineNumber = 895
  var_ln = var_lastline;
  lineNumber = 896
  var call1367 = callmethod(this,"term", [0]);
  var if1366 = call1367;
  } else {
  lineNumber = 898
  var call1368 = callmethod(this,"expression", [0]);
  lineNumber = 903
  lineNumber = 899
  var block1369 = Grace_allocObject();
  block1369.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1369.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1369.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1369.receiver = this;
  block1369.className = 'block<parser:899>';
  block1369.real = function(
) {
  var string1370 = new GraceString("comma");
  var call1371 = callmethod(this,"accept", [1], string1370);
  return call1371;
};
  lineNumber = 903
  var block1372 = Grace_allocObject();
  block1372.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1372.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1372.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1372.receiver = this;
  block1372.className = 'block<parser:903>';
  block1372.real = function(
) {
  lineNumber = 901
  lineNumber = 1
  lineNumber = 900
  var call1373 = callmethod(var_values,"pop", [0]);
  var_nxt = call1373;
  lineNumber = 901
  lineNumber = 902
  lineNumber = 1
  lineNumber = 901
  var call1374 = callmethod(var_part,"args", [0]);
  var call1375 = callmethod(call1374,"push", [1], var_nxt);
  lineNumber = 902
  var call1376 = callmethod(this,"next", [0]);
  lineNumber = 903
  var block1377 = Grace_allocObject();
  block1377.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1377.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1377.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1377.receiver = this;
  block1377.className = 'block<parser:903>';
  block1377.real = function(
) {
  var call1378 = callmethod(this,"expression", [0]);
  return call1378;
};
  lineNumber = 904
  var call1379 = callmethod(this,"expectConsume", [1], block1377);
  return call1379;
};
  var call1380 = callmethod(Grace_prelude,"while()do", [1, 1], block1369, block1372);
  var if1366 = call1380;
}
  lineNumber = 907
  lineNumber = 1
  lineNumber = 906
  var call1381 = callmethod(var_values,"pop", [0]);
  var_nxt = call1381;
  lineNumber = 907
  lineNumber = 908
  lineNumber = 1
  lineNumber = 907
  var call1382 = callmethod(var_part,"args", [0]);
  var call1383 = callmethod(call1382,"push", [1], var_nxt);
  lineNumber = 909
  lineNumber = 911
  lineNumber = 1
  lineNumber = 908
  var call1385 = callmethod(var_isTerm,"not", [0]);
  if (Grace_isTrue(call1385)) {
  lineNumber = 909
  var string1386 = new GraceString("rparen");
  lineNumber = 910
  var call1387 = callmethod(this,"expect", [1], string1386);
  var if1384 = call1387;
}
  lineNumber = 913
  lineNumber = 911
  var string1389 = new GraceString("rparen");
  lineNumber = 915
  var call1390 = callmethod(this,"accept", [1], string1389);
  lineNumber = 911
  lineNumber = 1
  lineNumber = 911
  var call1391 = callmethod(var_isTerm,"not", [0]);
  var opresult1393 = callmethod(call1390, "&", [1], call1391);
  if (Grace_isTrue(opresult1393)) {
  lineNumber = 913
  lineNumber = 912
  var_ln = var_lastline;
  lineNumber = 913
  var call1394 = callmethod(this,"next", [0]);
  var if1388 = call1394;
}
  return if1388;
};
  var call1395 = callmethod(Grace_prelude,"while()do", [1, 1], block1294, block1301);
  lineNumber = 916
  var bool1396 = new GraceBoolean(false)
  lineNumber = 917
  lineNumber = 1
  lineNumber = 916
  var call1397 = callmethod(var_ast,"identifierNode", [0]);
  var call1398 = callmethod(call1397,"new", [2], var_methname, bool1396);
  return call1398
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["callmprest"] = func1292;
  lineNumber = 942
var func1399 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 921
  var string1401 = new GraceString("keyword");
  lineNumber = 944
  var call1402 = callmethod(this,"accept", [1], string1401);
  lineNumber = 921
  lineNumber = 1
  lineNumber = 921
  var call1403 = callmethod(var_sym,"value", [0]);
  var string1404 = new GraceString("def");
  var opresult1406 = callmethod(call1403, "==", [1], string1404);
  var opresult1408 = callmethod(call1402, "&", [1], opresult1406);
  if (Grace_isTrue(opresult1408)) {
  lineNumber = 922
  var call1409 = callmethod(this,"next", [0]);
  lineNumber = 923
  var call1410 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 925
  lineNumber = 924
  var bool1411 = new GraceBoolean(false)
  var var_val = bool1411;
  lineNumber = 925
  var string1412 = new GraceString("Dynamic");
  var bool1413 = new GraceBoolean(false)
  lineNumber = 926
  lineNumber = 1
  lineNumber = 925
  var call1414 = callmethod(var_ast,"identifierNode", [0]);
  var call1415 = callmethod(call1414,"new", [2], string1412, bool1413);
  var var_dtype = call1415;
  lineNumber = 927
  lineNumber = 1
  lineNumber = 926
  var call1416 = callmethod(var_values,"pop", [0]);
  var var_name = call1416;
  lineNumber = 931
  lineNumber = 927
  var string1418 = new GraceString("colon");
  lineNumber = 932
  var call1419 = callmethod(this,"accept", [1], string1418);
  if (Grace_isTrue(call1419)) {
  lineNumber = 928
  var call1420 = callmethod(this,"next", [0]);
  lineNumber = 929
  var call1421 = callmethod(this,"dotyperef", [0]);
  lineNumber = 931
  lineNumber = 1
  lineNumber = 930
  var call1422 = callmethod(var_values,"pop", [0]);
  var_dtype = call1422;
  var if1417 = call1422;
}
  lineNumber = 939
  lineNumber = 932
  var string1424 = new GraceString("op");
  lineNumber = 941
  var call1425 = callmethod(this,"accept", [1], string1424);
  lineNumber = 932
  lineNumber = 1
  lineNumber = 932
  var call1426 = callmethod(var_sym,"value", [0]);
  var string1427 = new GraceString("=");
  var opresult1429 = callmethod(call1426, "==", [1], string1427);
  var opresult1431 = callmethod(call1425, "&", [1], opresult1429);
  if (Grace_isTrue(opresult1431)) {
  lineNumber = 933
  var call1432 = callmethod(this,"next", [0]);
  lineNumber = 934
  var call1433 = callmethod(this,"expression", [0]);
  lineNumber = 936
  lineNumber = 1
  lineNumber = 935
  var call1434 = callmethod(var_values,"pop", [0]);
  var_val = call1434;
  var if1423 = call1434;
  } else {
  lineNumber = 939
  lineNumber = 936
  var string1436 = new GraceString("bind");
  lineNumber = 938
  var call1437 = callmethod(this,"accept", [1], string1436);
  if (Grace_isTrue(call1437)) {
  lineNumber = 937
  var string1438 = new GraceString("def declaration uses '=', not ':='");
  var call1439 = callmethod(var_util,"syntax_error", [1], string1438);
  var if1435 = call1439;
  } else {
  lineNumber = 939
  var string1440 = new GraceString("def declaration requires value");
  var call1441 = callmethod(var_util,"syntax_error", [1], string1440);
  var if1435 = call1441;
}
  var if1423 = if1435;
}
  lineNumber = 941
  lineNumber = 942
  lineNumber = 1
  lineNumber = 941
  var call1442 = callmethod(var_ast,"defDecNode", [0]);
  var call1443 = callmethod(call1442,"new", [3], var_name, var_val, var_dtype);
  var var_o = call1443;
  lineNumber = 942
  var call1444 = callmethod(var_values,"push", [1], var_o);
  var if1400 = call1444;
}
  return if1400
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["defdec"] = func1399;
  lineNumber = 968
var func1445 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 948
  var string1447 = new GraceString("keyword");
  lineNumber = 970
  var call1448 = callmethod(this,"accept", [1], string1447);
  lineNumber = 948
  lineNumber = 1
  lineNumber = 948
  var call1449 = callmethod(var_sym,"value", [0]);
  var string1450 = new GraceString("var");
  var opresult1452 = callmethod(call1449, "==", [1], string1450);
  var opresult1454 = callmethod(call1448, "&", [1], opresult1452);
  if (Grace_isTrue(opresult1454)) {
  lineNumber = 949
  var call1455 = callmethod(this,"next", [0]);
  lineNumber = 950
  var call1456 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 952
  lineNumber = 951
  var bool1457 = new GraceBoolean(false)
  var var_val = bool1457;
  lineNumber = 952
  var string1458 = new GraceString("Dynamic");
  var bool1459 = new GraceBoolean(false)
  lineNumber = 953
  lineNumber = 1
  lineNumber = 952
  var call1460 = callmethod(var_ast,"identifierNode", [0]);
  var call1461 = callmethod(call1460,"new", [2], string1458, bool1459);
  var var_dtype = call1461;
  lineNumber = 954
  lineNumber = 1
  lineNumber = 953
  var call1462 = callmethod(var_values,"pop", [0]);
  var var_name = call1462;
  lineNumber = 958
  lineNumber = 954
  var string1464 = new GraceString("colon");
  lineNumber = 959
  var call1465 = callmethod(this,"accept", [1], string1464);
  if (Grace_isTrue(call1465)) {
  lineNumber = 955
  var call1466 = callmethod(this,"next", [0]);
  lineNumber = 956
  var call1467 = callmethod(this,"dotyperef", [0]);
  lineNumber = 958
  lineNumber = 1
  lineNumber = 957
  var call1468 = callmethod(var_values,"pop", [0]);
  var_dtype = call1468;
  var if1463 = call1468;
}
  lineNumber = 963
  lineNumber = 959
  var string1470 = new GraceString("bind");
  lineNumber = 964
  var call1471 = callmethod(this,"accept", [1], string1470);
  if (Grace_isTrue(call1471)) {
  lineNumber = 960
  var call1472 = callmethod(this,"next", [0]);
  lineNumber = 961
  var call1473 = callmethod(this,"expression", [0]);
  lineNumber = 963
  lineNumber = 1
  lineNumber = 962
  var call1474 = callmethod(var_values,"pop", [0]);
  var_val = call1474;
  var if1469 = call1474;
}
  lineNumber = 965
  lineNumber = 964
  var string1476 = new GraceString("op");
  lineNumber = 967
  var call1477 = callmethod(this,"accept", [1], string1476);
  lineNumber = 964
  lineNumber = 1
  lineNumber = 964
  var call1478 = callmethod(var_sym,"value", [0]);
  var string1479 = new GraceString("=");
  var opresult1481 = callmethod(call1478, "==", [1], string1479);
  var opresult1483 = callmethod(call1477, "&", [1], opresult1481);
  if (Grace_isTrue(opresult1483)) {
  lineNumber = 965
  var string1484 = new GraceString("var declaration uses ':=', not '='");
  var call1485 = callmethod(var_util,"syntax_error", [1], string1484);
  var if1475 = call1485;
}
  lineNumber = 967
  lineNumber = 968
  lineNumber = 1
  lineNumber = 967
  var call1486 = callmethod(var_ast,"varDecNode", [0]);
  var call1487 = callmethod(call1486,"new", [3], var_name, var_val, var_dtype);
  var var_o = call1487;
  lineNumber = 968
  var call1488 = callmethod(var_values,"push", [1], var_o);
  var if1446 = call1488;
}
  return if1446
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["vardec"] = func1445;
  lineNumber = 991
var func1489 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 974
  var string1491 = new GraceString("lsquare");
  lineNumber = 993
  var call1492 = callmethod(this,"accept", [1], string1491);
  if (Grace_isTrue(call1492)) {
  lineNumber = 975
  var call1493 = callmethod(this,"next", [0]);
  lineNumber = 977
  var var_tmp;
  lineNumber = 978
  var array1494 = new GraceList([
]);

  var var_params = array1494;
  lineNumber = 986
  lineNumber = 978
  var block1495 = Grace_allocObject();
  block1495.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1495.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1495.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1495.receiver = this;
  block1495.className = 'block<parser:978>';
  block1495.real = function(
) {
  var call1496 = callmethod(this,"expression", [0]);
  return call1496;
};
  lineNumber = 986
  var block1497 = Grace_allocObject();
  block1497.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1497.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1497.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1497.receiver = this;
  block1497.className = 'block<parser:986>';
  block1497.real = function(
) {
  lineNumber = 983
  lineNumber = 979
  var block1498 = Grace_allocObject();
  block1498.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1498.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1498.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1498.receiver = this;
  block1498.className = 'block<parser:979>';
  block1498.real = function(
) {
  var string1499 = new GraceString("comma");
  var call1500 = callmethod(this,"accept", [1], string1499);
  return call1500;
};
  lineNumber = 983
  var block1501 = Grace_allocObject();
  block1501.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1501.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1501.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1501.receiver = this;
  block1501.className = 'block<parser:983>';
  block1501.real = function(
) {
  lineNumber = 981
  lineNumber = 1
  lineNumber = 980
  var call1502 = callmethod(var_values,"pop", [0]);
  var_tmp = call1502;
  lineNumber = 981
  var call1503 = callmethod(var_params,"push", [1], var_tmp);
  lineNumber = 982
  var call1504 = callmethod(this,"next", [0]);
  lineNumber = 983
  var block1505 = Grace_allocObject();
  block1505.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1505.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1505.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1505.receiver = this;
  block1505.className = 'block<parser:983>';
  block1505.real = function(
) {
  var call1506 = callmethod(this,"expression", [0]);
  return call1506;
};
  lineNumber = 984
  var call1507 = callmethod(this,"expectConsume", [1], block1505);
  return call1507;
};
  var call1508 = callmethod(Grace_prelude,"while()do", [1, 1], block1498, block1501);
  lineNumber = 986
  lineNumber = 1
  lineNumber = 985
  var call1509 = callmethod(var_values,"pop", [0]);
  var_tmp = call1509;
  lineNumber = 986
  var call1510 = callmethod(var_params,"push", [1], var_tmp);
  return call1510;
};
  lineNumber = 988
  var call1511 = callmethod(this,"ifConsume()then", [1, 1], block1495, block1497);
  var string1512 = new GraceString("rsquare");
  lineNumber = 989
  var call1513 = callmethod(this,"expect", [1], string1512);
  lineNumber = 990
  lineNumber = 1
  lineNumber = 989
  var call1514 = callmethod(var_ast,"arrayNode", [0]);
  var call1515 = callmethod(call1514,"new", [1], var_params);
  var var_o = call1515;
  lineNumber = 990
  var call1516 = callmethod(var_values,"push", [1], var_o);
  lineNumber = 991
  var call1517 = callmethod(this,"next", [0]);
  var if1490 = call1517;
}
  return if1490
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["doarray"] = func1489;
  lineNumber = 1004
var func1518 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 997
  var string1520 = new GraceString("keyword");
  lineNumber = 1006
  var call1521 = callmethod(this,"accept", [1], string1520);
  lineNumber = 997
  lineNumber = 1
  lineNumber = 997
  var call1522 = callmethod(var_sym,"value", [0]);
  var string1523 = new GraceString("inherits");
  var opresult1525 = callmethod(call1522, "==", [1], string1523);
  var opresult1527 = callmethod(call1521, "&", [1], opresult1525);
  if (Grace_isTrue(opresult1527)) {
  lineNumber = 998
  var call1528 = callmethod(this,"checkIndent", [0]);
  lineNumber = 999
  var call1529 = callmethod(this,"next", [0]);
  lineNumber = 1001
  var block1530 = Grace_allocObject();
  block1530.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1530.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1530.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1530.receiver = this;
  block1530.className = 'block<parser:1001>';
  block1530.real = function(
) {
  var call1531 = callmethod(this,"expression", [0]);
  return call1531;
};
  lineNumber = 1003
  var call1532 = callmethod(this,"expectConsume", [1], block1530);
  lineNumber = 1004
  lineNumber = 1
  lineNumber = 1003
  var call1533 = callmethod(var_values,"pop", [0]);
  var var_tmp = call1533;
  lineNumber = 1004
  lineNumber = 1
  lineNumber = 1004
  var call1534 = callmethod(var_ast,"inheritsNode", [0]);
  var call1535 = callmethod(call1534,"new", [1], var_tmp);
  var call1536 = callmethod(var_values,"push", [1], call1535);
  var if1519 = call1536;
}
  return if1519
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["inheritsdec"] = func1518;
  lineNumber = 1081
var func1537 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1011
  var string1539 = new GraceString("keyword");
  lineNumber = 1082
  var call1540 = callmethod(this,"accept", [1], string1539);
  lineNumber = 1011
  lineNumber = 1
  lineNumber = 1011
  var call1541 = callmethod(var_sym,"value", [0]);
  var string1542 = new GraceString("object");
  var opresult1544 = callmethod(call1541, "==", [1], string1542);
  var opresult1546 = callmethod(call1540, "&", [1], opresult1544);
  if (Grace_isTrue(opresult1546)) {
  lineNumber = 1013
  lineNumber = 1012
  var var_localMinIndentLevel = var_minIndentLevel;
  lineNumber = 1013
  var call1547 = callmethod(this,"next", [0]);
  lineNumber = 1015
  lineNumber = 1014
  var bool1548 = new GraceBoolean(false)
  var var_superclass = bool1548;
  lineNumber = 1038
  lineNumber = 1015
  var string1550 = new GraceString("identifier");
  lineNumber = 1040
  var call1551 = callmethod(this,"accept", [1], string1550);
  lineNumber = 1015
  lineNumber = 1
  lineNumber = 1015
  var call1552 = callmethod(var_sym,"value", [0]);
  var string1553 = new GraceString("extends");
  var opresult1555 = callmethod(call1552, "==", [1], string1553);
  var opresult1557 = callmethod(call1551, "&", [1], opresult1555);
  if (Grace_isTrue(opresult1557)) {
  lineNumber = 1016
  var call1558 = callmethod(this,"next", [0]);
  lineNumber = 1017
  var string1559 = new GraceString("identifier");
  lineNumber = 1018
  var call1560 = callmethod(this,"expect", [1], string1559);
  var call1561 = callmethod(this,"identifier", [0]);
  lineNumber = 1020
  lineNumber = 1
  lineNumber = 1019
  var call1562 = callmethod(var_values,"pop", [0]);
  var var_nm = call1562;
  lineNumber = 1021
  lineNumber = 1020
  lineNumber = 1
  lineNumber = 1020
  var string1564 = new GraceString("dot");
  lineNumber = 1023
  var call1565 = callmethod(this,"accept", [1], string1564);
  var call1566 = callmethod(call1565,"not", [0]);
  if (Grace_isTrue(call1566)) {
  lineNumber = 1021
  var string1567 = new GraceString("extends must have .new invocation on right");
  var call1568 = callmethod(var_util,"syntax_error", [1], string1567);
  var if1563 = call1568;
}
  lineNumber = 1023
  var call1569 = callmethod(this,"next", [0]);
  lineNumber = 1024
  var string1570 = new GraceString("identifier");
  lineNumber = 1025
  var call1571 = callmethod(this,"expect", [1], string1570);
  var call1572 = callmethod(this,"identifier", [0]);
  lineNumber = 1027
  lineNumber = 1
  lineNumber = 1026
  var call1573 = callmethod(var_values,"pop", [0]);
  var var_mn = call1573;
  lineNumber = 1028
  var array1574 = new GraceList([
]);

  var var_scargs = array1574;
  lineNumber = 1035
  lineNumber = 1028
  var string1576 = new GraceString("(");
  lineNumber = 1037
  var call1577 = callmethod(this,"accept", [1], string1576);
  if (Grace_isTrue(call1577)) {
  lineNumber = 1029
  var call1578 = callmethod(this,"next", [0]);
  lineNumber = 1033
  lineNumber = 1030
  var block1579 = Grace_allocObject();
  block1579.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1579.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1579.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1579.receiver = this;
  block1579.className = 'block<parser:1030>';
  block1579.real = function(
) {
  lineNumber = 1
  lineNumber = 1030
  var string1580 = new GraceString(")");
  var call1581 = callmethod(this,"accept", [1], string1580);
  var call1582 = callmethod(call1581,"not", [0]);
  return call1582;
};
  lineNumber = 1033
  var block1583 = Grace_allocObject();
  block1583.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1583.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1583.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1583.receiver = this;
  block1583.className = 'block<parser:1033>';
  block1583.real = function(
) {
  lineNumber = 1031
  var block1584 = Grace_allocObject();
  block1584.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1584.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1584.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1584.receiver = this;
  block1584.className = 'block<parser:1031>';
  block1584.real = function(
) {
  var call1585 = callmethod(this,"expression", [0]);
  return call1585;
};
  lineNumber = 1032
  var call1586 = callmethod(this,"expectConsume", [1], block1584);
  lineNumber = 1033
  lineNumber = 1
  lineNumber = 1032
  var call1587 = callmethod(var_values,"pop", [0]);
  var var_tmp = call1587;
  lineNumber = 1033
  var call1588 = callmethod(var_scargs,"push", [1], var_tmp);
  return call1588;
};
  var call1589 = callmethod(Grace_prelude,"while()do", [1, 1], block1579, block1583);
  lineNumber = 1035
  var call1590 = callmethod(this,"next", [0]);
  var if1575 = call1590;
}
  lineNumber = 1038
  lineNumber = 1037
  lineNumber = 1
  lineNumber = 1037
  var call1591 = callmethod(var_mn,"value", [0]);
  lineNumber = 1
  lineNumber = 1037
  var call1592 = callmethod(var_ast,"memberNode", [0]);
  var call1593 = callmethod(call1592,"new", [2], call1591, var_nm);
  lineNumber = 1038
  lineNumber = 1
  lineNumber = 1038
  var call1595 = callmethod(var_mn,"value", [0]);
  lineNumber = 1
  lineNumber = 1038
  var call1596 = callmethod(var_ast,"callWithPart", [0]);
  var call1597 = callmethod(call1596,"new", [2], call1595, var_scargs);
  var array1594 = new GraceList([
call1597,
]);

  lineNumber = 1039
  lineNumber = 1
  lineNumber = 1037
  var call1598 = callmethod(var_ast,"callNode", [0]);
  var call1599 = callmethod(call1598,"new", [2], call1593, array1594);
  var_superclass = call1599;
  var if1549 = call1599;
}
  lineNumber = 1040
  var string1600 = new GraceString("lbrace");
  lineNumber = 1041
  var call1601 = callmethod(this,"expect", [1], string1600);
  lineNumber = 1044
  var obj1602 = Grace_allocObject();
  obj1602.outer = this;
    var reader_parser_outer1603 = function() {
    return this.outer;
  }
  obj1602.methods["outer"] = reader_parser_outer1603;
function obj_init_1602() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 1042
  var string1604 = new GraceString("lbrace");
  obj1602.data["kind"] = string1604;
    var reader_parser_kind1605 = function() {
    return this.data["kind"];
  }
  obj1602.methods["kind"] = reader_parser_kind1605;
  obj1602.data["kind"] = string1604;
  var writer_parser_kind1605 = function(argcv, o) {
    this.data["kind"] = o;
  }
  obj1602.methods["kind:="] = writer_parser_kind1605;
obj1602.mutable = true;
  lineNumber = 1043
  var string1606 = new GraceString("");
  obj1602.data["register"] = string1606;
    var reader_parser_register1607 = function() {
    return this.data["register"];
  }
  obj1602.methods["register"] = reader_parser_register1607;
  obj1602.data["register"] = string1606;
  var writer_parser_register1607 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1602.methods["register:="] = writer_parser_register1607;
obj1602.mutable = true;
  superDepth = origSuperDepth;
}
obj_init_1602.apply(obj1602, []);
  lineNumber = 1041
  var call1608 = callmethod(var_values,"push", [1], obj1602);
  lineNumber = 1045
  var call1609 = callmethod(this,"next", [0]);
  lineNumber = 1050
  lineNumber = 1051
  lineNumber = 1
  lineNumber = 1046
  var call1611 = callmethod(var_sym,"line", [0]);
  lineNumber = 1051
  lineNumber = 1
  lineNumber = 1046
  var call1612 = callmethod(var_statementToken,"line", [0]);
  var opresult1614 = callmethod(call1611, "==", [1], call1612);
  if (Grace_isTrue(opresult1614)) {
  lineNumber = 1048
  lineNumber = 1
  lineNumber = 1047
  var call1615 = callmethod(var_sym,"linePos", [0]);
  var diff1617 = callmethod(call1615, "-", [1], new GraceNum(1));
  var_minIndentLevel = diff1617;
  var if1610 = diff1617;
  } else {
  lineNumber = 1050
  lineNumber = 1
  lineNumber = 1049
  var call1618 = callmethod(var_statementToken,"indent", [0]);
  var opresult1620 = callmethod(call1618, "+", [1], new GraceNum(1));
  var_minIndentLevel = opresult1620;
  var if1610 = opresult1620;
}
  lineNumber = 1052
  lineNumber = 1
  lineNumber = 1051
  var call1621 = callmethod(var_values,"size", [0]);
  var var_sz = call1621;
  lineNumber = 1064
  lineNumber = 1052
  var block1622 = Grace_allocObject();
  block1622.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1622.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1622.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1622.receiver = this;
  block1622.className = 'block<parser:1052>';
  block1622.real = function(
) {
  lineNumber = 1
  lineNumber = 1052
  var string1623 = new GraceString("rbrace");
  var call1624 = callmethod(this,"accept", [1], string1623);
  var call1625 = callmethod(call1624,"not", [0]);
  return call1625;
};
  lineNumber = 1064
  var block1626 = Grace_allocObject();
  block1626.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1626.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1626.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1626.receiver = this;
  block1626.className = 'block<parser:1064>';
  block1626.real = function(
) {
  lineNumber = 1056
  var call1627 = callmethod(this,"methoddec", [0]);
  lineNumber = 1057
  var call1628 = callmethod(this,"inheritsdec", [0]);
  lineNumber = 1058
  var call1629 = callmethod(this,"statement", [0]);
  lineNumber = 1061
  lineNumber = 1063
  lineNumber = 1
  lineNumber = 1059
  var call1631 = callmethod(var_values,"size", [0]);
  var opresult1633 = callmethod(call1631, "==", [1], var_sz);
  if (Grace_isTrue(opresult1633)) {
  lineNumber = 1061
  lineNumber = 1060
  var string1634 = new GraceString("did not consume anything in ");
  lineNumber = 1061
  var string1635 = new GraceString("object declaration.");
  var opresult1637 = callmethod(string1634, "++", [1], string1635);
  lineNumber = 1060
  var call1638 = callmethod(var_util,"syntax_error", [1], opresult1637);
  var if1630 = call1638;
}
  lineNumber = 1064
  lineNumber = 1
  lineNumber = 1063
  var call1639 = callmethod(var_values,"size", [0]);
  var_sz = call1639;
  return call1639;
};
  var call1640 = callmethod(Grace_prelude,"while()do", [1, 1], block1622, block1626);
  lineNumber = 1065
  var call1641 = callmethod(this,"next", [0]);
  lineNumber = 1067
  var array1642 = new GraceList([
]);

  var var_rbody = array1642;
  lineNumber = 1068
  lineNumber = 1
  lineNumber = 1067
  var call1643 = callmethod(var_values,"pop", [0]);
  var var_n = call1643;
  lineNumber = 1071
  lineNumber = 1068
  var block1644 = Grace_allocObject();
  block1644.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1644.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1644.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1644.receiver = this;
  block1644.className = 'block<parser:1068>';
  block1644.real = function(
) {
  lineNumber = 1
  lineNumber = 1068
  var call1645 = callmethod(var_n,"kind", [0]);
  var string1646 = new GraceString("lbrace");
  var opresult1648 = callmethod(call1645, "/=", [1], string1646);
  return opresult1648;
};
  lineNumber = 1071
  var block1649 = Grace_allocObject();
  block1649.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1649.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1649.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1649.receiver = this;
  block1649.className = 'block<parser:1071>';
  block1649.real = function(
) {
  lineNumber = 1069
  var call1650 = callmethod(var_rbody,"push", [1], var_n);
  lineNumber = 1071
  lineNumber = 1
  lineNumber = 1070
  var call1651 = callmethod(var_values,"pop", [0]);
  var_n = call1651;
  return call1651;
};
  var call1652 = callmethod(Grace_prelude,"while()do", [1, 1], block1644, block1649);
  lineNumber = 1073
  var array1653 = new GraceList([
]);

  var var_body = array1653;
  lineNumber = 1076
  lineNumber = 1073
  lineNumber = 1
  lineNumber = 1073
  var call1654 = callmethod(var_rbody,"indices", [0]);
  lineNumber = 1076
  var block1655 = Grace_allocObject();
  block1655.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1655.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1655.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1655.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1655.receiver = this;
  block1655.className = 'block<parser:1076>';
  block1655.real = function(
var_x
) {
  lineNumber = 1
  lineNumber = 1075
  var call1656 = callmethod(var_rbody,"pop", [0]);
  var var_p = call1656;
  lineNumber = 1076
  var call1657 = callmethod(var_body,"push", [1], var_p);
  return call1657;
};
  var call1658 = callmethod(Grace_prelude,"for()do", [1, 1], call1654, block1655);
  lineNumber = 1078
  lineNumber = 1079
  lineNumber = 1
  lineNumber = 1078
  var call1659 = callmethod(var_ast,"objectNode", [0]);
  var call1660 = callmethod(call1659,"new", [2], var_body, var_superclass);
  var var_o = call1660;
  lineNumber = 1079
  var call1661 = callmethod(var_values,"push", [1], var_o);
  lineNumber = 1081
  lineNumber = 1080
  var_minIndentLevel = var_localMinIndentLevel;
  var if1538 = var_localMinIndentLevel;
}
  return if1538
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["doobject"] = func1537;
  lineNumber = 1129
var func1662 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1091
  var string1664 = new GraceString("keyword");
  lineNumber = 1130
  var call1665 = callmethod(this,"accept", [1], string1664);
  lineNumber = 1091
  lineNumber = 1
  lineNumber = 1091
  var call1666 = callmethod(var_sym,"value", [0]);
  var string1667 = new GraceString("class");
  var opresult1669 = callmethod(call1666, "==", [1], string1667);
  var opresult1671 = callmethod(call1665, "&", [1], opresult1669);
  if (Grace_isTrue(opresult1671)) {
  lineNumber = 1092
  var call1672 = callmethod(this,"next", [0]);
  lineNumber = 1094
  lineNumber = 1093
  var var_localMinIndentLevel = var_minIndentLevel;
  lineNumber = 1094
  var string1673 = new GraceString("identifier");
  lineNumber = 1095
  var call1674 = callmethod(this,"expect", [1], string1673);
  var call1675 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 1098
  lineNumber = 1096
  var string1677 = new GraceString("dot");
  lineNumber = 1099
  var call1678 = callmethod(this,"accept", [1], string1677);
  var call1679 = callmethod(call1678,"prefix!", [0]);
  if (Grace_isTrue(call1679)) {
  lineNumber = 1098
  var call1680 = callmethod(this,"doclassOld", [0]);
  return call1680
  var if1676 = undefined;
}
  lineNumber = 1100
  lineNumber = 1
  lineNumber = 1099
  var call1681 = callmethod(var_values,"pop", [0]);
  var var_cname = call1681;
  lineNumber = 1100
  var call1682 = callmethod(this,"next", [0]);
  lineNumber = 1101
  var bool1683 = new GraceBoolean(false)
  lineNumber = 1102
  var call1684 = callmethod(this,"methodsignature", [1], bool1683);
  var var_s = call1684;
  lineNumber = 1103
  lineNumber = 1
  lineNumber = 1102
  var call1685 = callmethod(var_s,"sig", [0]);
  var var_csig = call1685;
  lineNumber = 1104
  lineNumber = 1
  lineNumber = 1103
  var call1686 = callmethod(var_s,"m", [0]);
  var var_constructorName = call1686;
  lineNumber = 1105
  lineNumber = 1104
  var string1688 = new GraceString("lbrace");
  lineNumber = 1107
  var call1689 = callmethod(this,"accept", [1], string1688);
  var call1690 = callmethod(call1689,"prefix!", [0]);
  if (Grace_isTrue(call1690)) {
  lineNumber = 1105
  var string1691 = new GraceString("class declaration without body");
  var call1692 = callmethod(var_util,"syntax_error", [1], string1691);
  var if1687 = call1692;
}
  lineNumber = 1107
  var call1693 = callmethod(this,"next", [0]);
  lineNumber = 1112
  lineNumber = 1113
  lineNumber = 1
  lineNumber = 1108
  var call1695 = callmethod(var_sym,"line", [0]);
  lineNumber = 1113
  lineNumber = 1
  lineNumber = 1108
  var call1696 = callmethod(var_statementToken,"line", [0]);
  var opresult1698 = callmethod(call1695, "==", [1], call1696);
  if (Grace_isTrue(opresult1698)) {
  lineNumber = 1110
  lineNumber = 1
  lineNumber = 1109
  var call1699 = callmethod(var_sym,"linePos", [0]);
  var diff1701 = callmethod(call1699, "-", [1], new GraceNum(1));
  var_minIndentLevel = diff1701;
  var if1694 = diff1701;
  } else {
  lineNumber = 1112
  lineNumber = 1
  lineNumber = 1111
  var call1702 = callmethod(var_statementToken,"indent", [0]);
  var opresult1704 = callmethod(call1702, "+", [1], new GraceNum(1));
  var_minIndentLevel = opresult1704;
  var if1694 = opresult1704;
}
  lineNumber = 1114
  var array1705 = new GraceList([
]);

  var var_body = array1705;
  lineNumber = 1122
  lineNumber = 1114
  var block1706 = Grace_allocObject();
  block1706.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1706.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1706.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1706.receiver = this;
  block1706.className = 'block<parser:1114>';
  block1706.real = function(
) {
  lineNumber = 1
  lineNumber = 1114
  var string1707 = new GraceString("rbrace");
  var call1708 = callmethod(this,"accept", [1], string1707);
  var call1709 = callmethod(call1708,"not", [0]);
  return call1709;
};
  lineNumber = 1122
  var block1710 = Grace_allocObject();
  block1710.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1710.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1710.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1710.receiver = this;
  block1710.className = 'block<parser:1122>';
  block1710.real = function(
) {
  lineNumber = 1116
  lineNumber = 1115
  var block1711 = Grace_allocObject();
  block1711.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1711.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1711.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1711.receiver = this;
  block1711.className = 'block<parser:1115>';
  block1711.real = function(
) {
  var call1712 = callmethod(this,"methoddec", [0]);
  return call1712;
};
  lineNumber = 1116
  var block1713 = Grace_allocObject();
  block1713.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1713.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1713.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1713.receiver = this;
  block1713.className = 'block<parser:1116>';
  block1713.real = function(
) {
  lineNumber = 1
  lineNumber = 1116
  var call1714 = callmethod(var_values,"pop", [0]);
  var call1715 = callmethod(var_body,"push", [1], call1714);
  return call1715;
};
  lineNumber = 1118
  var call1716 = callmethod(this,"ifConsume()then", [1, 1], block1711, block1713);
  lineNumber = 1119
  lineNumber = 1118
  var block1717 = Grace_allocObject();
  block1717.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1717.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1717.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1717.receiver = this;
  block1717.className = 'block<parser:1118>';
  block1717.real = function(
) {
  var call1718 = callmethod(this,"inheritsdec", [0]);
  return call1718;
};
  lineNumber = 1119
  var block1719 = Grace_allocObject();
  block1719.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1719.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1719.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1719.receiver = this;
  block1719.className = 'block<parser:1119>';
  block1719.real = function(
) {
  lineNumber = 1
  lineNumber = 1119
  var call1720 = callmethod(var_values,"pop", [0]);
  var call1721 = callmethod(var_body,"push", [1], call1720);
  return call1721;
};
  lineNumber = 1121
  var call1722 = callmethod(this,"ifConsume()then", [1, 1], block1717, block1719);
  lineNumber = 1122
  lineNumber = 1121
  var block1723 = Grace_allocObject();
  block1723.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1723.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1723.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1723.receiver = this;
  block1723.className = 'block<parser:1121>';
  block1723.real = function(
) {
  var call1724 = callmethod(this,"statement", [0]);
  return call1724;
};
  lineNumber = 1122
  var block1725 = Grace_allocObject();
  block1725.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1725.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1725.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1725.receiver = this;
  block1725.className = 'block<parser:1122>';
  block1725.real = function(
) {
  lineNumber = 1
  lineNumber = 1122
  var call1726 = callmethod(var_values,"pop", [0]);
  var call1727 = callmethod(var_body,"push", [1], call1726);
  return call1727;
};
  lineNumber = 1124
  var call1728 = callmethod(this,"ifConsume()then", [1, 1], block1723, block1725);
  return call1728;
};
  var call1729 = callmethod(Grace_prelude,"while()do", [1, 1], block1706, block1710);
  lineNumber = 1125
  var call1730 = callmethod(this,"next", [0]);
  lineNumber = 1126
  var bool1731 = new GraceBoolean(false)
  lineNumber = 1127
  lineNumber = 1
  lineNumber = 1126
  var call1732 = callmethod(var_ast,"classNode", [0]);
  var call1733 = callmethod(call1732,"new", [5], var_cname, var_csig, var_body, bool1731, var_constructorName);
  var var_o = call1733;
  lineNumber = 1127
  var call1734 = callmethod(var_values,"push", [1], var_o);
  lineNumber = 1129
  lineNumber = 1128
  var_minIndentLevel = var_localMinIndentLevel;
  var if1663 = var_localMinIndentLevel;
}
  return if1663
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["doclass"] = func1662;
  lineNumber = 1234
var func1735 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1133
  var bool1737 = new GraceBoolean(true)
  if (Grace_isTrue(bool1737)) {
  lineNumber = 1135
  lineNumber = 1134
  var var_localMinIndentLevel = var_minIndentLevel;
  lineNumber = 1135
  var call1738 = callmethod(this,"generic", [0]);
  lineNumber = 1137
  lineNumber = 1136
  var bool1739 = new GraceBoolean(false)
  var var_superclass = bool1739;
  lineNumber = 1161
  lineNumber = 1137
  var string1741 = new GraceString("identifier");
  lineNumber = 1163
  var call1742 = callmethod(this,"accept", [1], string1741);
  lineNumber = 1137
  lineNumber = 1
  lineNumber = 1137
  var call1743 = callmethod(var_sym,"value", [0]);
  var string1744 = new GraceString("extends");
  var opresult1746 = callmethod(call1743, "==", [1], string1744);
  var opresult1748 = callmethod(call1742, "&", [1], opresult1746);
  if (Grace_isTrue(opresult1748)) {
  lineNumber = 1138
  var call1749 = callmethod(this,"next", [0]);
  lineNumber = 1139
  var string1750 = new GraceString("identifier");
  lineNumber = 1140
  var call1751 = callmethod(this,"expect", [1], string1750);
  var call1752 = callmethod(this,"identifier", [0]);
  lineNumber = 1141
  var call1753 = callmethod(this,"generic", [0]);
  lineNumber = 1143
  lineNumber = 1
  lineNumber = 1142
  var call1754 = callmethod(var_values,"pop", [0]);
  var var_nm = call1754;
  lineNumber = 1144
  lineNumber = 1143
  lineNumber = 1
  lineNumber = 1143
  var string1756 = new GraceString("dot");
  lineNumber = 1146
  var call1757 = callmethod(this,"accept", [1], string1756);
  var call1758 = callmethod(call1757,"not", [0]);
  if (Grace_isTrue(call1758)) {
  lineNumber = 1144
  var string1759 = new GraceString("extends must have .new invocation on right");
  var call1760 = callmethod(var_util,"syntax_error", [1], string1759);
  var if1755 = call1760;
}
  lineNumber = 1146
  var call1761 = callmethod(this,"next", [0]);
  lineNumber = 1147
  var string1762 = new GraceString("identifier");
  lineNumber = 1148
  var call1763 = callmethod(this,"expect", [1], string1762);
  var call1764 = callmethod(this,"identifier", [0]);
  lineNumber = 1150
  lineNumber = 1
  lineNumber = 1149
  var call1765 = callmethod(var_values,"pop", [0]);
  var var_mn = call1765;
  lineNumber = 1151
  var array1766 = new GraceList([
]);

  var var_scargs = array1766;
  lineNumber = 1158
  lineNumber = 1151
  var string1768 = new GraceString("lparen");
  lineNumber = 1160
  var call1769 = callmethod(this,"accept", [1], string1768);
  if (Grace_isTrue(call1769)) {
  lineNumber = 1152
  var call1770 = callmethod(this,"next", [0]);
  lineNumber = 1156
  lineNumber = 1153
  var block1771 = Grace_allocObject();
  block1771.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1771.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1771.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1771.receiver = this;
  block1771.className = 'block<parser:1153>';
  block1771.real = function(
) {
  lineNumber = 1
  lineNumber = 1153
  var string1772 = new GraceString("rparen");
  var call1773 = callmethod(this,"accept", [1], string1772);
  var call1774 = callmethod(call1773,"not", [0]);
  return call1774;
};
  lineNumber = 1156
  var block1775 = Grace_allocObject();
  block1775.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1775.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1775.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1775.receiver = this;
  block1775.className = 'block<parser:1156>';
  block1775.real = function(
) {
  lineNumber = 1154
  var block1776 = Grace_allocObject();
  block1776.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1776.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1776.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1776.receiver = this;
  block1776.className = 'block<parser:1154>';
  block1776.real = function(
) {
  var call1777 = callmethod(this,"expression", [0]);
  return call1777;
};
  lineNumber = 1155
  var call1778 = callmethod(this,"expectConsume", [1], block1776);
  lineNumber = 1156
  lineNumber = 1
  lineNumber = 1155
  var call1779 = callmethod(var_values,"pop", [0]);
  var var_tmp = call1779;
  lineNumber = 1156
  var call1780 = callmethod(var_scargs,"push", [1], var_tmp);
  return call1780;
};
  var call1781 = callmethod(Grace_prelude,"while()do", [1, 1], block1771, block1775);
  lineNumber = 1158
  var call1782 = callmethod(this,"next", [0]);
  var if1767 = call1782;
}
  lineNumber = 1161
  lineNumber = 1160
  lineNumber = 1
  lineNumber = 1160
  var call1783 = callmethod(var_mn,"value", [0]);
  lineNumber = 1
  lineNumber = 1160
  var call1784 = callmethod(var_ast,"memberNode", [0]);
  var call1785 = callmethod(call1784,"new", [2], call1783, var_nm);
  lineNumber = 1161
  lineNumber = 1
  lineNumber = 1161
  var call1787 = callmethod(var_mn,"value", [0]);
  lineNumber = 1
  lineNumber = 1161
  var call1788 = callmethod(var_ast,"callWithPart", [0]);
  var call1789 = callmethod(call1788,"new", [2], call1787, var_scargs);
  var array1786 = new GraceList([
call1789,
]);

  lineNumber = 1162
  lineNumber = 1
  lineNumber = 1160
  var call1790 = callmethod(var_ast,"callNode", [0]);
  var call1791 = callmethod(call1790,"new", [2], call1785, array1786);
  var_superclass = call1791;
  var if1740 = call1791;
}
  lineNumber = 1164
  lineNumber = 1
  lineNumber = 1163
  var call1792 = callmethod(var_values,"pop", [0]);
  var var_cname = call1792;
  lineNumber = 1231
  lineNumber = 1164
  var string1794 = new GraceString("lbrace");
  lineNumber = 1233
  var call1795 = callmethod(this,"accept", [1], string1794);
  if (Grace_isTrue(call1795)) {
  lineNumber = 1168
  var obj1796 = Grace_allocObject();
  obj1796.outer = this;
    var reader_parser_outer1797 = function() {
    return this.outer;
  }
  obj1796.methods["outer"] = reader_parser_outer1797;
function obj_init_1796() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 1166
  var string1798 = new GraceString("lbrace");
  obj1796.data["kind"] = string1798;
    var reader_parser_kind1799 = function() {
    return this.data["kind"];
  }
  obj1796.methods["kind"] = reader_parser_kind1799;
  obj1796.data["kind"] = string1798;
  var writer_parser_kind1799 = function(argcv, o) {
    this.data["kind"] = o;
  }
  obj1796.methods["kind:="] = writer_parser_kind1799;
obj1796.mutable = true;
  lineNumber = 1167
  var string1800 = new GraceString("");
  obj1796.data["register"] = string1800;
    var reader_parser_register1801 = function() {
    return this.data["register"];
  }
  obj1796.methods["register"] = reader_parser_register1801;
  obj1796.data["register"] = string1800;
  var writer_parser_register1801 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1796.methods["register:="] = writer_parser_register1801;
obj1796.mutable = true;
  superDepth = origSuperDepth;
}
obj_init_1796.apply(obj1796, []);
  lineNumber = 1165
  var call1802 = callmethod(var_values,"push", [1], obj1796);
  lineNumber = 1169
  var call1803 = callmethod(this,"next", [0]);
  lineNumber = 1171
  var array1804 = new GraceList([
]);

  var var_params = array1804;
  lineNumber = 1199
  lineNumber = 1171
  var string1806 = new GraceString("identifier");
  lineNumber = 1202
  var call1807 = callmethod(this,"accept", [1], string1806);
  if (Grace_isTrue(call1807)) {
  lineNumber = 1174
  var call1808 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 1176
  lineNumber = 1
  lineNumber = 1175
  var call1809 = callmethod(var_values,"pop", [0]);
  var var_pid = call1809;
  lineNumber = 1181
  lineNumber = 1176
  var string1811 = new GraceString("colon");
  lineNumber = 1182
  var call1812 = callmethod(this,"accept", [1], string1811);
  if (Grace_isTrue(call1812)) {
  lineNumber = 1177
  var call1813 = callmethod(this,"next", [0]);
  lineNumber = 1178
  var call1814 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 1179
  var call1815 = callmethod(this,"generic", [0]);
  lineNumber = 1181
  lineNumber = 1
  lineNumber = 1181
  lineNumber = 1
  lineNumber = 1180
  var call1816 = callmethod(var_values,"pop", [0]);
  var call1817 = callmethod(var_pid,"dtype:=", [1], call1816);
  var if1810 = call1817;
}
  lineNumber = 1182
  var call1818 = callmethod(var_params,"push", [1], var_pid);
  lineNumber = 1194
  lineNumber = 1183
  var block1819 = Grace_allocObject();
  block1819.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1819.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1819.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1819.receiver = this;
  block1819.className = 'block<parser:1183>';
  block1819.real = function(
) {
  var string1820 = new GraceString("comma");
  var call1821 = callmethod(this,"accept", [1], string1820);
  return call1821;
};
  lineNumber = 1194
  var block1822 = Grace_allocObject();
  block1822.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1822.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1822.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1822.receiver = this;
  block1822.className = 'block<parser:1194>';
  block1822.real = function(
) {
  lineNumber = 1184
  var call1823 = callmethod(this,"next", [0]);
  lineNumber = 1185
  var call1824 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 1186
  var call1825 = callmethod(this,"generic", [0]);
  lineNumber = 1188
  lineNumber = 1
  lineNumber = 1187
  var call1826 = callmethod(var_values,"pop", [0]);
  var_pid = call1826;
  lineNumber = 1193
  lineNumber = 1188
  var string1828 = new GraceString("colon");
  lineNumber = 1194
  var call1829 = callmethod(this,"accept", [1], string1828);
  if (Grace_isTrue(call1829)) {
  lineNumber = 1189
  var call1830 = callmethod(this,"next", [0]);
  lineNumber = 1190
  var call1831 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 1191
  var call1832 = callmethod(this,"generic", [0]);
  lineNumber = 1193
  lineNumber = 1
  lineNumber = 1193
  lineNumber = 1
  lineNumber = 1192
  var call1833 = callmethod(var_values,"pop", [0]);
  var call1834 = callmethod(var_pid,"dtype:=", [1], call1833);
  var if1827 = call1834;
}
  lineNumber = 1194
  var call1835 = callmethod(var_params,"push", [1], var_pid);
  return call1835;
};
  var call1836 = callmethod(Grace_prelude,"while()do", [1, 1], block1819, block1822);
  lineNumber = 1199
  lineNumber = 1196
  var string1838 = new GraceString("arrow");
  lineNumber = 1201
  var call1839 = callmethod(this,"accept", [1], string1838);
  if (Grace_isTrue(call1839)) {
  lineNumber = 1197
  var call1840 = callmethod(this,"next", [0]);
  var if1837 = call1840;
  } else {
  lineNumber = 1199
  var string1841 = new GraceString("expected ->.");
  var call1842 = callmethod(var_util,"syntax_error", [1], string1841);
  var if1837 = call1842;
}
  var if1805 = if1837;
}
  lineNumber = 1203
  lineNumber = 1
  lineNumber = 1202
  var call1843 = callmethod(var_values,"size", [0]);
  var var_sz = call1843;
  lineNumber = 1214
  lineNumber = 1203
  var block1844 = Grace_allocObject();
  block1844.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1844.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1844.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1844.receiver = this;
  block1844.className = 'block<parser:1203>';
  block1844.real = function(
) {
  lineNumber = 1
  lineNumber = 1203
  var string1845 = new GraceString("rbrace");
  var call1846 = callmethod(this,"accept", [1], string1845);
  var call1847 = callmethod(call1846,"not", [0]);
  return call1847;
};
  lineNumber = 1214
  var block1848 = Grace_allocObject();
  block1848.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1848.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1848.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1848.receiver = this;
  block1848.className = 'block<parser:1214>';
  block1848.real = function(
) {
  lineNumber = 1205
  var call1849 = callmethod(this,"vardec", [0]);
  lineNumber = 1206
  var call1850 = callmethod(this,"methoddec", [0]);
  lineNumber = 1207
  var call1851 = callmethod(this,"defdec", [0]);
  lineNumber = 1208
  var call1852 = callmethod(this,"inheritsdec", [0]);
  lineNumber = 1211
  lineNumber = 1213
  lineNumber = 1
  lineNumber = 1209
  var call1854 = callmethod(var_values,"size", [0]);
  var opresult1856 = callmethod(call1854, "==", [1], var_sz);
  if (Grace_isTrue(opresult1856)) {
  lineNumber = 1211
  lineNumber = 1210
  var string1857 = new GraceString("did not consume anything in ");
  lineNumber = 1211
  var string1858 = new GraceString("class declaration.");
  var opresult1860 = callmethod(string1857, "++", [1], string1858);
  lineNumber = 1210
  var call1861 = callmethod(var_util,"syntax_error", [1], opresult1860);
  var if1853 = call1861;
}
  lineNumber = 1214
  lineNumber = 1
  lineNumber = 1213
  var call1862 = callmethod(var_values,"size", [0]);
  var_sz = call1862;
  return call1862;
};
  var call1863 = callmethod(Grace_prelude,"while()do", [1, 1], block1844, block1848);
  lineNumber = 1215
  var call1864 = callmethod(this,"next", [0]);
  lineNumber = 1217
  var array1865 = new GraceList([
]);

  var var_rbody = array1865;
  lineNumber = 1218
  lineNumber = 1
  lineNumber = 1217
  var call1866 = callmethod(var_values,"pop", [0]);
  var var_n = call1866;
  lineNumber = 1221
  lineNumber = 1218
  var block1867 = Grace_allocObject();
  block1867.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1867.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1867.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1867.receiver = this;
  block1867.className = 'block<parser:1218>';
  block1867.real = function(
) {
  lineNumber = 1
  lineNumber = 1218
  var call1868 = callmethod(var_n,"kind", [0]);
  var string1869 = new GraceString("lbrace");
  var opresult1871 = callmethod(call1868, "/=", [1], string1869);
  return opresult1871;
};
  lineNumber = 1221
  var block1872 = Grace_allocObject();
  block1872.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1872.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1872.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1872.receiver = this;
  block1872.className = 'block<parser:1221>';
  block1872.real = function(
) {
  lineNumber = 1219
  var call1873 = callmethod(var_rbody,"push", [1], var_n);
  lineNumber = 1221
  lineNumber = 1
  lineNumber = 1220
  var call1874 = callmethod(var_values,"pop", [0]);
  var_n = call1874;
  return call1874;
};
  var call1875 = callmethod(Grace_prelude,"while()do", [1, 1], block1867, block1872);
  lineNumber = 1223
  var array1876 = new GraceList([
]);

  var var_body = array1876;
  lineNumber = 1225
  lineNumber = 1223
  lineNumber = 1
  lineNumber = 1223
  var call1877 = callmethod(var_rbody,"indices", [0]);
  lineNumber = 1225
  var block1878 = Grace_allocObject();
  block1878.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1878.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1878.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1878.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1878.receiver = this;
  block1878.className = 'block<parser:1225>';
  block1878.real = function(
var_x
) {
  lineNumber = 1
  lineNumber = 1224
  var call1879 = callmethod(var_rbody,"pop", [0]);
  var var_p = call1879;
  lineNumber = 1225
  var call1880 = callmethod(var_body,"push", [1], var_p);
  return call1880;
};
  var call1881 = callmethod(Grace_prelude,"for()do", [1, 1], call1877, block1878);
  lineNumber = 1228
  lineNumber = 1227
  lineNumber = 1
  lineNumber = 1227
  var call1883 = callmethod(var_cname,"value", [0]);
  lineNumber = 1
  lineNumber = 1227
  var call1884 = callmethod(var_ast,"signaturePart", [0]);
  var call1885 = callmethod(call1884,"new", [2], call1883, var_params);
  var array1882 = new GraceList([
call1885,
]);

  lineNumber = 1228
  var string1886 = new GraceString("new");
  var bool1887 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 1228
  var call1888 = callmethod(var_ast,"identifierNode", [0]);
  var call1889 = callmethod(call1888,"new", [2], string1886, bool1887);
  lineNumber = 1229
  lineNumber = 1
  lineNumber = 1227
  var call1890 = callmethod(var_ast,"classNode", [0]);
  var call1891 = callmethod(call1890,"new", [5], var_cname, array1882, var_body, var_superclass, call1889);
  var var_o = call1891;
  lineNumber = 1229
  var call1892 = callmethod(var_values,"push", [1], var_o);
  var if1793 = call1892;
  } else {
  lineNumber = 1231
  var string1893 = new GraceString("class definition without body");
  var call1894 = callmethod(var_util,"syntax_error", [1], string1893);
  var if1793 = call1894;
}
  lineNumber = 1234
  lineNumber = 1233
  var_minIndentLevel = var_localMinIndentLevel;
  var if1736 = var_localMinIndentLevel;
}
  return if1736
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["doclassOld"] = func1735;
  lineNumber = 1287
var func1895 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1239
  var string1897 = new GraceString("keyword");
  lineNumber = 1289
  var call1898 = callmethod(this,"accept", [1], string1897);
  lineNumber = 1239
  lineNumber = 1
  lineNumber = 1239
  var call1899 = callmethod(var_sym,"value", [0]);
  var string1900 = new GraceString("method");
  var opresult1902 = callmethod(call1899, "==", [1], string1900);
  var opresult1904 = callmethod(call1898, "&", [1], opresult1902);
  if (Grace_isTrue(opresult1904)) {
  lineNumber = 1240
  var call1905 = callmethod(this,"checkIndent", [0]);
  lineNumber = 1242
  lineNumber = 1241
  var var_stok = var_sym;
  lineNumber = 1242
  var call1906 = callmethod(this,"next", [0]);
  lineNumber = 1243
  var bool1907 = new GraceBoolean(false)
  lineNumber = 1244
  var call1908 = callmethod(this,"methodsignature", [1], bool1907);
  var var_m = call1908;
  lineNumber = 1245
  lineNumber = 1
  lineNumber = 1244
  var call1909 = callmethod(var_m,"m", [0]);
  var var_meth = call1909;
  lineNumber = 1246
  lineNumber = 1
  lineNumber = 1245
  var call1910 = callmethod(var_m,"sig", [0]);
  var var_signature = call1910;
  lineNumber = 1247
  lineNumber = 1
  lineNumber = 1246
  var call1911 = callmethod(var_m,"rtype", [0]);
  var var_dtype = call1911;
  lineNumber = 1248
  lineNumber = 1
  lineNumber = 1247
  var call1912 = callmethod(var_m,"v", [0]);
  var var_varargs = call1912;
  lineNumber = 1249
  var array1913 = new GraceList([
]);

  var var_body = array1913;
  lineNumber = 1250
  var var_localMin;
  lineNumber = 1281
  lineNumber = 1250
  var string1915 = new GraceString("lbrace");
  lineNumber = 1283
  var call1916 = callmethod(this,"accept", [1], string1915);
  if (Grace_isTrue(call1916)) {
  lineNumber = 1251
  var call1917 = callmethod(this,"next", [0]);
  lineNumber = 1253
  lineNumber = 1252
  var_localMin = var_minIndentLevel;
  lineNumber = 1257
  lineNumber = 1258
  lineNumber = 1
  lineNumber = 1253
  var call1919 = callmethod(var_sym,"line", [0]);
  lineNumber = 1258
  lineNumber = 1
  lineNumber = 1253
  var call1920 = callmethod(var_stok,"line", [0]);
  var opresult1922 = callmethod(call1919, "==", [1], call1920);
  if (Grace_isTrue(opresult1922)) {
  lineNumber = 1255
  lineNumber = 1
  lineNumber = 1254
  var call1923 = callmethod(var_sym,"linePos", [0]);
  var diff1925 = callmethod(call1923, "-", [1], new GraceNum(1));
  var_minIndentLevel = diff1925;
  var if1918 = diff1925;
  } else {
  lineNumber = 1257
  lineNumber = 1
  lineNumber = 1256
  var call1926 = callmethod(var_stok,"indent", [0]);
  var opresult1928 = callmethod(call1926, "+", [1], new GraceNum(1));
  var_minIndentLevel = opresult1928;
  var if1918 = opresult1928;
}
  lineNumber = 1261
  var obj1929 = Grace_allocObject();
  obj1929.outer = this;
    var reader_parser_outer1930 = function() {
    return this.outer;
  }
  obj1929.methods["outer"] = reader_parser_outer1930;
function obj_init_1929() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 1259
  var string1931 = new GraceString("lbrace");
  obj1929.data["kind"] = string1931;
    var reader_parser_kind1932 = function() {
    return this.data["kind"];
  }
  obj1929.methods["kind"] = reader_parser_kind1932;
  obj1929.data["kind"] = string1931;
  var writer_parser_kind1932 = function(argcv, o) {
    this.data["kind"] = o;
  }
  obj1929.methods["kind:="] = writer_parser_kind1932;
obj1929.mutable = true;
  lineNumber = 1260
  var string1933 = new GraceString("");
  obj1929.data["register"] = string1933;
    var reader_parser_register1934 = function() {
    return this.data["register"];
  }
  obj1929.methods["register"] = reader_parser_register1934;
  obj1929.data["register"] = string1933;
  var writer_parser_register1934 = function(argcv, o) {
    this.data["register"] = o;
  }
  obj1929.methods["register:="] = writer_parser_register1934;
obj1929.mutable = true;
  superDepth = origSuperDepth;
}
obj_init_1929.apply(obj1929, []);
  lineNumber = 1258
  var call1935 = callmethod(var_values,"push", [1], obj1929);
  lineNumber = 1262
  var call1936 = callmethod(this,"statement", [0]);
  lineNumber = 1264
  lineNumber = 1
  lineNumber = 1263
  var call1937 = callmethod(var_values,"pop", [0]);
  var var_s = call1937;
  lineNumber = 1271
  lineNumber = 1264
  var block1938 = Grace_allocObject();
  block1938.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1938.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1938.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1938.receiver = this;
  block1938.className = 'block<parser:1264>';
  block1938.real = function(
) {
  lineNumber = 1
  lineNumber = 1264
  var call1939 = callmethod(var_s,"kind", [0]);
  var string1940 = new GraceString("lbrace");
  var opresult1942 = callmethod(call1939, "/=", [1], string1940);
  return opresult1942;
};
  lineNumber = 1271
  var block1943 = Grace_allocObject();
  block1943.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1943.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1943.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1943.receiver = this;
  block1943.className = 'block<parser:1271>';
  block1943.real = function(
) {
  lineNumber = 1268
  var call1944 = callmethod(var_body,"push", [1], var_s);
  lineNumber = 1269
  var call1945 = callmethod(this,"statement", [0]);
  lineNumber = 1271
  lineNumber = 1
  lineNumber = 1270
  var call1946 = callmethod(var_values,"pop", [0]);
  var_s = call1946;
  return call1946;
};
  var call1947 = callmethod(Grace_prelude,"while()do", [1, 1], block1938, block1943);
  lineNumber = 1276
  lineNumber = 1272
  var string1949 = new GraceString("rbrace");
  lineNumber = 1278
  var call1950 = callmethod(this,"accept", [1], string1949);
  if (Grace_isTrue(call1950)) {
  lineNumber = 1273
  var call1951 = callmethod(this,"next", [0]);
  var if1948 = call1951;
  } else {
  lineNumber = 1276
  lineNumber = 1275
  var string1952 = new GraceString("No statement but not end of ");
  lineNumber = 1276
  lineNumber = 1
  lineNumber = 1276
  var call1953 = callmethod(var_meth,"value", [0]);
  var opresult1955 = callmethod(string1952, "++", [1], call1953);
  var string1956 = new GraceString(". Have ");
  var opresult1958 = callmethod(opresult1955, "++", [1], string1956);
  lineNumber = 1
  lineNumber = 1276
  var call1959 = callmethod(var_sym,"kind", [0]);
  var opresult1961 = callmethod(opresult1958, "++", [1], call1959);
  var string1962 = new GraceString(".");
  var opresult1964 = callmethod(opresult1961, "++", [1], string1962);
  lineNumber = 1275
  var call1965 = callmethod(var_util,"syntax_error", [1], opresult1964);
  var if1948 = call1965;
}
  lineNumber = 1279
  lineNumber = 1278
  var_minIndentLevel = var_localMin;
  var if1914 = var_localMin;
  } else {
  lineNumber = 1281
  lineNumber = 1280
  var string1966 = new GraceString("No body in method declaration for ");
  lineNumber = 1281
  lineNumber = 1
  lineNumber = 1281
  var call1967 = callmethod(var_meth,"value", [0]);
  var opresult1969 = callmethod(string1966, "++", [1], call1967);
  lineNumber = 1280
  var call1970 = callmethod(var_util,"syntax_error", [1], opresult1969);
  var if1914 = call1970;
}
  lineNumber = 1283
  lineNumber = 1284
  lineNumber = 1
  lineNumber = 1283
  var call1971 = callmethod(var_ast,"methodNode", [0]);
  var call1972 = callmethod(call1971,"new", [4], var_meth, var_signature, var_body, var_dtype);
  var var_o = call1972;
  lineNumber = 1286
  lineNumber = 1284
  if (Grace_isTrue(var_varargs)) {
  lineNumber = 1286
  lineNumber = 1
  lineNumber = 1285
  var bool1974 = new GraceBoolean(true)
  var call1975 = callmethod(var_o,"varargs:=", [1], bool1974);
  var if1973 = call1975;
}
  lineNumber = 1287
  var call1976 = callmethod(var_values,"push", [1], var_o);
  var if1896 = call1976;
}
  return if1896
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["methoddec"] = func1895;
  lineNumber = 1345
var func1977 = function(argcv) {
  var curarg = 1;
  var var_tm = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1298
  lineNumber = 1
  lineNumber = 1298
  lineNumber = 1
  lineNumber = 1297
  var call1978 = callmethod(var_tm,"value", [0]);
  var call1979 = callmethod(call1978,"value", [0]);
  var var_methname = call1979;
  lineNumber = 1299
  lineNumber = 1
  lineNumber = 1298
  var call1980 = callmethod(var_tm,"signature", [0]);
  var var_signature = call1980;
  lineNumber = 1300
  var var_nxt;
  lineNumber = 1343
  lineNumber = 1300
  var block1981 = Grace_allocObject();
  block1981.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1981.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1981.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1981.receiver = this;
  block1981.className = 'block<parser:1300>';
  block1981.real = function(
) {
  var string1982 = new GraceString("identifier");
  var call1983 = callmethod(this,"accept", [1], string1982);
  return call1983;
};
  lineNumber = 1343
  var block1984 = Grace_allocObject();
  block1984.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1984.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1984.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1984.receiver = this;
  block1984.className = 'block<parser:1343>';
  block1984.real = function(
) {
  lineNumber = 1302
  lineNumber = 1301
  var string1985 = new GraceString("()");
  var opresult1987 = callmethod(var_methname, "++", [1], string1985);
  var_methname = opresult1987;
  lineNumber = 1303
  lineNumber = 1
  lineNumber = 1303
  lineNumber = 1
  lineNumber = 1302
  var call1988 = callmethod(var_ast,"signaturePart", [0]);
  var call1989 = callmethod(call1988,"new", [0]);
  var var_part = call1989;
  lineNumber = 1303
  var call1990 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 1305
  lineNumber = 1
  lineNumber = 1304
  var call1991 = callmethod(var_values,"pop", [0]);
  var_nxt = call1991;
  lineNumber = 1306
  lineNumber = 1305
  lineNumber = 1306
  lineNumber = 1
  lineNumber = 1305
  var call1992 = callmethod(var_nxt,"value", [0]);
  var opresult1994 = callmethod(var_methname, "++", [1], call1992);
  var_methname = opresult1994;
  lineNumber = 1307
  lineNumber = 1
  lineNumber = 1307
  lineNumber = 1
  lineNumber = 1306
  var call1995 = callmethod(var_nxt,"value", [0]);
  var call1996 = callmethod(var_part,"name:=", [1], call1995);
  lineNumber = 1308
  lineNumber = 1307
  var bool1997 = new GraceBoolean(false)
  var var_vararg = bool1997;
  lineNumber = 1309
  lineNumber = 1308
  lineNumber = 1
  lineNumber = 1308
  var string1999 = new GraceString("lparen");
  lineNumber = 1311
  var call2000 = callmethod(this,"accept", [1], string1999);
  var call2001 = callmethod(call2000,"not", [0]);
  if (Grace_isTrue(call2001)) {
  lineNumber = 1309
  var string2002 = new GraceString("multi-part method name parameters require ().");
  var call2003 = callmethod(var_util,"syntax_error", [1], string2002);
  var if1998 = call2003;
}
  lineNumber = 1311
  var call2004 = callmethod(this,"next", [0]);
  lineNumber = 1338
  lineNumber = 1313
  var block2005 = Grace_allocObject();
  block2005.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2005.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2005.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2005.receiver = this;
  block2005.className = 'block<parser:1313>';
  block2005.real = function(
) {
  lineNumber = 1312
  var string2006 = new GraceString("identifier");
  lineNumber = 1313
  var call2007 = callmethod(this,"accept", [1], string2006);
  var string2008 = new GraceString("op");
  lineNumber = 1312
  var call2009 = callmethod(this,"accept", [1], string2008);
  lineNumber = 1313
  lineNumber = 1
  lineNumber = 1313
  var call2010 = callmethod(var_sym,"value", [0]);
  var string2011 = new GraceString("*");
  var opresult2013 = callmethod(call2010, "==", [1], string2011);
  var opresult2015 = callmethod(call2009, "&", [1], opresult2013);
  var opresult2017 = callmethod(call2007, "|", [1], opresult2015);
  return opresult2017;
};
  lineNumber = 1338
  var block2018 = Grace_allocObject();
  block2018.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2018.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2018.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2018.receiver = this;
  block2018.className = 'block<parser:1338>';
  block2018.real = function(
) {
  lineNumber = 1315
  lineNumber = 1314
  if (Grace_isTrue(var_vararg)) {
  lineNumber = 1315
  var string2020 = new GraceString("varargs parameter must be last.");
  var call2021 = callmethod(var_util,"syntax_error", [1], string2020);
  var if2019 = call2021;
}
  lineNumber = 1320
  lineNumber = 1317
  var string2023 = new GraceString("op");
  lineNumber = 1322
  var call2024 = callmethod(this,"accept", [1], string2023);
  if (Grace_isTrue(call2024)) {
  lineNumber = 1318
  var call2025 = callmethod(this,"next", [0]);
  lineNumber = 1320
  lineNumber = 1319
  var bool2026 = new GraceBoolean(true)
  var_vararg = bool2026;
  lineNumber = 1320
  var string2027 = new GraceString("identifier");
  lineNumber = 1321
  var call2028 = callmethod(this,"expect", [1], string2027);
  var if2022 = call2028;
}
  lineNumber = 1322
  var call2029 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 1324
  lineNumber = 1
  lineNumber = 1323
  var call2030 = callmethod(var_values,"pop", [0]);
  var_nxt = call2030;
  lineNumber = 1329
  lineNumber = 1324
  var string2032 = new GraceString("colon");
  lineNumber = 1330
  var call2033 = callmethod(this,"accept", [1], string2032);
  if (Grace_isTrue(call2033)) {
  lineNumber = 1325
  var call2034 = callmethod(this,"next", [0]);
  lineNumber = 1326
  var call2035 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 1328
  lineNumber = 1
  lineNumber = 1327
  var call2036 = callmethod(var_values,"pop", [0]);
  var var_tp = call2036;
  lineNumber = 1329
  lineNumber = 1
  lineNumber = 1328
  var call2037 = callmethod(var_nxt,"dtype:=", [1], var_tp);
  var if2031 = call2037;
}
  lineNumber = 1335
  lineNumber = 1330
  if (Grace_isTrue(var_vararg)) {
  lineNumber = 1332
  lineNumber = 1
  lineNumber = 1331
  var call2039 = callmethod(var_part,"vararg:=", [1], var_nxt);
  lineNumber = 1333
  lineNumber = 1
  lineNumber = 1332
  var bool2040 = new GraceBoolean(true)
  var call2041 = callmethod(var_tm,"varargs:=", [1], bool2040);
  lineNumber = 1333
  var string2042 = new GraceString("rparen");
  lineNumber = 1334
  var call2043 = callmethod(this,"expect", [1], string2042);
  var if2038 = call2043;
  } else {
  lineNumber = 1335
  lineNumber = 1336
  lineNumber = 1
  lineNumber = 1335
  var call2044 = callmethod(var_part,"params", [0]);
  var call2045 = callmethod(call2044,"push", [1], var_nxt);
  var if2038 = call2045;
}
  lineNumber = 1338
  lineNumber = 1337
  var string2047 = new GraceString("comma");
  lineNumber = 1340
  var call2048 = callmethod(this,"accept", [1], string2047);
  if (Grace_isTrue(call2048)) {
  lineNumber = 1338
  var call2049 = callmethod(this,"next", [0]);
  var if2046 = call2049;
}
  return if2046;
};
  var call2050 = callmethod(Grace_prelude,"while()do", [1, 1], block2005, block2018);
  lineNumber = 1341
  var string2051 = new GraceString("rparen");
  lineNumber = 1342
  var call2052 = callmethod(this,"expect", [1], string2051);
  var call2053 = callmethod(this,"next", [0]);
  lineNumber = 1343
  var call2054 = callmethod(var_signature,"push", [1], var_part);
  return call2054;
};
  var call2055 = callmethod(Grace_prelude,"while()do", [1, 1], block1981, block1984);
  lineNumber = 1345
  var bool2056 = new GraceBoolean(false)
  lineNumber = 1346
  lineNumber = 1
  lineNumber = 1345
  var call2057 = callmethod(var_ast,"identifierNode", [0]);
  var call2058 = callmethod(call2057,"new", [2], var_methname, bool2056);
  return call2058
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["parsempmndecrest"] = func1977;
  lineNumber = 1433
var func2059 = function(argcv) {
  var curarg = 1;
  var var_sameline = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1350
  var string2060 = new GraceString("identifier");
  var string2061 = new GraceString("op");
  var string2062 = new GraceString("lsquare");
  lineNumber = 1351
  var call2063 = callmethod(this,"expect()or()or", [1, 1, 1], string2060, string2061, string2062);
  var call2064 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 1353
  lineNumber = 1
  lineNumber = 1352
  var call2065 = callmethod(var_values,"pop", [0]);
  var var_meth = call2065;
  lineNumber = 1354
  var array2066 = new GraceList([
]);

  var var_signature = array2066;
  lineNumber = 1
  lineNumber = 1354
  var call2067 = callmethod(var_meth,"value", [0]);
  lineNumber = 1355
  lineNumber = 1
  lineNumber = 1354
  var call2068 = callmethod(var_ast,"signaturePart", [0]);
  var call2069 = callmethod(call2068,"new", [1], call2067);
  var var_part = call2069;
  lineNumber = 1355
  var call2070 = callmethod(var_signature,"push", [1], var_part);
  lineNumber = 1360
  lineNumber = 1361
  lineNumber = 1
  lineNumber = 1356
  var call2072 = callmethod(var_meth,"value", [0]);
  var string2073 = new GraceString("[");
  var opresult2075 = callmethod(call2072, "==", [1], string2073);
  if (Grace_isTrue(opresult2075)) {
  lineNumber = 1357
  var string2076 = new GraceString("rsquare");
  lineNumber = 1358
  var call2077 = callmethod(this,"expect", [1], string2076);
  var call2078 = callmethod(this,"next", [0]);
  lineNumber = 1360
  lineNumber = 1
  lineNumber = 1359
  var string2079 = new GraceString("[]");
  var call2080 = callmethod(var_meth,"value:=", [1], string2079);
  var if2071 = call2080;
}
  lineNumber = 1366
  lineNumber = 1361
  var string2082 = new GraceString("bind");
  lineNumber = 1368
  var call2083 = callmethod(this,"accept", [1], string2082);
  if (Grace_isTrue(call2083)) {
  lineNumber = 1362
  var call2084 = callmethod(this,"next", [0]);
  lineNumber = 1364
  lineNumber = 1
  lineNumber = 1364
  lineNumber = 1
  lineNumber = 1363
  var call2085 = callmethod(var_meth,"value", [0]);
  var string2086 = new GraceString(":=");
  var opresult2088 = callmethod(call2085, "++", [1], string2086);
  var call2089 = callmethod(var_meth,"value:=", [1], opresult2088);
  var if2081 = call2089;
  } else {
  lineNumber = 1366
  lineNumber = 1364
  var string2091 = new GraceString("op");
  lineNumber = 1368
  var call2092 = callmethod(this,"accept", [1], string2091);
  lineNumber = 1364
  lineNumber = 1
  lineNumber = 1364
  var call2093 = callmethod(var_meth,"value", [0]);
  var string2094 = new GraceString("prefix");
  var opresult2096 = callmethod(call2093, "==", [1], string2094);
  var opresult2098 = callmethod(call2092, "&", [1], opresult2096);
  if (Grace_isTrue(opresult2098)) {
  lineNumber = 1366
  lineNumber = 1
  lineNumber = 1366
  lineNumber = 1
  lineNumber = 1365
  var call2099 = callmethod(var_meth,"value", [0]);
  lineNumber = 1366
  lineNumber = 1
  lineNumber = 1365
  var call2100 = callmethod(var_sym,"value", [0]);
  var opresult2102 = callmethod(call2099, "++", [1], call2100);
  var call2103 = callmethod(var_meth,"value:=", [1], opresult2102);
  lineNumber = 1366
  var call2104 = callmethod(this,"next", [0]);
  var if2090 = call2104;
}
  var if2081 = if2090;
}
  lineNumber = 1369
  lineNumber = 1368
  var bool2105 = new GraceBoolean(false)
  var var_dtype = bool2105;
  lineNumber = 1370
  lineNumber = 1369
  var bool2106 = new GraceBoolean(false)
  var var_varargs = bool2106;
  lineNumber = 1371
  lineNumber = 1370
  var bool2107 = new GraceBoolean(false)
  var var_vararg = bool2107;
  lineNumber = 1417
  lineNumber = 1371
  var string2109 = new GraceString("lparen");
  lineNumber = 1419
  var call2110 = callmethod(this,"accept", [1], string2109);
  if (Grace_isTrue(call2110)) {
  lineNumber = 1372
  var call2111 = callmethod(this,"next", [0]);
  lineNumber = 1374
  var var_id;
  lineNumber = 1405
  lineNumber = 1375
  var block2112 = Grace_allocObject();
  block2112.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2112.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2112.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2112.receiver = this;
  block2112.className = 'block<parser:1375>';
  block2112.real = function(
) {
  lineNumber = 1374
  var string2113 = new GraceString("identifier");
  lineNumber = 1375
  var call2114 = callmethod(this,"accept", [1], string2113);
  var string2115 = new GraceString("op");
  lineNumber = 1374
  var call2116 = callmethod(this,"accept", [1], string2115);
  lineNumber = 1375
  lineNumber = 1
  lineNumber = 1375
  var call2117 = callmethod(var_sym,"value", [0]);
  var string2118 = new GraceString("*");
  var opresult2120 = callmethod(call2117, "==", [1], string2118);
  var opresult2122 = callmethod(call2116, "&", [1], opresult2120);
  var opresult2124 = callmethod(call2114, "|", [1], opresult2122);
  return opresult2124;
};
  lineNumber = 1405
  var block2125 = Grace_allocObject();
  block2125.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2125.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2125.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2125.receiver = this;
  block2125.className = 'block<parser:1405>';
  block2125.real = function(
) {
  lineNumber = 1382
  lineNumber = 1378
  var string2127 = new GraceString("op");
  lineNumber = 1383
  var call2128 = callmethod(this,"accept", [1], string2127);
  if (Grace_isTrue(call2128)) {
  lineNumber = 1379
  var call2129 = callmethod(this,"next", [0]);
  lineNumber = 1381
  lineNumber = 1380
  var bool2130 = new GraceBoolean(true)
  var_vararg = bool2130;
  lineNumber = 1382
  lineNumber = 1381
  var bool2131 = new GraceBoolean(true)
  var_varargs = bool2131;
  var if2126 = bool2131;
}
  lineNumber = 1383
  var call2132 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 1385
  lineNumber = 1
  lineNumber = 1384
  var call2133 = callmethod(var_values,"pop", [0]);
  var_id = call2133;
  lineNumber = 1386
  lineNumber = 1385
  var bool2134 = new GraceBoolean(false)
  var_dtype = bool2134;
  lineNumber = 1392
  lineNumber = 1386
  var string2136 = new GraceString("colon");
  lineNumber = 1395
  var call2137 = callmethod(this,"accept", [1], string2136);
  if (Grace_isTrue(call2137)) {
  lineNumber = 1387
  var call2138 = callmethod(this,"next", [0]);
  lineNumber = 1392
  lineNumber = 1388
  var string2140 = new GraceString("identifier");
  lineNumber = 1394
  var call2141 = callmethod(this,"accept", [1], string2140);
  lineNumber = 1388
  var block2142 = Grace_allocObject();
  block2142.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2142.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2142.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2142.receiver = this;
  block2142.className = 'block<parser:1388>';
  block2142.real = function(
) {
  var string2143 = new GraceString("lbrace");
  var call2144 = callmethod(this,"accept", [1], string2143);
  return call2144;
};
  var opresult2146 = callmethod(call2141, "||", [1], block2142);
  if (Grace_isTrue(opresult2146)) {
  lineNumber = 1389
  var call2147 = callmethod(this,"dotyperef", [0]);
  lineNumber = 1391
  lineNumber = 1
  lineNumber = 1390
  var call2148 = callmethod(var_values,"pop", [0]);
  var_dtype = call2148;
  var if2139 = call2148;
  } else {
  lineNumber = 1392
  var string2149 = new GraceString("expected type after :.");
  var call2150 = callmethod(var_util,"syntax_error", [1], string2149);
  var if2139 = call2150;
}
  var if2135 = if2139;
}
  lineNumber = 1396
  lineNumber = 1
  lineNumber = 1395
  var call2151 = callmethod(var_id,"dtype:=", [1], var_dtype);
  lineNumber = 1400
  lineNumber = 1396
  if (Grace_isTrue(var_vararg)) {
  lineNumber = 1398
  lineNumber = 1
  lineNumber = 1397
  var call2153 = callmethod(var_part,"vararg:=", [1], var_id);
  lineNumber = 1398
  var string2154 = new GraceString("rparen");
  lineNumber = 1399
  var call2155 = callmethod(this,"expect", [1], string2154);
  var if2152 = call2155;
  } else {
  lineNumber = 1400
  lineNumber = 1401
  lineNumber = 1
  lineNumber = 1400
  var call2156 = callmethod(var_part,"params", [0]);
  var call2157 = callmethod(call2156,"push", [1], var_id);
  var if2152 = call2157;
}
  lineNumber = 1405
  lineNumber = 1402
  var string2159 = new GraceString("comma");
  lineNumber = 1407
  var call2160 = callmethod(this,"accept", [1], string2159);
  if (Grace_isTrue(call2160)) {
  lineNumber = 1403
  var call2161 = callmethod(this,"next", [0]);
  var if2158 = call2161;
  } else {
  lineNumber = 1405
  lineNumber = 1404
  lineNumber = 1
  lineNumber = 1404
  var string2163 = new GraceString("rparen");
  lineNumber = 1407
  var call2164 = callmethod(this,"accept", [1], string2163);
  var call2165 = callmethod(call2164,"not", [0]);
  if (Grace_isTrue(call2165)) {
  lineNumber = 1405
  var string2166 = new GraceString("expected comma or rparen.");
  var call2167 = callmethod(var_util,"syntax_error", [1], string2166);
  var if2162 = call2167;
}
  var if2158 = if2162;
}
  return if2158;
};
  var call2168 = callmethod(Grace_prelude,"while()do", [1, 1], block2112, block2125);
  lineNumber = 1408
  var string2169 = new GraceString("rparen");
  lineNumber = 1409
  var call2170 = callmethod(this,"expect", [1], string2169);
  var call2171 = callmethod(this,"next", [0]);
  lineNumber = 1417
  lineNumber = 1411
  lineNumber = 1410
  lineNumber = 1418
  lineNumber = 1410
  var call2173 = callmethod(var_sameline,"prefix!", [0]);
  var string2174 = new GraceString("identifier");
  lineNumber = 1418
  var call2175 = callmethod(this,"accept", [1], string2174);
  var opresult2177 = callmethod(call2173, "&", [1], call2175);
  lineNumber = 1411
  var string2178 = new GraceString("identifier");
  lineNumber = 1410
  var call2179 = callmethod(this,"acceptSameLine", [1], string2178);
  var opresult2181 = callmethod(opresult2177, "|", [1], call2179);
  if (Grace_isTrue(opresult2181)) {
  lineNumber = 1414
  var array2182 = new GraceList([
]);

  var bool2183 = new GraceBoolean(false)
  lineNumber = 1415
  lineNumber = 1
  lineNumber = 1414
  var call2184 = callmethod(var_ast,"methodNode", [0]);
  var call2185 = callmethod(call2184,"new", [4], var_meth, var_signature, array2182, bool2183);
  var var_tm = call2185;
  lineNumber = 1415
  lineNumber = 1416
  var call2186 = callmethod(this,"parsempmndecrest", [1], var_tm);
  var_meth = call2186;
  lineNumber = 1417
  lineNumber = 1416
  lineNumber = 1417
  lineNumber = 1
  lineNumber = 1416
  var call2187 = callmethod(var_tm,"varargs", [0]);
  var opresult2189 = callmethod(var_varargs, "|", [1], call2187);
  var_varargs = opresult2189;
  var if2172 = opresult2189;
}
  var if2108 = if2172;
}
  lineNumber = 1426
  lineNumber = 1419
  var string2191 = new GraceString("arrow");
  lineNumber = 1427
  var call2192 = callmethod(this,"accept", [1], string2191);
  if (Grace_isTrue(call2192)) {
  lineNumber = 1421
  var call2193 = callmethod(this,"next", [0]);
  lineNumber = 1422
  var call2194 = callmethod(this,"dotyperef", [0]);
  lineNumber = 1424
  lineNumber = 1
  lineNumber = 1423
  var call2195 = callmethod(var_values,"pop", [0]);
  var_dtype = call2195;
  var if2190 = call2195;
  } else {
  lineNumber = 1426
  lineNumber = 1425
  var bool2196 = new GraceBoolean(false)
  var_dtype = bool2196;
  var if2190 = bool2196;
}
  lineNumber = 1432
  var obj2197 = Grace_allocObject();
  obj2197.outer = this;
    var reader_parser_outer2198 = function() {
    return this.outer;
  }
  obj2197.methods["outer"] = reader_parser_outer2198;
function obj_init_2197() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 1428
  obj2197.data["m"] = var_meth;
    var reader_parser_m2199 = function() {
    return this.data["m"];
  }
  obj2197.methods["m"] = reader_parser_m2199;
  obj2197.data["m"] = var_meth;
  var writer_parser_m2199 = function(argcv, o) {
    this.data["m"] = o;
  }
  obj2197.methods["m:="] = writer_parser_m2199;
obj2197.mutable = true;
  lineNumber = 1429
  obj2197.data["sig"] = var_signature;
    var reader_parser_sig2200 = function() {
    return this.data["sig"];
  }
  obj2197.methods["sig"] = reader_parser_sig2200;
  obj2197.data["sig"] = var_signature;
  var writer_parser_sig2200 = function(argcv, o) {
    this.data["sig"] = o;
  }
  obj2197.methods["sig:="] = writer_parser_sig2200;
obj2197.mutable = true;
  lineNumber = 1430
  obj2197.data["rtype"] = var_dtype;
    var reader_parser_rtype2201 = function() {
    return this.data["rtype"];
  }
  obj2197.methods["rtype"] = reader_parser_rtype2201;
  obj2197.data["rtype"] = var_dtype;
  var writer_parser_rtype2201 = function(argcv, o) {
    this.data["rtype"] = o;
  }
  obj2197.methods["rtype:="] = writer_parser_rtype2201;
obj2197.mutable = true;
  lineNumber = 1431
  obj2197.data["v"] = var_varargs;
    var reader_parser_v2202 = function() {
    return this.data["v"];
  }
  obj2197.methods["v"] = reader_parser_v2202;
  obj2197.data["v"] = var_varargs;
  var writer_parser_v2202 = function(argcv, o) {
    this.data["v"] = o;
  }
  obj2197.methods["v:="] = writer_parser_v2202;
obj2197.mutable = true;
  superDepth = origSuperDepth;
}
obj_init_2197.apply(obj2197, []);
  var var_o = obj2197;
  lineNumber = 1433
  return var_o
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["methodsignature"] = func2059;
  lineNumber = 1445
var func2203 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1439
  var string2205 = new GraceString("keyword");
  lineNumber = 1447
  var call2206 = callmethod(this,"accept", [1], string2205);
  lineNumber = 1439
  lineNumber = 1
  lineNumber = 1439
  var call2207 = callmethod(var_sym,"value", [0]);
  var string2208 = new GraceString("import");
  var opresult2210 = callmethod(call2207, "==", [1], string2208);
  var opresult2212 = callmethod(call2206, "&", [1], opresult2210);
  if (Grace_isTrue(opresult2212)) {
  lineNumber = 1440
  var call2213 = callmethod(this,"next", [0]);
  lineNumber = 1441
  var string2214 = new GraceString("identifier");
  lineNumber = 1442
  var call2215 = callmethod(this,"expect", [1], string2214);
  var call2216 = callmethod(this,"identifier", [0]);
  lineNumber = 1444
  lineNumber = 1
  lineNumber = 1443
  var call2217 = callmethod(var_values,"pop", [0]);
  var var_p = call2217;
  lineNumber = 1444
  lineNumber = 1445
  lineNumber = 1
  lineNumber = 1444
  var call2218 = callmethod(var_ast,"importNode", [0]);
  var call2219 = callmethod(call2218,"new", [1], var_p);
  var var_o = call2219;
  lineNumber = 1445
  var call2220 = callmethod(var_values,"push", [1], var_o);
  var if2204 = call2220;
}
  return if2204
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["doimport"] = func2203;
  lineNumber = 1462
var func2221 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1452
  var string2223 = new GraceString("keyword");
  lineNumber = 1464
  var call2224 = callmethod(this,"accept", [1], string2223);
  lineNumber = 1452
  lineNumber = 1
  lineNumber = 1452
  var call2225 = callmethod(var_sym,"value", [0]);
  var string2226 = new GraceString("return");
  var opresult2228 = callmethod(call2225, "==", [1], string2226);
  var opresult2230 = callmethod(call2224, "&", [1], opresult2228);
  if (Grace_isTrue(opresult2230)) {
  lineNumber = 1453
  var call2231 = callmethod(this,"next", [0]);
  lineNumber = 1455
  var var_retval;
  lineNumber = 1459
  lineNumber = 1461
  var call2233 = callmethod(this,"tokenOnSameLine", [0]);
  if (Grace_isTrue(call2233)) {
  lineNumber = 1456
  var block2234 = Grace_allocObject();
  block2234.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2234.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2234.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2234.receiver = this;
  block2234.className = 'block<parser:1456>';
  block2234.real = function(
) {
  var call2235 = callmethod(this,"expression", [0]);
  return call2235;
};
  lineNumber = 1457
  var call2236 = callmethod(this,"expectConsume", [1], block2234);
  lineNumber = 1458
  lineNumber = 1
  lineNumber = 1457
  var call2237 = callmethod(var_values,"pop", [0]);
  var_retval = call2237;
  var if2232 = call2237;
  } else {
  lineNumber = 1459
  var string2238 = new GraceString("void");
  var bool2239 = new GraceBoolean(false)
  lineNumber = 1460
  lineNumber = 1
  lineNumber = 1459
  var call2240 = callmethod(var_ast,"identifierNode", [0]);
  var call2241 = callmethod(call2240,"new", [2], string2238, bool2239);
  var_retval = call2241;
  var if2232 = call2241;
}
  lineNumber = 1461
  lineNumber = 1462
  lineNumber = 1
  lineNumber = 1461
  var call2242 = callmethod(var_ast,"returnNode", [0]);
  var call2243 = callmethod(call2242,"new", [1], var_retval);
  var var_o = call2243;
  lineNumber = 1462
  var call2244 = callmethod(var_values,"push", [1], var_o);
  var if2222 = call2244;
}
  return if2222
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["doreturn"] = func2221;
  lineNumber = 1483
var func2245 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1467
  var bool2246 = new GraceBoolean(true)
  lineNumber = 1468
  var call2247 = callmethod(this,"methodsignature", [1], bool2246);
  var var_m = call2247;
  lineNumber = 1469
  lineNumber = 1
  lineNumber = 1468
  var call2248 = callmethod(var_m,"m", [0]);
  var var_meth = call2248;
  lineNumber = 1470
  lineNumber = 1
  lineNumber = 1469
  var call2249 = callmethod(var_m,"sig", [0]);
  var var_signature = call2249;
  lineNumber = 1471
  lineNumber = 1
  lineNumber = 1470
  var call2250 = callmethod(var_m,"rtype", [0]);
  var var_dtype = call2250;
  lineNumber = 1472
  lineNumber = 1
  lineNumber = 1471
  var call2251 = callmethod(var_m,"v", [0]);
  var var_varargs = call2251;
  lineNumber = 1473
  lineNumber = 1475
  lineNumber = 1472
  var bool2253 = new GraceBoolean(false)
  var opresult2255 = callmethod(var_dtype, "==", [1], bool2253);
  if (Grace_isTrue(opresult2255)) {
  lineNumber = 1473
  var string2256 = new GraceString("Unit");
  var bool2257 = new GraceBoolean(false)
  lineNumber = 1474
  lineNumber = 1
  lineNumber = 1473
  var call2258 = callmethod(var_ast,"identifierNode", [0]);
  var call2259 = callmethod(call2258,"new", [2], string2256, bool2257);
  var_dtype = call2259;
  var if2252 = call2259;
}
  lineNumber = 1475
  lineNumber = 1
  lineNumber = 1475
  var call2260 = callmethod(var_meth,"value", [0]);
  lineNumber = 1476
  lineNumber = 1
  lineNumber = 1475
  var call2261 = callmethod(var_ast,"methodTypeNode", [0]);
  var call2262 = callmethod(call2261,"new", [3], call2260, var_signature, var_dtype);
  var var_o = call2262;
  lineNumber = 1476
  var call2263 = callmethod(var_values,"push", [1], var_o);
  lineNumber = 1483
  lineNumber = 1477
  var string2265 = new GraceString("semicolon");
  lineNumber = 1487
  var call2266 = callmethod(this,"accept", [1], string2265);
  if (Grace_isTrue(call2266)) {
  lineNumber = 1478
  var call2267 = callmethod(this,"next", [0]);
  var if2264 = call2267;
  } else {
  lineNumber = 1483
  lineNumber = 1480
  var string2269 = new GraceString("rbrace");
  lineNumber = 1486
  var call2270 = callmethod(this,"accept", [1], string2269);
  var call2271 = callmethod(call2270,"prefix!", [0]);
  if (Grace_isTrue(call2271)) {
  lineNumber = 1483
  lineNumber = 1485
  lineNumber = 1
  lineNumber = 1481
  var call2273 = callmethod(var_meth,"line", [0]);
  lineNumber = 1485
  lineNumber = 1
  lineNumber = 1481
  var call2274 = callmethod(var_sym,"line", [0]);
  var opresult2276 = callmethod(call2273, "==", [1], call2274);
  if (Grace_isTrue(opresult2276)) {
  lineNumber = 1483
  lineNumber = 1482
  var string2277 = new GraceString("multiple methods on same line in type, ");
  lineNumber = 1483
  var string2278 = new GraceString("after ");
  lineNumber = 1
  lineNumber = 1483
  var call2279 = callmethod(var_meth,"value", [0]);
  var opresult2281 = callmethod(string2278, "++", [1], call2279);
  var string2282 = new GraceString("");
  var opresult2284 = callmethod(opresult2281, "++", [1], string2282);
  var opresult2286 = callmethod(string2277, "++", [1], opresult2284);
  lineNumber = 1482
  var call2287 = callmethod(var_util,"syntax_error", [1], opresult2286);
  var if2272 = call2287;
}
  var if2268 = if2272;
}
  var if2264 = if2268;
}
  return if2264
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["domethodtype"] = func2245;
  lineNumber = 1501
var func2288 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1490
  var string2290 = new GraceString("lbrace");
  lineNumber = 1503
  var call2291 = callmethod(this,"accept", [1], string2290);
  if (Grace_isTrue(call2291)) {
  lineNumber = 1492
  var array2292 = new GraceList([
]);

  var var_methods = array2292;
  lineNumber = 1493
  lineNumber = 1492
  var var_mc = var_auto__95__count;
  lineNumber = 1494
  lineNumber = 1493
  var opresult2294 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2294;
  lineNumber = 1494
  var call2295 = callmethod(this,"next", [0]);
  lineNumber = 1497
  lineNumber = 1495
  var block2296 = Grace_allocObject();
  block2296.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2296.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2296.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2296.receiver = this;
  block2296.className = 'block<parser:1495>';
  block2296.real = function(
) {
  lineNumber = 1
  lineNumber = 1495
  var string2297 = new GraceString("rbrace");
  var call2298 = callmethod(this,"accept", [1], string2297);
  var call2299 = callmethod(call2298,"not", [0]);
  return call2299;
};
  lineNumber = 1497
  var block2300 = Grace_allocObject();
  block2300.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2300.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2300.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2300.receiver = this;
  block2300.className = 'block<parser:1497>';
  block2300.real = function(
) {
  lineNumber = 1496
  var block2301 = Grace_allocObject();
  block2301.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2301.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2301.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2301.receiver = this;
  block2301.className = 'block<parser:1496>';
  block2301.real = function(
) {
  var call2302 = callmethod(this,"domethodtype", [0]);
  return call2302;
};
  lineNumber = 1497
  var call2303 = callmethod(this,"expectConsume", [1], block2301);
  lineNumber = 1
  lineNumber = 1497
  var call2304 = callmethod(var_values,"pop", [0]);
  var call2305 = callmethod(var_methods,"push", [1], call2304);
  return call2305;
};
  var call2306 = callmethod(Grace_prelude,"while()do", [1, 1], block2296, block2300);
  lineNumber = 1499
  var call2307 = callmethod(this,"next", [0]);
  lineNumber = 1500
  var string2308 = new GraceString("<Anon_");
  var opresult2310 = callmethod(string2308, "++", [1], var_mc);
  var string2311 = new GraceString(">");
  var opresult2313 = callmethod(opresult2310, "++", [1], string2311);
  lineNumber = 1501
  lineNumber = 1
  lineNumber = 1500
  var call2314 = callmethod(var_ast,"typeNode", [0]);
  var call2315 = callmethod(call2314,"new", [2], opresult2313, var_methods);
  var var_t = call2315;
  lineNumber = 1501
  var call2316 = callmethod(var_values,"push", [1], var_t);
  var if2289 = call2316;
}
  return if2289
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["doanontype"] = func2288;
  lineNumber = 1544
var func2317 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1506
  var string2319 = new GraceString("keyword");
  lineNumber = 1547
  var call2320 = callmethod(this,"accept", [1], string2319);
  lineNumber = 1506
  lineNumber = 1
  lineNumber = 1506
  var call2321 = callmethod(var_sym,"value", [0]);
  var string2322 = new GraceString("type");
  var opresult2324 = callmethod(call2321, "==", [1], string2322);
  var opresult2326 = callmethod(call2320, "&", [1], opresult2324);
  if (Grace_isTrue(opresult2326)) {
  lineNumber = 1507
  var call2327 = callmethod(this,"next", [0]);
  lineNumber = 1508
  var string2328 = new GraceString("identifier");
  lineNumber = 1509
  var call2329 = callmethod(this,"expect", [1], string2328);
  var call2330 = callmethod(this,"pushidentifier", [0]);
  lineNumber = 1510
  var call2331 = callmethod(this,"generic", [0]);
  lineNumber = 1512
  lineNumber = 1
  lineNumber = 1511
  var call2332 = callmethod(var_values,"pop", [0]);
  var var_p = call2332;
  lineNumber = 1513
  var array2333 = new GraceList([
]);

  var var_gens = array2333;
  lineNumber = 1516
  lineNumber = 1517
  lineNumber = 1
  lineNumber = 1513
  var call2335 = callmethod(var_p,"kind", [0]);
  var string2336 = new GraceString("generic");
  var opresult2338 = callmethod(call2335, "==", [1], string2336);
  if (Grace_isTrue(opresult2338)) {
  lineNumber = 1515
  lineNumber = 1
  lineNumber = 1514
  var call2339 = callmethod(var_p,"params", [0]);
  var_gens = call2339;
  lineNumber = 1516
  lineNumber = 1
  lineNumber = 1515
  var call2340 = callmethod(var_p,"value", [0]);
  var_p = call2340;
  var if2334 = call2340;
}
  lineNumber = 1517
  var string2341 = new GraceString("op");
  lineNumber = 1518
  var call2342 = callmethod(this,"expect", [1], string2341);
  lineNumber = 1519
  lineNumber = 1521
  lineNumber = 1
  lineNumber = 1518
  var call2344 = callmethod(var_sym,"value", [0]);
  var string2345 = new GraceString("=");
  var opresult2347 = callmethod(call2344, "/=", [1], string2345);
  if (Grace_isTrue(opresult2347)) {
  lineNumber = 1519
  var string2348 = new GraceString("type declarations require =.");
  var call2349 = callmethod(var_util,"syntax_error", [1], string2348);
  var if2343 = call2349;
}
  lineNumber = 1521
  var call2350 = callmethod(this,"next", [0]);
  lineNumber = 1523
  var array2351 = new GraceList([
]);

  var var_methods = array2351;
  lineNumber = 1544
  lineNumber = 1523
  var string2353 = new GraceString("lbrace");
  lineNumber = 1546
  var call2354 = callmethod(this,"accept", [1], string2353);
  if (Grace_isTrue(call2354)) {
  lineNumber = 1524
  var call2355 = callmethod(this,"next", [0]);
  lineNumber = 1527
  lineNumber = 1525
  var block2356 = Grace_allocObject();
  block2356.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2356.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2356.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2356.receiver = this;
  block2356.className = 'block<parser:1525>';
  block2356.real = function(
) {
  lineNumber = 1
  lineNumber = 1525
  var string2357 = new GraceString("rbrace");
  var call2358 = callmethod(this,"accept", [1], string2357);
  var call2359 = callmethod(call2358,"not", [0]);
  return call2359;
};
  lineNumber = 1527
  var block2360 = Grace_allocObject();
  block2360.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2360.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2360.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2360.receiver = this;
  block2360.className = 'block<parser:1527>';
  block2360.real = function(
) {
  lineNumber = 1526
  var block2361 = Grace_allocObject();
  block2361.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2361.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2361.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2361.receiver = this;
  block2361.className = 'block<parser:1526>';
  block2361.real = function(
) {
  var call2362 = callmethod(this,"domethodtype", [0]);
  return call2362;
};
  lineNumber = 1527
  var call2363 = callmethod(this,"expectConsume", [1], block2361);
  lineNumber = 1
  lineNumber = 1527
  var call2364 = callmethod(var_values,"pop", [0]);
  var call2365 = callmethod(var_methods,"push", [1], call2364);
  return call2365;
};
  var call2366 = callmethod(Grace_prelude,"while()do", [1, 1], block2356, block2360);
  lineNumber = 1529
  var call2367 = callmethod(this,"next", [0]);
  lineNumber = 1530
  lineNumber = 1
  lineNumber = 1530
  var call2368 = callmethod(var_p,"value", [0]);
  lineNumber = 1531
  lineNumber = 1
  lineNumber = 1530
  var call2369 = callmethod(var_ast,"typeNode", [0]);
  var call2370 = callmethod(call2369,"new", [2], call2368, var_methods);
  var var_t = call2370;
  lineNumber = 1532
  lineNumber = 1
  lineNumber = 1531
  var call2371 = callmethod(var_t,"generics:=", [1], var_gens);
  lineNumber = 1532
  var call2372 = callmethod(var_values,"push", [1], var_t);
  var if2352 = call2372;
  } else {
  lineNumber = 1534
  var call2373 = callmethod(this,"dotyperef", [0]);
  lineNumber = 1536
  lineNumber = 1
  lineNumber = 1535
  var call2374 = callmethod(var_values,"pop", [0]);
  var var_ot = call2374;
  lineNumber = 1536
  lineNumber = 1
  lineNumber = 1536
  var call2375 = callmethod(var_p,"value", [0]);
  lineNumber = 1
  lineNumber = 1536
  var call2376 = callmethod(var_ot,"methods", [0]);
  lineNumber = 1537
  lineNumber = 1
  lineNumber = 1536
  var call2377 = callmethod(var_ast,"typeNode", [0]);
  var call2378 = callmethod(call2377,"new", [2], call2375, call2376);
  var var_nt = call2378;
  lineNumber = 1538
  lineNumber = 1
  lineNumber = 1538
  lineNumber = 1
  lineNumber = 1537
  var call2379 = callmethod(var_nt,"generics", [0]);
  var call2380 = callmethod(var_nt,"generics:=", [1], call2379);
  lineNumber = 1539
  lineNumber = 1538
  lineNumber = 1
  lineNumber = 1538
  var call2381 = callmethod(var_ot,"unionTypes", [0]);
  lineNumber = 1539
  var block2382 = Grace_allocObject();
  block2382.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2382.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2382.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2382.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2382.receiver = this;
  block2382.className = 'block<parser:1539>';
  block2382.real = function(
var_ut
) {
  lineNumber = 1540
  lineNumber = 1
  lineNumber = 1539
  var call2383 = callmethod(var_nt,"unionTypes", [0]);
  var call2384 = callmethod(call2383,"push", [1], var_ut);
  return call2384;
};
  var call2385 = callmethod(Grace_prelude,"for()do", [1, 1], call2381, block2382);
  lineNumber = 1542
  lineNumber = 1541
  lineNumber = 1
  lineNumber = 1541
  var call2386 = callmethod(var_ot,"intersectionTypes", [0]);
  lineNumber = 1542
  var block2387 = Grace_allocObject();
  block2387.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2387.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2387.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2387.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2387.receiver = this;
  block2387.className = 'block<parser:1542>';
  block2387.real = function(
var_ut
) {
  lineNumber = 1543
  lineNumber = 1
  lineNumber = 1542
  var call2388 = callmethod(var_nt,"intersectionTypes", [0]);
  var call2389 = callmethod(call2388,"push", [1], var_ut);
  return call2389;
};
  var call2390 = callmethod(Grace_prelude,"for()do", [1, 1], call2386, block2387);
  lineNumber = 1544
  var call2391 = callmethod(var_values,"push", [1], var_nt);
  var if2352 = call2391;
}
  var if2318 = if2352;
}
  return if2318
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["dotype"] = func2317;
  lineNumber = 1566
var func2392 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1550
  if (Grace_isTrue(var_indentFreePass)) {
  lineNumber = 1552
  lineNumber = 1551
  var bool2394 = new GraceBoolean(false)
  var_indentFreePass = bool2394;
  var if2393 = bool2394;
  } else {
  lineNumber = 1566
  lineNumber = 1554
  lineNumber = 1
  lineNumber = 1552
  var call2396 = callmethod(var_sym,"kind", [0]);
  var string2397 = new GraceString("semicolon");
  var opresult2399 = callmethod(call2396, "==", [1], string2397);
  if (Grace_isTrue(opresult2399)) {
  var if2395 = undefined;
  } else {
  lineNumber = 1566
  lineNumber = 1557
  lineNumber = 1
  lineNumber = 1554
  var call2401 = callmethod(var_sym,"kind", [0]);
  var string2402 = new GraceString("rbrace");
  var opresult2404 = callmethod(call2401, "==", [1], string2402);
  lineNumber = 1557
  lineNumber = 1
  lineNumber = 1554
  var call2405 = callmethod(var_sym,"kind", [0]);
  var string2406 = new GraceString("rparen");
  var opresult2408 = callmethod(call2405, "==", [1], string2406);
  var opresult2410 = callmethod(opresult2404, "|", [1], opresult2408);
  lineNumber = 1557
  lineNumber = 1
  lineNumber = 1555
  var call2411 = callmethod(var_sym,"kind", [0]);
  var string2412 = new GraceString("rsquare");
  var opresult2414 = callmethod(call2411, "==", [1], string2412);
  var opresult2416 = callmethod(opresult2410, "|", [1], opresult2414);
  if (Grace_isTrue(opresult2416)) {
  var if2400 = undefined;
  } else {
  lineNumber = 1566
  lineNumber = 1564
  lineNumber = 1
  lineNumber = 1557
  var call2418 = callmethod(var_sym,"indent", [0]);
  var opresult2420 = callmethod(call2418, "<", [1], var_minIndentLevel);
  if (Grace_isTrue(opresult2420)) {
  lineNumber = 1562
  lineNumber = 1564
  lineNumber = 1
  lineNumber = 1558
  var call2422 = callmethod(var_sym,"linePos", [0]);
  var diff2424 = callmethod(call2422, "-", [1], new GraceNum(1));
  var opresult2426 = callmethod(diff2424, "/=", [1], var_minIndentLevel);
  if (Grace_isTrue(opresult2426)) {
  lineNumber = 1562
  lineNumber = 1559
  var string2427 = new GraceString("block and indentation inconsistent ");
  lineNumber = 1560
  var string2428 = new GraceString("for token ");
  var opresult2430 = callmethod(string2427, "++", [1], string2428);
  lineNumber = 1562
  lineNumber = 1
  lineNumber = 1560
  var call2431 = callmethod(var_sym,"kind", [0]);
  var opresult2433 = callmethod(opresult2430, "++", [1], call2431);
  var string2434 = new GraceString(": ");
  var opresult2436 = callmethod(opresult2433, "++", [1], string2434);
  lineNumber = 1562
  lineNumber = 1
  lineNumber = 1560
  var call2437 = callmethod(var_sym,"value", [0]);
  var opresult2439 = callmethod(opresult2436, "++", [1], call2437);
  var string2440 = new GraceString("; ");
  var opresult2442 = callmethod(opresult2439, "++", [1], string2440);
  lineNumber = 1561
  var string2443 = new GraceString("indentation is ");
  var opresult2445 = callmethod(opresult2442, "++", [1], string2443);
  lineNumber = 1562
  lineNumber = 1
  lineNumber = 1561
  var call2446 = callmethod(var_sym,"indent", [0]);
  var opresult2448 = callmethod(opresult2445, "++", [1], call2446);
  var string2449 = new GraceString(", must be at least ");
  var opresult2451 = callmethod(opresult2448, "++", [1], string2449);
  lineNumber = 1562
  var opresult2453 = callmethod(opresult2451, "++", [1], var_minIndentLevel);
  lineNumber = 1559
  var call2454 = callmethod(var_util,"syntax_error", [1], opresult2453);
  var if2421 = call2454;
}
  var if2417 = if2421;
  } else {
  lineNumber = 1566
  lineNumber = 1567
  lineNumber = 1
  lineNumber = 1564
  var call2456 = callmethod(var_sym,"indent", [0]);
  var opresult2458 = callmethod(call2456, ">", [1], var_minIndentLevel);
  if (Grace_isTrue(opresult2458)) {
  lineNumber = 1566
  lineNumber = 1
  lineNumber = 1565
  var call2459 = callmethod(var_sym,"indent", [0]);
  var_minIndentLevel = call2459;
  var if2455 = call2459;
}
  var if2417 = if2455;
}
  var if2400 = if2417;
}
  var if2395 = if2400;
}
  var if2393 = if2395;
}
  return if2393
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["checkIndent"] = func2392;
  lineNumber = 1623
var func2460 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1576
  lineNumber = 1
  lineNumber = 1575
  var call2461 = callmethod(var_sym,"indent", [0]);
  var_statementIndent = call2461;
  lineNumber = 1577
  lineNumber = 1576
  var_statementToken = var_sym;
  lineNumber = 1577
  var call2462 = callmethod(this,"checkIndent", [0]);
  lineNumber = 1609
  lineNumber = 1578
  var string2464 = new GraceString("keyword");
  lineNumber = 1612
  var call2465 = callmethod(this,"accept", [1], string2464);
  if (Grace_isTrue(call2465)) {
  lineNumber = 1594
  lineNumber = 1596
  lineNumber = 1
  lineNumber = 1579
  var call2467 = callmethod(var_sym,"value", [0]);
  var string2468 = new GraceString("var");
  var opresult2470 = callmethod(call2467, "==", [1], string2468);
  if (Grace_isTrue(opresult2470)) {
  lineNumber = 1580
  var call2471 = callmethod(this,"vardec", [0]);
  var if2466 = call2471;
  } else {
  lineNumber = 1594
  lineNumber = 1583
  lineNumber = 1
  lineNumber = 1581
  var call2473 = callmethod(var_sym,"value", [0]);
  var string2474 = new GraceString("def");
  var opresult2476 = callmethod(call2473, "==", [1], string2474);
  if (Grace_isTrue(opresult2476)) {
  lineNumber = 1582
  var call2477 = callmethod(this,"defdec", [0]);
  var if2472 = call2477;
  } else {
  lineNumber = 1594
  lineNumber = 1585
  lineNumber = 1
  lineNumber = 1583
  var call2479 = callmethod(var_sym,"value", [0]);
  var string2480 = new GraceString("const");
  var opresult2482 = callmethod(call2479, "==", [1], string2480);
  if (Grace_isTrue(opresult2482)) {
  lineNumber = 1584
  var string2483 = new GraceString("no such keyword const; did you mean def?");
  var call2484 = callmethod(var_util,"syntax_error", [1], string2483);
  var if2478 = call2484;
  } else {
  lineNumber = 1594
  lineNumber = 1587
  lineNumber = 1
  lineNumber = 1585
  var call2486 = callmethod(var_sym,"value", [0]);
  var string2487 = new GraceString("import");
  var opresult2489 = callmethod(call2486, "==", [1], string2487);
  if (Grace_isTrue(opresult2489)) {
  lineNumber = 1586
  var call2490 = callmethod(this,"doimport", [0]);
  var if2485 = call2490;
  } else {
  lineNumber = 1594
  lineNumber = 1589
  lineNumber = 1
  lineNumber = 1587
  var call2492 = callmethod(var_sym,"value", [0]);
  var string2493 = new GraceString("type");
  var opresult2495 = callmethod(call2492, "==", [1], string2493);
  if (Grace_isTrue(opresult2495)) {
  lineNumber = 1588
  var call2496 = callmethod(this,"dotype", [0]);
  var if2491 = call2496;
  } else {
  lineNumber = 1594
  lineNumber = 1591
  lineNumber = 1
  lineNumber = 1589
  var call2498 = callmethod(var_sym,"value", [0]);
  var string2499 = new GraceString("class");
  var opresult2501 = callmethod(call2498, "==", [1], string2499);
  if (Grace_isTrue(opresult2501)) {
  lineNumber = 1590
  var call2502 = callmethod(this,"doclass", [0]);
  var if2497 = call2502;
  } else {
  lineNumber = 1594
  lineNumber = 1593
  lineNumber = 1
  lineNumber = 1591
  var call2504 = callmethod(var_sym,"value", [0]);
  var string2505 = new GraceString("return");
  var opresult2507 = callmethod(call2504, "==", [1], string2505);
  if (Grace_isTrue(opresult2507)) {
  lineNumber = 1592
  var call2508 = callmethod(this,"doreturn", [0]);
  var if2503 = call2508;
  } else {
  lineNumber = 1594
  var call2509 = callmethod(this,"expression", [0]);
  var if2503 = call2509;
}
  var if2497 = if2503;
}
  var if2491 = if2497;
}
  var if2485 = if2491;
}
  var if2478 = if2485;
}
  var if2472 = if2478;
}
  var if2466 = if2472;
}
  var if2463 = if2466;
  } else {
  lineNumber = 1597
  var call2510 = callmethod(this,"expression", [0]);
  lineNumber = 1609
  lineNumber = 1598
  var string2512 = new GraceString("bind");
  lineNumber = 1611
  var call2513 = callmethod(this,"accept", [1], string2512);
  if (Grace_isTrue(call2513)) {
  lineNumber = 1600
  lineNumber = 1
  lineNumber = 1599
  var call2514 = callmethod(var_values,"pop", [0]);
  var var_dest = call2514;
  lineNumber = 1600
  var call2515 = callmethod(this,"next", [0]);
  lineNumber = 1601
  var call2516 = callmethod(this,"expression", [0]);
  lineNumber = 1603
  lineNumber = 1
  lineNumber = 1602
  var call2517 = callmethod(var_values,"pop", [0]);
  var var_val = call2517;
  lineNumber = 1603
  lineNumber = 1604
  lineNumber = 1
  lineNumber = 1603
  var call2518 = callmethod(var_ast,"bindNode", [0]);
  var call2519 = callmethod(call2518,"new", [2], var_dest, var_val);
  var var_o = call2519;
  lineNumber = 1606
  lineNumber = 1609
  lineNumber = 1
  lineNumber = 1604
  var call2521 = callmethod(var_dest,"kind", [0]);
  var string2522 = new GraceString("call");
  var opresult2524 = callmethod(call2521, "==", [1], string2522);
  if (Grace_isTrue(opresult2524)) {
  lineNumber = 1606
  lineNumber = 1608
  lineNumber = 1
  lineNumber = 1608
  lineNumber = 1
  lineNumber = 1605
  var call2526 = callmethod(var_dest,"value", [0]);
  var call2527 = callmethod(call2526,"kind", [0]);
  var string2528 = new GraceString("member");
  var opresult2530 = callmethod(call2527, "/=", [1], string2528);
  if (Grace_isTrue(opresult2530)) {
  lineNumber = 1606
  var string2531 = new GraceString("assignment to method call");
  var call2532 = callmethod(var_util,"syntax_error", [1], string2531);
  var if2525 = call2532;
}
  var if2520 = if2525;
}
  lineNumber = 1609
  var call2533 = callmethod(var_values,"push", [1], var_o);
  var if2511 = call2533;
}
  var if2463 = if2511;
}
  lineNumber = 1623
  lineNumber = 1612
  var string2535 = new GraceString("semicolon");
  lineNumber = 1627
  var call2536 = callmethod(this,"accept", [1], string2535);
  if (Grace_isTrue(call2536)) {
  lineNumber = 1614
  lineNumber = 1
  lineNumber = 1613
  var call2537 = callmethod(var_sym,"line", [0]);
  var var_oldLine = call2537;
  lineNumber = 1614
  var call2538 = callmethod(this,"next", [0]);
  lineNumber = 1617
  lineNumber = 1618
  lineNumber = 1
  lineNumber = 1615
  var call2540 = callmethod(var_sym,"line", [0]);
  var opresult2542 = callmethod(call2540, "==", [1], var_oldLine);
  if (Grace_isTrue(opresult2542)) {
  lineNumber = 1617
  lineNumber = 1616
  var bool2543 = new GraceBoolean(true)
  var_indentFreePass = bool2543;
  var if2539 = bool2543;
}
  var if2534 = if2539;
  } else {
  lineNumber = 1623
  lineNumber = 1626
  lineNumber = 1
  lineNumber = 1619
  var call2545 = callmethod(var_sym,"line", [0]);
  lineNumber = 1626
  lineNumber = 1
  lineNumber = 1619
  var call2546 = callmethod(var_lastToken,"line", [0]);
  var opresult2548 = callmethod(call2545, "==", [1], call2546);
  if (Grace_isTrue(opresult2548)) {
  lineNumber = 1623
  lineNumber = 1625
  lineNumber = 1
  lineNumber = 1620
  var call2550 = callmethod(var_sym,"kind", [0]);
  var string2551 = new GraceString("rbrace");
  var opresult2553 = callmethod(call2550, "!=", [1], string2551);
  if (Grace_isTrue(opresult2553)) {
  lineNumber = 1623
  lineNumber = 1621
  var string2554 = new GraceString("unexpected token after statement ended; ");
  lineNumber = 1623
  lineNumber = 1622
  var string2555 = new GraceString("got ");
  lineNumber = 1623
  lineNumber = 1
  lineNumber = 1622
  var call2556 = callmethod(var_sym,"kind", [0]);
  var opresult2558 = callmethod(string2555, "++", [1], call2556);
  var string2559 = new GraceString(":'");
  var opresult2561 = callmethod(opresult2558, "++", [1], string2559);
  lineNumber = 1623
  lineNumber = 1
  lineNumber = 1622
  var call2562 = callmethod(var_sym,"value", [0]);
  var opresult2564 = callmethod(opresult2561, "++", [1], call2562);
  var string2565 = new GraceString("', expected ");
  var opresult2567 = callmethod(opresult2564, "++", [1], string2565);
  var opresult2569 = callmethod(string2554, "++", [1], opresult2567);
  lineNumber = 1623
  var string2570 = new GraceString("new line or semicolon");
  var opresult2572 = callmethod(opresult2569, "++", [1], string2570);
  lineNumber = 1621
  var call2573 = callmethod(var_util,"syntax_error", [1], opresult2572);
  var if2549 = call2573;
}
  var if2544 = if2549;
}
  var if2534 = if2544;
}
  return if2534
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["statement"] = func2460;
  lineNumber = 1678
var func2574 = function(argcv) {
  var curarg = 1;
  var var_toks = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1632
  var string2575 = new GraceString("processing tokens.");
  var call2576 = callmethod(var_util,"log_verbose", [1], string2575);
  lineNumber = 1634
  lineNumber = 1633
  var var_otoks = var_toks;
  lineNumber = 1636
  lineNumber = 1637
  lineNumber = 1
  lineNumber = 1634
  var call2578 = callmethod(var_toks,"size", [0]);
  var opresult2580 = callmethod(call2578, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult2580)) {
  lineNumber = 1636
  lineNumber = 1635
  return var_toks
  var if2577 = undefined;
}
  lineNumber = 1638
  lineNumber = 1
  lineNumber = 1637
  var call2581 = callmethod(var_toks,"first", [0]);
  var_sym = call2581;
  lineNumber = 1639
  var array2582 = new GraceList([
]);

  var_tokens = array2582;
  lineNumber = 1641
  lineNumber = 1639
  lineNumber = 1
  lineNumber = 1639
  var call2583 = callmethod(var_otoks,"indices", [0]);
  lineNumber = 1641
  var block2584 = Grace_allocObject();
  block2584.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2584.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2584.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2584.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2584.receiver = this;
  block2584.className = 'block<parser:1641>';
  block2584.real = function(
var_i
) {
  lineNumber = 1
  lineNumber = 1640
  var call2585 = callmethod(var_otoks,"pop", [0]);
  var var_o = call2585;
  lineNumber = 1641
  var call2586 = callmethod(var_tokens,"push", [1], var_o);
  return call2586;
};
  var call2587 = callmethod(Grace_prelude,"for()do", [1, 1], call2583, block2584);
  lineNumber = 1643
  var string2588 = new GraceString("parsing.");
  var call2589 = callmethod(var_util,"log_verbose", [1], string2588);
  lineNumber = 1645
  lineNumber = 1644
  var_linenum = new GraceNum(1);
  lineNumber = 1645
  var call2590 = callmethod(this,"next", [0]);
  lineNumber = 1647
  lineNumber = 1
  lineNumber = 1646
  var call2591 = callmethod(var_tokens,"size", [0]);
  var opresult2593 = callmethod(call2591, "+", [1], new GraceNum(0));
  var var_oldlength = opresult2593;
  lineNumber = 1649
  lineNumber = 1651
  lineNumber = 1
  lineNumber = 1647
  var call2595 = callmethod(var_tokens,"size", [0]);
  var opresult2597 = callmethod(call2595, "==", [1], new GraceNum(0));
  if (Grace_isTrue(opresult2597)) {
  lineNumber = 1649
  var call2598 = callmethod(this,"statement", [0]);
  var if2594 = call2598;
}
  lineNumber = 1677
  lineNumber = 1651
  var block2599 = Grace_allocObject();
  block2599.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2599.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2599.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2599.receiver = this;
  block2599.className = 'block<parser:1651>';
  block2599.real = function(
) {
  lineNumber = 1
  lineNumber = 1651
  var call2600 = callmethod(var_tokens,"size", [0]);
  var opresult2602 = callmethod(call2600, ">", [1], new GraceNum(0));
  return opresult2602;
};
  lineNumber = 1677
  var block2603 = Grace_allocObject();
  block2603.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2603.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2603.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2603.receiver = this;
  block2603.className = 'block<parser:1677>';
  block2603.real = function(
) {
  lineNumber = 1652
  var call2604 = callmethod(this,"methoddec", [0]);
  lineNumber = 1653
  var call2605 = callmethod(this,"inheritsdec", [0]);
  lineNumber = 1654
  var call2606 = callmethod(this,"statement", [0]);
  lineNumber = 1674
  lineNumber = 1676
  lineNumber = 1
  lineNumber = 1655
  var call2608 = callmethod(var_tokens,"size", [0]);
  var opresult2610 = callmethod(call2608, "==", [1], var_oldlength);
  if (Grace_isTrue(opresult2610)) {
  lineNumber = 1657
  lineNumber = 1656
  var string2611 = new GraceString("");
  var var_nxtToks = string2611;
  lineNumber = 1661
  lineNumber = 1657
  var opresult2613 = callmethod(new GraceNum(0), "..", [1], new GraceNum(5));
  lineNumber = 1661
  var block2614 = Grace_allocObject();
  block2614.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2614.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2614.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2614.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2614.receiver = this;
  block2614.className = 'block<parser:1661>';
  block2614.real = function(
var_i
) {
  lineNumber = 1662
  lineNumber = 1658
  lineNumber = 1662
  lineNumber = 1
  lineNumber = 1658
  var call2616 = callmethod(var_tokens,"size", [0]);
  var opresult2618 = callmethod(var_i, "<", [1], call2616);
  if (Grace_isTrue(opresult2618)) {
  lineNumber = 1659
  lineNumber = 1
  lineNumber = 1659
  var call2619 = callmethod(var_tokens,"size", [0]);
  var diff2621 = callmethod(call2619, "-", [1], var_i);
  var call2622 = callmethod(var_tokens,"at", [1], diff2621);
  var var_t = call2622;
  lineNumber = 1661
  lineNumber = 1660
  lineNumber = 1661
  lineNumber = 1
  lineNumber = 1660
  var call2623 = callmethod(var_t,"kind", [0]);
  var opresult2625 = callmethod(var_nxtToks, "++", [1], call2623);
  var string2626 = new GraceString(": ");
  var opresult2628 = callmethod(opresult2625, "++", [1], string2626);
  lineNumber = 1661
  lineNumber = 1
  lineNumber = 1660
  var call2629 = callmethod(var_t,"value", [0]);
  var opresult2631 = callmethod(opresult2628, "++", [1], call2629);
  var string2632 = new GraceString(", ");
  var opresult2634 = callmethod(opresult2631, "++", [1], string2632);
  var_nxtToks = opresult2634;
  var if2615 = opresult2634;
}
  return if2615;
};
  var call2635 = callmethod(Grace_prelude,"for()do", [1, 1], opresult2613, block2614);
  lineNumber = 1664
  lineNumber = 1663
  var string2636 = new GraceString("");
  var var_lstAST = string2636;
  lineNumber = 1669
  lineNumber = 1664
  var opresult2638 = callmethod(new GraceNum(0), "..", [1], new GraceNum(1));
  lineNumber = 1669
  var block2639 = Grace_allocObject();
  block2639.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2639.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2639.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2639.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2639.receiver = this;
  block2639.className = 'block<parser:1669>';
  block2639.real = function(
var_i
) {
  lineNumber = 1671
  lineNumber = 1
  lineNumber = 1665
  var call2641 = callmethod(var_values,"size", [0]);
  var opresult2643 = callmethod(call2641, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult2643)) {
  lineNumber = 1667
  lineNumber = 1
  lineNumber = 1666
  var call2644 = callmethod(var_values,"pop", [0]);
  var var_t = call2644;
  lineNumber = 1667
  lineNumber = 1
  lineNumber = 1667
  var call2645 = callmethod(var_t,"kind", [0]);
  var call2646 = Grace_print(call2645);
  lineNumber = 1668
  var call2647 = callmethod(var_t,"pretty", [1], new GraceNum(2));
  var call2648 = Grace_print(call2647);
  lineNumber = 1669
  var call2649 = callmethod(var_t,"pretty", [1], new GraceNum(1));
  var string2650 = new GraceString("\n");
  var opresult2652 = callmethod(call2649, "++", [1], string2650);
  var opresult2654 = callmethod(opresult2652, "++", [1], var_lstAST);
  var_lstAST = opresult2654;
  var if2640 = opresult2654;
}
  return if2640;
};
  var call2655 = callmethod(Grace_prelude,"for()do", [1, 1], opresult2638, block2639);
  lineNumber = 1674
  lineNumber = 1672
  var string2656 = new GraceString("No token consumed. Have ");
  lineNumber = 1674
  lineNumber = 1
  lineNumber = 1672
  var call2657 = callmethod(var_sym,"kind", [0]);
  var opresult2659 = callmethod(string2656, "++", [1], call2657);
  lineNumber = 1673
  var string2660 = new GraceString(": ");
  var opresult2662 = callmethod(opresult2659, "++", [1], string2660);
  lineNumber = 1674
  lineNumber = 1
  lineNumber = 1673
  var call2663 = callmethod(var_sym,"value", [0]);
  var opresult2665 = callmethod(opresult2662, "++", [1], call2663);
  var string2666 = new GraceString(". Recent AST:\n");
  var opresult2668 = callmethod(opresult2665, "++", [1], string2666);
  lineNumber = 1674
  var opresult2670 = callmethod(opresult2668, "++", [1], var_lstAST);
  var string2671 = new GraceString("\nNext tokens: ");
  var opresult2673 = callmethod(opresult2670, "++", [1], string2671);
  var opresult2675 = callmethod(opresult2673, "++", [1], var_nxtToks);
  lineNumber = 1672
  var call2676 = callmethod(var_util,"syntax_error", [1], opresult2675);
  var if2607 = call2676;
}
  lineNumber = 1677
  lineNumber = 1
  lineNumber = 1676
  var call2677 = callmethod(var_tokens,"size", [0]);
  var opresult2679 = callmethod(call2677, "+", [1], new GraceNum(0));
  var_oldlength = opresult2679;
  return opresult2679;
};
  var call2680 = callmethod(Grace_prelude,"while()do", [1, 1], block2599, block2603);
  lineNumber = 1678
  return var_values
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["parse"] = func2574;
  return this;
}
function gracecode_StandardPrelude() {
var Grace_prelude = window.Grace_native_prelude;
  lineNumber = 1
  this.superobj = var___95__prelude;
  this.data = var___95__prelude.data;
  this._value = var___95__prelude._value;
  lineNumber = 2
  lineNumber = 4
  lineNumber = 2
  var bool0 = new GraceBoolean(true)
  var var_isStandardPrelude = bool0;
  lineNumber = 1
var func1 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 2
  return var_isStandardPrelude
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["isStandardPrelude"] = func1;
  lineNumber = 4
  lineNumber = 1
var func2 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 4
  return var_SuccessfulMatch
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["SuccessfulMatch"] = func2;
  lineNumber = 1
  var obj3 = Grace_allocObject();
  obj3.outer = this;
    var reader_StandardPrelude_outer4 = function() {
    return this.outer;
  }
  obj3.methods["outer"] = reader_StandardPrelude_outer4;
function obj_init_3() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func5 = function(argcv) {
  var curarg = 1;
  var var_result__39__ = arguments[curarg];
  curarg++;
  var var_bindings__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 5
  var bool7 = new GraceBoolean(true)
  var obj6 = Grace_allocObject();
  obj6.superobj = bool7;
  if (bool7.data)
    obj6.data = bool7.data;
  obj6._value = bool7._value;
  obj6.outer = this;
    var reader_StandardPrelude_outer8 = function() {
    return this.outer;
  }
  obj6.methods["outer"] = reader_StandardPrelude_outer8;
function obj_init_6() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 6
  obj6.data["result"] = var_result__39__;
    var reader_StandardPrelude_result9 = function() {
    return this.data["result"];
  }
  reader_StandardPrelude_result9.def = true;
  obj6.methods["result"] = reader_StandardPrelude_result9;
  lineNumber = 7
  obj6.data["bindings"] = var_bindings__39__;
    var reader_StandardPrelude_bindings10 = function() {
    return this.data["bindings"];
  }
  reader_StandardPrelude_bindings10.def = true;
  obj6.methods["bindings"] = reader_StandardPrelude_bindings10;
var func11 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 9
  var string12 = new GraceString("SuccessfulMatch(result = ");
  var call13 = callmethod(this,"result", [0]);
  var opresult15 = callmethod(string12, "++", [1], call13);
  var string16 = new GraceString(", bindings = ");
  var opresult18 = callmethod(opresult15, "++", [1], string16);
  var call19 = callmethod(this,"bindings", [0]);
  var opresult21 = callmethod(opresult18, "++", [1], call19);
  var string22 = new GraceString(")");
  var opresult24 = callmethod(opresult21, "++", [1], string22);
  return opresult24
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj6.methods["asString"] = func11;
  superDepth = origSuperDepth;
}
obj_init_6.apply(obj6, []);
  return obj6
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj3.methods["new"] = func5;
  superDepth = origSuperDepth;
}
obj_init_3.apply(obj3, []);
  var var_SuccessfulMatch = obj3;
  lineNumber = 13
  lineNumber = 1
var func25 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 13
  return var_FailedMatch
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["FailedMatch"] = func25;
  lineNumber = 1
  var obj26 = Grace_allocObject();
  obj26.outer = this;
    var reader_StandardPrelude_outer27 = function() {
    return this.outer;
  }
  obj26.methods["outer"] = reader_StandardPrelude_outer27;
function obj_init_26() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func28 = function(argcv) {
  var curarg = 1;
  var var_result__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 14
  var bool30 = new GraceBoolean(false)
  var obj29 = Grace_allocObject();
  obj29.superobj = bool30;
  if (bool30.data)
    obj29.data = bool30.data;
  obj29._value = bool30._value;
  obj29.outer = this;
    var reader_StandardPrelude_outer31 = function() {
    return this.outer;
  }
  obj29.methods["outer"] = reader_StandardPrelude_outer31;
function obj_init_29() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 15
  obj29.data["result"] = var_result__39__;
    var reader_StandardPrelude_result32 = function() {
    return this.data["result"];
  }
  reader_StandardPrelude_result32.def = true;
  obj29.methods["result"] = reader_StandardPrelude_result32;
  lineNumber = 17
  var array33 = new GraceList([
]);

  obj29.data["bindings"] = array33;
    var reader_StandardPrelude_bindings34 = function() {
    return this.data["bindings"];
  }
  reader_StandardPrelude_bindings34.def = true;
  obj29.methods["bindings"] = reader_StandardPrelude_bindings34;
var func35 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 18
  var string36 = new GraceString("FailedMatch(result = ");
  var call37 = callmethod(this,"result", [0]);
  var opresult39 = callmethod(string36, "++", [1], call37);
  var string40 = new GraceString(")");
  var opresult42 = callmethod(opresult39, "++", [1], string40);
  return opresult42
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj29.methods["asString"] = func35;
  superDepth = origSuperDepth;
}
obj_init_29.apply(obj29, []);
  return obj29
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj26.methods["new"] = func28;
  superDepth = origSuperDepth;
}
obj_init_26.apply(obj26, []);
  var var_FailedMatch = obj26;
  lineNumber = 26
var var_Extractable = new GraceType("Extractable");
var_Extractable.typeMethods.push("extract");
var type_Extractable = var_Extractable;
  lineNumber = 1
var func44 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 26
  return var_MatchAndDestructuringPattern
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["MatchAndDestructuringPattern"] = func44;
  lineNumber = 1
  var obj45 = Grace_allocObject();
  obj45.outer = this;
    var reader_StandardPrelude_outer46 = function() {
    return this.outer;
  }
  obj45.methods["outer"] = reader_StandardPrelude_outer46;
function obj_init_45() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func47 = function(argcv) {
  var curarg = 1;
  var var_pat = arguments[curarg];
  curarg++;
  var var_items__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj48 = Grace_allocObject();
  obj48.outer = this;
    var reader_StandardPrelude_outer49 = function() {
    return this.outer;
  }
  obj48.methods["outer"] = reader_StandardPrelude_outer49;
function obj_init_48() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 27
  obj48.data["pattern"] = var_pat;
    var reader_StandardPrelude_pattern50 = function() {
    return this.data["pattern"];
  }
  reader_StandardPrelude_pattern50.def = true;
  obj48.methods["pattern"] = reader_StandardPrelude_pattern50;
  lineNumber = 28
  obj48.data["items"] = var_items__39__;
    var reader_StandardPrelude_items51 = function() {
    return this.data["items"];
  }
  reader_StandardPrelude_items51.def = true;
  obj48.methods["items"] = reader_StandardPrelude_items51;
var func52 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 30
  var call53 = callmethod(var_pat,"match", [1], var_o);
  var var_m = call53;
  lineNumber = 52
  lineNumber = 31
  if (Grace_isTrue(var_m)) {
  lineNumber = 33
  lineNumber = 1
  lineNumber = 32
  var call55 = callmethod(var_m,"bindings", [0]);
  var var_mbindings = call55;
  lineNumber = 34
  var array56 = new GraceList([
]);

  var var_bindings = array56;
  lineNumber = 38
  lineNumber = 41
  lineNumber = 1
  lineNumber = 34
  var call58 = callmethod(var_mbindings,"size", [0]);
  lineNumber = 41
  lineNumber = 1
  lineNumber = 41
  var call59 = callmethod(this,"items", [0]);
  var call60 = callmethod(call59,"size", [0]);
  var opresult62 = callmethod(call58, "<", [1], call60);
  if (Grace_isTrue(opresult62)) {
  lineNumber = 38
  lineNumber = 35
  var call64 = callmethod(var_Extractable,"match", [1], var_o);
  if (Grace_isTrue(call64)) {
  lineNumber = 37
  lineNumber = 1
  lineNumber = 36
  var call65 = callmethod(var_o,"extract", [0]);
  var_mbindings = call65;
  var if63 = call65;
  } else {
  lineNumber = 38
  var call66 = callmethod(var_FailedMatch,"new", [1], var_o);
  return call66
  var if63 = undefined;
}
  var if57 = if63;
}
  lineNumber = 47
  lineNumber = 41
  lineNumber = 1
  lineNumber = 41
  var call67 = callmethod(this,"items", [0]);
  var call68 = callmethod(call67,"indices", [0]);
  lineNumber = 47
  var block69 = Grace_allocObject();
  block69.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block69.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block69.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block69.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block69.receiver = this;
  block69.className = 'block<StandardPrelude:47>';
  block69.real = function(
var_i
) {
  lineNumber = 42
  var idxres70 = var_mbindings.methods["[]"].call(var_mbindings, [1], var_i);
  lineNumber = 43
  var call71 = callmethod(this,"items", [0]);
  lineNumber = 42
  var idxres72 = call71.methods["[]"].call(call71, [1], var_i);
  var call73 = callmethod(idxres72,"match", [1], idxres70);
  var var_b = call73;
  lineNumber = 44
  lineNumber = 46
  lineNumber = 43
  var call75 = callmethod(var_b,"prefix!", [0]);
  if (Grace_isTrue(call75)) {
  lineNumber = 44
  var call76 = callmethod(var_FailedMatch,"new", [1], var_o);
  throw new ReturnException(call76, returnTarget);
  var if74 = undefined;
}
  lineNumber = 47
  lineNumber = 46
  lineNumber = 1
  lineNumber = 46
  var call77 = callmethod(var_b,"bindings", [0]);
  lineNumber = 47
  var block78 = Grace_allocObject();
  block78.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block78.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block78.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block78.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block78.receiver = this;
  block78.className = 'block<StandardPrelude:47>';
  block78.real = function(
var_bb
) {
  var call79 = callmethod(var_bindings,"push", [1], var_bb);
  return call79;
};
  var call80 = callmethod(Grace_prelude,"for()do", [1, 1], call77, block78);
  return call80;
};
  var call81 = callmethod(Grace_prelude,"for()do", [1, 1], call68, block69);
  lineNumber = 50
  var call82 = callmethod(var_SuccessfulMatch,"new", [2], var_o, var_bindings);
  var if54 = call82;
  } else {
  lineNumber = 52
  var call83 = callmethod(var_FailedMatch,"new", [1], var_o);
  var if54 = call83;
}
  return if54
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj48.methods["match"] = func52;
  superDepth = origSuperDepth;
}
obj_init_48.apply(obj48, []);
  return obj48
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj45.methods["new"] = func47;
  superDepth = origSuperDepth;
}
obj_init_45.apply(obj45, []);
  var var_MatchAndDestructuringPattern = obj45;
  lineNumber = 57
  lineNumber = 1
var func84 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 57
  return var_VariablePattern
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["VariablePattern"] = func84;
  lineNumber = 1
  var obj85 = Grace_allocObject();
  obj85.outer = this;
    var reader_StandardPrelude_outer86 = function() {
    return this.outer;
  }
  obj85.methods["outer"] = reader_StandardPrelude_outer86;
function obj_init_85() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func87 = function(argcv) {
  var curarg = 1;
  var var_nm = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj88 = Grace_allocObject();
  obj88.outer = this;
    var reader_StandardPrelude_outer89 = function() {
    return this.outer;
  }
  obj88.methods["outer"] = reader_StandardPrelude_outer89;
function obj_init_88() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func90 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 59
  var array91 = new GraceList([
var_o,
]);

  var call92 = callmethod(var_SuccessfulMatch,"new", [2], var_o, array91);
  return call92
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj88.methods["match"] = func90;
  superDepth = origSuperDepth;
}
obj_init_88.apply(obj88, []);
  return obj88
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj85.methods["new"] = func87;
  superDepth = origSuperDepth;
}
obj_init_85.apply(obj85, []);
  var var_VariablePattern = obj85;
  lineNumber = 63
  lineNumber = 1
var func93 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 63
  return var_BindingPattern
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["BindingPattern"] = func93;
  lineNumber = 1
  var obj94 = Grace_allocObject();
  obj94.outer = this;
    var reader_StandardPrelude_outer95 = function() {
    return this.outer;
  }
  obj94.methods["outer"] = reader_StandardPrelude_outer95;
function obj_init_94() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func96 = function(argcv) {
  var curarg = 1;
  var var_pat = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj97 = Grace_allocObject();
  obj97.outer = this;
    var reader_StandardPrelude_outer98 = function() {
    return this.outer;
  }
  obj97.methods["outer"] = reader_StandardPrelude_outer98;
function obj_init_97() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func99 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 65
  var array100 = new GraceList([
var_o,
]);

  var var_bindings = array100;
  lineNumber = 66
  var call101 = callmethod(var_pat,"match", [1], var_o);
  var var_m = call101;
  lineNumber = 69
  lineNumber = 70
  lineNumber = 67
  var call103 = callmethod(var_m,"prefix!", [0]);
  if (Grace_isTrue(call103)) {
  lineNumber = 69
  lineNumber = 68
  return var_m
  var if102 = undefined;
}
  lineNumber = 71
  lineNumber = 70
  lineNumber = 1
  lineNumber = 70
  var call104 = callmethod(var_m,"bindings", [0]);
  lineNumber = 71
  var block105 = Grace_allocObject();
  block105.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block105.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block105.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block105.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block105.receiver = this;
  block105.className = 'block<StandardPrelude:71>';
  block105.real = function(
var_b
) {
  var call106 = callmethod(var_bindings,"push", [1], var_b);
  return call106;
};
  var call107 = callmethod(Grace_prelude,"for()do", [1, 1], call104, block105);
  lineNumber = 73
  var call108 = callmethod(var_SuccessfulMatch,"new", [2], var_o, var_bindings);
  return call108
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj97.methods["match"] = func99;
  superDepth = origSuperDepth;
}
obj_init_97.apply(obj97, []);
  return obj97
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj94.methods["new"] = func96;
  superDepth = origSuperDepth;
}
obj_init_94.apply(obj94, []);
  var var_BindingPattern = obj94;
  lineNumber = 79
  lineNumber = 1
var func109 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 77
  return var_WildcardPattern
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["WildcardPattern"] = func109;
  lineNumber = 1
  var obj110 = Grace_allocObject();
  obj110.outer = this;
    var reader_StandardPrelude_outer111 = function() {
    return this.outer;
  }
  obj110.methods["outer"] = reader_StandardPrelude_outer111;
function obj_init_110() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func112 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj113 = Grace_allocObject();
  obj113.outer = this;
    var reader_StandardPrelude_outer114 = function() {
    return this.outer;
  }
  obj113.methods["outer"] = reader_StandardPrelude_outer114;
function obj_init_113() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func115 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 79
  var array116 = new GraceList([
]);

  var call117 = callmethod(var_SuccessfulMatch,"new", [2], var_nothing, array116);
  return call117
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj113.methods["match"] = func115;
  superDepth = origSuperDepth;
}
obj_init_113.apply(obj113, []);
  return obj113
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj110.methods["new"] = func112;
  superDepth = origSuperDepth;
}
obj_init_110.apply(obj110, []);
  var var_WildcardPattern = obj110;
  lineNumber = 83
  lineNumber = 1
var func118 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 83
  return var_AndPattern
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["AndPattern"] = func118;
  lineNumber = 1
  var obj119 = Grace_allocObject();
  obj119.outer = this;
    var reader_StandardPrelude_outer120 = function() {
    return this.outer;
  }
  obj119.methods["outer"] = reader_StandardPrelude_outer120;
function obj_init_119() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func121 = function(argcv) {
  var curarg = 1;
  var var_p1 = arguments[curarg];
  curarg++;
  var var_p2 = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj122 = Grace_allocObject();
  obj122.outer = this;
    var reader_StandardPrelude_outer123 = function() {
    return this.outer;
  }
  obj122.methods["outer"] = reader_StandardPrelude_outer123;
function obj_init_122() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func124 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 85
  var call125 = callmethod(var_p1,"match", [1], var_o);
  var var_m1 = call125;
  lineNumber = 88
  lineNumber = 89
  lineNumber = 86
  var call127 = callmethod(var_m1,"prefix!", [0]);
  if (Grace_isTrue(call127)) {
  lineNumber = 88
  lineNumber = 87
  return var_m1
  var if126 = undefined;
}
  lineNumber = 89
  var call128 = callmethod(var_p2,"match", [1], var_o);
  var var_m2 = call128;
  lineNumber = 92
  lineNumber = 93
  lineNumber = 90
  var call130 = callmethod(var_m2,"prefix!", [0]);
  if (Grace_isTrue(call130)) {
  lineNumber = 92
  lineNumber = 91
  return var_m2
  var if129 = undefined;
}
  lineNumber = 94
  var array131 = new GraceList([
]);

  var var_bindings = array131;
  lineNumber = 95
  lineNumber = 94
  lineNumber = 1
  lineNumber = 94
  var call132 = callmethod(var_m1,"bindings", [0]);
  lineNumber = 95
  var block133 = Grace_allocObject();
  block133.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block133.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block133.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block133.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block133.receiver = this;
  block133.className = 'block<StandardPrelude:95>';
  block133.real = function(
var_b
) {
  var call134 = callmethod(var_bindings,"push", [1], var_b);
  return call134;
};
  var call135 = callmethod(Grace_prelude,"for()do", [1, 1], call132, block133);
  lineNumber = 98
  lineNumber = 97
  lineNumber = 1
  lineNumber = 97
  var call136 = callmethod(var_m2,"bindings", [0]);
  lineNumber = 98
  var block137 = Grace_allocObject();
  block137.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block137.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block137.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block137.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block137.receiver = this;
  block137.className = 'block<StandardPrelude:98>';
  block137.real = function(
var_b
) {
  var call138 = callmethod(var_bindings,"push", [1], var_b);
  return call138;
};
  var call139 = callmethod(Grace_prelude,"for()do", [1, 1], call136, block137);
  lineNumber = 100
  var call140 = callmethod(var_SuccessfulMatch,"new", [2], var_o, var_bindings);
  return call140
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj122.methods["match"] = func124;
  superDepth = origSuperDepth;
}
obj_init_122.apply(obj122, []);
  return obj122
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj119.methods["new"] = func121;
  superDepth = origSuperDepth;
}
obj_init_119.apply(obj119, []);
  var var_AndPattern = obj119;
  lineNumber = 104
  lineNumber = 1
var func141 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 104
  return var_OrPattern
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["OrPattern"] = func141;
  lineNumber = 1
  var obj142 = Grace_allocObject();
  obj142.outer = this;
    var reader_StandardPrelude_outer143 = function() {
    return this.outer;
  }
  obj142.methods["outer"] = reader_StandardPrelude_outer143;
function obj_init_142() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func144 = function(argcv) {
  var curarg = 1;
  var var_p1 = arguments[curarg];
  curarg++;
  var var_p2 = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj145 = Grace_allocObject();
  obj145.outer = this;
    var reader_StandardPrelude_outer146 = function() {
    return this.outer;
  }
  obj145.methods["outer"] = reader_StandardPrelude_outer146;
function obj_init_145() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func147 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 107
  lineNumber = 106
  var call149 = callmethod(var_p1,"match", [1], var_o);
  if (Grace_isTrue(call149)) {
  lineNumber = 107
  var array150 = new GraceList([
]);

  var call151 = callmethod(var_SuccessfulMatch,"new", [2], var_o, array150);
  return call151
  var if148 = undefined;
}
  lineNumber = 110
  lineNumber = 109
  var call153 = callmethod(var_p2,"match", [1], var_o);
  if (Grace_isTrue(call153)) {
  lineNumber = 110
  var array154 = new GraceList([
]);

  var call155 = callmethod(var_SuccessfulMatch,"new", [2], var_o, array154);
  return call155
  var if152 = undefined;
}
  lineNumber = 112
  var call156 = callmethod(var_FailedMatch,"new", [1], var_o);
  return call156
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj145.methods["match"] = func147;
  superDepth = origSuperDepth;
}
obj_init_145.apply(obj145, []);
  return obj145
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj142.methods["new"] = func144;
  superDepth = origSuperDepth;
}
obj_init_142.apply(obj142, []);
  var var_OrPattern = obj142;
  return this;
}
Grace_prelude = do_import('StandardPrelude', gracecode_StandardPrelude);
function gracecode_subtype() {
  lineNumber = 4
// Import of util
  var var_util = do_import("util", gracecode_util);
  lineNumber = 5
  var array0 = new GraceList([
]);

  var var_types = array0;
  lineNumber = 1
var func1 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 4
  return var_types
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["types"] = func1;
  lineNumber = 6
  lineNumber = 1
  lineNumber = 5
  var call2 = callmethod(var_HashMap,"new", [0]);
  var var_typesToId = call2;
  lineNumber = 1
var func3 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 5
  return var_typesToId
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["typesToId"] = func3;
  lineNumber = 7
  lineNumber = 1
  lineNumber = 6
  var call4 = callmethod(var_HashMap,"new", [0]);
  var var_matrix = call4;
  lineNumber = 1
var func5 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 6
  return var_matrix
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["matrix"] = func5;
  lineNumber = 8
  var var_DynamicType;
  lineNumber = 1
var func6 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 7
  return var_DynamicType
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["DynamicType"] = func6;
  lineNumber = 1
var func7 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_DynamicType = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["DynamicType:="] = func7;
  lineNumber = 10
  lineNumber = 8
  var bool8 = new GraceBoolean(true)
  var var_modified = bool8;
  lineNumber = 1
var func9 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 8
  return var_modified
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modified"] = func9;
  lineNumber = 1
var func10 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_modified = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["modified:="] = func10;
  lineNumber = 22
var func11 = function(argcv) {
  var curarg = 1;
  var var_t = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 12
  lineNumber = 1
  lineNumber = 11
  var call12 = callmethod(var_t,"value", [0]);
  var var_s = call12;
  lineNumber = 14
  lineNumber = 15
  lineNumber = 1
  lineNumber = 12
  var call14 = callmethod(var_t,"kind", [0]);
  var string15 = new GraceString("identifier");
  var opresult17 = callmethod(call14, "==", [1], string15);
  if (Grace_isTrue(opresult17)) {
  lineNumber = 14
  lineNumber = 13
  return var_s
  var if13 = undefined;
}
  lineNumber = 20
  lineNumber = 22
  lineNumber = 1
  lineNumber = 22
  lineNumber = 1
  lineNumber = 15
  var call19 = callmethod(var_t,"generics", [0]);
  var call20 = callmethod(call19,"size", [0]);
  var opresult22 = callmethod(call20, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult22)) {
  lineNumber = 17
  var array23 = new GraceList([
]);

  var var_joinees = array23;
  lineNumber = 18
  lineNumber = 17
  lineNumber = 1
  lineNumber = 17
  var call24 = callmethod(var_t,"generics", [0]);
  lineNumber = 18
  var block25 = Grace_allocObject();
  block25.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block25.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block25.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block25.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block25.receiver = this;
  block25.className = 'block<subtype:18>';
  block25.real = function(
var_g
) {
  var call26 = callmethod(this,"stringifyType", [1], var_g);
  var call27 = callmethod(var_joinees,"push", [1], call26);
  return call27;
};
  var call28 = callmethod(Grace_prelude,"for()do", [1, 1], call24, block25);
  lineNumber = 20
  lineNumber = 21
  lineNumber = 20
  var string29 = new GraceString("<");
  var opresult31 = callmethod(var_s, "++", [1], string29);
  var string32 = new GraceString(",");
  var call33 = callmethod(var_util,"join", [2], string32, var_joinees);
  var opresult35 = callmethod(opresult31, "++", [1], call33);
  var string36 = new GraceString(">");
  var opresult38 = callmethod(opresult35, "++", [1], string36);
  var_s = opresult38;
  var if18 = opresult38;
}
  lineNumber = 22
  return var_s
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["stringifyType"] = func11;
  lineNumber = 32
var func39 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 26
  lineNumber = 32
  var block40 = Grace_allocObject();
  block40.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block40.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block40.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block40.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block40.receiver = this;
  block40.className = 'block<subtype:32>';
  block40.real = function(
var_t
) {
  lineNumber = 28
  lineNumber = 1
  lineNumber = 27
  var call41 = callmethod(var_HashMap,"new", [0]);
  var var_inner = call41;
  lineNumber = 28
  lineNumber = 29
  var call42 = callmethod(this,"stringifyType", [1], var_t);
  var var_d = call42;
  lineNumber = 30
  lineNumber = 29
  lineNumber = 30
  var block43 = Grace_allocObject();
  block43.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block43.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block43.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block43.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block43.receiver = this;
  block43.className = 'block<subtype:30>';
  block43.real = function(
var_t2
) {
  var call44 = callmethod(this,"stringifyType", [1], var_t2);
  var bool45 = new GraceBoolean(true)
  var call46 = callmethod(var_inner,"put", [2], call44, bool45);
  return call46;
};
  var call47 = callmethod(Grace_prelude,"for()do", [1, 1], var_types, block43);
  lineNumber = 32
  var call48 = callmethod(var_matrix,"put", [2], var_d, var_inner);
  return call48;
};
  var call49 = callmethod(Grace_prelude,"for()do", [1, 1], var_types, block40);
  return call49
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["resetMatrix"] = func39;
  lineNumber = 56
var func50 = function(argcv) {
  var curarg = 1;
  var var_t = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 37
  lineNumber = 38
  var call51 = callmethod(this,"stringifyType", [1], var_t);
  var var_d = call51;
  lineNumber = 40
  lineNumber = 38
  var call53 = callmethod(var_matrix,"contains", [1], var_d);
  if (Grace_isTrue(call53)) {
  lineNumber = 40
  lineNumber = 39
  var bool54 = new GraceBoolean(false)
  return bool54
  var if52 = undefined;
}
  lineNumber = 43
  lineNumber = 44
  lineNumber = 41
  var string56 = new GraceString("Dynamic");
  var opresult58 = callmethod(var_d, "==", [1], string56);
  if (Grace_isTrue(opresult58)) {
  lineNumber = 43
  lineNumber = 42
  var_DynamicType = var_t;
  var if55 = var_t;
}
  lineNumber = 44
  lineNumber = 1
  lineNumber = 44
  var call59 = callmethod(var_types,"size", [0]);
  var call60 = callmethod(var_typesToId,"put", [2], var_d, call59);
  lineNumber = 45
  var call61 = callmethod(var_types,"push", [1], var_t);
  lineNumber = 47
  lineNumber = 1
  lineNumber = 46
  var call62 = callmethod(var_HashMap,"new", [0]);
  var var_inner = call62;
  lineNumber = 51
  lineNumber = 47
  lineNumber = 51
  var block63 = Grace_allocObject();
  block63.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block63.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block63.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block63.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block63.receiver = this;
  block63.className = 'block<subtype:51>';
  block63.real = function(
var_t2
) {
  lineNumber = 48
  lineNumber = 49
  var call64 = callmethod(this,"stringifyType", [1], var_t2);
  var var_d2 = call64;
  var bool65 = new GraceBoolean(true)
  var call66 = callmethod(var_inner,"put", [2], var_d2, bool65);
  lineNumber = 51
  lineNumber = 53
  lineNumber = 50
  var opresult69 = callmethod(var_t2, "/=", [1], var_t);
  if (Grace_isTrue(opresult69)) {
  lineNumber = 51
  var bool70 = new GraceBoolean(true)
  var call71 = callmethod(var_matrix,"get", [1], var_d2);
  var call72 = callmethod(call71,"put", [2], var_d, bool70);
  var if67 = call72;
}
  return if67;
};
  var call73 = callmethod(Grace_prelude,"for()do", [1, 1], var_types, block63);
  lineNumber = 54
  var call74 = callmethod(var_matrix,"put", [2], var_d, var_inner);
  lineNumber = 56
  lineNumber = 55
  var bool75 = new GraceBoolean(true)
  var_modified = bool75;
  lineNumber = 56
  var bool76 = new GraceBoolean(true)
  return bool76
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["addType"] = func50;
  lineNumber = 86
var func77 = function(argcv) {
  var curarg = 1;
  var var_t = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 60
  lineNumber = 61
  var call78 = callmethod(this,"stringifyType", [1], var_t);
  var var_d = call78;
  lineNumber = 62
  lineNumber = 61
  lineNumber = 1
  lineNumber = 61
  var call80 = callmethod(var_matrix,"contains", [1], var_d);
  var call81 = callmethod(call80,"not", [0]);
  if (Grace_isTrue(call81)) {
  lineNumber = 62
  lineNumber = 63
  var call82 = callmethod(this,"addType", [1], var_t);
  return call82
  var if79 = undefined;
}
  lineNumber = 65
  lineNumber = 1
  lineNumber = 64
  var call83 = callmethod(var_HashMap,"new", [0]);
  var var_inner = call83;
  lineNumber = 79
  lineNumber = 65
  lineNumber = 79
  var block84 = Grace_allocObject();
  block84.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block84.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block84.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block84.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block84.receiver = this;
  block84.className = 'block<subtype:79>';
  block84.real = function(
var_t2
) {
  lineNumber = 66
  lineNumber = 67
  var call85 = callmethod(this,"stringifyType", [1], var_t2);
  var var_d2 = call85;
  var bool86 = new GraceBoolean(true)
  var call87 = callmethod(var_inner,"put", [2], var_d2, bool86);
  lineNumber = 68
  var bool88 = new GraceBoolean(true)
  var call89 = callmethod(var_matrix,"get", [1], var_d2);
  var call90 = callmethod(call89,"put", [2], var_d, bool88);
  lineNumber = 79
  lineNumber = 83
  lineNumber = 69
  var opresult93 = callmethod(var_d2, "==", [1], var_d);
  if (Grace_isTrue(opresult93)) {
  lineNumber = 79
  lineNumber = 70
  lineNumber = 1
  lineNumber = 70
  var call94 = callmethod(var_t,"methods", [0]);
  lineNumber = 79
  var block95 = Grace_allocObject();
  block95.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block95.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block95.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block95.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block95.receiver = this;
  block95.className = 'block<subtype:79>';
  block95.real = function(
var_tm
) {
  lineNumber = 73
  lineNumber = 72
  var bool96 = new GraceBoolean(false)
  var var_found = bool96;
  lineNumber = 76
  lineNumber = 73
  lineNumber = 1
  lineNumber = 73
  var call97 = callmethod(var_t2,"methods", [0]);
  lineNumber = 76
  var block98 = Grace_allocObject();
  block98.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block98.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block98.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block98.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block98.receiver = this;
  block98.className = 'block<subtype:76>';
  block98.real = function(
var_tm2
) {
  lineNumber = 77
  lineNumber = 1
  lineNumber = 74
  var call100 = callmethod(var_tm,"value", [0]);
  lineNumber = 77
  lineNumber = 1
  lineNumber = 74
  var call101 = callmethod(var_tm2,"value", [0]);
  var opresult103 = callmethod(call100, "==", [1], call101);
  if (Grace_isTrue(opresult103)) {
  lineNumber = 76
  lineNumber = 75
  var bool104 = new GraceBoolean(true)
  var_found = bool104;
  var if99 = bool104;
}
  return if99;
};
  var call105 = callmethod(Grace_prelude,"for()do", [1, 1], call97, block98);
  lineNumber = 79
  lineNumber = 81
  lineNumber = 78
  var call107 = callmethod(var_found,"prefix!", [0]);
  if (Grace_isTrue(call107)) {
  lineNumber = 79
  lineNumber = 80
  lineNumber = 1
  lineNumber = 79
  var call108 = callmethod(var_t2,"methods", [0]);
  var call109 = callmethod(call108,"push", [1], var_tm);
  var if106 = call109;
}
  return if106;
};
  var call110 = callmethod(Grace_prelude,"for()do", [1, 1], call94, block95);
  var if91 = call110;
}
  return if91;
};
  var call111 = callmethod(Grace_prelude,"for()do", [1, 1], var_types, block84);
  lineNumber = 84
  lineNumber = 1
  lineNumber = 84
  var call112 = callmethod(var_t,"value", [0]);
  var call113 = callmethod(var_matrix,"put", [2], call112, var_inner);
  lineNumber = 86
  lineNumber = 85
  var bool114 = new GraceBoolean(true)
  var_modified = bool114;
  lineNumber = 86
  var bool115 = new GraceBoolean(true)
  return bool115
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["resetType"] = func77;
  lineNumber = 93
var func116 = function(argcv) {
  var curarg = 1;
  var var_t = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 91
  lineNumber = 93
  lineNumber = 90
  var bool118 = new GraceBoolean(false)
  var opresult120 = callmethod(var_t, "==", [1], bool118);
  if (Grace_isTrue(opresult120)) {
  lineNumber = 91
  lineNumber = 92
  var call121 = callmethod(this,"typeId", [1], var_DynamicType);
  return call121
  var if117 = undefined;
}
  lineNumber = 93
  var call122 = callmethod(this,"stringifyType", [1], var_t);
  var call123 = callmethod(var_typesToId,"get", [1], call122);
  return call123
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["typeId"] = func116;
  lineNumber = 109
var func124 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 98
  lineNumber = 97
  if (Grace_isTrue(var_modified)) {
  lineNumber = 98
  var call126 = callmethod(this,"findSubtypes", [0]);
  var if125 = call126;
}
  lineNumber = 101
  var array127 = new GraceList([
]);

  var var_mtrx = array127;
  lineNumber = 107
  lineNumber = 101
  lineNumber = 107
  var block128 = Grace_allocObject();
  block128.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block128.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block128.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block128.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block128.receiver = this;
  block128.className = 'block<subtype:107>';
  block128.real = function(
var_t
) {
  lineNumber = 102
  var call129 = callmethod(this,"stringifyType", [1], var_t);
  var call130 = callmethod(var_matrix,"get", [1], call129);
  var var_row = call130;
  lineNumber = 104
  var array131 = new GraceList([
]);

  var var_inner = array131;
  lineNumber = 105
  lineNumber = 104
  lineNumber = 105
  var block132 = Grace_allocObject();
  block132.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block132.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block132.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block132.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block132.receiver = this;
  block132.className = 'block<subtype:105>';
  block132.real = function(
var_t2
) {
  var call133 = callmethod(this,"stringifyType", [1], var_t2);
  var call134 = callmethod(var_row,"get", [1], call133);
  var call135 = callmethod(var_inner,"push", [1], call134);
  return call135;
};
  var call136 = callmethod(Grace_prelude,"for()do", [1, 1], var_types, block132);
  lineNumber = 107
  var call137 = callmethod(var_mtrx,"push", [1], var_inner);
  return call137;
};
  var call138 = callmethod(Grace_prelude,"for()do", [1, 1], var_types, block128);
  lineNumber = 109
  return var_mtrx
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["boolMatrix"] = func124;
  lineNumber = 126
var func139 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 114
  lineNumber = 113
  if (Grace_isTrue(var_modified)) {
  lineNumber = 114
  var call141 = callmethod(this,"findSubtypes", [0]);
  var if140 = call141;
}
  lineNumber = 126
  lineNumber = 116
  lineNumber = 126
  var block142 = Grace_allocObject();
  block142.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block142.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block142.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block142.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block142.receiver = this;
  block142.className = 'block<subtype:126>';
  block142.real = function(
var_t
) {
  lineNumber = 117
  lineNumber = 118
  var call143 = callmethod(this,"stringifyType", [1], var_t);
  var var_d = call143;
  var call144 = callmethod(var_matrix,"get", [1], var_d);
  var var_row = call144;
  lineNumber = 120
  lineNumber = 119
  var string145 = new GraceString("");
  var var_st = string145;
  lineNumber = 124
  lineNumber = 120
  lineNumber = 124
  var block146 = Grace_allocObject();
  block146.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block146.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block146.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block146.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block146.receiver = this;
  block146.className = 'block<subtype:124>';
  block146.real = function(
var_t2
) {
  lineNumber = 121
  lineNumber = 122
  var call147 = callmethod(this,"stringifyType", [1], var_t2);
  var var_d2 = call147;
  lineNumber = 124
  lineNumber = 122
  var call149 = callmethod(var_row,"get", [1], var_d2);
  if (Grace_isTrue(call149)) {
  lineNumber = 124
  lineNumber = 123
  var string150 = new GraceString("");
  var opresult152 = callmethod(string150, "++", [1], var_st);
  var string153 = new GraceString(" ");
  var opresult155 = callmethod(opresult152, "++", [1], string153);
  var opresult157 = callmethod(opresult155, "++", [1], var_d2);
  var string158 = new GraceString("");
  var opresult160 = callmethod(opresult157, "++", [1], string158);
  var_st = opresult160;
  var if148 = opresult160;
}
  return if148;
};
  var call161 = callmethod(Grace_prelude,"for()do", [1, 1], var_types, block146);
  lineNumber = 126
  var string162 = new GraceString("");
  var opresult164 = callmethod(string162, "++", [1], var_d);
  var string165 = new GraceString(" is a subtype of:");
  var opresult167 = callmethod(opresult164, "++", [1], string165);
  var opresult169 = callmethod(opresult167, "++", [1], var_st);
  var string170 = new GraceString("");
  var opresult172 = callmethod(opresult169, "++", [1], string170);
  var call173 = Grace_print(opresult172);
  return call173;
};
  var call174 = callmethod(Grace_prelude,"for()do", [1, 1], var_types, block142);
  return call174
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["printMatrix"] = func139;
  lineNumber = 141
var func175 = function(argcv) {
  var curarg = 1;
  var var_typeid = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 132
  lineNumber = 133
  lineNumber = 130
  var bool177 = new GraceBoolean(false)
  var opresult179 = callmethod(var_typeid, "==", [1], bool177);
  if (Grace_isTrue(opresult179)) {
  lineNumber = 132
  lineNumber = 131
  return var_DynamicType
  var if176 = undefined;
}
  lineNumber = 135
  lineNumber = 136
  lineNumber = 1
  lineNumber = 133
  var call181 = callmethod(var_typeid,"kind", [0]);
  var string182 = new GraceString("type");
  var opresult184 = callmethod(call181, "==", [1], string182);
  if (Grace_isTrue(opresult184)) {
  lineNumber = 135
  lineNumber = 134
  return var_typeid
  var if180 = undefined;
}
  lineNumber = 139
  lineNumber = 136
  lineNumber = 139
  var block185 = Grace_allocObject();
  block185.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block185.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block185.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block185.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block185.receiver = this;
  block185.className = 'block<subtype:139>';
  block185.real = function(
var_t
) {
  lineNumber = 137
  lineNumber = 140
  var call187 = callmethod(this,"stringifyType", [1], var_t);
  lineNumber = 137
  lineNumber = 1
  lineNumber = 137
  var call188 = callmethod(var_typeid,"value", [0]);
  var opresult190 = callmethod(call187, "==", [1], call188);
  if (Grace_isTrue(opresult190)) {
  lineNumber = 139
  lineNumber = 138
  throw new ReturnException(var_t, returnTarget);
  var if186 = undefined;
}
  return if186;
};
  var call191 = callmethod(Grace_prelude,"for()do", [1, 1], var_types, block185);
  lineNumber = 141
  var bool192 = new GraceBoolean(false)
  return bool192
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["findType"] = func175;
  lineNumber = 148
var func193 = function(argcv) {
  var curarg = 1;
  var var_a = arguments[curarg];
  curarg++;
  var var_b = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 147
  lineNumber = 148
  lineNumber = 145
  var bool195 = new GraceBoolean(false)
  var opresult197 = callmethod(var_a, "==", [1], bool195);
  lineNumber = 148
  lineNumber = 145
  var bool198 = new GraceBoolean(false)
  var opresult200 = callmethod(var_b, "==", [1], bool198);
  var opresult202 = callmethod(opresult197, "|", [1], opresult200);
  if (Grace_isTrue(opresult202)) {
  lineNumber = 147
  lineNumber = 146
  var bool203 = new GraceBoolean(true)
  return bool203
  var if194 = undefined;
}
  lineNumber = 148
  var call204 = callmethod(this,"stringifyType", [1], var_b);
  var call205 = callmethod(this,"stringifyType", [1], var_a);
  var call206 = callmethod(var_matrix,"get", [1], call205);
  var call207 = callmethod(call206,"get", [1], call204);
  return call207
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["simpleCheckThat()mayBeSubtypeOf"] = func193;
  lineNumber = 217
var func208 = function(argcv) {
  var curarg = 1;
  var var_a = arguments[curarg];
  curarg++;
  var var_b = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 153
  lineNumber = 154
  lineNumber = 1
  lineNumber = 151
  var call210 = callmethod(var_a,"value", [0]);
  var string211 = new GraceString("Dynamic");
  var opresult213 = callmethod(call210, "==", [1], string211);
  if (Grace_isTrue(opresult213)) {
  lineNumber = 153
  lineNumber = 152
  var bool214 = new GraceBoolean(true)
  return bool214
  var if209 = undefined;
}
  lineNumber = 156
  lineNumber = 157
  lineNumber = 1
  lineNumber = 154
  var call216 = callmethod(var_b,"value", [0]);
  var string217 = new GraceString("Dynamic");
  var opresult219 = callmethod(call216, "==", [1], string217);
  if (Grace_isTrue(opresult219)) {
  lineNumber = 156
  lineNumber = 155
  var bool220 = new GraceBoolean(true)
  return bool220
  var if215 = undefined;
}
  lineNumber = 157
  lineNumber = 158
  var call221 = callmethod(this,"stringifyType", [1], var_a);
  var var_at = call221;
  lineNumber = 159
  var call222 = callmethod(this,"stringifyType", [1], var_b);
  var var_bt = call222;
  lineNumber = 161
  lineNumber = 159
  lineNumber = 1
  lineNumber = 159
  var call224 = callmethod(var_matrix,"get", [1], var_at);
  var call225 = callmethod(call224,"get", [1], var_bt);
  var call226 = callmethod(call225,"not", [0]);
  if (Grace_isTrue(call226)) {
  lineNumber = 161
  lineNumber = 160
  var bool227 = new GraceBoolean(false)
  return bool227
  var if223 = undefined;
}
  lineNumber = 164
  lineNumber = 165
  lineNumber = 1
  lineNumber = 162
  var call229 = callmethod(var_a,"nominal", [0]);
  lineNumber = 165
  lineNumber = 1
  lineNumber = 162
  var call230 = callmethod(var_b,"nominal", [0]);
  var opresult232 = callmethod(call229, "|", [1], call230);
  if (Grace_isTrue(opresult232)) {
  lineNumber = 164
  lineNumber = 163
  var opresult234 = callmethod(var_a, "==", [1], var_b);
  return opresult234
  var if228 = undefined;
}
  lineNumber = 172
  lineNumber = 173
  lineNumber = 1
  lineNumber = 173
  lineNumber = 1
  lineNumber = 165
  var call236 = callmethod(var_a,"unionTypes", [0]);
  var call237 = callmethod(call236,"size", [0]);
  var opresult239 = callmethod(call237, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult239)) {
  lineNumber = 169
  lineNumber = 166
  lineNumber = 1
  lineNumber = 166
  var call240 = callmethod(var_a,"unionTypes", [0]);
  lineNumber = 169
  var block241 = Grace_allocObject();
  block241.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block241.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block241.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block241.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block241.receiver = this;
  block241.className = 'block<subtype:169>';
  block241.real = function(
var_ut
) {
  lineNumber = 167
  lineNumber = 1
  lineNumber = 167
  var call243 = callmethod(this,"findType", [1], var_ut);
  lineNumber = 170
  var call244 = callmethod(this,"checkThat()mayBeSubtypeOf", [1, 1], call243, var_b);
  var call245 = callmethod(call244,"not", [0]);
  if (Grace_isTrue(call245)) {
  lineNumber = 169
  lineNumber = 168
  var bool246 = new GraceBoolean(false)
  throw new ReturnException(bool246, returnTarget);
  var if242 = undefined;
}
  return if242;
};
  var call247 = callmethod(Grace_prelude,"for()do", [1, 1], call240, block241);
  lineNumber = 172
  lineNumber = 171
  var bool248 = new GraceBoolean(true)
  return bool248
  var if235 = undefined;
}
  lineNumber = 180
  lineNumber = 181
  lineNumber = 1
  lineNumber = 181
  lineNumber = 1
  lineNumber = 173
  var call250 = callmethod(var_b,"unionTypes", [0]);
  var call251 = callmethod(call250,"size", [0]);
  var opresult253 = callmethod(call251, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult253)) {
  lineNumber = 177
  lineNumber = 174
  lineNumber = 1
  lineNumber = 174
  var call254 = callmethod(var_b,"unionTypes", [0]);
  lineNumber = 177
  var block255 = Grace_allocObject();
  block255.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block255.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block255.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block255.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block255.receiver = this;
  block255.className = 'block<subtype:177>';
  block255.real = function(
var_ut
) {
  lineNumber = 175
  var call257 = callmethod(this,"findType", [1], var_ut);
  lineNumber = 178
  var call258 = callmethod(this,"checkThat()mayBeSubtypeOf", [1, 1], var_a, call257);
  if (Grace_isTrue(call258)) {
  lineNumber = 177
  lineNumber = 176
  var bool259 = new GraceBoolean(true)
  throw new ReturnException(bool259, returnTarget);
  var if256 = undefined;
}
  return if256;
};
  var call260 = callmethod(Grace_prelude,"for()do", [1, 1], call254, block255);
  lineNumber = 180
  lineNumber = 179
  var bool261 = new GraceBoolean(false)
  return bool261
  var if249 = undefined;
}
  lineNumber = 183
  lineNumber = 184
  lineNumber = 1
  lineNumber = 184
  lineNumber = 1
  lineNumber = 181
  var call263 = callmethod(var_a,"methods", [0]);
  var call264 = callmethod(call263,"size", [0]);
  lineNumber = 184
  lineNumber = 1
  lineNumber = 184
  lineNumber = 1
  lineNumber = 181
  var call265 = callmethod(var_b,"methods", [0]);
  var call266 = callmethod(call265,"size", [0]);
  var opresult268 = callmethod(call264, "<", [1], call266);
  if (Grace_isTrue(opresult268)) {
  lineNumber = 183
  lineNumber = 182
  var bool269 = new GraceBoolean(false)
  return bool269
  var if262 = undefined;
}
  lineNumber = 214
  lineNumber = 184
  lineNumber = 1
  lineNumber = 184
  var call270 = callmethod(var_b,"methods", [0]);
  lineNumber = 214
  var block271 = Grace_allocObject();
  block271.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block271.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block271.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block271.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block271.receiver = this;
  block271.className = 'block<subtype:214>';
  block271.real = function(
var_bm
) {
  lineNumber = 186
  lineNumber = 185
  var bool272 = new GraceBoolean(false)
  var var_found = bool272;
  lineNumber = 206
  lineNumber = 186
  lineNumber = 1
  lineNumber = 186
  var call273 = callmethod(var_a,"methods", [0]);
  lineNumber = 206
  var block274 = Grace_allocObject();
  block274.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block274.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block274.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block274.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block274.receiver = this;
  block274.className = 'block<subtype:206>';
  block274.real = function(
var_am
) {
  lineNumber = 211
  lineNumber = 1
  lineNumber = 187
  var call276 = callmethod(var_am,"value", [0]);
  lineNumber = 211
  lineNumber = 1
  lineNumber = 187
  var call277 = callmethod(var_bm,"value", [0]);
  var opresult279 = callmethod(call276, "==", [1], call277);
  if (Grace_isTrue(opresult279)) {
  lineNumber = 189
  lineNumber = 188
  var bool280 = new GraceBoolean(true)
  var_found = bool280;
  lineNumber = 191
  lineNumber = 189
  lineNumber = 1
  lineNumber = 189
  lineNumber = 1
  lineNumber = 189
  var call282 = callmethod(var_am,"rtype", [0]);
  var call283 = callmethod(this,"findType", [1], call282);
  lineNumber = 1
  lineNumber = 189
  var call284 = callmethod(var_bm,"rtype", [0]);
  var call285 = callmethod(this,"findType", [1], call284);
  lineNumber = 192
  var call286 = callmethod(this,"simpleCheckThat()mayBeSubtypeOf", [1, 1], call283, call285);
  var call287 = callmethod(call286,"not", [0]);
  if (Grace_isTrue(call287)) {
  lineNumber = 191
  lineNumber = 190
  var bool288 = new GraceBoolean(false)
  throw new ReturnException(bool288, returnTarget);
  var if281 = undefined;
}
  lineNumber = 194
  lineNumber = 195
  lineNumber = 1
  lineNumber = 195
  lineNumber = 1
  lineNumber = 192
  var call290 = callmethod(var_am,"signature", [0]);
  var call291 = callmethod(call290,"size", [0]);
  lineNumber = 195
  lineNumber = 1
  lineNumber = 195
  lineNumber = 1
  lineNumber = 192
  var call292 = callmethod(var_bm,"signature", [0]);
  var call293 = callmethod(call292,"size", [0]);
  var opresult295 = callmethod(call291, "!=", [1], call293);
  if (Grace_isTrue(opresult295)) {
  lineNumber = 194
  lineNumber = 193
  var bool296 = new GraceBoolean(false)
  throw new ReturnException(bool296, returnTarget);
  var if289 = undefined;
}
  lineNumber = 206
  lineNumber = 210
  lineNumber = 1
  lineNumber = 210
  lineNumber = 1
  lineNumber = 210
  lineNumber = 1
  lineNumber = 210
  lineNumber = 1
  lineNumber = 195
  var call298 = callmethod(var_am,"signature", [0]);
  var call299 = callmethod(call298,"first", [0]);
  var call300 = callmethod(call299,"params", [0]);
  var call301 = callmethod(call300,"size", [0]);
  var opresult303 = callmethod(call301, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult303)) {
  lineNumber = 206
  lineNumber = 196
  lineNumber = 1
  lineNumber = 196
  lineNumber = 1
  lineNumber = 196
  var call304 = callmethod(var_am,"signature", [0]);
  var call305 = callmethod(call304,"indices", [0]);
  lineNumber = 206
  var block306 = Grace_allocObject();
  block306.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block306.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block306.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block306.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block306.receiver = this;
  block306.className = 'block<subtype:206>';
  block306.real = function(
var_partnr
) {
  lineNumber = 199
  lineNumber = 200
  lineNumber = 1
  lineNumber = 200
  lineNumber = 1
  lineNumber = 200
  lineNumber = 1
  lineNumber = 197
  var call308 = callmethod(var_am,"signature", [0]);
  var idxres309 = call308.methods["[]"].call(call308, [1], var_partnr);
  var call310 = callmethod(idxres309,"params", [0]);
  var call311 = callmethod(call310,"size", [0]);
  lineNumber = 200
  lineNumber = 1
  lineNumber = 200
  lineNumber = 1
  lineNumber = 200
  lineNumber = 1
  lineNumber = 197
  var call312 = callmethod(var_bm,"signature", [0]);
  var idxres313 = call312.methods["[]"].call(call312, [1], var_partnr);
  var call314 = callmethod(idxres313,"params", [0]);
  var call315 = callmethod(call314,"size", [0]);
  var opresult317 = callmethod(call311, "!=", [1], call315);
  if (Grace_isTrue(opresult317)) {
  lineNumber = 199
  lineNumber = 198
  var bool318 = new GraceBoolean(false)
  throw new ReturnException(bool318, returnTarget);
  var if307 = undefined;
}
  lineNumber = 201
  lineNumber = 1
  lineNumber = 200
  var call319 = callmethod(var_am,"signature", [0]);
  var idxres320 = call319.methods["[]"].call(call319, [1], var_partnr);
  var var_part = idxres320;
  lineNumber = 206
  lineNumber = 201
  lineNumber = 1
  lineNumber = 201
  lineNumber = 1
  lineNumber = 201
  var call321 = callmethod(var_part,"params", [0]);
  var call322 = callmethod(call321,"indices", [0]);
  lineNumber = 206
  var block323 = Grace_allocObject();
  block323.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block323.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block323.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block323.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block323.receiver = this;
  block323.className = 'block<subtype:206>';
  block323.real = function(
var_i
) {
  lineNumber = 203
  lineNumber = 1
  lineNumber = 203
  lineNumber = 1
  lineNumber = 202
  var call324 = callmethod(var_am,"signature", [0]);
  var idxres325 = call324.methods["[]"].call(call324, [1], var_partnr);
  var call326 = callmethod(idxres325,"params", [0]);
  var idxres327 = call326.methods["[]"].call(call326, [1], var_i);
  var var_ap = idxres327;
  lineNumber = 204
  lineNumber = 1
  lineNumber = 204
  lineNumber = 1
  lineNumber = 203
  var call328 = callmethod(var_bm,"signature", [0]);
  var idxres329 = call328.methods["[]"].call(call328, [1], var_partnr);
  var call330 = callmethod(idxres329,"params", [0]);
  var idxres331 = call330.methods["[]"].call(call330, [1], var_i);
  var var_bp = idxres331;
  lineNumber = 206
  lineNumber = 204
  lineNumber = 1
  lineNumber = 204
  lineNumber = 1
  lineNumber = 204
  var call333 = callmethod(var_bp,"dtype", [0]);
  var call334 = callmethod(this,"findType", [1], call333);
  lineNumber = 1
  lineNumber = 204
  var call335 = callmethod(var_ap,"dtype", [0]);
  var call336 = callmethod(this,"findType", [1], call335);
  lineNumber = 207
  var call337 = callmethod(this,"simpleCheckThat()mayBeSubtypeOf", [1, 1], call334, call336);
  var call338 = callmethod(call337,"not", [0]);
  if (Grace_isTrue(call338)) {
  lineNumber = 206
  lineNumber = 205
  var bool339 = new GraceBoolean(false)
  throw new ReturnException(bool339, returnTarget);
  var if332 = undefined;
}
  return if332;
};
  var call340 = callmethod(Grace_prelude,"for()do", [1, 1], call322, block323);
  return call340;
};
  var call341 = callmethod(Grace_prelude,"for()do", [1, 1], call305, block306);
  var if297 = call341;
}
  var if275 = if297;
}
  return if275;
};
  var call342 = callmethod(Grace_prelude,"for()do", [1, 1], call273, block274);
  lineNumber = 214
  lineNumber = 215
  lineNumber = 212
  var call344 = callmethod(var_found,"prefix!", [0]);
  if (Grace_isTrue(call344)) {
  lineNumber = 214
  lineNumber = 213
  var bool345 = new GraceBoolean(false)
  throw new ReturnException(bool345, returnTarget);
  var if343 = undefined;
}
  return if343;
};
  var call346 = callmethod(Grace_prelude,"for()do", [1, 1], call270, block271);
  lineNumber = 217
  lineNumber = 216
  var bool347 = new GraceBoolean(true)
  return bool347
  return undefined
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["checkThat()mayBeSubtypeOf"] = func208;
  lineNumber = 237
var func348 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 221
  lineNumber = 220
  var bool349 = new GraceBoolean(true)
  var var_changed = bool349;
  lineNumber = 231
  lineNumber = 221
  var block350 = Grace_allocObject();
  block350.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block350.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block350.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block350.receiver = this;
  block350.className = 'block<subtype:221>';
  block350.real = function(
) {
  return var_changed;
};
  lineNumber = 231
  var block351 = Grace_allocObject();
  block351.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block351.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block351.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block351.receiver = this;
  block351.className = 'block<subtype:231>';
  block351.real = function(
) {
  lineNumber = 223
  lineNumber = 222
  var bool352 = new GraceBoolean(false)
  var_changed = bool352;
  lineNumber = 231
  lineNumber = 223
  lineNumber = 231
  var block353 = Grace_allocObject();
  block353.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block353.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block353.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block353.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block353.receiver = this;
  block353.className = 'block<subtype:231>';
  block353.real = function(
var_t1
) {
  lineNumber = 224
  var call354 = callmethod(this,"stringifyType", [1], var_t1);
  var call355 = callmethod(var_matrix,"get", [1], call354);
  var var_row = call355;
  lineNumber = 231
  lineNumber = 225
  lineNumber = 231
  var block356 = Grace_allocObject();
  block356.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block356.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block356.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block356.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block356.receiver = this;
  block356.className = 'block<subtype:231>';
  block356.real = function(
var_t2
) {
  lineNumber = 226
  lineNumber = 227
  var call357 = callmethod(this,"stringifyType", [1], var_t2);
  var var_d2 = call357;
  lineNumber = 231
  lineNumber = 227
  var call359 = callmethod(var_row,"get", [1], var_d2);
  if (Grace_isTrue(call359)) {
  lineNumber = 231
  lineNumber = 228
  lineNumber = 1
  lineNumber = 228
  lineNumber = 232
  var call361 = callmethod(this,"checkThat()mayBeSubtypeOf", [1, 1], var_t1, var_t2);
  var call362 = callmethod(call361,"not", [0]);
  if (Grace_isTrue(call362)) {
  lineNumber = 229
  var bool363 = new GraceBoolean(false)
  var call364 = callmethod(var_row,"put", [2], var_d2, bool363);
  lineNumber = 231
  lineNumber = 230
  var bool365 = new GraceBoolean(true)
  var_changed = bool365;
  var if360 = bool365;
}
  var if358 = if360;
}
  return if358;
};
  var call366 = callmethod(Grace_prelude,"for()do", [1, 1], var_types, block356);
  return call366;
};
  var call367 = callmethod(Grace_prelude,"for()do", [1, 1], var_types, block353);
  return call367;
};
  var call368 = callmethod(Grace_prelude,"while()do", [1, 1], block350, block351);
  lineNumber = 237
  lineNumber = 236
  var bool369 = new GraceBoolean(false)
  var_modified = bool369;
  return bool369
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["findSubtypes"] = func348;
  lineNumber = 243
var func370 = function(argcv) {
  var curarg = 1;
  var var_a = arguments[curarg];
  curarg++;
  var var_b = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 241
  lineNumber = 240
  lineNumber = 243
  var call372 = callmethod(this,"addType", [1], var_a);
  lineNumber = 240
  var call373 = callmethod(this,"addType", [1], var_b);
  var opresult375 = callmethod(call372, "|", [1], call373);
  var opresult377 = callmethod(opresult375, "|", [1], var_modified);
  if (Grace_isTrue(opresult377)) {
  lineNumber = 241
  var call378 = callmethod(this,"findSubtypes", [0]);
  var if371 = call378;
}
  lineNumber = 243
  var call379 = callmethod(this,"stringifyType", [1], var_b);
  var call380 = callmethod(this,"stringifyType", [1], var_a);
  var call381 = callmethod(var_matrix,"get", [1], call380);
  var call382 = callmethod(call381,"get", [1], call379);
  return call382
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["conformsType()to"] = func370;
  lineNumber = 274
var func383 = function(argcv) {
  var curarg = 1;
  var var_t = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 248
  lineNumber = 247
  lineNumber = 250
  var call385 = callmethod(this,"addType", [1], var_t);
  lineNumber = 247
  var opresult387 = callmethod(call385, "|", [1], var_modified);
  if (Grace_isTrue(opresult387)) {
  lineNumber = 248
  var call388 = callmethod(this,"findSubtypes", [0]);
  var if384 = call388;
}
  lineNumber = 250
  lineNumber = 251
  var call389 = callmethod(this,"stringifyType", [1], var_t);
  var var_id = call389;
  lineNumber = 253
  lineNumber = 251
  var call391 = callmethod(var_id,"at", [1], new GraceNum(1));
  var string392 = new GraceString("<");
  var opresult394 = callmethod(call391, "/=", [1], string392);
  if (Grace_isTrue(opresult394)) {
  lineNumber = 253
  lineNumber = 252
  return var_id
  var if390 = undefined;
}
  lineNumber = 254
  var call395 = callmethod(var_matrix,"get", [1], var_id);
  var var_st = call395;
  lineNumber = 256
  var array396 = new GraceList([
]);

  var var_maybe = array396;
  lineNumber = 259
  lineNumber = 256
  lineNumber = 259
  var block397 = Grace_allocObject();
  block397.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block397.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block397.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block397.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block397.receiver = this;
  block397.className = 'block<subtype:259>';
  block397.real = function(
var_t2
) {
  lineNumber = 257
  lineNumber = 258
  var call398 = callmethod(this,"stringifyType", [1], var_t2);
  var var_d2 = call398;
  lineNumber = 259
  lineNumber = 258
  lineNumber = 261
  lineNumber = 258
  var string400 = new GraceString("Dynamic");
  var opresult402 = callmethod(var_d2, "/=", [1], string400);
  var call403 = callmethod(var_st,"get", [1], var_d2);
  var opresult405 = callmethod(opresult402, "&", [1], call403);
  var call406 = callmethod(var_matrix,"get", [1], var_d2);
  var call407 = callmethod(call406,"get", [1], var_id);
  var opresult409 = callmethod(opresult405, "&", [1], call407);
  if (Grace_isTrue(opresult409)) {
  lineNumber = 259
  var call410 = callmethod(var_maybe,"push", [1], var_d2);
  var if399 = call410;
}
  return if399;
};
  var call411 = callmethod(Grace_prelude,"for()do", [1, 1], var_types, block397);
  lineNumber = 263
  lineNumber = 262
  var string412 = new GraceString("");
  var var_best = string412;
  lineNumber = 267
  lineNumber = 263
  lineNumber = 267
  var block413 = Grace_allocObject();
  block413.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block413.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block413.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block413.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block413.receiver = this;
  block413.className = 'block<subtype:267>';
  block413.real = function(
var_mn
) {
  lineNumber = 269
  lineNumber = 1
  lineNumber = 264
  var call415 = callmethod(var_mn,"size", [0]);
  lineNumber = 269
  lineNumber = 1
  lineNumber = 264
  var call416 = callmethod(var_best,"size", [0]);
  var opresult418 = callmethod(call415, ">", [1], call416);
  if (Grace_isTrue(opresult418)) {
  lineNumber = 267
  lineNumber = 265
  var call420 = callmethod(var_mn,"at", [1], new GraceNum(1));
  var string421 = new GraceString("<");
  var opresult423 = callmethod(call420, "/=", [1], string421);
  if (Grace_isTrue(opresult423)) {
  lineNumber = 267
  lineNumber = 266
  var_best = var_mn;
  var if419 = var_mn;
}
  var if414 = if419;
}
  return if414;
};
  var call424 = callmethod(Grace_prelude,"for()do", [1, 1], var_maybe, block413);
  lineNumber = 272
  lineNumber = 273
  lineNumber = 1
  lineNumber = 270
  var call426 = callmethod(var_best,"size", [0]);
  var opresult428 = callmethod(call426, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult428)) {
  lineNumber = 272
  lineNumber = 271
  return var_best
  var if425 = undefined;
}
  lineNumber = 274
  lineNumber = 273
  return var_id
  return undefined
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["nicename"] = func383;
  return this;
}
function gracecode_typechecker() {
  lineNumber = 2
// Import of io
  var var_io = do_import("io", gracecode_io);
  lineNumber = 3
// Import of ast
  var var_ast = do_import("ast", gracecode_ast);
  lineNumber = 4
// Import of util
  var var_util = do_import("util", gracecode_util);
  lineNumber = 6
// Import of subtype
  var var_subtype = do_import("subtype", gracecode_subtype);
  lineNumber = 7
  lineNumber = 1
  lineNumber = 6
  var call0 = callmethod(var_HashMap,"new", [0]);
  var var_preludeObj = call0;
  lineNumber = 1
var func1 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 6
  return var_preludeObj
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["preludeObj"] = func1;
  lineNumber = 8
  lineNumber = 1
  lineNumber = 7
  var call2 = callmethod(var_HashMap,"new", [0]);
  var var_moduleScope = call2;
  lineNumber = 1
var func3 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 7
  return var_moduleScope
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["moduleScope"] = func3;
  lineNumber = 8
  var string4 = new GraceString("___is_object");
  var bool5 = new GraceBoolean(true)
  var call6 = callmethod(var_moduleScope,"put", [2], string4, bool5);
  lineNumber = 9
  var string7 = new GraceString("___is_prelude");
  var bool8 = new GraceBoolean(true)
  var call9 = callmethod(var_preludeObj,"put", [2], string7, bool8);
  lineNumber = 10
  lineNumber = 1
  lineNumber = 10
  var call11 = callmethod(var_HashMap,"new", [0]);
  var array10 = new GraceList([
call11,
var_preludeObj,
var_moduleScope,
]);

  var var_scopes = array10;
  lineNumber = 1
var func12 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 10
  return var_scopes
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["scopes"] = func12;
  lineNumber = 1
var func13 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_scopes = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["scopes:="] = func13;
  lineNumber = 11
  var string15 = new GraceString("module");
  var array16 = new GraceList([
]);

  lineNumber = 1
  lineNumber = 11
  var call17 = callmethod(var_ast,"typeNode", [0]);
  var call18 = callmethod(call17,"new", [2], string15, array16);
  var array14 = new GraceList([
call18,
]);

  var var_selftypes = array14;
  lineNumber = 1
var func19 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 11
  return var_selftypes
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["selftypes"] = func19;
  lineNumber = 1
var func20 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_selftypes = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["selftypes:="] = func20;
  lineNumber = 14
  lineNumber = 12
  var var_auto__95__count = new GraceNum(0);
  lineNumber = 1
var func21 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 12
  return var_auto__95__count
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["auto_count"] = func21;
  lineNumber = 1
var func22 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_auto__95__count = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["auto_count:="] = func22;
  lineNumber = 14
  var string23 = new GraceString("Dynamic");
  var bool24 = new GraceBoolean(false)
  lineNumber = 15
  lineNumber = 1
  lineNumber = 14
  var call25 = callmethod(var_ast,"identifierNode", [0]);
  var call26 = callmethod(call25,"new", [2], string23, bool24);
  var var_DynamicIdentifier = call26;
  lineNumber = 1
var func27 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 14
  return var_DynamicIdentifier
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["DynamicIdentifier"] = func27;
  lineNumber = 15
  var string28 = new GraceString("other");
  var string29 = new GraceString("Dynamic");
  var bool30 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 15
  var call31 = callmethod(var_ast,"identifierNode", [0]);
  var call32 = callmethod(call31,"new", [2], string29, bool30);
  lineNumber = 16
  lineNumber = 1
  lineNumber = 15
  var call33 = callmethod(var_ast,"identifierNode", [0]);
  var call34 = callmethod(call33,"new", [2], string28, call32);
  var var_TopOther = call34;
  lineNumber = 1
var func35 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 15
  return var_TopOther
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["TopOther"] = func35;
  lineNumber = 16
  var string36 = new GraceString("String");
  var bool37 = new GraceBoolean(false)
  lineNumber = 17
  lineNumber = 1
  lineNumber = 16
  var call38 = callmethod(var_ast,"identifierNode", [0]);
  var call39 = callmethod(call38,"new", [2], string36, bool37);
  var var_StringIdentifier = call39;
  lineNumber = 1
var func40 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 16
  return var_StringIdentifier
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["StringIdentifier"] = func40;
  lineNumber = 17
  var string41 = new GraceString("other");
  lineNumber = 18
  lineNumber = 1
  lineNumber = 17
  var call42 = callmethod(var_ast,"identifierNode", [0]);
  var call43 = callmethod(call42,"new", [2], string41, var_StringIdentifier);
  var var_StringOther = call43;
  lineNumber = 1
var func44 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 17
  return var_StringOther
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["StringOther"] = func44;
  lineNumber = 18
  var string45 = new GraceString("Boolean");
  var bool46 = new GraceBoolean(false)
  lineNumber = 19
  lineNumber = 1
  lineNumber = 18
  var call47 = callmethod(var_ast,"identifierNode", [0]);
  var call48 = callmethod(call47,"new", [2], string45, bool46);
  var var_BooleanIdentifier = call48;
  lineNumber = 1
var func49 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 18
  return var_BooleanIdentifier
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["BooleanIdentifier"] = func49;
  lineNumber = 19
  var string50 = new GraceString("other");
  lineNumber = 20
  lineNumber = 1
  lineNumber = 19
  var call51 = callmethod(var_ast,"identifierNode", [0]);
  var call52 = callmethod(call51,"new", [2], string50, var_BooleanIdentifier);
  var var_BooleanOther = call52;
  lineNumber = 1
var func53 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 19
  return var_BooleanOther
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["BooleanOther"] = func53;
  lineNumber = 20
  var string54 = new GraceString("Number");
  var bool55 = new GraceBoolean(false)
  lineNumber = 21
  lineNumber = 1
  lineNumber = 20
  var call56 = callmethod(var_ast,"identifierNode", [0]);
  var call57 = callmethod(call56,"new", [2], string54, bool55);
  var var_NumberIdentifier = call57;
  lineNumber = 1
var func58 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 20
  return var_NumberIdentifier
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["NumberIdentifier"] = func58;
  lineNumber = 21
  var string59 = new GraceString("other");
  lineNumber = 22
  lineNumber = 1
  lineNumber = 21
  var call60 = callmethod(var_ast,"identifierNode", [0]);
  var call61 = callmethod(call60,"new", [2], string59, var_NumberIdentifier);
  var var_NumberOther = call61;
  lineNumber = 1
var func62 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 21
  return var_NumberOther
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["NumberOther"] = func62;
  lineNumber = 22
  var string63 = new GraceString("List");
  var bool64 = new GraceBoolean(false)
  lineNumber = 23
  lineNumber = 1
  lineNumber = 22
  var call65 = callmethod(var_ast,"identifierNode", [0]);
  var call66 = callmethod(call65,"new", [2], string63, bool64);
  var var_ListIdentifier = call66;
  lineNumber = 1
var func67 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 22
  return var_ListIdentifier
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["ListIdentifier"] = func67;
  lineNumber = 23
  var string68 = new GraceString("other");
  lineNumber = 24
  lineNumber = 1
  lineNumber = 23
  var call69 = callmethod(var_ast,"identifierNode", [0]);
  var call70 = callmethod(call69,"new", [2], string68, var_ListIdentifier);
  var var_ListOther = call70;
  lineNumber = 1
var func71 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 23
  return var_ListOther
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["ListOther"] = func71;
  lineNumber = 24
  var string72 = new GraceString("Dynamic");
  var array73 = new GraceList([
]);

  lineNumber = 25
  lineNumber = 1
  lineNumber = 24
  var call74 = callmethod(var_ast,"typeNode", [0]);
  var call75 = callmethod(call74,"new", [2], string72, array73);
  var var_DynamicType = call75;
  lineNumber = 1
var func76 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 24
  return var_DynamicType
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["DynamicType"] = func76;
  lineNumber = 44
  lineNumber = 25
  var string77 = new GraceString("Number");
  lineNumber = 44
  lineNumber = 26
  var string79 = new GraceString("+");
  var string81 = new GraceString("+");
  var array82 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 26
  var call83 = callmethod(var_ast,"signaturePart", [0]);
  var call84 = callmethod(call83,"new", [2], string81, array82);
  var array80 = new GraceList([
call84,
]);

  lineNumber = 1
  lineNumber = 26
  var call85 = callmethod(var_ast,"methodTypeNode", [0]);
  var call86 = callmethod(call85,"new", [3], string79, array80, var_NumberIdentifier);
  lineNumber = 27
  var string87 = new GraceString("*");
  var string89 = new GraceString("*");
  var array90 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 27
  var call91 = callmethod(var_ast,"signaturePart", [0]);
  var call92 = callmethod(call91,"new", [2], string89, array90);
  var array88 = new GraceList([
call92,
]);

  lineNumber = 1
  lineNumber = 27
  var call93 = callmethod(var_ast,"methodTypeNode", [0]);
  var call94 = callmethod(call93,"new", [3], string87, array88, var_NumberIdentifier);
  lineNumber = 28
  var string95 = new GraceString("-");
  var string97 = new GraceString("-");
  var array98 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 28
  var call99 = callmethod(var_ast,"signaturePart", [0]);
  var call100 = callmethod(call99,"new", [2], string97, array98);
  var array96 = new GraceList([
call100,
]);

  lineNumber = 1
  lineNumber = 28
  var call101 = callmethod(var_ast,"methodTypeNode", [0]);
  var call102 = callmethod(call101,"new", [3], string95, array96, var_NumberIdentifier);
  lineNumber = 29
  var string103 = new GraceString("/");
  var string105 = new GraceString("/");
  var array106 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 29
  var call107 = callmethod(var_ast,"signaturePart", [0]);
  var call108 = callmethod(call107,"new", [2], string105, array106);
  var array104 = new GraceList([
call108,
]);

  lineNumber = 1
  lineNumber = 29
  var call109 = callmethod(var_ast,"methodTypeNode", [0]);
  var call110 = callmethod(call109,"new", [3], string103, array104, var_NumberIdentifier);
  lineNumber = 30
  var string111 = new GraceString("%");
  var string113 = new GraceString("%");
  var array114 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 30
  var call115 = callmethod(var_ast,"signaturePart", [0]);
  var call116 = callmethod(call115,"new", [2], string113, array114);
  var array112 = new GraceList([
call116,
]);

  lineNumber = 1
  lineNumber = 30
  var call117 = callmethod(var_ast,"methodTypeNode", [0]);
  var call118 = callmethod(call117,"new", [3], string111, array112, var_NumberIdentifier);
  lineNumber = 31
  var string119 = new GraceString("==");
  var string121 = new GraceString("==");
  var array122 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 31
  var call123 = callmethod(var_ast,"signaturePart", [0]);
  var call124 = callmethod(call123,"new", [2], string121, array122);
  var array120 = new GraceList([
call124,
]);

  lineNumber = 1
  lineNumber = 31
  var call125 = callmethod(var_ast,"methodTypeNode", [0]);
  var call126 = callmethod(call125,"new", [3], string119, array120, var_BooleanIdentifier);
  lineNumber = 32
  var string127 = new GraceString("!=");
  var string129 = new GraceString("!=");
  var array130 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 32
  var call131 = callmethod(var_ast,"signaturePart", [0]);
  var call132 = callmethod(call131,"new", [2], string129, array130);
  var array128 = new GraceList([
call132,
]);

  lineNumber = 1
  lineNumber = 32
  var call133 = callmethod(var_ast,"methodTypeNode", [0]);
  var call134 = callmethod(call133,"new", [3], string127, array128, var_BooleanIdentifier);
  lineNumber = 33
  var string135 = new GraceString("/=");
  var string137 = new GraceString("/=");
  var array138 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 33
  var call139 = callmethod(var_ast,"signaturePart", [0]);
  var call140 = callmethod(call139,"new", [2], string137, array138);
  var array136 = new GraceList([
call140,
]);

  lineNumber = 1
  lineNumber = 33
  var call141 = callmethod(var_ast,"methodTypeNode", [0]);
  var call142 = callmethod(call141,"new", [3], string135, array136, var_BooleanIdentifier);
  lineNumber = 34
  var string143 = new GraceString("++");
  var string145 = new GraceString("++");
  var array146 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 34
  var call147 = callmethod(var_ast,"signaturePart", [0]);
  var call148 = callmethod(call147,"new", [2], string145, array146);
  var array144 = new GraceList([
call148,
]);

  lineNumber = 1
  lineNumber = 34
  var call149 = callmethod(var_ast,"methodTypeNode", [0]);
  var call150 = callmethod(call149,"new", [3], string143, array144, var_DynamicIdentifier);
  lineNumber = 35
  var string151 = new GraceString("<");
  var string153 = new GraceString("<");
  var array154 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 35
  var call155 = callmethod(var_ast,"signaturePart", [0]);
  var call156 = callmethod(call155,"new", [2], string153, array154);
  var array152 = new GraceList([
call156,
]);

  lineNumber = 1
  lineNumber = 35
  var call157 = callmethod(var_ast,"methodTypeNode", [0]);
  var call158 = callmethod(call157,"new", [3], string151, array152, var_BooleanIdentifier);
  lineNumber = 36
  var string159 = new GraceString("<=");
  var string161 = new GraceString("<=");
  var array162 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 36
  var call163 = callmethod(var_ast,"signaturePart", [0]);
  var call164 = callmethod(call163,"new", [2], string161, array162);
  var array160 = new GraceList([
call164,
]);

  lineNumber = 1
  lineNumber = 36
  var call165 = callmethod(var_ast,"methodTypeNode", [0]);
  var call166 = callmethod(call165,"new", [3], string159, array160, var_BooleanIdentifier);
  lineNumber = 37
  var string167 = new GraceString(">");
  var string169 = new GraceString(">");
  var array170 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 37
  var call171 = callmethod(var_ast,"signaturePart", [0]);
  var call172 = callmethod(call171,"new", [2], string169, array170);
  var array168 = new GraceList([
call172,
]);

  lineNumber = 1
  lineNumber = 37
  var call173 = callmethod(var_ast,"methodTypeNode", [0]);
  var call174 = callmethod(call173,"new", [3], string167, array168, var_BooleanIdentifier);
  lineNumber = 38
  var string175 = new GraceString(">=");
  var string177 = new GraceString(">=");
  var array178 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 38
  var call179 = callmethod(var_ast,"signaturePart", [0]);
  var call180 = callmethod(call179,"new", [2], string177, array178);
  var array176 = new GraceList([
call180,
]);

  lineNumber = 1
  lineNumber = 38
  var call181 = callmethod(var_ast,"methodTypeNode", [0]);
  var call182 = callmethod(call181,"new", [3], string175, array176, var_BooleanIdentifier);
  lineNumber = 39
  var string183 = new GraceString("..");
  var string185 = new GraceString("..");
  var array186 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 39
  var call187 = callmethod(var_ast,"signaturePart", [0]);
  var call188 = callmethod(call187,"new", [2], string185, array186);
  var array184 = new GraceList([
call188,
]);

  lineNumber = 1
  lineNumber = 39
  var call189 = callmethod(var_ast,"methodTypeNode", [0]);
  var call190 = callmethod(call189,"new", [3], string183, array184, var_DynamicIdentifier);
  lineNumber = 40
  var string191 = new GraceString("asString");
  var string193 = new GraceString("asString");
  lineNumber = 1
  lineNumber = 40
  var call194 = callmethod(var_ast,"signaturePart", [0]);
  var call195 = callmethod(call194,"new", [1], string193);
  var array192 = new GraceList([
call195,
]);

  lineNumber = 1
  lineNumber = 40
  var call196 = callmethod(var_ast,"methodTypeNode", [0]);
  var call197 = callmethod(call196,"new", [3], string191, array192, var_StringIdentifier);
  lineNumber = 41
  var string198 = new GraceString("prefix-");
  var string200 = new GraceString("prefix-");
  lineNumber = 1
  lineNumber = 41
  var call201 = callmethod(var_ast,"signaturePart", [0]);
  var call202 = callmethod(call201,"new", [1], string200);
  var array199 = new GraceList([
call202,
]);

  lineNumber = 1
  lineNumber = 41
  var call203 = callmethod(var_ast,"methodTypeNode", [0]);
  var call204 = callmethod(call203,"new", [3], string198, array199, var_NumberIdentifier);
  lineNumber = 42
  var string205 = new GraceString("inBase");
  var string207 = new GraceString("inBase");
  var array208 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 42
  var call209 = callmethod(var_ast,"signaturePart", [0]);
  var call210 = callmethod(call209,"new", [2], string207, array208);
  var array206 = new GraceList([
call210,
]);

  lineNumber = 1
  lineNumber = 42
  var call211 = callmethod(var_ast,"methodTypeNode", [0]);
  var call212 = callmethod(call211,"new", [3], string205, array206, var_StringIdentifier);
  lineNumber = 43
  var string213 = new GraceString("truncate");
  var string215 = new GraceString("truncate");
  lineNumber = 1
  lineNumber = 43
  var call216 = callmethod(var_ast,"signaturePart", [0]);
  var call217 = callmethod(call216,"new", [1], string215);
  var array214 = new GraceList([
call217,
]);

  lineNumber = 1
  lineNumber = 43
  var call218 = callmethod(var_ast,"methodTypeNode", [0]);
  var call219 = callmethod(call218,"new", [3], string213, array214, var_NumberIdentifier);
  lineNumber = 44
  var string220 = new GraceString("match");
  var string222 = new GraceString("match");
  var array223 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 44
  var call224 = callmethod(var_ast,"signaturePart", [0]);
  var call225 = callmethod(call224,"new", [2], string222, array223);
  var array221 = new GraceList([
call225,
]);

  lineNumber = 45
  lineNumber = 1
  lineNumber = 44
  var call226 = callmethod(var_ast,"methodTypeNode", [0]);
  var call227 = callmethod(call226,"new", [3], string220, array221, var_DynamicIdentifier);
  var array78 = new GraceList([
call86,
call94,
call102,
call110,
call118,
call126,
call134,
call142,
call150,
call158,
call166,
call174,
call182,
call190,
call197,
call204,
call212,
call219,
call227,
]);

  lineNumber = 46
  lineNumber = 1
  lineNumber = 25
  var call228 = callmethod(var_ast,"typeNode", [0]);
  var call229 = callmethod(call228,"new", [2], string77, array78);
  var var_NumberType = call229;
  lineNumber = 1
var func230 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 25
  return var_NumberType
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["NumberType"] = func230;
  lineNumber = 65
  lineNumber = 46
  var string231 = new GraceString("String");
  lineNumber = 65
  lineNumber = 47
  var string233 = new GraceString("++");
  var string235 = new GraceString("++");
  var array236 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 47
  var call237 = callmethod(var_ast,"signaturePart", [0]);
  var call238 = callmethod(call237,"new", [2], string235, array236);
  var array234 = new GraceList([
call238,
]);

  lineNumber = 1
  lineNumber = 47
  var call239 = callmethod(var_ast,"methodTypeNode", [0]);
  var call240 = callmethod(call239,"new", [3], string233, array234, var_StringIdentifier);
  lineNumber = 48
  var string241 = new GraceString("size");
  var string243 = new GraceString("size");
  lineNumber = 1
  lineNumber = 48
  var call244 = callmethod(var_ast,"signaturePart", [0]);
  var call245 = callmethod(call244,"new", [1], string243);
  var array242 = new GraceList([
call245,
]);

  lineNumber = 1
  lineNumber = 48
  var call246 = callmethod(var_ast,"methodTypeNode", [0]);
  var call247 = callmethod(call246,"new", [3], string241, array242, var_NumberIdentifier);
  lineNumber = 49
  var string248 = new GraceString("ord");
  var string250 = new GraceString("ord");
  lineNumber = 1
  lineNumber = 49
  var call251 = callmethod(var_ast,"signaturePart", [0]);
  var call252 = callmethod(call251,"new", [1], string250);
  var array249 = new GraceList([
call252,
]);

  lineNumber = 1
  lineNumber = 49
  var call253 = callmethod(var_ast,"methodTypeNode", [0]);
  var call254 = callmethod(call253,"new", [3], string248, array249, var_NumberIdentifier);
  lineNumber = 50
  var string255 = new GraceString("at");
  var string257 = new GraceString("at");
  var array258 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 50
  var call259 = callmethod(var_ast,"signaturePart", [0]);
  var call260 = callmethod(call259,"new", [2], string257, array258);
  var array256 = new GraceList([
call260,
]);

  lineNumber = 1
  lineNumber = 50
  var call261 = callmethod(var_ast,"methodTypeNode", [0]);
  var call262 = callmethod(call261,"new", [3], string255, array256, var_StringIdentifier);
  lineNumber = 51
  var string263 = new GraceString("[]");
  var string265 = new GraceString("[]");
  var array266 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 51
  var call267 = callmethod(var_ast,"signaturePart", [0]);
  var call268 = callmethod(call267,"new", [2], string265, array266);
  var array264 = new GraceList([
call268,
]);

  lineNumber = 1
  lineNumber = 51
  var call269 = callmethod(var_ast,"methodTypeNode", [0]);
  var call270 = callmethod(call269,"new", [3], string263, array264, var_StringIdentifier);
  lineNumber = 52
  var string271 = new GraceString("==");
  var string273 = new GraceString("==");
  var array274 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 52
  var call275 = callmethod(var_ast,"signaturePart", [0]);
  var call276 = callmethod(call275,"new", [2], string273, array274);
  var array272 = new GraceList([
call276,
]);

  lineNumber = 1
  lineNumber = 52
  var call277 = callmethod(var_ast,"methodTypeNode", [0]);
  var call278 = callmethod(call277,"new", [3], string271, array272, var_BooleanIdentifier);
  lineNumber = 53
  var string279 = new GraceString("!=");
  var string281 = new GraceString("!=");
  var array282 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 53
  var call283 = callmethod(var_ast,"signaturePart", [0]);
  var call284 = callmethod(call283,"new", [2], string281, array282);
  var array280 = new GraceList([
call284,
]);

  lineNumber = 1
  lineNumber = 53
  var call285 = callmethod(var_ast,"methodTypeNode", [0]);
  var call286 = callmethod(call285,"new", [3], string279, array280, var_BooleanIdentifier);
  lineNumber = 54
  var string287 = new GraceString("/=");
  var string289 = new GraceString("/=");
  var array290 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 54
  var call291 = callmethod(var_ast,"signaturePart", [0]);
  var call292 = callmethod(call291,"new", [2], string289, array290);
  var array288 = new GraceList([
call292,
]);

  lineNumber = 1
  lineNumber = 54
  var call293 = callmethod(var_ast,"methodTypeNode", [0]);
  var call294 = callmethod(call293,"new", [3], string287, array288, var_BooleanIdentifier);
  lineNumber = 55
  var string295 = new GraceString("iter");
  var string297 = new GraceString("iter");
  lineNumber = 1
  lineNumber = 55
  var call298 = callmethod(var_ast,"signaturePart", [0]);
  var call299 = callmethod(call298,"new", [1], string297);
  var array296 = new GraceList([
call299,
]);

  lineNumber = 1
  lineNumber = 55
  var call300 = callmethod(var_ast,"methodTypeNode", [0]);
  var call301 = callmethod(call300,"new", [3], string295, array296, var_DynamicIdentifier);
  lineNumber = 58
  lineNumber = 56
  var string302 = new GraceString("substringFrom()to");
  lineNumber = 58
  lineNumber = 57
  var string304 = new GraceString("substringFrom");
  var array305 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 57
  var call306 = callmethod(var_ast,"signaturePart", [0]);
  var call307 = callmethod(call306,"new", [2], string304, array305);
  lineNumber = 58
  var string308 = new GraceString("to");
  var array309 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 58
  var call310 = callmethod(var_ast,"signaturePart", [0]);
  var call311 = callmethod(call310,"new", [2], string308, array309);
  var array303 = new GraceList([
call307,
call311,
]);

  lineNumber = 1
  lineNumber = 56
  var call312 = callmethod(var_ast,"methodTypeNode", [0]);
  var call313 = callmethod(call312,"new", [3], string302, array303, var_StringIdentifier);
  lineNumber = 60
  lineNumber = 59
  var string314 = new GraceString("replace()with");
  lineNumber = 60
  lineNumber = 59
  var string316 = new GraceString("replace");
  var array317 = new GraceList([
var_StringOther,
]);

  lineNumber = 1
  lineNumber = 59
  var call318 = callmethod(var_ast,"signaturePart", [0]);
  var call319 = callmethod(call318,"new", [2], string316, array317);
  lineNumber = 60
  var string320 = new GraceString("with");
  var array321 = new GraceList([
var_StringOther,
]);

  lineNumber = 1
  lineNumber = 60
  var call322 = callmethod(var_ast,"signaturePart", [0]);
  var call323 = callmethod(call322,"new", [2], string320, array321);
  var array315 = new GraceList([
call319,
call323,
]);

  lineNumber = 1
  lineNumber = 59
  var call324 = callmethod(var_ast,"methodTypeNode", [0]);
  var call325 = callmethod(call324,"new", [3], string314, array315, var_StringIdentifier);
  lineNumber = 61
  var string326 = new GraceString("hashcode");
  var string328 = new GraceString("hashcode");
  lineNumber = 1
  lineNumber = 61
  var call329 = callmethod(var_ast,"signaturePart", [0]);
  var call330 = callmethod(call329,"new", [1], string328);
  var array327 = new GraceList([
call330,
]);

  lineNumber = 1
  lineNumber = 61
  var call331 = callmethod(var_ast,"methodTypeNode", [0]);
  var call332 = callmethod(call331,"new", [3], string326, array327, var_NumberIdentifier);
  lineNumber = 62
  var string333 = new GraceString("indices");
  var string335 = new GraceString("indices");
  lineNumber = 1
  lineNumber = 62
  var call336 = callmethod(var_ast,"signaturePart", [0]);
  var call337 = callmethod(call336,"new", [1], string335);
  var array334 = new GraceList([
call337,
]);

  lineNumber = 1
  lineNumber = 62
  var call338 = callmethod(var_ast,"methodTypeNode", [0]);
  var call339 = callmethod(call338,"new", [3], string333, array334, var_ListIdentifier);
  lineNumber = 63
  var string340 = new GraceString("asString");
  var string342 = new GraceString("asString");
  lineNumber = 1
  lineNumber = 63
  var call343 = callmethod(var_ast,"signaturePart", [0]);
  var call344 = callmethod(call343,"new", [1], string342);
  var array341 = new GraceList([
call344,
]);

  lineNumber = 1
  lineNumber = 63
  var call345 = callmethod(var_ast,"methodTypeNode", [0]);
  var call346 = callmethod(call345,"new", [3], string340, array341, var_StringIdentifier);
  lineNumber = 64
  var string347 = new GraceString("asNumber");
  var string349 = new GraceString("asNumber");
  lineNumber = 1
  lineNumber = 64
  var call350 = callmethod(var_ast,"signaturePart", [0]);
  var call351 = callmethod(call350,"new", [1], string349);
  var array348 = new GraceList([
call351,
]);

  lineNumber = 1
  lineNumber = 64
  var call352 = callmethod(var_ast,"methodTypeNode", [0]);
  var call353 = callmethod(call352,"new", [3], string347, array348, var_NumberIdentifier);
  lineNumber = 65
  var string354 = new GraceString("match");
  var string356 = new GraceString("match");
  var array357 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 65
  var call358 = callmethod(var_ast,"signaturePart", [0]);
  var call359 = callmethod(call358,"new", [2], string356, array357);
  var array355 = new GraceList([
call359,
]);

  lineNumber = 66
  lineNumber = 1
  lineNumber = 65
  var call360 = callmethod(var_ast,"methodTypeNode", [0]);
  var call361 = callmethod(call360,"new", [3], string354, array355, var_DynamicIdentifier);
  var array232 = new GraceList([
call240,
call247,
call254,
call262,
call270,
call278,
call286,
call294,
call301,
call313,
call325,
call332,
call339,
call346,
call353,
call361,
]);

  lineNumber = 67
  lineNumber = 1
  lineNumber = 46
  var call362 = callmethod(var_ast,"typeNode", [0]);
  var call363 = callmethod(call362,"new", [2], string231, array232);
  var var_StringType = call363;
  lineNumber = 1
var func364 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 46
  return var_StringType
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["StringType"] = func364;
  lineNumber = 80
  lineNumber = 67
  var string365 = new GraceString("Boolean");
  lineNumber = 80
  lineNumber = 68
  var string367 = new GraceString("++");
  var string369 = new GraceString("++");
  var array370 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 68
  var call371 = callmethod(var_ast,"signaturePart", [0]);
  var call372 = callmethod(call371,"new", [2], string369, array370);
  var array368 = new GraceList([
call372,
]);

  lineNumber = 1
  lineNumber = 68
  var call373 = callmethod(var_ast,"methodTypeNode", [0]);
  var call374 = callmethod(call373,"new", [3], string367, array368, var_StringIdentifier);
  lineNumber = 69
  var string375 = new GraceString("&");
  var string377 = new GraceString("&");
  var array378 = new GraceList([
var_BooleanOther,
]);

  lineNumber = 1
  lineNumber = 69
  var call379 = callmethod(var_ast,"signaturePart", [0]);
  var call380 = callmethod(call379,"new", [2], string377, array378);
  var array376 = new GraceList([
call380,
]);

  lineNumber = 1
  lineNumber = 69
  var call381 = callmethod(var_ast,"methodTypeNode", [0]);
  var call382 = callmethod(call381,"new", [3], string375, array376, var_BooleanIdentifier);
  lineNumber = 70
  var string383 = new GraceString("|");
  var string385 = new GraceString("|");
  var array386 = new GraceList([
var_BooleanOther,
]);

  lineNumber = 1
  lineNumber = 70
  var call387 = callmethod(var_ast,"signaturePart", [0]);
  var call388 = callmethod(call387,"new", [2], string385, array386);
  var array384 = new GraceList([
call388,
]);

  lineNumber = 1
  lineNumber = 70
  var call389 = callmethod(var_ast,"methodTypeNode", [0]);
  var call390 = callmethod(call389,"new", [3], string383, array384, var_BooleanIdentifier);
  lineNumber = 71
  var string391 = new GraceString("&&");
  var string393 = new GraceString("&&");
  var array394 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 71
  var call395 = callmethod(var_ast,"signaturePart", [0]);
  var call396 = callmethod(call395,"new", [2], string393, array394);
  var array392 = new GraceList([
call396,
]);

  lineNumber = 1
  lineNumber = 71
  var call397 = callmethod(var_ast,"methodTypeNode", [0]);
  var call398 = callmethod(call397,"new", [3], string391, array392, var_BooleanIdentifier);
  lineNumber = 72
  var string399 = new GraceString("||");
  var string401 = new GraceString("||");
  var array402 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 72
  var call403 = callmethod(var_ast,"signaturePart", [0]);
  var call404 = callmethod(call403,"new", [2], string401, array402);
  var array400 = new GraceList([
call404,
]);

  lineNumber = 1
  lineNumber = 72
  var call405 = callmethod(var_ast,"methodTypeNode", [0]);
  var call406 = callmethod(call405,"new", [3], string399, array400, var_BooleanIdentifier);
  lineNumber = 73
  var string407 = new GraceString("==");
  var string409 = new GraceString("==");
  var array410 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 73
  var call411 = callmethod(var_ast,"signaturePart", [0]);
  var call412 = callmethod(call411,"new", [2], string409, array410);
  var array408 = new GraceList([
call412,
]);

  lineNumber = 1
  lineNumber = 73
  var call413 = callmethod(var_ast,"methodTypeNode", [0]);
  var call414 = callmethod(call413,"new", [3], string407, array408, var_BooleanIdentifier);
  lineNumber = 74
  var string415 = new GraceString("!=");
  var string417 = new GraceString("!=");
  var array418 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 74
  var call419 = callmethod(var_ast,"signaturePart", [0]);
  var call420 = callmethod(call419,"new", [2], string417, array418);
  var array416 = new GraceList([
call420,
]);

  lineNumber = 1
  lineNumber = 74
  var call421 = callmethod(var_ast,"methodTypeNode", [0]);
  var call422 = callmethod(call421,"new", [3], string415, array416, var_BooleanIdentifier);
  lineNumber = 75
  var string423 = new GraceString("/=");
  var string425 = new GraceString("/=");
  var array426 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 75
  var call427 = callmethod(var_ast,"signaturePart", [0]);
  var call428 = callmethod(call427,"new", [2], string425, array426);
  var array424 = new GraceList([
call428,
]);

  lineNumber = 1
  lineNumber = 75
  var call429 = callmethod(var_ast,"methodTypeNode", [0]);
  var call430 = callmethod(call429,"new", [3], string423, array424, var_BooleanIdentifier);
  lineNumber = 76
  var string431 = new GraceString("prefix!");
  var string433 = new GraceString("prefix!");
  lineNumber = 1
  lineNumber = 76
  var call434 = callmethod(var_ast,"signaturePart", [0]);
  var call435 = callmethod(call434,"new", [1], string433);
  var array432 = new GraceList([
call435,
]);

  lineNumber = 1
  lineNumber = 76
  var call436 = callmethod(var_ast,"methodTypeNode", [0]);
  var call437 = callmethod(call436,"new", [3], string431, array432, var_BooleanIdentifier);
  lineNumber = 77
  var string438 = new GraceString("not");
  var string440 = new GraceString("not");
  lineNumber = 1
  lineNumber = 77
  var call441 = callmethod(var_ast,"signaturePart", [0]);
  var call442 = callmethod(call441,"new", [1], string440);
  var array439 = new GraceList([
call442,
]);

  lineNumber = 1
  lineNumber = 77
  var call443 = callmethod(var_ast,"methodTypeNode", [0]);
  var call444 = callmethod(call443,"new", [3], string438, array439, var_BooleanIdentifier);
  lineNumber = 78
  var string445 = new GraceString("ifTrue");
  var string447 = new GraceString("ifTrue");
  var array448 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 78
  var call449 = callmethod(var_ast,"signaturePart", [0]);
  var call450 = callmethod(call449,"new", [2], string447, array448);
  var array446 = new GraceList([
call450,
]);

  lineNumber = 1
  lineNumber = 78
  var call451 = callmethod(var_ast,"methodTypeNode", [0]);
  var call452 = callmethod(call451,"new", [3], string445, array446, var_BooleanIdentifier);
  lineNumber = 79
  var string453 = new GraceString("asString");
  var string455 = new GraceString("asString");
  lineNumber = 1
  lineNumber = 79
  var call456 = callmethod(var_ast,"signaturePart", [0]);
  var call457 = callmethod(call456,"new", [1], string455);
  var array454 = new GraceList([
call457,
]);

  lineNumber = 1
  lineNumber = 79
  var call458 = callmethod(var_ast,"methodTypeNode", [0]);
  var call459 = callmethod(call458,"new", [3], string453, array454, var_StringIdentifier);
  lineNumber = 80
  var string460 = new GraceString("match");
  var string462 = new GraceString("match");
  var array463 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 80
  var call464 = callmethod(var_ast,"signaturePart", [0]);
  var call465 = callmethod(call464,"new", [2], string462, array463);
  var array461 = new GraceList([
call465,
]);

  lineNumber = 81
  lineNumber = 1
  lineNumber = 80
  var call466 = callmethod(var_ast,"methodTypeNode", [0]);
  var call467 = callmethod(call466,"new", [3], string460, array461, var_DynamicIdentifier);
  var array366 = new GraceList([
call374,
call382,
call390,
call398,
call406,
call414,
call422,
call430,
call437,
call444,
call452,
call459,
call467,
]);

  lineNumber = 82
  lineNumber = 1
  lineNumber = 67
  var call468 = callmethod(var_ast,"typeNode", [0]);
  var call469 = callmethod(call468,"new", [2], string365, array366);
  var var_BooleanType = call469;
  lineNumber = 1
var func470 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 67
  return var_BooleanType
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["BooleanType"] = func470;
  lineNumber = 100
  lineNumber = 82
  var string471 = new GraceString("List");
  lineNumber = 100
  lineNumber = 83
  var string473 = new GraceString("size");
  var string475 = new GraceString("size");
  var array476 = new GraceList([
]);

  lineNumber = 1
  lineNumber = 83
  var call477 = callmethod(var_ast,"signaturePart", [0]);
  var call478 = callmethod(call477,"new", [2], string475, array476);
  var array474 = new GraceList([
call478,
]);

  lineNumber = 1
  lineNumber = 83
  var call479 = callmethod(var_ast,"methodTypeNode", [0]);
  var call480 = callmethod(call479,"new", [3], string473, array474, var_NumberIdentifier);
  lineNumber = 84
  var string481 = new GraceString("at");
  var string483 = new GraceString("at");
  var array484 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 84
  var call485 = callmethod(var_ast,"signaturePart", [0]);
  var call486 = callmethod(call485,"new", [2], string483, array484);
  var array482 = new GraceList([
call486,
]);

  lineNumber = 1
  lineNumber = 84
  var call487 = callmethod(var_ast,"methodTypeNode", [0]);
  var call488 = callmethod(call487,"new", [3], string481, array482, var_TopOther);
  lineNumber = 85
  var string489 = new GraceString("[]");
  var string491 = new GraceString("[]");
  var array492 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 85
  var call493 = callmethod(var_ast,"signaturePart", [0]);
  var call494 = callmethod(call493,"new", [2], string491, array492);
  var array490 = new GraceList([
call494,
]);

  lineNumber = 1
  lineNumber = 85
  var call495 = callmethod(var_ast,"methodTypeNode", [0]);
  var call496 = callmethod(call495,"new", [3], string489, array490, var_TopOther);
  lineNumber = 86
  var string497 = new GraceString("[]:=");
  var string499 = new GraceString("[]:=");
  var array500 = new GraceList([
var_NumberOther,
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 86
  var call501 = callmethod(var_ast,"signaturePart", [0]);
  var call502 = callmethod(call501,"new", [2], string499, array500);
  var array498 = new GraceList([
call502,
]);

  lineNumber = 1
  lineNumber = 86
  var call503 = callmethod(var_ast,"methodTypeNode", [0]);
  var call504 = callmethod(call503,"new", [3], string497, array498, var_TopOther);
  lineNumber = 88
  lineNumber = 87
  var string505 = new GraceString("at()put");
  lineNumber = 88
  lineNumber = 87
  var string507 = new GraceString("at");
  var array508 = new GraceList([
var_NumberOther,
]);

  lineNumber = 1
  lineNumber = 87
  var call509 = callmethod(var_ast,"signaturePart", [0]);
  var call510 = callmethod(call509,"new", [2], string507, array508);
  lineNumber = 88
  var string511 = new GraceString("put");
  var array512 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 88
  var call513 = callmethod(var_ast,"signaturePart", [0]);
  var call514 = callmethod(call513,"new", [2], string511, array512);
  var array506 = new GraceList([
call510,
call514,
]);

  lineNumber = 1
  lineNumber = 87
  var call515 = callmethod(var_ast,"methodTypeNode", [0]);
  var call516 = callmethod(call515,"new", [3], string505, array506, var_TopOther);
  lineNumber = 89
  var string517 = new GraceString("==");
  var string519 = new GraceString("==");
  var array520 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 89
  var call521 = callmethod(var_ast,"signaturePart", [0]);
  var call522 = callmethod(call521,"new", [2], string519, array520);
  var array518 = new GraceList([
call522,
]);

  lineNumber = 1
  lineNumber = 89
  var call523 = callmethod(var_ast,"methodTypeNode", [0]);
  var call524 = callmethod(call523,"new", [3], string517, array518, var_BooleanIdentifier);
  lineNumber = 90
  var string525 = new GraceString("!=");
  var string527 = new GraceString("!=");
  var array528 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 90
  var call529 = callmethod(var_ast,"signaturePart", [0]);
  var call530 = callmethod(call529,"new", [2], string527, array528);
  var array526 = new GraceList([
call530,
]);

  lineNumber = 1
  lineNumber = 90
  var call531 = callmethod(var_ast,"methodTypeNode", [0]);
  var call532 = callmethod(call531,"new", [3], string525, array526, var_BooleanIdentifier);
  lineNumber = 91
  var string533 = new GraceString("/=");
  var string535 = new GraceString("/=");
  var array536 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 91
  var call537 = callmethod(var_ast,"signaturePart", [0]);
  var call538 = callmethod(call537,"new", [2], string535, array536);
  var array534 = new GraceList([
call538,
]);

  lineNumber = 1
  lineNumber = 91
  var call539 = callmethod(var_ast,"methodTypeNode", [0]);
  var call540 = callmethod(call539,"new", [3], string533, array534, var_BooleanIdentifier);
  lineNumber = 92
  var string541 = new GraceString("contains");
  var string543 = new GraceString("contains");
  var array544 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 92
  var call545 = callmethod(var_ast,"signaturePart", [0]);
  var call546 = callmethod(call545,"new", [2], string543, array544);
  var array542 = new GraceList([
call546,
]);

  lineNumber = 1
  lineNumber = 92
  var call547 = callmethod(var_ast,"methodTypeNode", [0]);
  var call548 = callmethod(call547,"new", [3], string541, array542, var_BooleanIdentifier);
  lineNumber = 93
  var string549 = new GraceString("iter");
  var string551 = new GraceString("iter");
  lineNumber = 1
  lineNumber = 93
  var call552 = callmethod(var_ast,"signaturePart", [0]);
  var call553 = callmethod(call552,"new", [1], string551);
  var array550 = new GraceList([
call553,
]);

  lineNumber = 1
  lineNumber = 93
  var call554 = callmethod(var_ast,"methodTypeNode", [0]);
  var call555 = callmethod(call554,"new", [3], string549, array550, var_DynamicIdentifier);
  lineNumber = 94
  var string556 = new GraceString("push");
  var string558 = new GraceString("push");
  var array559 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 94
  var call560 = callmethod(var_ast,"signaturePart", [0]);
  var call561 = callmethod(call560,"new", [2], string558, array559);
  var array557 = new GraceList([
call561,
]);

  lineNumber = 1
  lineNumber = 94
  var call562 = callmethod(var_ast,"methodTypeNode", [0]);
  var call563 = callmethod(call562,"new", [3], string556, array557, var_TopOther);
  lineNumber = 95
  var string564 = new GraceString("pop");
  var string566 = new GraceString("pop");
  lineNumber = 1
  lineNumber = 95
  var call567 = callmethod(var_ast,"signaturePart", [0]);
  var call568 = callmethod(call567,"new", [1], string566);
  var array565 = new GraceList([
call568,
]);

  lineNumber = 1
  lineNumber = 95
  var call569 = callmethod(var_ast,"methodTypeNode", [0]);
  var call570 = callmethod(call569,"new", [3], string564, array565, var_TopOther);
  lineNumber = 96
  var string571 = new GraceString("first");
  var string573 = new GraceString("first");
  lineNumber = 1
  lineNumber = 96
  var call574 = callmethod(var_ast,"signaturePart", [0]);
  var call575 = callmethod(call574,"new", [1], string573);
  var array572 = new GraceList([
call575,
]);

  lineNumber = 1
  lineNumber = 96
  var call576 = callmethod(var_ast,"methodTypeNode", [0]);
  var call577 = callmethod(call576,"new", [3], string571, array572, var_NumberIdentifier);
  lineNumber = 97
  var string578 = new GraceString("last");
  var string580 = new GraceString("last");
  lineNumber = 1
  lineNumber = 97
  var call581 = callmethod(var_ast,"signaturePart", [0]);
  var call582 = callmethod(call581,"new", [1], string580);
  var array579 = new GraceList([
call582,
]);

  lineNumber = 1
  lineNumber = 97
  var call583 = callmethod(var_ast,"methodTypeNode", [0]);
  var call584 = callmethod(call583,"new", [3], string578, array579, var_NumberIdentifier);
  lineNumber = 98
  var string585 = new GraceString("prepended");
  var string587 = new GraceString("prepended");
  var array588 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 98
  var call589 = callmethod(var_ast,"signaturePart", [0]);
  var call590 = callmethod(call589,"new", [2], string587, array588);
  var array586 = new GraceList([
call590,
]);

  lineNumber = 1
  lineNumber = 98
  var call591 = callmethod(var_ast,"methodTypeNode", [0]);
  var call592 = callmethod(call591,"new", [3], string585, array586, var_ListIdentifier);
  lineNumber = 99
  var string593 = new GraceString("indices");
  var string595 = new GraceString("indices");
  lineNumber = 1
  lineNumber = 99
  var call596 = callmethod(var_ast,"signaturePart", [0]);
  var call597 = callmethod(call596,"new", [1], string595);
  var array594 = new GraceList([
call597,
]);

  lineNumber = 1
  lineNumber = 99
  var call598 = callmethod(var_ast,"methodTypeNode", [0]);
  var call599 = callmethod(call598,"new", [3], string593, array594, var_ListIdentifier);
  lineNumber = 100
  var string600 = new GraceString("asString");
  var string602 = new GraceString("asString");
  lineNumber = 1
  lineNumber = 100
  var call603 = callmethod(var_ast,"signaturePart", [0]);
  var call604 = callmethod(call603,"new", [1], string602);
  var array601 = new GraceList([
call604,
]);

  lineNumber = 101
  lineNumber = 1
  lineNumber = 100
  var call605 = callmethod(var_ast,"methodTypeNode", [0]);
  var call606 = callmethod(call605,"new", [3], string600, array601, var_StringIdentifier);
  var array472 = new GraceList([
call480,
call488,
call496,
call504,
call516,
call524,
call532,
call540,
call548,
call555,
call563,
call570,
call577,
call584,
call592,
call599,
call606,
]);

  lineNumber = 102
  lineNumber = 1
  lineNumber = 82
  var call607 = callmethod(var_ast,"typeNode", [0]);
  var call608 = callmethod(call607,"new", [2], string471, array472);
  var var_ListType = call608;
  lineNumber = 1
var func609 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 82
  return var_ListType
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["ListType"] = func609;
  lineNumber = 104
  lineNumber = 102
  var string610 = new GraceString("Void");
  lineNumber = 104
  lineNumber = 103
  var string612 = new GraceString("==");
  var string614 = new GraceString("==");
  var array615 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 103
  var call616 = callmethod(var_ast,"signaturePart", [0]);
  var call617 = callmethod(call616,"new", [2], string614, array615);
  var array613 = new GraceList([
call617,
]);

  lineNumber = 1
  lineNumber = 103
  var call618 = callmethod(var_ast,"methodTypeNode", [0]);
  var call619 = callmethod(call618,"new", [3], string612, array613, var_BooleanIdentifier);
  lineNumber = 104
  var string620 = new GraceString("!=");
  var string622 = new GraceString("!=");
  var array623 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 104
  var call624 = callmethod(var_ast,"signaturePart", [0]);
  var call625 = callmethod(call624,"new", [2], string622, array623);
  var array621 = new GraceList([
call625,
]);

  lineNumber = 105
  lineNumber = 1
  lineNumber = 104
  var call626 = callmethod(var_ast,"methodTypeNode", [0]);
  var call627 = callmethod(call626,"new", [3], string620, array621, var_BooleanIdentifier);
  var array611 = new GraceList([
call619,
call627,
]);

  lineNumber = 106
  lineNumber = 1
  lineNumber = 102
  var call628 = callmethod(var_ast,"typeNode", [0]);
  var call629 = callmethod(call628,"new", [2], string610, array611);
  var var_VoidType = call629;
  lineNumber = 1
var func630 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 102
  return var_VoidType
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["VoidType"] = func630;
  lineNumber = 108
  lineNumber = 106
  var string631 = new GraceString("Nothing");
  lineNumber = 108
  lineNumber = 107
  var string633 = new GraceString("==");
  var string635 = new GraceString("==");
  var array636 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 107
  var call637 = callmethod(var_ast,"signaturePart", [0]);
  var call638 = callmethod(call637,"new", [2], string635, array636);
  var array634 = new GraceList([
call638,
]);

  lineNumber = 1
  lineNumber = 107
  var call639 = callmethod(var_ast,"methodTypeNode", [0]);
  var call640 = callmethod(call639,"new", [3], string633, array634, var_BooleanIdentifier);
  lineNumber = 108
  var string641 = new GraceString("!=");
  var string643 = new GraceString("!=");
  var array644 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 108
  var call645 = callmethod(var_ast,"signaturePart", [0]);
  var call646 = callmethod(call645,"new", [2], string643, array644);
  var array642 = new GraceList([
call646,
]);

  lineNumber = 109
  lineNumber = 1
  lineNumber = 108
  var call647 = callmethod(var_ast,"methodTypeNode", [0]);
  var call648 = callmethod(call647,"new", [3], string641, array642, var_BooleanIdentifier);
  var array632 = new GraceList([
call640,
call648,
]);

  lineNumber = 110
  lineNumber = 1
  lineNumber = 106
  var call649 = callmethod(var_ast,"typeNode", [0]);
  var call650 = callmethod(call649,"new", [2], string631, array632);
  var var_NothingType = call650;
  lineNumber = 1
var func651 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 106
  return var_NothingType
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["NothingType"] = func651;
  lineNumber = 112
  lineNumber = 110
  var string652 = new GraceString("None");
  lineNumber = 112
  lineNumber = 111
  var string654 = new GraceString("==");
  var string656 = new GraceString("==");
  var array657 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 111
  var call658 = callmethod(var_ast,"signaturePart", [0]);
  var call659 = callmethod(call658,"new", [2], string656, array657);
  var array655 = new GraceList([
call659,
]);

  lineNumber = 1
  lineNumber = 111
  var call660 = callmethod(var_ast,"methodTypeNode", [0]);
  var call661 = callmethod(call660,"new", [3], string654, array655, var_BooleanIdentifier);
  lineNumber = 112
  var string662 = new GraceString("!=");
  var string664 = new GraceString("!=");
  var array665 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 112
  var call666 = callmethod(var_ast,"signaturePart", [0]);
  var call667 = callmethod(call666,"new", [2], string664, array665);
  var array663 = new GraceList([
call667,
]);

  lineNumber = 113
  lineNumber = 1
  lineNumber = 112
  var call668 = callmethod(var_ast,"methodTypeNode", [0]);
  var call669 = callmethod(call668,"new", [3], string662, array663, var_BooleanIdentifier);
  var array653 = new GraceList([
call661,
call669,
]);

  lineNumber = 114
  lineNumber = 1
  lineNumber = 110
  var call670 = callmethod(var_ast,"typeNode", [0]);
  var call671 = callmethod(call670,"new", [2], string652, array653);
  var var_NoneType = call671;
  lineNumber = 1
var func672 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 110
  return var_NoneType
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["NoneType"] = func672;
  lineNumber = 118
  lineNumber = 114
  var string673 = new GraceString("Block");
  lineNumber = 118
  lineNumber = 115
  var string675 = new GraceString("==");
  var string677 = new GraceString("==");
  var array678 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 115
  var call679 = callmethod(var_ast,"signaturePart", [0]);
  var call680 = callmethod(call679,"new", [2], string677, array678);
  var array676 = new GraceList([
call680,
]);

  lineNumber = 1
  lineNumber = 115
  var call681 = callmethod(var_ast,"methodTypeNode", [0]);
  var call682 = callmethod(call681,"new", [3], string675, array676, var_BooleanIdentifier);
  lineNumber = 116
  var string683 = new GraceString("!=");
  var string685 = new GraceString("!=");
  var array686 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 116
  var call687 = callmethod(var_ast,"signaturePart", [0]);
  var call688 = callmethod(call687,"new", [2], string685, array686);
  var array684 = new GraceList([
call688,
]);

  lineNumber = 1
  lineNumber = 116
  var call689 = callmethod(var_ast,"methodTypeNode", [0]);
  var call690 = callmethod(call689,"new", [3], string683, array684, var_BooleanIdentifier);
  lineNumber = 117
  var string691 = new GraceString("apply");
  var string693 = new GraceString("apply");
  lineNumber = 1
  lineNumber = 117
  var call694 = callmethod(var_ast,"signaturePart", [0]);
  var call695 = callmethod(call694,"new", [1], string693);
  var array692 = new GraceList([
call695,
]);

  lineNumber = 1
  lineNumber = 117
  var call696 = callmethod(var_ast,"methodTypeNode", [0]);
  var call697 = callmethod(call696,"new", [3], string691, array692, var_TopOther);
  lineNumber = 118
  var string698 = new GraceString("match");
  var string700 = new GraceString("match");
  lineNumber = 1
  lineNumber = 118
  var call701 = callmethod(var_ast,"signaturePart", [0]);
  var call702 = callmethod(call701,"new", [1], string700);
  var array699 = new GraceList([
call702,
]);

  lineNumber = 119
  lineNumber = 1
  lineNumber = 118
  var call703 = callmethod(var_ast,"methodTypeNode", [0]);
  var call704 = callmethod(call703,"new", [3], string698, array699, var_TopOther);
  var array674 = new GraceList([
call682,
call690,
call697,
call704,
]);

  lineNumber = 120
  lineNumber = 1
  lineNumber = 114
  var call705 = callmethod(var_ast,"typeNode", [0]);
  var call706 = callmethod(call705,"new", [2], string673, array674);
  var var_BlockType = call706;
  lineNumber = 1
var func707 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 114
  return var_BlockType
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["BlockType"] = func707;
  lineNumber = 120
  var string708 = new GraceString("outer");
  var string710 = new GraceString("outer");
  lineNumber = 1
  lineNumber = 120
  var call711 = callmethod(var_ast,"signaturePart", [0]);
  var call712 = callmethod(call711,"new", [1], string710);
  var array709 = new GraceList([
call712,
]);

  lineNumber = 121
  lineNumber = 1
  lineNumber = 120
  var call713 = callmethod(var_ast,"methodTypeNode", [0]);
  var call714 = callmethod(call713,"new", [3], string708, array709, var_DynamicType);
  var var_outerMethod = call714;
  lineNumber = 1
var func715 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 120
  return var_outerMethod
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["outerMethod"] = func715;
  lineNumber = 123
  lineNumber = 121
  var bool716 = new GraceBoolean(false)
  var var_currentReturnType = bool716;
  lineNumber = 1
var func717 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 121
  return var_currentReturnType
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["currentReturnType"] = func717;
  lineNumber = 1
var func718 = function(argcv) {
  var curarg = 1;
  var var___95__var__95__assign__95__tmp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var_currentReturnType = var___95__var__95__assign__95__tmp;
  return var___95__var__95__assign__95__tmp
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["currentReturnType:="] = func718;
  lineNumber = 123
  lineNumber = 1
var func719 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 123
  return var_Binding
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["Binding"] = func719;
  lineNumber = 1
  var obj720 = Grace_allocObject();
  obj720.outer = this;
    var reader_typechecker_outer721 = function() {
    return this.outer;
  }
  obj720.methods["outer"] = reader_typechecker_outer721;
function obj_init_720() {
  var origSuperDepth = superDepth;
  superDepth = this;
var func722 = function(argcv) {
  var curarg = 1;
  var var_kind__39__ = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  var obj723 = Grace_allocObject();
  obj723.outer = this;
    var reader_typechecker_outer724 = function() {
    return this.outer;
  }
  obj723.methods["outer"] = reader_typechecker_outer724;
function obj_init_723() {
  var origSuperDepth = superDepth;
  superDepth = this;
  lineNumber = 124
  obj723.data["kind"] = var_kind__39__;
    var reader_typechecker_kind725 = function() {
    return this.data["kind"];
  }
  obj723.methods["kind"] = reader_typechecker_kind725;
  obj723.data["kind"] = var_kind__39__;
  var writer_typechecker_kind725 = function(argcv, o) {
    this.data["kind"] = o;
  }
  obj723.methods["kind:="] = writer_typechecker_kind725;
obj723.mutable = true;
  lineNumber = 125
  obj723.data["dtype"] = var_DynamicType;
    var reader_typechecker_dtype726 = function() {
    return this.data["dtype"];
  }
  obj723.methods["dtype"] = reader_typechecker_dtype726;
  obj723.data["dtype"] = var_DynamicType;
  var writer_typechecker_dtype726 = function(argcv, o) {
    this.data["dtype"] = o;
  }
  obj723.methods["dtype:="] = writer_typechecker_dtype726;
obj723.mutable = true;
  lineNumber = 126
  var bool727 = new GraceBoolean(false)
  obj723.data["value"] = bool727;
    var reader_typechecker_value728 = function() {
    return this.data["value"];
  }
  obj723.methods["value"] = reader_typechecker_value728;
  obj723.data["value"] = bool727;
  var writer_typechecker_value728 = function(argcv, o) {
    this.data["value"] = o;
  }
  obj723.methods["value:="] = writer_typechecker_value728;
obj723.mutable = true;
  superDepth = origSuperDepth;
}
obj_init_723.apply(obj723, []);
  return obj723
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  obj720.methods["new"] = func722;
  superDepth = origSuperDepth;
}
obj_init_720.apply(obj720, []);
  var var_Binding = obj720;
  lineNumber = 136
var func729 = function(argcv) {
  var curarg = 1;
  var var_name = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 131
  lineNumber = 130
  var bool730 = new GraceBoolean(false)
  var var_ret = bool730;
  lineNumber = 134
  lineNumber = 131
  lineNumber = 134
  var block731 = Grace_allocObject();
  block731.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block731.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block731.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block731.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block731.receiver = this;
  block731.className = 'block<typechecker:134>';
  block731.real = function(
var_sc
) {
  lineNumber = 132
  var call733 = callmethod(var_sc,"contains", [1], var_name);
  if (Grace_isTrue(call733)) {
  lineNumber = 134
  lineNumber = 133
  var bool734 = new GraceBoolean(true)
  var_ret = bool734;
  var if732 = bool734;
}
  return if732;
};
  var call735 = callmethod(Grace_prelude,"for()do", [1, 1], var_scopes, block731);
  lineNumber = 136
  return var_ret
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["haveBinding"] = func729;
  lineNumber = 149
var func736 = function(argcv) {
  var curarg = 1;
  var var_name = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 140
  lineNumber = 139
  var bool737 = new GraceBoolean(false)
  var var_ret = bool737;
  lineNumber = 141
  lineNumber = 140
  var var_scc = var_scopes;
  lineNumber = 143
  lineNumber = 141
  lineNumber = 143
  var block738 = Grace_allocObject();
  block738.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block738.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block738.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block738.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block738.receiver = this;
  block738.className = 'block<typechecker:143>';
  block738.real = function(
var_sc
) {
  lineNumber = 142
  var call740 = callmethod(var_sc,"contains", [1], var_name);
  if (Grace_isTrue(call740)) {
  lineNumber = 143
  var call741 = callmethod(var_sc,"get", [1], var_name);
  var_ret = call741;
  var if739 = call741;
}
  return if739;
};
  var call742 = callmethod(Grace_prelude,"for()do", [1, 1], var_scopes, block738);
  lineNumber = 147
  lineNumber = 149
  lineNumber = 146
  var bool744 = new GraceBoolean(false)
  var opresult746 = callmethod(var_ret, "==", [1], bool744);
  if (Grace_isTrue(opresult746)) {
  lineNumber = 147
  var string747 = new GraceString("undef");
  var call748 = callmethod(var_Binding,"new", [1], string747);
  var_ret = call748;
  var if743 = call748;
}
  lineNumber = 149
  return var_ret
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["findName"] = func736;
  lineNumber = 170
var func749 = function(argcv) {
  var curarg = 1;
  var var_name = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 152
  var string750 = new GraceString("self");
  var bool751 = new GraceBoolean(false)
  lineNumber = 153
  lineNumber = 1
  lineNumber = 152
  var call752 = callmethod(var_ast,"identifierNode", [0]);
  var call753 = callmethod(call752,"new", [2], string750, bool751);
  var var_mem = call753;
  lineNumber = 154
  lineNumber = 1
  lineNumber = 154
  lineNumber = 1
  lineNumber = 153
  var call754 = callmethod(var_scopes,"indices", [0]);
  var call755 = callmethod(call754,"last", [0]);
  var var_lv = call755;
  lineNumber = 155
  lineNumber = 1
  lineNumber = 155
  lineNumber = 1
  lineNumber = 154
  var call756 = callmethod(var_scopes,"indices", [0]);
  var call757 = callmethod(call756,"first", [0]);
  var var_min = call757;
  lineNumber = 164
  lineNumber = 155
  var block758 = Grace_allocObject();
  block758.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block758.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block758.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block758.receiver = this;
  block758.className = 'block<typechecker:155>';
  block758.real = function(
) {
  lineNumber = 1
  lineNumber = 155
  var call759 = callmethod(var_scopes,"at", [1], var_lv);
  var call760 = callmethod(call759,"contains", [1], var_name);
  var call761 = callmethod(call760,"not", [0]);
  return call761;
};
  lineNumber = 164
  var block762 = Grace_allocObject();
  block762.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block762.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block762.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block762.receiver = this;
  block762.className = 'block<typechecker:164>';
  block762.real = function(
) {
  lineNumber = 157
  lineNumber = 156
  var string764 = new GraceString("___is_object");
  var call765 = callmethod(var_scopes,"at", [1], var_lv);
  var call766 = callmethod(call765,"contains", [1], string764);
  if (Grace_isTrue(call766)) {
  lineNumber = 157
  var string767 = new GraceString("outer");
  lineNumber = 158
  lineNumber = 1
  lineNumber = 157
  var call768 = callmethod(var_ast,"memberNode", [0]);
  var call769 = callmethod(call768,"new", [2], string767, var_mem);
  var_mem = call769;
  var if763 = call769;
}
  lineNumber = 160
  lineNumber = 159
  var string771 = new GraceString("___is_class");
  var call772 = callmethod(var_scopes,"at", [1], var_lv);
  var call773 = callmethod(call772,"contains", [1], string771);
  if (Grace_isTrue(call773)) {
  lineNumber = 160
  var string774 = new GraceString("outer");
  lineNumber = 161
  lineNumber = 1
  lineNumber = 160
  var call775 = callmethod(var_ast,"memberNode", [0]);
  var call776 = callmethod(call775,"new", [2], string774, var_mem);
  var_mem = call776;
  var if770 = call776;
}
  lineNumber = 163
  lineNumber = 162
  var diff778 = callmethod(var_lv, "-", [1], new GraceNum(1));
  var_lv = diff778;
  lineNumber = 164
  lineNumber = 166
  lineNumber = 163
  var opresult781 = callmethod(var_lv, "==", [1], var_min);
  if (Grace_isTrue(opresult781)) {
  lineNumber = 164
  var bool782 = new GraceBoolean(false)
  lineNumber = 165
  lineNumber = 1
  lineNumber = 164
  var call783 = callmethod(var_ast,"identifierNode", [0]);
  var call784 = callmethod(call783,"new", [2], var_name, bool782);
  throw new ReturnException(call784, returnTarget);
  var if779 = undefined;
}
  return if779;
};
  var call785 = callmethod(Grace_prelude,"while()do", [1, 1], block758, block762);
  lineNumber = 170
  lineNumber = 167
  var string787 = new GraceString("___is_prelude");
  var call788 = callmethod(var_scopes,"at", [1], var_lv);
  var call789 = callmethod(call788,"contains", [1], string787);
  if (Grace_isTrue(call789)) {
  lineNumber = 168
  var string790 = new GraceString("prelude");
  var bool791 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 168
  var call792 = callmethod(var_ast,"identifierNode", [0]);
  var call793 = callmethod(call792,"new", [2], string790, bool791);
  lineNumber = 169
  lineNumber = 1
  lineNumber = 168
  var call794 = callmethod(var_ast,"memberNode", [0]);
  var call795 = callmethod(call794,"new", [2], var_name, call793);
  var if786 = call795;
  } else {
  lineNumber = 170
  lineNumber = 171
  lineNumber = 1
  lineNumber = 170
  var call796 = callmethod(var_ast,"memberNode", [0]);
  var call797 = callmethod(call796,"new", [2], var_name, var_mem);
  var if786 = call797;
}
  return if786
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["findDeepMethod"] = func749;
  lineNumber = 176
var func798 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1
  lineNumber = 175
  var call799 = callmethod(var_HashMap,"new", [0]);
  var var_scope = call799;
  lineNumber = 176
  var call800 = callmethod(var_scopes,"push", [1], var_scope);
  return call800
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["pushScope"] = func798;
  lineNumber = 180
var func801 = function(argcv) {
  var curarg = 1;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1
  lineNumber = 180
  var call802 = callmethod(var_scopes,"pop", [0]);
  return call802
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["popScope"] = func801;
  lineNumber = 228
var func803 = function(argcv) {
  var curarg = 1;
  var var_b = arguments[curarg];
  curarg++;
  var var_a = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 186
  lineNumber = 184
  var string805 = new GraceString("IgnoreTypes");
  lineNumber = 187
  lineNumber = 1
  lineNumber = 184
  var call806 = callmethod(var_util,"extensions", [0]);
  var call807 = callmethod(call806,"contains", [1], string805);
  if (Grace_isTrue(call807)) {
  lineNumber = 186
  lineNumber = 185
  return var_DynamicType
  var if804 = undefined;
}
  lineNumber = 189
  lineNumber = 190
  lineNumber = 187
  var bool809 = new GraceBoolean(false)
  var opresult811 = callmethod(var_b, "==", [1], bool809);
  lineNumber = 190
  lineNumber = 187
  var bool812 = new GraceBoolean(false)
  var opresult814 = callmethod(var_a, "==", [1], bool812);
  var opresult816 = callmethod(opresult811, "|", [1], opresult814);
  if (Grace_isTrue(opresult816)) {
  lineNumber = 189
  lineNumber = 188
  var bool817 = new GraceBoolean(true)
  return bool817
  var if808 = undefined;
}
  lineNumber = 192
  lineNumber = 193
  lineNumber = 1
  lineNumber = 190
  var call819 = callmethod(var_a,"value", [0]);
  var string820 = new GraceString("Dynamic");
  var opresult822 = callmethod(call819, "==", [1], string820);
  if (Grace_isTrue(opresult822)) {
  lineNumber = 192
  lineNumber = 191
  var bool823 = new GraceBoolean(true)
  return bool823
  var if818 = undefined;
}
  lineNumber = 195
  lineNumber = 196
  lineNumber = 1
  lineNumber = 193
  var call825 = callmethod(var_b,"value", [0]);
  var string826 = new GraceString("Dynamic");
  var opresult828 = callmethod(call825, "==", [1], string826);
  if (Grace_isTrue(opresult828)) {
  lineNumber = 195
  lineNumber = 194
  var bool829 = new GraceBoolean(true)
  return bool829
  var if824 = undefined;
}
  lineNumber = 203
  lineNumber = 204
  lineNumber = 1
  lineNumber = 204
  lineNumber = 1
  lineNumber = 196
  var call831 = callmethod(var_b,"unionTypes", [0]);
  var call832 = callmethod(call831,"size", [0]);
  var opresult834 = callmethod(call832, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult834)) {
  lineNumber = 200
  lineNumber = 197
  lineNumber = 1
  lineNumber = 197
  var call835 = callmethod(var_b,"unionTypes", [0]);
  lineNumber = 200
  var block836 = Grace_allocObject();
  block836.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block836.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block836.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block836.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block836.receiver = this;
  block836.className = 'block<typechecker:200>';
  block836.real = function(
var_ut
) {
  lineNumber = 198
  lineNumber = 1
  lineNumber = 198
  var call838 = callmethod(this,"findType", [1], var_ut);
  lineNumber = 201
  var call839 = callmethod(this,"conformsType()to", [1, 1], call838, var_a);
  var call840 = callmethod(call839,"not", [0]);
  if (Grace_isTrue(call840)) {
  lineNumber = 200
  lineNumber = 199
  var bool841 = new GraceBoolean(false)
  throw new ReturnException(bool841, returnTarget);
  var if837 = undefined;
}
  return if837;
};
  var call842 = callmethod(Grace_prelude,"for()do", [1, 1], call835, block836);
  lineNumber = 203
  lineNumber = 202
  var bool843 = new GraceBoolean(true)
  return bool843
  var if830 = undefined;
}
  lineNumber = 211
  lineNumber = 212
  lineNumber = 1
  lineNumber = 212
  lineNumber = 1
  lineNumber = 204
  var call845 = callmethod(var_a,"unionTypes", [0]);
  var call846 = callmethod(call845,"size", [0]);
  var opresult848 = callmethod(call846, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult848)) {
  lineNumber = 208
  lineNumber = 205
  lineNumber = 1
  lineNumber = 205
  var call849 = callmethod(var_a,"unionTypes", [0]);
  lineNumber = 208
  var block850 = Grace_allocObject();
  block850.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block850.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block850.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block850.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block850.receiver = this;
  block850.className = 'block<typechecker:208>';
  block850.real = function(
var_ut
) {
  lineNumber = 206
  var call852 = callmethod(this,"findType", [1], var_ut);
  lineNumber = 209
  var call853 = callmethod(this,"conformsType()to", [1, 1], var_b, call852);
  if (Grace_isTrue(call853)) {
  lineNumber = 208
  lineNumber = 207
  var bool854 = new GraceBoolean(true)
  throw new ReturnException(bool854, returnTarget);
  var if851 = undefined;
}
  return if851;
};
  var call855 = callmethod(Grace_prelude,"for()do", [1, 1], call849, block850);
  lineNumber = 211
  lineNumber = 210
  var bool856 = new GraceBoolean(false)
  return bool856
  var if844 = undefined;
}
  lineNumber = 212
  var call857 = callmethod(var_subtype,"conformsType()to", [1, 1], var_b, var_a);
  return call857
  lineNumber = 214
  lineNumber = 213
  var bool858 = new GraceBoolean(true)
  var var_foundall = bool858;
  lineNumber = 225
  lineNumber = 214
  lineNumber = 1
  lineNumber = 214
  var call859 = callmethod(var_a,"methods", [0]);
  lineNumber = 225
  var block860 = Grace_allocObject();
  block860.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block860.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block860.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block860.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block860.receiver = this;
  block860.className = 'block<typechecker:225>';
  block860.real = function(
var_m1
) {
  lineNumber = 215
  lineNumber = 1
  lineNumber = 215
  var call861 = callmethod(var_m1,"rtype", [0]);
  lineNumber = 216
  var call862 = callmethod(this,"findType", [1], call861);
  var var_rtype1 = call862;
  lineNumber = 217
  lineNumber = 216
  var bool863 = new GraceBoolean(false)
  var var_found = bool863;
  lineNumber = 221
  lineNumber = 217
  lineNumber = 1
  lineNumber = 217
  var call864 = callmethod(var_b,"methods", [0]);
  lineNumber = 221
  var block865 = Grace_allocObject();
  block865.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block865.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block865.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block865.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block865.receiver = this;
  block865.className = 'block<typechecker:221>';
  block865.real = function(
var_m2
) {
  lineNumber = 222
  lineNumber = 1
  lineNumber = 218
  var call867 = callmethod(var_m2,"value", [0]);
  lineNumber = 222
  lineNumber = 1
  lineNumber = 218
  var call868 = callmethod(var_m1,"value", [0]);
  var opresult870 = callmethod(call867, "==", [1], call868);
  if (Grace_isTrue(opresult870)) {
  lineNumber = 219
  lineNumber = 1
  lineNumber = 219
  var call871 = callmethod(var_m2,"rtype", [0]);
  lineNumber = 220
  var call872 = callmethod(this,"findType", [1], call871);
  var var_rtype2 = call872;
  lineNumber = 221
  lineNumber = 220
  var bool873 = new GraceBoolean(true)
  var_found = bool873;
  var if866 = bool873;
}
  return if866;
};
  var call874 = callmethod(Grace_prelude,"for()do", [1, 1], call864, block865);
  lineNumber = 225
  lineNumber = 226
  lineNumber = 223
  var call876 = callmethod(var_found,"prefix!", [0]);
  if (Grace_isTrue(call876)) {
  lineNumber = 225
  lineNumber = 224
  var bool877 = new GraceBoolean(false)
  throw new ReturnException(bool877, returnTarget);
  var if875 = undefined;
}
  return if875;
};
  var call878 = callmethod(Grace_prelude,"for()do", [1, 1], call859, block860);
  lineNumber = 228
  lineNumber = 227
  var bool879 = new GraceBoolean(true)
  return bool879
  return undefined
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["conformsType()to"] = func803;
  lineNumber = 451
var func880 = function(argcv) {
  var curarg = 1;
  var var_expr = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 250
  lineNumber = 251
  lineNumber = 1
  lineNumber = 231
  var call882 = callmethod(var_expr,"kind", [0]);
  var string883 = new GraceString("identifier");
  var opresult885 = callmethod(call882, "==", [1], string883);
  if (Grace_isTrue(opresult885)) {
  lineNumber = 234
  lineNumber = 235
  lineNumber = 1
  lineNumber = 232
  var call887 = callmethod(var_expr,"value", [0]);
  var string888 = new GraceString("true");
  var opresult890 = callmethod(call887, "==", [1], string888);
  lineNumber = 235
  lineNumber = 1
  lineNumber = 232
  var call891 = callmethod(var_expr,"value", [0]);
  var string892 = new GraceString("false");
  var opresult894 = callmethod(call891, "==", [1], string892);
  var opresult896 = callmethod(opresult890, "|", [1], opresult894);
  if (Grace_isTrue(opresult896)) {
  lineNumber = 234
  lineNumber = 233
  return var_BooleanType
  var if886 = undefined;
}
  lineNumber = 243
  lineNumber = 246
  lineNumber = 1
  lineNumber = 235
  var call898 = callmethod(var_expr,"dtype", [0]);
  var bool899 = new GraceBoolean(false)
  var opresult901 = callmethod(call898, "/=", [1], bool899);
  if (Grace_isTrue(opresult901)) {
  lineNumber = 243
  lineNumber = 245
  lineNumber = 1
  lineNumber = 245
  lineNumber = 1
  lineNumber = 236
  var call903 = callmethod(var_expr,"dtype", [0]);
  var call904 = callmethod(call903,"kind", [0]);
  var string905 = new GraceString("type");
  var opresult907 = callmethod(call904, "==", [1], string905);
  if (Grace_isTrue(opresult907)) {
  lineNumber = 243
  lineNumber = 244
  lineNumber = 1
  lineNumber = 244
  lineNumber = 1
  lineNumber = 244
  lineNumber = 1
  lineNumber = 237
  var call909 = callmethod(var_expr,"dtype", [0]);
  var call910 = callmethod(call909,"generics", [0]);
  var call911 = callmethod(call910,"size", [0]);
  var opresult913 = callmethod(call911, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult913)) {
  lineNumber = 238
  lineNumber = 1
  lineNumber = 238
  var call914 = callmethod(var_expr,"dtype", [0]);
  lineNumber = 239
  var call915 = callmethod(this,"findType", [1], call914);
  var var_gitype = call915;
  lineNumber = 240
  lineNumber = 239
  lineNumber = 1
  lineNumber = 239
  lineNumber = 1
  lineNumber = 239
  var call916 = callmethod(var_expr,"dtype", [0]);
  var call917 = callmethod(call916,"generics", [0]);
  lineNumber = 240
  var block918 = Grace_allocObject();
  block918.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block918.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block918.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block918.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block918.receiver = this;
  block918.className = 'block<typechecker:240>';
  block918.real = function(
var_gt
) {
  lineNumber = 241
  var call919 = callmethod(this,"betaReduceType", [3], var_gitype, var_gt, var_DynamicType);
  var_gitype = call919;
  return call919;
};
  var call920 = callmethod(Grace_prelude,"for()do", [1, 1], call917, block918);
  lineNumber = 243
  lineNumber = 242
  return var_gitype
  var if908 = undefined;
}
  var if902 = if908;
}
  var if897 = if902;
}
  lineNumber = 248
  lineNumber = 249
  lineNumber = 1
  lineNumber = 246
  var call922 = callmethod(var_expr,"value", [0]);
  var string923 = new GraceString("self");
  var opresult925 = callmethod(call922, "==", [1], string923);
  if (Grace_isTrue(opresult925)) {
  lineNumber = 248
  lineNumber = 1
  lineNumber = 247
  var call926 = callmethod(var_selftypes,"last", [0]);
  return call926
  var if921 = undefined;
}
  lineNumber = 250
  lineNumber = 1
  lineNumber = 249
  var call927 = callmethod(var_expr,"dtype", [0]);
  return call927
  var if881 = undefined;
}
  lineNumber = 253
  lineNumber = 254
  lineNumber = 1
  lineNumber = 251
  var call929 = callmethod(var_expr,"kind", [0]);
  var string930 = new GraceString("num");
  var opresult932 = callmethod(call929, "==", [1], string930);
  if (Grace_isTrue(opresult932)) {
  lineNumber = 253
  lineNumber = 252
  return var_NumberType
  var if928 = undefined;
}
  lineNumber = 256
  lineNumber = 257
  lineNumber = 1
  lineNumber = 254
  var call934 = callmethod(var_expr,"kind", [0]);
  var string935 = new GraceString("string");
  var opresult937 = callmethod(call934, "==", [1], string935);
  if (Grace_isTrue(opresult937)) {
  lineNumber = 256
  lineNumber = 255
  return var_StringType
  var if933 = undefined;
}
  lineNumber = 259
  lineNumber = 260
  lineNumber = 1
  lineNumber = 257
  var call939 = callmethod(var_expr,"kind", [0]);
  var string940 = new GraceString("array");
  var opresult942 = callmethod(call939, "==", [1], string940);
  if (Grace_isTrue(opresult942)) {
  lineNumber = 259
  lineNumber = 258
  return var_ListType
  var if938 = undefined;
}
  lineNumber = 262
  lineNumber = 263
  lineNumber = 1
  lineNumber = 260
  var call944 = callmethod(var_expr,"kind", [0]);
  var string945 = new GraceString("block");
  var opresult947 = callmethod(call944, "==", [1], string945);
  if (Grace_isTrue(opresult947)) {
  lineNumber = 262
  lineNumber = 261
  return var_BlockType
  var if943 = undefined;
}
  lineNumber = 299
  lineNumber = 300
  lineNumber = 1
  lineNumber = 263
  var call949 = callmethod(var_expr,"kind", [0]);
  var string950 = new GraceString("op");
  var opresult952 = callmethod(call949, "==", [1], string950);
  if (Grace_isTrue(opresult952)) {
  lineNumber = 265
  lineNumber = 1
  lineNumber = 264
  var call953 = callmethod(var_expr,"value", [0]);
  var var_opname = call953;
  lineNumber = 266
  lineNumber = 1
  lineNumber = 265
  var call954 = callmethod(var_expr,"left", [0]);
  var var_opreceiver = call954;
  lineNumber = 267
  lineNumber = 1
  lineNumber = 266
  var call955 = callmethod(var_expr,"right", [0]);
  var var_opargument = call955;
  lineNumber = 267
  lineNumber = 1
  lineNumber = 267
  var call956 = callmethod(var_expr,"left", [0]);
  lineNumber = 268
  var call957 = callmethod(this,"expressionType", [1], call956);
  var var_opreceivertype = call957;
  lineNumber = 1
  lineNumber = 268
  var call958 = callmethod(var_expr,"right", [0]);
  lineNumber = 269
  var call959 = callmethod(this,"expressionType", [1], call958);
  var var_opargumenttype = call959;
  lineNumber = 271
  lineNumber = 272
  lineNumber = 269
  var bool961 = new GraceBoolean(false)
  var opresult963 = callmethod(var_opreceivertype, "==", [1], bool961);
  if (Grace_isTrue(opresult963)) {
  lineNumber = 271
  lineNumber = 270
  return var_DynamicType
  var if960 = undefined;
}
  lineNumber = 274
  lineNumber = 275
  lineNumber = 1
  lineNumber = 272
  var call965 = callmethod(var_opreceivertype,"value", [0]);
  var string966 = new GraceString("Dynamic");
  var opresult968 = callmethod(call965, "==", [1], string966);
  if (Grace_isTrue(opresult968)) {
  lineNumber = 274
  lineNumber = 273
  return var_DynamicType
  var if964 = undefined;
}
  lineNumber = 276
  lineNumber = 275
  var bool969 = new GraceBoolean(false)
  var var_opfound = bool969;
  lineNumber = 277
  lineNumber = 276
  var bool970 = new GraceBoolean(false)
  var var_opmeth = bool970;
  lineNumber = 281
  lineNumber = 277
  lineNumber = 1
  lineNumber = 277
  var call971 = callmethod(var_opreceivertype,"methods", [0]);
  lineNumber = 281
  var block972 = Grace_allocObject();
  block972.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block972.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block972.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block972.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block972.receiver = this;
  block972.className = 'block<typechecker:281>';
  block972.real = function(
var_m
) {
  lineNumber = 282
  lineNumber = 1
  lineNumber = 278
  var call974 = callmethod(var_m,"value", [0]);
  var opresult976 = callmethod(call974, "==", [1], var_opname);
  if (Grace_isTrue(opresult976)) {
  lineNumber = 280
  lineNumber = 279
  var bool977 = new GraceBoolean(true)
  var_opfound = bool977;
  lineNumber = 281
  lineNumber = 280
  var_opmeth = var_m;
  var if973 = var_m;
}
  return if973;
};
  var call978 = callmethod(Grace_prelude,"for()do", [1, 1], call971, block972);
  lineNumber = 284
  lineNumber = 286
  lineNumber = 1
  lineNumber = 283
  var call980 = callmethod(var_opfound,"not", [0]);
  if (Grace_isTrue(call980)) {
  lineNumber = 284
  var string981 = new GraceString("no such operator '");
  var opresult983 = callmethod(string981, "++", [1], var_opname);
  var string984 = new GraceString("' in ");
  var opresult986 = callmethod(opresult983, "++", [1], string984);
  lineNumber = 1
  lineNumber = 284
  var call987 = callmethod(var_opreceivertype,"value", [0]);
  var opresult989 = callmethod(opresult986, "++", [1], call987);
  var string990 = new GraceString("");
  var opresult992 = callmethod(opresult989, "++", [1], string990);
  var call993 = callmethod(var_util,"type_error", [1], opresult992);
  var if979 = call993;
}
  lineNumber = 287
  lineNumber = 1
  lineNumber = 287
  lineNumber = 1
  lineNumber = 287
  lineNumber = 1
  lineNumber = 287
  lineNumber = 1
  lineNumber = 287
  lineNumber = 1
  lineNumber = 286
  var call994 = callmethod(var_opmeth,"signature", [0]);
  var call995 = callmethod(call994,"first", [0]);
  var call996 = callmethod(call995,"params", [0]);
  var call997 = callmethod(call996,"first", [0]);
  var call998 = callmethod(call997,"dtype", [0]);
  var var_opparamtypeid = call998;
  lineNumber = 289
  lineNumber = 291
  lineNumber = 287
  var bool1000 = new GraceBoolean(false)
  var opresult1002 = callmethod(bool1000, "!=", [1], var_opparamtypeid);
  if (Grace_isTrue(opresult1002)) {
  lineNumber = 288
  lineNumber = 1
  lineNumber = 288
  var call1003 = callmethod(var_opparamtypeid,"value", [0]);
  var call1004 = callmethod(this,"findName", [1], call1003);
  var if999 = call1004;
  } else {
  lineNumber = 289
  var obj1005 = Grace_allocObject();
  obj1005.outer = this;
    var reader_typechecker_outer1006 = function() {
    return this.outer;
  }
  obj1005.methods["outer"] = reader_typechecker_outer1006;
function obj_init_1005() {
  var origSuperDepth = superDepth;
  superDepth = this;
  var obj1007 = Grace_allocObject();
  obj1007.outer = obj1005;
    var reader_typechecker_outer1008 = function() {
    return this.outer;
  }
  obj1007.methods["outer"] = reader_typechecker_outer1008;
function obj_init_1007() {
  var origSuperDepth = superDepth;
  superDepth = this;
  var string1009 = new GraceString("Dynamic");
  obj1007.data["value"] = string1009;
    var reader_typechecker_value1010 = function() {
    return this.data["value"];
  }
  reader_typechecker_value1010.def = true;
  obj1007.methods["value"] = reader_typechecker_value1010;
  superDepth = origSuperDepth;
}
obj_init_1007.apply(obj1007, []);
  obj1005.data["value"] = obj1007;
    var reader_typechecker_value1011 = function() {
    return this.data["value"];
  }
  reader_typechecker_value1011.def = true;
  obj1005.methods["value"] = reader_typechecker_value1011;
  superDepth = origSuperDepth;
}
obj_init_1005.apply(obj1005, []);
  var if999 = obj1005;
}
  var var_opparamtypebd = if999;
  lineNumber = 294
  lineNumber = 291
  lineNumber = 1
  lineNumber = 291
  lineNumber = 1
  lineNumber = 291
  var call1013 = callmethod(var_opparamtypebd,"value", [0]);
  lineNumber = 296
  var call1014 = callmethod(this,"conformsType()to", [1, 1], var_opargumenttype, call1013);
  var call1015 = callmethod(call1014,"not", [0]);
  if (Grace_isTrue(call1015)) {
  lineNumber = 294
  lineNumber = 292
  var string1016 = new GraceString("passed argument of type ");
  lineNumber = 294
  lineNumber = 293
  var string1017 = new GraceString("");
  lineNumber = 294
  lineNumber = 1
  lineNumber = 293
  var call1018 = callmethod(var_opargumenttype,"value", [0]);
  var opresult1020 = callmethod(string1017, "++", [1], call1018);
  var string1021 = new GraceString(" to parameter of type ");
  var opresult1023 = callmethod(opresult1020, "++", [1], string1021);
  var opresult1025 = callmethod(string1016, "++", [1], opresult1023);
  lineNumber = 294
  lineNumber = 1
  lineNumber = 294
  lineNumber = 1
  lineNumber = 294
  var call1026 = callmethod(var_opparamtypebd,"value", [0]);
  var call1027 = callmethod(call1026,"value", [0]);
  var opresult1029 = callmethod(opresult1025, "++", [1], call1027);
  lineNumber = 292
  var call1030 = callmethod(var_util,"type_error", [1], opresult1029);
  var if1012 = call1030;
}
  lineNumber = 297
  lineNumber = 1
  lineNumber = 296
  var call1031 = callmethod(var_opmeth,"rtype", [0]);
  var var_opreturntypeid = call1031;
  lineNumber = 297
  lineNumber = 1
  lineNumber = 297
  var call1032 = callmethod(var_opreturntypeid,"value", [0]);
  lineNumber = 298
  var call1033 = callmethod(this,"findName", [1], call1032);
  var var_opreturntypebd = call1033;
  lineNumber = 299
  lineNumber = 1
  lineNumber = 298
  var call1034 = callmethod(var_opreturntypebd,"value", [0]);
  return call1034
  var if948 = undefined;
}
  lineNumber = 331
  lineNumber = 332
  lineNumber = 1
  lineNumber = 300
  var call1036 = callmethod(var_expr,"kind", [0]);
  var string1037 = new GraceString("member");
  var opresult1039 = callmethod(call1036, "==", [1], string1037);
  if (Grace_isTrue(opresult1039)) {
  lineNumber = 302
  lineNumber = 1
  lineNumber = 301
  var call1040 = callmethod(var_expr,"value", [0]);
  var var_memname = call1040;
  lineNumber = 303
  lineNumber = 1
  lineNumber = 302
  var call1041 = callmethod(var_expr,"in", [0]);
  var var_memin = call1041;
  lineNumber = 303
  lineNumber = 304
  var call1042 = callmethod(this,"expressionType", [1], var_memin);
  var var_memreceivertype = call1042;
  lineNumber = 306
  lineNumber = 307
  lineNumber = 304
  var bool1044 = new GraceBoolean(false)
  var opresult1046 = callmethod(var_memreceivertype, "==", [1], bool1044);
  if (Grace_isTrue(opresult1046)) {
  lineNumber = 306
  lineNumber = 305
  return var_DynamicType
  var if1043 = undefined;
}
  lineNumber = 309
  lineNumber = 310
  lineNumber = 1
  lineNumber = 307
  var call1048 = callmethod(var_memreceivertype,"value", [0]);
  var string1049 = new GraceString("Dynamic");
  var opresult1051 = callmethod(call1048, "==", [1], string1049);
  if (Grace_isTrue(opresult1051)) {
  lineNumber = 309
  lineNumber = 308
  return var_DynamicType
  var if1047 = undefined;
}
  lineNumber = 311
  lineNumber = 310
  var bool1052 = new GraceBoolean(false)
  var var_memfound = bool1052;
  lineNumber = 312
  lineNumber = 311
  var bool1053 = new GraceBoolean(false)
  var var_memmeth = bool1053;
  lineNumber = 316
  lineNumber = 312
  lineNumber = 1
  lineNumber = 312
  var call1054 = callmethod(var_memreceivertype,"methods", [0]);
  lineNumber = 316
  var block1055 = Grace_allocObject();
  block1055.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1055.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1055.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1055.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1055.receiver = this;
  block1055.className = 'block<typechecker:316>';
  block1055.real = function(
var_m
) {
  lineNumber = 317
  lineNumber = 1
  lineNumber = 313
  var call1057 = callmethod(var_m,"value", [0]);
  var opresult1059 = callmethod(call1057, "==", [1], var_memname);
  if (Grace_isTrue(opresult1059)) {
  lineNumber = 315
  lineNumber = 314
  var bool1060 = new GraceBoolean(true)
  var_memfound = bool1060;
  lineNumber = 316
  lineNumber = 315
  var_memmeth = var_m;
  var if1056 = var_m;
}
  return if1056;
};
  var call1061 = callmethod(Grace_prelude,"for()do", [1, 1], call1054, block1055);
  lineNumber = 319
  lineNumber = 321
  lineNumber = 1
  lineNumber = 318
  var call1063 = callmethod(var_memfound,"not", [0]);
  if (Grace_isTrue(call1063)) {
  lineNumber = 319
  var string1064 = new GraceString("no such method '");
  var opresult1066 = callmethod(string1064, "++", [1], var_memname);
  var string1067 = new GraceString("' in ");
  var opresult1069 = callmethod(opresult1066, "++", [1], string1067);
  lineNumber = 1
  lineNumber = 319
  var call1070 = callmethod(var_memreceivertype,"value", [0]);
  var opresult1072 = callmethod(opresult1069, "++", [1], call1070);
  var string1073 = new GraceString("");
  var opresult1075 = callmethod(opresult1072, "++", [1], string1073);
  var call1076 = callmethod(var_util,"type_error", [1], opresult1075);
  var if1062 = call1076;
}
  lineNumber = 323
  lineNumber = 325
  lineNumber = 1
  lineNumber = 325
  lineNumber = 1
  lineNumber = 325
  lineNumber = 1
  lineNumber = 325
  lineNumber = 1
  lineNumber = 321
  var call1078 = callmethod(var_memmeth,"signature", [0]);
  var call1079 = callmethod(call1078,"first", [0]);
  var call1080 = callmethod(call1079,"params", [0]);
  var call1081 = callmethod(call1080,"size", [0]);
  var opresult1083 = callmethod(call1081, "/=", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1083)) {
  lineNumber = 323
  lineNumber = 322
  var string1084 = new GraceString("method '");
  var opresult1086 = callmethod(string1084, "++", [1], var_memname);
  var string1087 = new GraceString("' in ");
  var opresult1089 = callmethod(opresult1086, "++", [1], string1087);
  lineNumber = 323
  lineNumber = 1
  lineNumber = 322
  var call1090 = callmethod(var_memreceivertype,"value", [0]);
  var opresult1092 = callmethod(opresult1089, "++", [1], call1090);
  var string1093 = new GraceString(" ");
  var opresult1095 = callmethod(opresult1092, "++", [1], string1093);
  lineNumber = 323
  var string1096 = new GraceString("requires ");
  lineNumber = 1
  lineNumber = 323
  lineNumber = 1
  lineNumber = 323
  lineNumber = 1
  lineNumber = 323
  lineNumber = 1
  lineNumber = 323
  var call1097 = callmethod(var_memmeth,"signature", [0]);
  var call1098 = callmethod(call1097,"first", [0]);
  var call1099 = callmethod(call1098,"params", [0]);
  var call1100 = callmethod(call1099,"size", [0]);
  var opresult1102 = callmethod(string1096, "++", [1], call1100);
  var string1103 = new GraceString(" arguments, not 0");
  var opresult1105 = callmethod(opresult1102, "++", [1], string1103);
  var opresult1107 = callmethod(opresult1095, "++", [1], opresult1105);
  lineNumber = 322
  var call1108 = callmethod(var_util,"type_error", [1], opresult1107);
  var if1077 = call1108;
}
  lineNumber = 326
  lineNumber = 1
  lineNumber = 325
  var call1109 = callmethod(var_memmeth,"rtype", [0]);
  var var_memreturntypeid = call1109;
  lineNumber = 328
  lineNumber = 329
  lineNumber = 1
  lineNumber = 326
  var call1111 = callmethod(var_memreturntypeid,"kind", [0]);
  var string1112 = new GraceString("type");
  var opresult1114 = callmethod(call1111, "==", [1], string1112);
  if (Grace_isTrue(opresult1114)) {
  lineNumber = 328
  lineNumber = 327
  return var_memreturntypeid
  var if1110 = undefined;
}
  lineNumber = 329
  lineNumber = 1
  lineNumber = 329
  var call1115 = callmethod(var_memreturntypeid,"value", [0]);
  lineNumber = 330
  var call1116 = callmethod(this,"findName", [1], call1115);
  var var_memreturntypebd = call1116;
  lineNumber = 331
  lineNumber = 1
  lineNumber = 330
  var call1117 = callmethod(var_memreturntypebd,"value", [0]);
  return call1117
  var if1035 = undefined;
}
  lineNumber = 390
  lineNumber = 391
  lineNumber = 1
  lineNumber = 332
  var call1119 = callmethod(var_expr,"kind", [0]);
  var string1120 = new GraceString("call");
  var opresult1122 = callmethod(call1119, "==", [1], string1120);
  if (Grace_isTrue(opresult1122)) {
  lineNumber = 334
  lineNumber = 1
  lineNumber = 333
  var call1123 = callmethod(var_expr,"value", [0]);
  var var_callmem = call1123;
  lineNumber = 336
  lineNumber = 337
  lineNumber = 1
  lineNumber = 334
  var call1125 = callmethod(var_callmem,"kind", [0]);
  var string1126 = new GraceString("member");
  var opresult1128 = callmethod(call1125, "/=", [1], string1126);
  if (Grace_isTrue(opresult1128)) {
  lineNumber = 336
  lineNumber = 335
  return var_DynamicType
  var if1124 = undefined;
}
  lineNumber = 338
  lineNumber = 1
  lineNumber = 337
  var call1129 = callmethod(var_callmem,"value", [0]);
  var var_callname = call1129;
  lineNumber = 339
  lineNumber = 1
  lineNumber = 338
  var call1130 = callmethod(var_callmem,"in", [0]);
  var var_callin = call1130;
  lineNumber = 339
  lineNumber = 340
  var call1131 = callmethod(this,"expressionType", [1], var_callin);
  var var_callreceivertype = call1131;
  lineNumber = 342
  lineNumber = 343
  lineNumber = 340
  var bool1133 = new GraceBoolean(false)
  var opresult1135 = callmethod(var_callreceivertype, "==", [1], bool1133);
  if (Grace_isTrue(opresult1135)) {
  lineNumber = 342
  lineNumber = 341
  return var_DynamicType
  var if1132 = undefined;
}
  lineNumber = 345
  lineNumber = 346
  lineNumber = 1
  lineNumber = 343
  var call1137 = callmethod(var_callreceivertype,"value", [0]);
  var string1138 = new GraceString("Dynamic");
  var opresult1140 = callmethod(call1137, "==", [1], string1138);
  if (Grace_isTrue(opresult1140)) {
  lineNumber = 345
  lineNumber = 344
  return var_DynamicType
  var if1136 = undefined;
}
  lineNumber = 347
  lineNumber = 346
  var bool1141 = new GraceBoolean(false)
  var var_callfound = bool1141;
  lineNumber = 348
  lineNumber = 347
  var bool1142 = new GraceBoolean(false)
  var var_callmeth = bool1142;
  lineNumber = 352
  lineNumber = 348
  lineNumber = 1
  lineNumber = 348
  var call1143 = callmethod(var_callreceivertype,"methods", [0]);
  lineNumber = 352
  var block1144 = Grace_allocObject();
  block1144.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1144.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1144.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1144.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1144.receiver = this;
  block1144.className = 'block<typechecker:352>';
  block1144.real = function(
var_m
) {
  lineNumber = 353
  lineNumber = 1
  lineNumber = 349
  var call1146 = callmethod(var_m,"value", [0]);
  var opresult1148 = callmethod(call1146, "==", [1], var_callname);
  if (Grace_isTrue(opresult1148)) {
  lineNumber = 351
  lineNumber = 350
  var bool1149 = new GraceBoolean(true)
  var_callfound = bool1149;
  lineNumber = 352
  lineNumber = 351
  var_callmeth = var_m;
  var if1145 = var_m;
}
  return if1145;
};
  var call1150 = callmethod(Grace_prelude,"for()do", [1, 1], call1143, block1144);
  lineNumber = 355
  lineNumber = 357
  lineNumber = 1
  lineNumber = 354
  var call1152 = callmethod(var_callfound,"not", [0]);
  if (Grace_isTrue(call1152)) {
  lineNumber = 355
  var string1153 = new GraceString("no such method '");
  var opresult1155 = callmethod(string1153, "++", [1], var_callname);
  var string1156 = new GraceString("' in ");
  var opresult1158 = callmethod(opresult1155, "++", [1], string1156);
  lineNumber = 1
  lineNumber = 355
  var call1159 = callmethod(var_callreceivertype,"value", [0]);
  var opresult1161 = callmethod(opresult1158, "++", [1], call1159);
  var string1162 = new GraceString("");
  var opresult1164 = callmethod(opresult1161, "++", [1], string1162);
  var call1165 = callmethod(var_util,"type_error", [1], opresult1164);
  var if1151 = call1165;
}
  lineNumber = 362
  lineNumber = 357
  lineNumber = 1
  lineNumber = 357
  lineNumber = 1
  lineNumber = 357
  var call1166 = callmethod(var_callmeth,"signature", [0]);
  var call1167 = callmethod(call1166,"indices", [0]);
  lineNumber = 362
  var block1168 = Grace_allocObject();
  block1168.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1168.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1168.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1168.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1168.receiver = this;
  block1168.className = 'block<typechecker:362>';
  block1168.real = function(
var_partnr
) {
  lineNumber = 359
  lineNumber = 1
  lineNumber = 358
  var call1169 = callmethod(var_callmeth,"signature", [0]);
  var idxres1170 = call1169.methods["[]"].call(call1169, [1], var_partnr);
  var var_part = idxres1170;
  lineNumber = 362
  lineNumber = 364
  lineNumber = 1
  lineNumber = 364
  lineNumber = 1
  lineNumber = 359
  var call1172 = callmethod(var_part,"params", [0]);
  var call1173 = callmethod(call1172,"size", [0]);
  lineNumber = 364
  lineNumber = 1
  lineNumber = 364
  lineNumber = 1
  lineNumber = 364
  lineNumber = 1
  lineNumber = 359
  var call1174 = callmethod(var_expr,"with", [0]);
  var idxres1175 = call1174.methods["[]"].call(call1174, [1], var_partnr);
  var call1176 = callmethod(idxres1175,"args", [0]);
  var call1177 = callmethod(call1176,"size", [0]);
  var opresult1179 = callmethod(call1173, ">", [1], call1177);
  if (Grace_isTrue(opresult1179)) {
  lineNumber = 362
  lineNumber = 360
  var string1180 = new GraceString("method '");
  var opresult1182 = callmethod(string1180, "++", [1], var_callname);
  var string1183 = new GraceString("' in ");
  var opresult1185 = callmethod(opresult1182, "++", [1], string1183);
  lineNumber = 362
  lineNumber = 1
  lineNumber = 360
  var call1186 = callmethod(var_callreceivertype,"value", [0]);
  var opresult1188 = callmethod(opresult1185, "++", [1], call1186);
  var string1189 = new GraceString(" ");
  var opresult1191 = callmethod(opresult1188, "++", [1], string1189);
  lineNumber = 362
  lineNumber = 361
  var string1192 = new GraceString("requires ");
  lineNumber = 362
  lineNumber = 1
  lineNumber = 362
  lineNumber = 1
  lineNumber = 361
  var call1193 = callmethod(var_part,"args", [0]);
  var call1194 = callmethod(call1193,"size", [0]);
  var opresult1196 = callmethod(string1192, "++", [1], call1194);
  var string1197 = new GraceString(" arguments for part ");
  var opresult1199 = callmethod(opresult1196, "++", [1], string1197);
  var opresult1201 = callmethod(opresult1199, "++", [1], var_partnr);
  var string1202 = new GraceString(", not ");
  var opresult1204 = callmethod(opresult1201, "++", [1], string1202);
  var opresult1206 = callmethod(opresult1191, "++", [1], opresult1204);
  lineNumber = 362
  var string1207 = new GraceString("");
  lineNumber = 1
  lineNumber = 362
  lineNumber = 1
  lineNumber = 362
  lineNumber = 1
  lineNumber = 362
  var call1208 = callmethod(var_expr,"with", [0]);
  var idxres1209 = call1208.methods["[]"].call(call1208, [1], var_partnr);
  var call1210 = callmethod(idxres1209,"args", [0]);
  var call1211 = callmethod(call1210,"size", [0]);
  var opresult1213 = callmethod(string1207, "++", [1], call1211);
  var string1214 = new GraceString("");
  var opresult1216 = callmethod(opresult1213, "++", [1], string1214);
  var opresult1218 = callmethod(opresult1206, "++", [1], opresult1216);
  lineNumber = 360
  var call1219 = callmethod(var_util,"type_error", [1], opresult1218);
  var if1171 = call1219;
}
  return if1171;
};
  var call1220 = callmethod(Grace_prelude,"for()do", [1, 1], call1167, block1168);
  lineNumber = 366
  lineNumber = 1
  lineNumber = 365
  var call1221 = callmethod(var_callmeth,"signature", [0]);
  var var_callsig = call1221;
  lineNumber = 367
  lineNumber = 1
  lineNumber = 366
  var call1222 = callmethod(var_expr,"with", [0]);
  var var_callparts = call1222;
  lineNumber = 379
  lineNumber = 367
  lineNumber = 1
  lineNumber = 367
  var call1223 = callmethod(var_callparts,"indices", [0]);
  lineNumber = 379
  var block1224 = Grace_allocObject();
  block1224.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1224.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1224.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1224.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1224.receiver = this;
  block1224.className = 'block<typechecker:379>';
  block1224.real = function(
var_partnr
) {
  lineNumber = 369
  lineNumber = 1
  lineNumber = 368
  var idxres1225 = var_callsig.methods["[]"].call(var_callsig, [1], var_partnr);
  var call1226 = callmethod(idxres1225,"params", [0]);
  var var_callparams = call1226;
  lineNumber = 370
  lineNumber = 1
  lineNumber = 369
  var idxres1227 = var_callparts.methods["[]"].call(var_callparts, [1], var_partnr);
  var call1228 = callmethod(idxres1227,"args", [0]);
  var var_callargs = call1228;
  lineNumber = 379
  lineNumber = 383
  lineNumber = 1
  lineNumber = 370
  var call1230 = callmethod(var_callparams,"size", [0]);
  var opresult1232 = callmethod(call1230, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1232)) {
  lineNumber = 379
  lineNumber = 371
  lineNumber = 1
  lineNumber = 371
  var call1233 = callmethod(var_callparams,"indices", [0]);
  lineNumber = 379
  var block1234 = Grace_allocObject();
  block1234.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1234.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1234.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1234.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1234.receiver = this;
  block1234.className = 'block<typechecker:379>';
  block1234.real = function(
var_i
) {
  lineNumber = 372
  var call1235 = callmethod(var_callargs,"at", [1], var_i);
  var var_arg = call1235;
  lineNumber = 373
  var call1236 = callmethod(var_callparams,"at", [1], var_i);
  var var_prm = call1236;
  lineNumber = 374
  lineNumber = 375
  var call1237 = callmethod(this,"expressionType", [1], var_arg);
  var var_argtp = call1237;
  lineNumber = 376
  lineNumber = 1
  lineNumber = 375
  var call1238 = callmethod(var_prm,"dtype", [0]);
  var var_prmtypeid = call1238;
  lineNumber = 376
  lineNumber = 377
  var call1239 = callmethod(this,"findType", [1], var_prmtypeid);
  var var_prmtype = call1239;
  lineNumber = 379
  lineNumber = 377
  lineNumber = 1
  lineNumber = 377
  lineNumber = 381
  var call1241 = callmethod(this,"conformsType()to", [1, 1], var_argtp, var_prmtype);
  var call1242 = callmethod(call1241,"not", [0]);
  if (Grace_isTrue(call1242)) {
  lineNumber = 379
  lineNumber = 378
  var string1243 = new GraceString("argument ");
  var opresult1245 = callmethod(string1243, "++", [1], var_i);
  var string1246 = new GraceString(" of '");
  var opresult1248 = callmethod(opresult1245, "++", [1], string1246);
  var opresult1250 = callmethod(opresult1248, "++", [1], var_callname);
  var string1251 = new GraceString("' must be of ");
  var opresult1253 = callmethod(opresult1250, "++", [1], string1251);
  lineNumber = 379
  var string1254 = new GraceString("type ");
  lineNumber = 1
  lineNumber = 379
  var call1255 = callmethod(var_prmtype,"value", [0]);
  var opresult1257 = callmethod(string1254, "++", [1], call1255);
  var string1258 = new GraceString(", given ");
  var opresult1260 = callmethod(opresult1257, "++", [1], string1258);
  lineNumber = 1
  lineNumber = 379
  var call1261 = callmethod(var_argtp,"value", [0]);
  var opresult1263 = callmethod(opresult1260, "++", [1], call1261);
  var string1264 = new GraceString("");
  var opresult1266 = callmethod(opresult1263, "++", [1], string1264);
  var opresult1268 = callmethod(opresult1253, "++", [1], opresult1266);
  lineNumber = 378
  var call1269 = callmethod(var_util,"type_error", [1], opresult1268);
  var if1240 = call1269;
}
  return if1240;
};
  var call1270 = callmethod(Grace_prelude,"for()do", [1, 1], call1233, block1234);
  var if1229 = call1270;
}
  return if1229;
};
  var call1271 = callmethod(Grace_prelude,"for()do", [1, 1], call1223, block1224);
  lineNumber = 385
  lineNumber = 1
  lineNumber = 384
  var call1272 = callmethod(var_callmeth,"rtype", [0]);
  var var_callreturntypeid = call1272;
  lineNumber = 387
  lineNumber = 388
  lineNumber = 1
  lineNumber = 385
  var call1274 = callmethod(var_callreturntypeid,"kind", [0]);
  var string1275 = new GraceString("type");
  var opresult1277 = callmethod(call1274, "==", [1], string1275);
  if (Grace_isTrue(opresult1277)) {
  lineNumber = 387
  lineNumber = 386
  return var_callreturntypeid
  var if1273 = undefined;
}
  lineNumber = 388
  lineNumber = 1
  lineNumber = 388
  var call1278 = callmethod(var_callreturntypeid,"value", [0]);
  lineNumber = 389
  var call1279 = callmethod(this,"findName", [1], call1278);
  var var_callreturntypebd = call1279;
  lineNumber = 390
  lineNumber = 1
  lineNumber = 389
  var call1280 = callmethod(var_callreturntypebd,"value", [0]);
  return call1280
  var if1118 = undefined;
}
  lineNumber = 424
  lineNumber = 425
  lineNumber = 1
  lineNumber = 391
  var call1282 = callmethod(var_expr,"kind", [0]);
  var string1283 = new GraceString("object");
  var opresult1285 = callmethod(call1282, "==", [1], string1283);
  if (Grace_isTrue(opresult1285)) {
  lineNumber = 393
  var array1286 = new GraceList([
]);

  var var_objectmeths = array1286;
  var string1287 = new GraceString("<Object_");
  lineNumber = 1
  lineNumber = 393
  var call1288 = callmethod(var_expr,"line", [0]);
  var opresult1290 = callmethod(string1287, "++", [1], call1288);
  var string1291 = new GraceString(">");
  var opresult1293 = callmethod(opresult1290, "++", [1], string1291);
  lineNumber = 394
  lineNumber = 1
  lineNumber = 393
  var call1294 = callmethod(var_ast,"typeNode", [0]);
  var call1295 = callmethod(call1294,"new", [2], opresult1293, var_objectmeths);
  var var_objecttp = call1295;
  lineNumber = 397
  lineNumber = 400
  lineNumber = 1
  lineNumber = 394
  var call1297 = callmethod(var_expr,"superclass", [0]);
  var bool1298 = new GraceBoolean(false)
  var opresult1300 = callmethod(call1297, "/=", [1], bool1298);
  if (Grace_isTrue(opresult1300)) {
  lineNumber = 395
  lineNumber = 1
  lineNumber = 395
  var call1301 = callmethod(var_expr,"superclass", [0]);
  lineNumber = 396
  var call1302 = callmethod(this,"expressionType", [1], call1301);
  var var_supertype = call1302;
  lineNumber = 397
  lineNumber = 396
  lineNumber = 1
  lineNumber = 396
  var call1303 = callmethod(var_supertype,"methods", [0]);
  lineNumber = 397
  var block1304 = Grace_allocObject();
  block1304.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1304.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1304.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1304.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1304.receiver = this;
  block1304.className = 'block<typechecker:397>';
  block1304.real = function(
var_e
) {
  var call1305 = callmethod(var_objectmeths,"push", [1], var_e);
  return call1305;
};
  var call1306 = callmethod(Grace_prelude,"for()do", [1, 1], call1303, block1304);
  var if1296 = call1306;
}
  lineNumber = 417
  lineNumber = 400
  lineNumber = 1
  lineNumber = 400
  var call1307 = callmethod(var_expr,"value", [0]);
  lineNumber = 417
  var block1308 = Grace_allocObject();
  block1308.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1308.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1308.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1308.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1308.receiver = this;
  block1308.className = 'block<typechecker:417>';
  block1308.real = function(
var_e
) {
  lineNumber = 420
  lineNumber = 1
  lineNumber = 401
  var call1310 = callmethod(var_e,"kind", [0]);
  var string1311 = new GraceString("defdec");
  var opresult1313 = callmethod(call1310, "==", [1], string1311);
  if (Grace_isTrue(opresult1313)) {
  lineNumber = 403
  lineNumber = 402
  lineNumber = 1
  lineNumber = 402
  lineNumber = 1
  lineNumber = 402
  var call1314 = callmethod(var_e,"name", [0]);
  var call1315 = callmethod(call1314,"value", [0]);
  lineNumber = 403
  lineNumber = 1
  lineNumber = 403
  lineNumber = 1
  lineNumber = 403
  var call1317 = callmethod(var_e,"name", [0]);
  var call1318 = callmethod(call1317,"value", [0]);
  lineNumber = 1
  lineNumber = 403
  var call1319 = callmethod(var_ast,"signaturePart", [0]);
  var call1320 = callmethod(call1319,"new", [1], call1318);
  var array1316 = new GraceList([
call1320,
]);

  lineNumber = 1
  lineNumber = 403
  var call1321 = callmethod(var_e,"dtype", [0]);
  var call1322 = callmethod(this,"findType", [1], call1321);
  lineNumber = 1
  lineNumber = 402
  var call1323 = callmethod(var_ast,"methodTypeNode", [0]);
  var call1324 = callmethod(call1323,"new", [3], call1315, array1316, call1322);
  var call1325 = callmethod(var_objectmeths,"push", [1], call1324);
  var if1309 = call1325;
  } else {
  lineNumber = 417
  lineNumber = 407
  lineNumber = 1
  lineNumber = 404
  var call1327 = callmethod(var_e,"kind", [0]);
  var string1328 = new GraceString("method");
  var opresult1330 = callmethod(call1327, "==", [1], string1328);
  if (Grace_isTrue(opresult1330)) {
  lineNumber = 406
  lineNumber = 405
  lineNumber = 1
  lineNumber = 405
  lineNumber = 1
  lineNumber = 405
  var call1331 = callmethod(var_e,"value", [0]);
  var call1332 = callmethod(call1331,"value", [0]);
  lineNumber = 1
  lineNumber = 405
  var call1333 = callmethod(var_e,"signature", [0]);
  lineNumber = 406
  lineNumber = 1
  lineNumber = 406
  var call1334 = callmethod(var_e,"dtype", [0]);
  var call1335 = callmethod(this,"findType", [1], call1334);
  lineNumber = 1
  lineNumber = 405
  var call1336 = callmethod(var_ast,"methodTypeNode", [0]);
  var call1337 = callmethod(call1336,"new", [3], call1332, call1333, call1335);
  var call1338 = callmethod(var_objectmeths,"push", [1], call1337);
  var if1326 = call1338;
  } else {
  lineNumber = 417
  lineNumber = 414
  lineNumber = 1
  lineNumber = 407
  var call1340 = callmethod(var_e,"kind", [0]);
  var string1341 = new GraceString("vardec");
  var opresult1343 = callmethod(call1340, "==", [1], string1341);
  if (Grace_isTrue(opresult1343)) {
  lineNumber = 408
  lineNumber = 1
  lineNumber = 408
  var call1344 = callmethod(var_e,"dtype", [0]);
  lineNumber = 409
  var call1345 = callmethod(this,"findType", [1], call1344);
  var var_vtype = call1345;
  lineNumber = 410
  lineNumber = 409
  lineNumber = 1
  lineNumber = 409
  lineNumber = 1
  lineNumber = 409
  var call1346 = callmethod(var_e,"name", [0]);
  var call1347 = callmethod(call1346,"value", [0]);
  lineNumber = 410
  lineNumber = 1
  lineNumber = 410
  lineNumber = 1
  lineNumber = 410
  var call1349 = callmethod(var_e,"name", [0]);
  var call1350 = callmethod(call1349,"value", [0]);
  lineNumber = 1
  lineNumber = 410
  var call1351 = callmethod(var_ast,"signaturePart", [0]);
  var call1352 = callmethod(call1351,"new", [1], call1350);
  var array1348 = new GraceList([
call1352,
]);

  lineNumber = 1
  lineNumber = 409
  var call1353 = callmethod(var_ast,"methodTypeNode", [0]);
  var call1354 = callmethod(call1353,"new", [3], call1347, array1348, var_vtype);
  var call1355 = callmethod(var_objectmeths,"push", [1], call1354);
  lineNumber = 413
  lineNumber = 411
  lineNumber = 1
  lineNumber = 411
  lineNumber = 1
  lineNumber = 411
  var call1356 = callmethod(var_e,"name", [0]);
  var call1357 = callmethod(call1356,"value", [0]);
  var string1358 = new GraceString(":=");
  var opresult1360 = callmethod(call1357, "++", [1], string1358);
  lineNumber = 413
  lineNumber = 412
  lineNumber = 1
  lineNumber = 412
  lineNumber = 1
  lineNumber = 412
  var call1362 = callmethod(var_e,"name", [0]);
  var call1363 = callmethod(call1362,"value", [0]);
  var string1364 = new GraceString(":=");
  var opresult1366 = callmethod(call1363, "++", [1], string1364);
  lineNumber = 413
  var string1368 = new GraceString("_");
  lineNumber = 1
  lineNumber = 413
  var call1369 = callmethod(var_ast,"identifierNode", [0]);
  var call1370 = callmethod(call1369,"new", [2], string1368, var_vtype);
  var array1367 = new GraceList([
call1370,
]);

  lineNumber = 1
  lineNumber = 412
  var call1371 = callmethod(var_ast,"signaturePart", [0]);
  var call1372 = callmethod(call1371,"new", [2], opresult1366, array1367);
  var array1361 = new GraceList([
call1372,
]);

  lineNumber = 413
  var bool1373 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 411
  var call1374 = callmethod(var_ast,"methodTypeNode", [0]);
  var call1375 = callmethod(call1374,"new", [3], opresult1360, array1361, bool1373);
  var call1376 = callmethod(var_objectmeths,"push", [1], call1375);
  var if1339 = call1376;
  } else {
  lineNumber = 417
  lineNumber = 420
  lineNumber = 1
  lineNumber = 414
  var call1378 = callmethod(var_e,"kind", [0]);
  var string1379 = new GraceString("inherits");
  var opresult1381 = callmethod(call1378, "==", [1], string1379);
  if (Grace_isTrue(opresult1381)) {
  lineNumber = 415
  lineNumber = 1
  lineNumber = 415
  var call1382 = callmethod(var_e,"value", [0]);
  var call1383 = callmethod(this,"resolveIdentifiers", [1], call1382);
  lineNumber = 416
  var call1384 = callmethod(this,"expressionType", [1], call1383);
  var var_stype = call1384;
  lineNumber = 417
  lineNumber = 416
  lineNumber = 1
  lineNumber = 416
  var call1385 = callmethod(var_stype,"methods", [0]);
  lineNumber = 417
  var block1386 = Grace_allocObject();
  block1386.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1386.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1386.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1386.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1386.receiver = this;
  block1386.className = 'block<typechecker:417>';
  block1386.real = function(
var_m
) {
  var call1387 = callmethod(var_objectmeths,"push", [1], var_m);
  return call1387;
};
  var call1388 = callmethod(Grace_prelude,"for()do", [1, 1], call1385, block1386);
  var if1377 = call1388;
}
  var if1339 = if1377;
}
  var if1326 = if1339;
}
  var if1309 = if1326;
}
  return if1309;
};
  var call1389 = callmethod(Grace_prelude,"for()do", [1, 1], call1307, block1308);
  lineNumber = 421
  var call1390 = callmethod(var_subtype,"addType", [1], var_objecttp);
  lineNumber = 423
  lineNumber = 1
  lineNumber = 422
  var call1391 = callmethod(var_expr,"otype:=", [1], var_objecttp);
  lineNumber = 424
  lineNumber = 423
  return var_objecttp
  var if1281 = undefined;
}
  lineNumber = 449
  lineNumber = 450
  lineNumber = 1
  lineNumber = 425
  var call1393 = callmethod(var_expr,"kind", [0]);
  var string1394 = new GraceString("generic");
  var opresult1396 = callmethod(call1393, "==", [1], string1394);
  if (Grace_isTrue(opresult1396)) {
  lineNumber = 427
  var var_gtype;
  lineNumber = 428
  var var_gname;
  lineNumber = 437
  lineNumber = 439
  lineNumber = 1
  lineNumber = 439
  lineNumber = 1
  lineNumber = 428
  var call1398 = callmethod(var_expr,"value", [0]);
  var call1399 = callmethod(call1398,"kind", [0]);
  var string1400 = new GraceString("type");
  var opresult1402 = callmethod(call1399, "==", [1], string1400);
  if (Grace_isTrue(opresult1402)) {
  lineNumber = 430
  lineNumber = 1
  lineNumber = 430
  lineNumber = 1
  lineNumber = 429
  var call1403 = callmethod(var_expr,"value", [0]);
  var call1404 = callmethod(call1403,"value", [0]);
  var_gname = call1404;
  lineNumber = 431
  lineNumber = 1
  lineNumber = 430
  var call1405 = callmethod(var_expr,"value", [0]);
  var_gtype = call1405;
  var if1397 = call1405;
  } else {
  lineNumber = 437
  lineNumber = 435
  lineNumber = 1
  lineNumber = 435
  lineNumber = 1
  lineNumber = 431
  var call1407 = callmethod(var_expr,"value", [0]);
  var call1408 = callmethod(call1407,"kind", [0]);
  var string1409 = new GraceString("identifier");
  var opresult1411 = callmethod(call1408, "==", [1], string1409);
  if (Grace_isTrue(opresult1411)) {
  lineNumber = 433
  lineNumber = 1
  lineNumber = 433
  lineNumber = 1
  lineNumber = 432
  var call1412 = callmethod(var_expr,"value", [0]);
  var call1413 = callmethod(call1412,"value", [0]);
  var_gname = call1413;
  lineNumber = 433
  lineNumber = 434
  var call1414 = callmethod(this,"findName", [1], var_gname);
  var var_gidb = call1414;
  lineNumber = 1
  lineNumber = 434
  var call1415 = callmethod(var_gidb,"dtype", [0]);
  lineNumber = 435
  var call1416 = callmethod(this,"findType", [1], call1415);
  var_gtype = call1416;
  var if1406 = call1416;
  } else {
  lineNumber = 437
  lineNumber = 1
  lineNumber = 437
  lineNumber = 1
  lineNumber = 436
  var call1417 = callmethod(var_expr,"value", [0]);
  var call1418 = callmethod(call1417,"value", [0]);
  var_gname = call1418;
  lineNumber = 437
  lineNumber = 1
  lineNumber = 437
  var call1419 = callmethod(var_expr,"value", [0]);
  lineNumber = 438
  var call1420 = callmethod(this,"expressionType", [1], call1419);
  var_gtype = call1420;
  var if1406 = call1420;
}
  var if1397 = if1406;
}
  lineNumber = 440
  lineNumber = 439
  var var_gtb = var_gtype;
  lineNumber = 443
  lineNumber = 440
  lineNumber = 1
  lineNumber = 440
  lineNumber = 1
  lineNumber = 440
  var call1421 = callmethod(var_expr,"params", [0]);
  var call1422 = callmethod(call1421,"indices", [0]);
  lineNumber = 443
  var block1423 = Grace_allocObject();
  block1423.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1423.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1423.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1423.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1423.receiver = this;
  block1423.className = 'block<typechecker:443>';
  block1423.real = function(
var_i
) {
  lineNumber = 441
  lineNumber = 442
  lineNumber = 1
  lineNumber = 441
  var call1424 = callmethod(var_gtb,"generics", [0]);
  var call1425 = callmethod(call1424,"at", [1], var_i);
  var var_tv = call1425;
  lineNumber = 442
  lineNumber = 1
  lineNumber = 442
  var call1426 = callmethod(var_expr,"params", [0]);
  var call1427 = callmethod(call1426,"at", [1], var_i);
  lineNumber = 443
  var call1428 = callmethod(this,"findType", [1], call1427);
  var var_ct = call1428;
  lineNumber = 444
  var call1429 = callmethod(this,"betaReduceType", [3], var_gtype, var_tv, var_ct);
  var_gtype = call1429;
  return call1429;
};
  var call1430 = callmethod(Grace_prelude,"for()do", [1, 1], call1422, block1423);
  lineNumber = 445
  lineNumber = 1
  lineNumber = 445
  var call1431 = callmethod(var_gtype,"methods", [0]);
  lineNumber = 446
  lineNumber = 1
  lineNumber = 445
  var call1432 = callmethod(var_ast,"typeNode", [0]);
  var call1433 = callmethod(call1432,"new", [2], var_gname, call1431);
  var var_nt = call1433;
  lineNumber = 447
  lineNumber = 1
  lineNumber = 447
  lineNumber = 1
  lineNumber = 446
  var call1434 = callmethod(var_expr,"params", [0]);
  var call1435 = callmethod(var_nt,"generics:=", [1], call1434);
  lineNumber = 447
  var call1436 = callmethod(var_subtype,"addType", [1], var_nt);
  lineNumber = 449
  lineNumber = 448
  return var_nt
  var if1392 = undefined;
}
  lineNumber = 451
  lineNumber = 450
  return var_DynamicType
  return undefined
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["expressionType"] = func880;
  lineNumber = 464
var func1437 = function(argcv) {
  var curarg = 1;
  var var_name = arguments[curarg];
  curarg++;
  var var_kd = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 454
  lineNumber = 467
  var call1439 = callmethod(this,"haveBinding", [1], var_name);
  if (Grace_isTrue(call1439)) {
  lineNumber = 455
  lineNumber = 456
  var call1440 = callmethod(this,"findName", [1], var_name);
  var var_namebinding = call1440;
  lineNumber = 464
  lineNumber = 466
  lineNumber = 456
  var string1442 = new GraceString("method");
  var opresult1444 = callmethod(var_kd, "==", [1], string1442);
  lineNumber = 466
  lineNumber = 1
  lineNumber = 456
  var call1445 = callmethod(var_namebinding,"kind", [0]);
  var string1446 = new GraceString("var");
  var opresult1448 = callmethod(call1445, "==", [1], string1446);
  lineNumber = 466
  lineNumber = 1
  lineNumber = 457
  var call1449 = callmethod(var_namebinding,"kind", [0]);
  var string1450 = new GraceString("method");
  var opresult1452 = callmethod(call1449, "==", [1], string1450);
  var opresult1454 = callmethod(opresult1448, "|", [1], opresult1452);
  var opresult1456 = callmethod(opresult1444, "&", [1], opresult1454);
  if (Grace_isTrue(opresult1456)) {
  var if1441 = undefined;
  } else {
  lineNumber = 464
  lineNumber = 459
  var string1458 = new GraceString("ShadowingWarnOnly");
  lineNumber = 461
  lineNumber = 1
  lineNumber = 459
  var call1459 = callmethod(var_util,"extensions", [0]);
  var call1460 = callmethod(call1459,"contains", [1], string1458);
  if (Grace_isTrue(call1460)) {
  lineNumber = 460
  var string1461 = new GraceString("name ");
  var opresult1463 = callmethod(string1461, "++", [1], var_name);
  var string1464 = new GraceString(" shadows lexically enclosing name");
  var opresult1466 = callmethod(opresult1463, "++", [1], string1464);
  var call1467 = callmethod(var_util,"warning", [1], opresult1466);
  var if1457 = call1467;
  } else {
  lineNumber = 464
  lineNumber = 461
  var string1469 = new GraceString("IgnoreShadowing");
  lineNumber = 463
  lineNumber = 1
  lineNumber = 461
  var call1470 = callmethod(var_util,"extensions", [0]);
  var call1471 = callmethod(call1470,"contains", [1], string1469);
  if (Grace_isTrue(call1471)) {
  var if1468 = undefined;
  } else {
  lineNumber = 464
  var string1472 = new GraceString("name ");
  var opresult1474 = callmethod(string1472, "++", [1], var_name);
  var string1475 = new GraceString(" shadows lexically enclosing name");
  var opresult1477 = callmethod(opresult1474, "++", [1], string1475);
  var call1478 = callmethod(var_util,"syntax_error", [1], opresult1477);
  var if1468 = call1478;
}
  var if1457 = if1468;
}
  var if1441 = if1457;
}
  var if1438 = if1441;
}
  return if1438
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["checkShadowing"] = func1437;
  lineNumber = 470
var func1479 = function(argcv) {
  var curarg = 1;
  var var_name = arguments[curarg];
  curarg++;
  var var_binding = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 469
  lineNumber = 1
  lineNumber = 469
  var call1480 = callmethod(var_binding,"kind", [0]);
  lineNumber = 470
  var call1481 = callmethod(this,"checkShadowing", [2], var_name, call1480);
  lineNumber = 471
  lineNumber = 1
  lineNumber = 470
  var call1482 = callmethod(var_scopes,"last", [0]);
  var call1483 = callmethod(call1482,"put", [2], var_name, var_binding);
  return call1483
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bindName"] = func1479;
  lineNumber = 494
var func1484 = function(argcv) {
  var curarg = 1;
  var var_ident = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 474
  lineNumber = 476
  lineNumber = 1
  lineNumber = 473
  var call1486 = callmethod(var_ident,"kind", [0]);
  var string1487 = new GraceString("call");
  var opresult1489 = callmethod(call1486, "==", [1], string1487);
  if (Grace_isTrue(opresult1489)) {
  lineNumber = 474
  var string1490 = new GraceString("name shadows method");
  var call1491 = callmethod(var_util,"syntax_error", [1], string1490);
  var if1485 = call1491;
}
  lineNumber = 494
  lineNumber = 476
  var string1493 = new GraceString("___is_object");
  lineNumber = 496
  lineNumber = 1
  lineNumber = 476
  var call1494 = callmethod(var_scopes,"last", [0]);
  var call1495 = callmethod(call1494,"contains", [1], string1493);
  if (Grace_isTrue(call1495)) {
  lineNumber = 477
  lineNumber = 1
  lineNumber = 477
  var call1496 = callmethod(var_ident,"value", [0]);
  var string1497 = new GraceString("method");
  lineNumber = 478
  var call1498 = callmethod(this,"checkShadowing", [2], call1496, string1497);
  lineNumber = 1
  lineNumber = 478
  var call1499 = callmethod(var_ident,"value", [0]);
  var string1500 = new GraceString("method");
  var call1501 = callmethod(var_Binding,"new", [1], string1500);
  lineNumber = 479
  lineNumber = 1
  lineNumber = 478
  var call1502 = callmethod(var_scopes,"last", [0]);
  var call1503 = callmethod(call1502,"put", [2], call1499, call1501);
  var if1492 = call1503;
  } else {
  lineNumber = 480
  lineNumber = 1
  lineNumber = 480
  var call1504 = callmethod(var_ident,"value", [0]);
  var string1505 = new GraceString("var");
  lineNumber = 481
  var call1506 = callmethod(this,"checkShadowing", [2], call1504, string1505);
  var string1507 = new GraceString("var");
  var call1508 = callmethod(var_Binding,"new", [1], string1507);
  var var_tmpb = call1508;
  lineNumber = 483
  lineNumber = 482
  var var_tdtype = var_DynamicType;
  lineNumber = 492
  lineNumber = 493
  lineNumber = 1
  lineNumber = 483
  var call1510 = callmethod(var_ident,"dtype", [0]);
  var bool1511 = new GraceBoolean(false)
  var opresult1513 = callmethod(call1510, "==", [1], bool1511);
  if (Grace_isTrue(opresult1513)) {
  var if1509 = undefined;
  } else {
  lineNumber = 492
  lineNumber = 488
  lineNumber = 1
  lineNumber = 488
  lineNumber = 1
  lineNumber = 485
  var call1515 = callmethod(var_ident,"dtype", [0]);
  var call1516 = callmethod(call1515,"kind", [0]);
  var string1517 = new GraceString("identifier");
  var opresult1519 = callmethod(call1516, "==", [1], string1517);
  if (Grace_isTrue(opresult1519)) {
  lineNumber = 486
  lineNumber = 1
  lineNumber = 486
  lineNumber = 1
  lineNumber = 486
  var call1520 = callmethod(var_ident,"dtype", [0]);
  var call1521 = callmethod(call1520,"value", [0]);
  lineNumber = 487
  var call1522 = callmethod(this,"findName", [1], call1521);
  var var_tdb = call1522;
  lineNumber = 488
  lineNumber = 1
  lineNumber = 487
  var call1523 = callmethod(var_tdb,"value", [0]);
  var_tdtype = call1523;
  var if1514 = call1523;
  } else {
  lineNumber = 492
  lineNumber = 490
  lineNumber = 1
  lineNumber = 490
  lineNumber = 1
  lineNumber = 488
  var call1525 = callmethod(var_ident,"dtype", [0]);
  var call1526 = callmethod(call1525,"kind", [0]);
  var string1527 = new GraceString("generic");
  var opresult1529 = callmethod(call1526, "==", [1], string1527);
  if (Grace_isTrue(opresult1529)) {
  lineNumber = 489
  lineNumber = 1
  lineNumber = 489
  var call1530 = callmethod(var_ident,"dtype", [0]);
  var call1531 = callmethod(this,"resolveIdentifiers", [1], call1530);
  lineNumber = 490
  var call1532 = callmethod(this,"findType", [1], call1531);
  var_tdtype = call1532;
  var if1524 = call1532;
  } else {
  lineNumber = 492
  lineNumber = 493
  lineNumber = 1
  lineNumber = 493
  lineNumber = 1
  lineNumber = 490
  var call1534 = callmethod(var_ident,"dtype", [0]);
  var call1535 = callmethod(call1534,"kind", [0]);
  var string1536 = new GraceString("type");
  var opresult1538 = callmethod(call1535, "==", [1], string1536);
  if (Grace_isTrue(opresult1538)) {
  lineNumber = 492
  lineNumber = 1
  lineNumber = 491
  var call1539 = callmethod(var_ident,"dtype", [0]);
  var_tdtype = call1539;
  var if1533 = call1539;
}
  var if1524 = if1533;
}
  var if1514 = if1524;
}
  var if1509 = if1514;
}
  lineNumber = 494
  lineNumber = 1
  lineNumber = 493
  var call1540 = callmethod(var_tmpb,"dtype:=", [1], var_tdtype);
  lineNumber = 494
  lineNumber = 1
  lineNumber = 494
  var call1541 = callmethod(var_ident,"value", [0]);
  lineNumber = 495
  lineNumber = 1
  lineNumber = 494
  var call1542 = callmethod(var_scopes,"last", [0]);
  var call1543 = callmethod(call1542,"put", [2], call1541, var_tmpb);
  var if1492 = call1543;
}
  return if1492
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["bindIdentifier"] = func1484;
  lineNumber = 563
var func1544 = function(argcv) {
  var curarg = 1;
  var var_tp = arguments[curarg];
  curarg++;
  var var_typevar = arguments[curarg];
  curarg++;
  var var_concrete = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 500
  lineNumber = 1
  lineNumber = 499
  var call1545 = callmethod(var_tp,"methods", [0]);
  var var_methods = call1545;
  lineNumber = 501
  var var_tmprt;
  lineNumber = 502
  var array1546 = new GraceList([
]);

  var var_newmeth = array1546;
  lineNumber = 503
  lineNumber = 502
  var bool1547 = new GraceBoolean(false)
  var var_changed = bool1547;
  lineNumber = 547
  lineNumber = 503
  lineNumber = 547
  var block1548 = Grace_allocObject();
  block1548.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1548.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1548.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1548.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1548.receiver = this;
  block1548.className = 'block<typechecker:547>';
  block1548.real = function(
var_m
) {
  lineNumber = 505
  lineNumber = 1
  lineNumber = 504
  var call1549 = callmethod(var_m,"rtype", [0]);
  var_tmprt = call1549;
  lineNumber = 515
  lineNumber = 517
  lineNumber = 505
  var bool1551 = new GraceBoolean(false)
  var opresult1553 = callmethod(var_tmprt, "==", [1], bool1551);
  if (Grace_isTrue(opresult1553)) {
  var if1550 = undefined;
  } else {
  lineNumber = 515
  lineNumber = 509
  lineNumber = 1
  lineNumber = 506
  var call1555 = callmethod(var_tmprt,"value", [0]);
  lineNumber = 509
  lineNumber = 1
  lineNumber = 506
  var call1556 = callmethod(var_typevar,"value", [0]);
  var opresult1558 = callmethod(call1555, "==", [1], call1556);
  if (Grace_isTrue(opresult1558)) {
  lineNumber = 508
  lineNumber = 507
  var_tmprt = var_concrete;
  lineNumber = 509
  lineNumber = 508
  var bool1559 = new GraceBoolean(true)
  var_changed = bool1559;
  var if1554 = bool1559;
  } else {
  lineNumber = 515
  lineNumber = 509
  lineNumber = 517
  lineNumber = 1
  lineNumber = 509
  var call1561 = callmethod(var_tmprt,"value", [0]);
  var call1562 = callmethod(call1561,"substringFrom()to", [1, 1], new GraceNum(1), new GraceNum(11));
  var string1563 = new GraceString("InstanceOf<");
  var opresult1565 = callmethod(call1562, "==", [1], string1563);
  if (Grace_isTrue(opresult1565)) {
  lineNumber = 510
  lineNumber = 511
  var call1566 = callmethod(this,"findType", [1], var_tmprt);
  var var_ortype = call1566;
  lineNumber = 512
  var call1567 = callmethod(this,"betaReduceType", [3], var_ortype, var_typevar, var_concrete);
  var var_tryrrep = call1567;
  lineNumber = 515
  lineNumber = 516
  lineNumber = 512
  var opresult1570 = callmethod(var_ortype, "/=", [1], var_tryrrep);
  if (Grace_isTrue(opresult1570)) {
  lineNumber = 514
  lineNumber = 513
  var_tmprt = var_tryrrep;
  lineNumber = 515
  lineNumber = 514
  var bool1571 = new GraceBoolean(true)
  var_changed = bool1571;
  var if1568 = bool1571;
}
  var if1560 = if1568;
}
  var if1554 = if1560;
}
  var if1550 = if1554;
}
  lineNumber = 518
  var array1572 = new GraceList([
]);

  var var_tmpsig = array1572;
  lineNumber = 545
  lineNumber = 518
  lineNumber = 1
  lineNumber = 518
  var call1573 = callmethod(var_m,"signature", [0]);
  lineNumber = 545
  var block1574 = Grace_allocObject();
  block1574.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1574.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1574.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1574.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1574.receiver = this;
  block1574.className = 'block<typechecker:545>';
  block1574.real = function(
var_part
) {
  lineNumber = 519
  lineNumber = 1
  lineNumber = 519
  var call1575 = callmethod(var_part,"name", [0]);
  lineNumber = 520
  lineNumber = 1
  lineNumber = 519
  var call1576 = callmethod(var_ast,"signaturePart", [0]);
  var call1577 = callmethod(call1576,"new", [1], call1575);
  var var_tmppart = call1577;
  lineNumber = 521
  var array1578 = new GraceList([
]);

  var var_tmpparams = array1578;
  lineNumber = 540
  lineNumber = 521
  lineNumber = 1
  lineNumber = 521
  var call1579 = callmethod(var_part,"params", [0]);
  lineNumber = 540
  var block1580 = Grace_allocObject();
  block1580.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1580.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1580.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1580.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1580.receiver = this;
  block1580.className = 'block<typechecker:540>';
  block1580.real = function(
var_pp
) {
  lineNumber = 542
  lineNumber = 1
  lineNumber = 522
  var call1582 = callmethod(var_pp,"dtype", [0]);
  var bool1583 = new GraceBoolean(false)
  var opresult1585 = callmethod(call1582, "==", [1], bool1583);
  if (Grace_isTrue(opresult1585)) {
  lineNumber = 523
  var call1586 = callmethod(var_tmpparams,"push", [1], var_pp);
  var if1581 = call1586;
  } else {
  lineNumber = 540
  lineNumber = 527
  lineNumber = 1
  lineNumber = 527
  lineNumber = 1
  lineNumber = 524
  var call1588 = callmethod(var_pp,"dtype", [0]);
  var call1589 = callmethod(call1588,"value", [0]);
  lineNumber = 527
  lineNumber = 1
  lineNumber = 524
  var call1590 = callmethod(var_typevar,"value", [0]);
  var opresult1592 = callmethod(call1589, "==", [1], call1590);
  if (Grace_isTrue(opresult1592)) {
  lineNumber = 525
  lineNumber = 1
  lineNumber = 525
  var call1593 = callmethod(var_pp,"value", [0]);
  lineNumber = 1
  lineNumber = 525
  var call1594 = callmethod(var_ast,"identifierNode", [0]);
  var call1595 = callmethod(call1594,"new", [2], call1593, var_concrete);
  var call1596 = callmethod(var_tmpparams,"push", [1], call1595);
  lineNumber = 527
  lineNumber = 526
  var bool1597 = new GraceBoolean(true)
  var_changed = bool1597;
  var if1587 = bool1597;
  } else {
  lineNumber = 540
  lineNumber = 527
  lineNumber = 539
  lineNumber = 1
  lineNumber = 539
  lineNumber = 1
  lineNumber = 527
  var call1599 = callmethod(var_pp,"dtype", [0]);
  var call1600 = callmethod(call1599,"value", [0]);
  var call1601 = callmethod(call1600,"at", [1], new GraceNum(1));
  var string1602 = new GraceString("<");
  var opresult1604 = callmethod(call1601, "==", [1], string1602);
  if (Grace_isTrue(opresult1604)) {
  lineNumber = 528
  lineNumber = 1
  lineNumber = 528
  var call1605 = callmethod(var_pp,"dtype", [0]);
  lineNumber = 529
  var call1606 = callmethod(this,"findType", [1], call1605);
  var var_otype = call1606;
  lineNumber = 530
  var call1607 = callmethod(this,"betaReduceType", [3], var_otype, var_typevar, var_concrete);
  var var_tryrep = call1607;
  lineNumber = 538
  lineNumber = 539
  lineNumber = 530
  var opresult1610 = callmethod(var_otype, "==", [1], var_tryrep);
  if (Grace_isTrue(opresult1610)) {
  lineNumber = 531
  var call1611 = callmethod(var_tmpparams,"push", [1], var_pp);
  var if1608 = call1611;
  } else {
  lineNumber = 535
  lineNumber = 534
  lineNumber = 1
  lineNumber = 533
  var call1612 = callmethod(var_tryrep,"value", [0]);
  lineNumber = 534
  var string1613 = new GraceString("<");
  lineNumber = 1
  lineNumber = 534
  var call1614 = callmethod(var_typevar,"value", [0]);
  var opresult1616 = callmethod(string1613, "++", [1], call1614);
  var string1617 = new GraceString("=");
  var opresult1619 = callmethod(opresult1616, "++", [1], string1617);
  lineNumber = 1
  lineNumber = 534
  var call1620 = callmethod(var_concrete,"value", [0]);
  var opresult1622 = callmethod(opresult1619, "++", [1], call1620);
  var string1623 = new GraceString(">");
  var opresult1625 = callmethod(opresult1622, "++", [1], string1623);
  var opresult1627 = callmethod(call1612, "++", [1], opresult1625);
  lineNumber = 535
  lineNumber = 1
  lineNumber = 535
  var call1628 = callmethod(var_tryrep,"methods", [0]);
  lineNumber = 536
  lineNumber = 1
  lineNumber = 533
  var call1629 = callmethod(var_ast,"typeNode", [0]);
  var call1630 = callmethod(call1629,"new", [2], opresult1627, call1628);
  var var_trynamed = call1630;
  lineNumber = 536
  lineNumber = 1
  lineNumber = 536
  var call1631 = callmethod(var_pp,"value", [0]);
  lineNumber = 1
  lineNumber = 536
  var call1632 = callmethod(var_ast,"identifierNode", [0]);
  var call1633 = callmethod(call1632,"new", [2], call1631, var_trynamed);
  var call1634 = callmethod(var_tmpparams,"push", [1], call1633);
  lineNumber = 538
  lineNumber = 537
  var bool1635 = new GraceBoolean(true)
  var_changed = bool1635;
  var if1608 = bool1635;
}
  var if1598 = if1608;
  } else {
  lineNumber = 540
  var call1636 = callmethod(var_tmpparams,"push", [1], var_pp);
  var if1598 = call1636;
}
  var if1587 = if1598;
}
  var if1581 = if1587;
}
  return if1581;
};
  var call1637 = callmethod(Grace_prelude,"for()do", [1, 1], call1579, block1580);
  lineNumber = 544
  lineNumber = 1
  lineNumber = 543
  var call1638 = callmethod(var_tmppart,"params:=", [1], var_tmpparams);
  lineNumber = 545
  lineNumber = 1
  lineNumber = 545
  lineNumber = 1
  lineNumber = 544
  var call1639 = callmethod(var_part,"vararg", [0]);
  var call1640 = callmethod(var_tmppart,"vararg:=", [1], call1639);
  lineNumber = 545
  var call1641 = callmethod(var_tmpsig,"push", [1], var_tmppart);
  return call1641;
};
  var call1642 = callmethod(Grace_prelude,"for()do", [1, 1], call1573, block1574);
  lineNumber = 547
  lineNumber = 1
  lineNumber = 547
  var call1643 = callmethod(var_m,"value", [0]);
  lineNumber = 1
  lineNumber = 547
  var call1644 = callmethod(var_ast,"methodTypeNode", [0]);
  var call1645 = callmethod(call1644,"new", [3], call1643, var_tmpsig, var_tmprt);
  var call1646 = callmethod(var_newmeth,"push", [1], call1645);
  return call1646;
};
  var call1647 = callmethod(Grace_prelude,"for()do", [1, 1], var_methods, block1548);
  lineNumber = 563
  lineNumber = 549
  if (Grace_isTrue(var_changed)) {
  lineNumber = 551
  var var_tmp;
  lineNumber = 555
  lineNumber = 551
  lineNumber = 557
  lineNumber = 1
  lineNumber = 551
  var call1650 = callmethod(var_tp,"value", [0]);
  var call1651 = callmethod(call1650,"substringFrom()to", [1, 1], new GraceNum(1), new GraceNum(11));
  var string1652 = new GraceString("InstanceOf<");
  var opresult1654 = callmethod(call1651, "==", [1], string1652);
  if (Grace_isTrue(opresult1654)) {
  lineNumber = 553
  lineNumber = 552
  var string1655 = new GraceString("");
  lineNumber = 1
  lineNumber = 552
  var call1656 = callmethod(var_tp,"value", [0]);
  var opresult1658 = callmethod(string1655, "++", [1], call1656);
  var string1659 = new GraceString("<");
  var opresult1661 = callmethod(opresult1658, "++", [1], string1659);
  lineNumber = 1
  lineNumber = 552
  var call1662 = callmethod(var_typevar,"value", [0]);
  var opresult1664 = callmethod(opresult1661, "++", [1], call1662);
  var string1665 = new GraceString("=");
  var opresult1667 = callmethod(opresult1664, "++", [1], string1665);
  lineNumber = 1
  lineNumber = 552
  var call1668 = callmethod(var_concrete,"value", [0]);
  var opresult1670 = callmethod(opresult1667, "++", [1], call1668);
  var string1671 = new GraceString(">");
  var opresult1673 = callmethod(opresult1670, "++", [1], string1671);
  lineNumber = 553
  lineNumber = 554
  lineNumber = 1
  lineNumber = 552
  var call1674 = callmethod(var_ast,"typeNode", [0]);
  var call1675 = callmethod(call1674,"new", [2], opresult1673, var_newmeth);
  var_tmp = call1675;
  var if1649 = call1675;
  } else {
  lineNumber = 555
  lineNumber = 1
  lineNumber = 555
  var call1676 = callmethod(var_tp,"value", [0]);
  lineNumber = 556
  lineNumber = 1
  lineNumber = 555
  var call1677 = callmethod(var_ast,"typeNode", [0]);
  var call1678 = callmethod(call1677,"new", [2], call1676, var_newmeth);
  var_tmp = call1678;
  var if1649 = call1678;
}
  lineNumber = 558
  lineNumber = 557
  var string1679 = new GraceString("");
  lineNumber = 1
  lineNumber = 557
  var call1680 = callmethod(var_tp,"value", [0]);
  var opresult1682 = callmethod(string1679, "++", [1], call1680);
  var string1683 = new GraceString("<");
  var opresult1685 = callmethod(opresult1682, "++", [1], string1683);
  lineNumber = 1
  lineNumber = 557
  var call1686 = callmethod(var_typevar,"value", [0]);
  var opresult1688 = callmethod(opresult1685, "++", [1], call1686);
  var string1689 = new GraceString("=");
  var opresult1691 = callmethod(opresult1688, "++", [1], string1689);
  lineNumber = 1
  lineNumber = 557
  var call1692 = callmethod(var_concrete,"value", [0]);
  var opresult1694 = callmethod(opresult1691, "++", [1], call1692);
  var string1695 = new GraceString(">");
  var opresult1697 = callmethod(opresult1694, "++", [1], string1695);
  lineNumber = 558
  lineNumber = 559
  lineNumber = 1
  lineNumber = 557
  var call1698 = callmethod(var_ast,"typeNode", [0]);
  var call1699 = callmethod(call1698,"new", [2], opresult1697, var_newmeth);
  var_tmp = call1699;
  lineNumber = 559
  var call1700 = callmethod(var_subtype,"addType", [1], var_tmp);
  lineNumber = 561
  lineNumber = 560
  return var_tmp
  var if1648 = undefined;
  } else {
  lineNumber = 563
  lineNumber = 562
  return var_tp
  var if1648 = undefined;
}
  return if1648
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["betaReduceType"] = func1544;
  lineNumber = 614
var func1701 = function(argcv) {
  var curarg = 1;
  var var_tp = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 568
  lineNumber = 569
  lineNumber = 566
  var bool1703 = new GraceBoolean(false)
  var opresult1705 = callmethod(var_tp, "==", [1], bool1703);
  if (Grace_isTrue(opresult1705)) {
  lineNumber = 568
  lineNumber = 567
  return var_DynamicType
  var if1702 = undefined;
}
  lineNumber = 571
  lineNumber = 572
  lineNumber = 1
  lineNumber = 569
  var call1707 = callmethod(var_tp,"kind", [0]);
  var string1708 = new GraceString("type");
  var opresult1710 = callmethod(call1707, "==", [1], string1708);
  if (Grace_isTrue(opresult1710)) {
  lineNumber = 571
  lineNumber = 570
  return var_tp
  var if1706 = undefined;
}
  lineNumber = 587
  lineNumber = 588
  lineNumber = 1
  lineNumber = 572
  var call1712 = callmethod(var_tp,"kind", [0]);
  var string1713 = new GraceString("identifier");
  var opresult1715 = callmethod(call1712, "==", [1], string1713);
  if (Grace_isTrue(opresult1715)) {
  lineNumber = 574
  lineNumber = 1
  lineNumber = 573
  var call1716 = callmethod(var_tp,"value", [0]);
  var var_tpnm = call1716;
  lineNumber = 574
  lineNumber = 575
  var call1717 = callmethod(this,"findName", [1], var_tpnm);
  var var_tpbd = call1717;
  lineNumber = 576
  lineNumber = 1
  lineNumber = 575
  var call1718 = callmethod(var_tpbd,"value", [0]);
  var var_gtp = call1718;
  lineNumber = 581
  lineNumber = 585
  lineNumber = 576
  var bool1720 = new GraceBoolean(false)
  var opresult1722 = callmethod(var_gtp, "/=", [1], bool1720);
  if (Grace_isTrue(opresult1722)) {
  lineNumber = 581
  lineNumber = 584
  lineNumber = 1
  lineNumber = 584
  lineNumber = 1
  lineNumber = 577
  var call1724 = callmethod(var_gtp,"generics", [0]);
  var call1725 = callmethod(call1724,"size", [0]);
  var opresult1727 = callmethod(call1725, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult1727)) {
  lineNumber = 579
  var array1728 = new GraceList([
]);

  var var_gdyns = array1728;
  lineNumber = 581
  lineNumber = 579
  lineNumber = 1
  lineNumber = 579
  var call1729 = callmethod(var_gtp,"generics", [0]);
  lineNumber = 581
  var block1730 = Grace_allocObject();
  block1730.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1730.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1730.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1730.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1730.receiver = this;
  block1730.className = 'block<typechecker:581>';
  block1730.real = function(
var_gdt
) {
  lineNumber = 580
  lineNumber = 581
  var call1731 = callmethod(this,"betaReduceType", [3], var_gtp, var_gdt, var_DynamicType);
  var_gtp = call1731;
  var call1732 = callmethod(var_gdyns,"push", [1], var_gdt);
  return call1732;
};
  var call1733 = callmethod(Grace_prelude,"for()do", [1, 1], call1729, block1730);
  var if1723 = call1733;
}
  var if1719 = if1723;
}
  lineNumber = 586
  lineNumber = 585
  return var_gtp
  lineNumber = 587
  lineNumber = 1
  lineNumber = 586
  var call1734 = callmethod(var_tpbd,"value", [0]);
  return call1734
  var if1711 = undefined;
}
  lineNumber = 612
  lineNumber = 613
  lineNumber = 1
  lineNumber = 588
  var call1736 = callmethod(var_tp,"kind", [0]);
  var string1737 = new GraceString("generic");
  var opresult1739 = callmethod(call1736, "==", [1], string1737);
  if (Grace_isTrue(opresult1739)) {
  lineNumber = 590
  lineNumber = 1
  lineNumber = 590
  lineNumber = 1
  lineNumber = 589
  var call1740 = callmethod(var_tp,"value", [0]);
  var call1741 = callmethod(call1740,"value", [0]);
  var var_gtnm = call1741;
  lineNumber = 590
  lineNumber = 591
  var call1742 = callmethod(this,"findName", [1], var_gtnm);
  var var_gtbd = call1742;
  lineNumber = 592
  lineNumber = 1
  lineNumber = 591
  var call1743 = callmethod(var_gtbd,"value", [0]);
  var var_gtg = call1743;
  lineNumber = 593
  lineNumber = 592
  var string1744 = new GraceString("<");
  var opresult1746 = callmethod(var_gtnm, "++", [1], string1744);
  var var_gnm = opresult1746;
  lineNumber = 594
  lineNumber = 596
  lineNumber = 593
  var bool1748 = new GraceBoolean(false)
  var opresult1750 = callmethod(var_gtg, "==", [1], bool1748);
  if (Grace_isTrue(opresult1750)) {
  lineNumber = 594
  var string1751 = new GraceString("could not find base type to instantiate: ");
  var opresult1753 = callmethod(string1751, "++", [1], var_gtnm);
  var string1754 = new GraceString("");
  var opresult1756 = callmethod(opresult1753, "++", [1], string1754);
  var call1757 = callmethod(var_util,"type_error", [1], opresult1756);
  var if1747 = call1757;
}
  lineNumber = 597
  lineNumber = 1
  lineNumber = 596
  var call1758 = callmethod(var_gtg,"methods", [0]);
  var var_methods = call1758;
  lineNumber = 598
  var var_tmprt;
  lineNumber = 599
  var var_tmpparams;
  lineNumber = 600
  lineNumber = 599
  var var_tmptp = var_gtg;
  lineNumber = 601
  var array1759 = new GraceList([
]);

  var var_gnms = array1759;
  lineNumber = 605
  lineNumber = 601
  lineNumber = 1
  lineNumber = 601
  lineNumber = 1
  lineNumber = 601
  var call1760 = callmethod(var_tp,"params", [0]);
  var call1761 = callmethod(call1760,"indices", [0]);
  lineNumber = 605
  var block1762 = Grace_allocObject();
  block1762.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1762.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1762.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1762.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1762.receiver = this;
  block1762.className = 'block<typechecker:605>';
  block1762.real = function(
var_i
) {
  lineNumber = 602
  lineNumber = 603
  lineNumber = 1
  lineNumber = 602
  var call1763 = callmethod(var_gtg,"generics", [0]);
  var call1764 = callmethod(call1763,"at", [1], var_i);
  var var_tv = call1764;
  lineNumber = 603
  lineNumber = 1
  lineNumber = 603
  var call1765 = callmethod(var_tp,"params", [0]);
  var call1766 = callmethod(call1765,"at", [1], var_i);
  lineNumber = 604
  var call1767 = callmethod(this,"findType", [1], call1766);
  var var_ct = call1767;
  lineNumber = 1
  lineNumber = 604
  var call1768 = callmethod(var_ct,"value", [0]);
  var call1769 = callmethod(var_gnms,"push", [1], call1768);
  lineNumber = 605
  lineNumber = 606
  var call1770 = callmethod(this,"betaReduceType", [3], var_tmptp, var_tv, var_ct);
  var_tmptp = call1770;
  return call1770;
};
  var call1771 = callmethod(Grace_prelude,"for()do", [1, 1], call1761, block1762);
  lineNumber = 607
  var string1772 = new GraceString(",");
  var call1773 = callmethod(var_util,"join", [2], string1772, var_gnms);
  var opresult1775 = callmethod(var_gnm, "++", [1], call1773);
  var string1776 = new GraceString(">");
  var opresult1778 = callmethod(opresult1775, "++", [1], string1776);
  var_gnm = opresult1778;
  lineNumber = 608
  lineNumber = 1
  lineNumber = 608
  var call1779 = callmethod(var_tmptp,"methods", [0]);
  lineNumber = 609
  lineNumber = 1
  lineNumber = 608
  var call1780 = callmethod(var_ast,"typeNode", [0]);
  var call1781 = callmethod(call1780,"new", [2], var_gnm, call1779);
  var var_nt = call1781;
  lineNumber = 609
  var call1782 = callmethod(var_subtype,"addType", [1], var_nt);
  lineNumber = 610
  var call1783 = callmethod(var_subtype,"addType", [1], var_gtg);
  lineNumber = 612
  lineNumber = 611
  return var_nt
  var if1735 = undefined;
}
  lineNumber = 614
  lineNumber = 613
  return var_DynamicType
  return undefined
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["findType"] = func1701;
  lineNumber = 647
var func1784 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 618
  lineNumber = 619
  lineNumber = 1
  lineNumber = 616
  var call1786 = callmethod(var_node,"kind", [0]);
  var string1787 = new GraceString("identifier");
  var opresult1789 = callmethod(call1786, "/=", [1], string1787);
  if (Grace_isTrue(opresult1789)) {
  lineNumber = 618
  lineNumber = 617
  return var_node
  var if1785 = undefined;
}
  lineNumber = 620
  lineNumber = 1
  lineNumber = 619
  var call1790 = callmethod(var_node,"value", [0]);
  var var_nm = call1790;
  lineNumber = 621
  lineNumber = 620
  lineNumber = 1
  lineNumber = 620
  lineNumber = 623
  var call1792 = callmethod(this,"haveBinding", [1], var_nm);
  var call1793 = callmethod(call1792,"not", [0]);
  if (Grace_isTrue(call1793)) {
  lineNumber = 621
  var string1794 = new GraceString("use of undefined identifier ");
  var opresult1796 = callmethod(string1794, "++", [1], var_nm);
  var string1797 = new GraceString("");
  var opresult1799 = callmethod(opresult1796, "++", [1], string1797);
  var call1800 = callmethod(var_util,"syntax_error", [1], opresult1799);
  var if1791 = call1800;
}
  lineNumber = 624
  lineNumber = 626
  lineNumber = 623
  var string1802 = new GraceString("outer");
  var opresult1804 = callmethod(var_nm, "==", [1], string1802);
  if (Grace_isTrue(opresult1804)) {
  lineNumber = 624
  var string1805 = new GraceString("outer");
  var string1806 = new GraceString("self");
  var bool1807 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 624
  var call1808 = callmethod(var_ast,"identifierNode", [0]);
  var call1809 = callmethod(call1808,"new", [2], string1806, bool1807);
  lineNumber = 625
  lineNumber = 1
  lineNumber = 624
  var call1810 = callmethod(var_ast,"memberNode", [0]);
  var call1811 = callmethod(call1810,"new", [2], string1805, call1809);
  return call1811
  var if1801 = undefined;
}
  lineNumber = 629
  lineNumber = 630
  lineNumber = 626
  var string1813 = new GraceString("self");
  var opresult1815 = callmethod(var_nm, "==", [1], string1813);
  if (Grace_isTrue(opresult1815)) {
  lineNumber = 628
  lineNumber = 1
  lineNumber = 628
  lineNumber = 1
  lineNumber = 627
  var call1816 = callmethod(var_selftypes,"last", [0]);
  var call1817 = callmethod(var_node,"dtype:=", [1], call1816);
  lineNumber = 629
  lineNumber = 628
  return var_node
  var if1812 = undefined;
}
  lineNumber = 630
  lineNumber = 631
  var call1818 = callmethod(this,"findName", [1], var_nm);
  var var_b = call1818;
  lineNumber = 645
  lineNumber = 647
  lineNumber = 1
  lineNumber = 631
  var call1820 = callmethod(var_b,"kind", [0]);
  var string1821 = new GraceString("var");
  var opresult1823 = callmethod(call1820, "==", [1], string1821);
  if (Grace_isTrue(opresult1823)) {
  lineNumber = 632
  lineNumber = 1
  lineNumber = 632
  var call1824 = callmethod(var_b,"dtype", [0]);
  lineNumber = 633
  var call1825 = callmethod(this,"findType", [1], call1824);
  var var_vtp = call1825;
  lineNumber = 635
  lineNumber = 636
  lineNumber = 1
  lineNumber = 633
  var call1827 = callmethod(var_node,"dtype", [0]);
  var opresult1829 = callmethod(call1827, "/=", [1], var_vtp);
  if (Grace_isTrue(opresult1829)) {
  lineNumber = 635
  lineNumber = 1
  lineNumber = 634
  var call1830 = callmethod(var_node,"dtype:=", [1], var_vtp);
  var if1826 = call1830;
}
  lineNumber = 637
  lineNumber = 636
  return var_node
  var if1819 = undefined;
  } else {
  lineNumber = 645
  lineNumber = 643
  lineNumber = 1
  lineNumber = 637
  var call1832 = callmethod(var_b,"kind", [0]);
  var string1833 = new GraceString("def");
  var opresult1835 = callmethod(call1832, "==", [1], string1833);
  if (Grace_isTrue(opresult1835)) {
  lineNumber = 638
  lineNumber = 1
  lineNumber = 638
  var call1836 = callmethod(var_b,"dtype", [0]);
  lineNumber = 639
  var call1837 = callmethod(this,"findType", [1], call1836);
  var var_dtp = call1837;
  lineNumber = 641
  lineNumber = 642
  lineNumber = 1
  lineNumber = 639
  var call1839 = callmethod(var_node,"dtype", [0]);
  var opresult1841 = callmethod(call1839, "/=", [1], var_dtp);
  if (Grace_isTrue(opresult1841)) {
  lineNumber = 641
  lineNumber = 1
  lineNumber = 640
  var call1842 = callmethod(var_node,"dtype:=", [1], var_dtp);
  var if1838 = call1842;
}
  lineNumber = 643
  lineNumber = 642
  return var_node
  var if1831 = undefined;
  } else {
  lineNumber = 645
  lineNumber = 647
  lineNumber = 1
  lineNumber = 643
  var call1844 = callmethod(var_b,"kind", [0]);
  var string1845 = new GraceString("method");
  var opresult1847 = callmethod(call1844, "==", [1], string1845);
  if (Grace_isTrue(opresult1847)) {
  lineNumber = 644
  lineNumber = 645
  var call1848 = callmethod(this,"findDeepMethod", [1], var_nm);
  var var_meth = call1848;
  lineNumber = 1
  lineNumber = 645
  var call1850 = callmethod(var_meth,"value", [0]);
  lineNumber = 1
  lineNumber = 645
  var call1851 = callmethod(var_ast,"callWithPart", [0]);
  var call1852 = callmethod(call1851,"new", [1], call1850);
  var array1849 = new GraceList([
call1852,
]);

  lineNumber = 646
  lineNumber = 1
  lineNumber = 645
  var call1853 = callmethod(var_ast,"callNode", [0]);
  var call1854 = callmethod(call1853,"new", [2], var_meth, array1849);
  return call1854
  var if1843 = undefined;
}
  var if1831 = if1843;
}
  var if1819 = if1831;
}
  lineNumber = 647
  return var_node
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["resolveIdentifier"] = func1784;
  lineNumber = 720
var func1855 = function(argcv) {
  var curarg = 1;
  var var_arg = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 651
  lineNumber = 653
  lineNumber = 1
  lineNumber = 650
  var call1857 = callmethod(var_arg,"kind", [0]);
  var string1858 = new GraceString("num");
  var opresult1860 = callmethod(call1857, "==", [1], string1858);
  if (Grace_isTrue(opresult1860)) {
  lineNumber = 651
  var array1862 = new GraceList([
]);

  var array1861 = new GraceList([
var_arg,
array1862,
]);

  return array1861
  var if1856 = undefined;
}
  lineNumber = 654
  lineNumber = 656
  lineNumber = 1
  lineNumber = 653
  var call1864 = callmethod(var_arg,"kind", [0]);
  var string1865 = new GraceString("string");
  var opresult1867 = callmethod(call1864, "==", [1], string1865);
  if (Grace_isTrue(opresult1867)) {
  lineNumber = 654
  var array1869 = new GraceList([
]);

  var array1868 = new GraceList([
var_arg,
array1869,
]);

  return array1868
  var if1863 = undefined;
}
  lineNumber = 657
  lineNumber = 659
  lineNumber = 1
  lineNumber = 656
  var call1871 = callmethod(var_arg,"kind", [0]);
  var string1872 = new GraceString("boolean");
  var opresult1874 = callmethod(call1871, "==", [1], string1872);
  if (Grace_isTrue(opresult1874)) {
  lineNumber = 657
  var array1876 = new GraceList([
]);

  var array1875 = new GraceList([
var_arg,
array1876,
]);

  return array1875
  var if1870 = undefined;
}
  lineNumber = 680
  lineNumber = 682
  lineNumber = 1
  lineNumber = 659
  var call1878 = callmethod(var_arg,"kind", [0]);
  var string1879 = new GraceString("call");
  var opresult1881 = callmethod(call1878, "==", [1], string1879);
  if (Grace_isTrue(opresult1881)) {
  lineNumber = 661
  var array1882 = new GraceList([
]);

  var var_bindings = array1882;
  lineNumber = 662
  var array1883 = new GraceList([
]);

  var var_subpats = array1883;
  lineNumber = 667
  lineNumber = 662
  lineNumber = 1
  lineNumber = 662
  var call1884 = callmethod(var_arg,"with", [0]);
  lineNumber = 667
  var block1885 = Grace_allocObject();
  block1885.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1885.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1885.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1885.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1885.receiver = this;
  block1885.className = 'block<typechecker:667>';
  block1885.real = function(
var_part
) {
  lineNumber = 663
  lineNumber = 1
  lineNumber = 663
  var call1886 = callmethod(var_part,"args", [0]);
  lineNumber = 667
  var block1887 = Grace_allocObject();
  block1887.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1887.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1887.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1887.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1887.receiver = this;
  block1887.className = 'block<typechecker:667>';
  block1887.real = function(
var_a
) {
  lineNumber = 664
  lineNumber = 665
  var call1888 = callmethod(this,"rewritematchblockterm2", [1], var_a);
  var var_tmp = call1888;
  var idxres1889 = var_tmp.methods["[]"].call(var_tmp, [1], new GraceNum(1));
  var call1890 = callmethod(var_subpats,"push", [1], idxres1889);
  lineNumber = 667
  lineNumber = 666
  var idxres1891 = var_tmp.methods["[]"].call(var_tmp, [1], new GraceNum(2));
  lineNumber = 667
  var block1892 = Grace_allocObject();
  block1892.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1892.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1892.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1892.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1892.receiver = this;
  block1892.className = 'block<typechecker:667>';
  block1892.real = function(
var_b
) {
  var call1893 = callmethod(var_bindings,"push", [1], var_b);
  return call1893;
};
  var call1894 = callmethod(Grace_prelude,"for()do", [1, 1], idxres1891, block1892);
  return call1894;
};
  var call1895 = callmethod(Grace_prelude,"for()do", [1, 1], call1886, block1887);
  return call1895;
};
  var call1896 = callmethod(Grace_prelude,"for()do", [1, 1], call1884, block1885);
  lineNumber = 678
  lineNumber = 675
  lineNumber = 673
  var string1897 = new GraceString("new");
  lineNumber = 675
  lineNumber = 674
  var string1898 = new GraceString("MatchAndDestructuringPattern");
  lineNumber = 675
  var string1899 = new GraceString("prelude");
  var bool1900 = new GraceBoolean(false)
  lineNumber = 676
  lineNumber = 1
  lineNumber = 675
  var call1901 = callmethod(var_ast,"identifierNode", [0]);
  var call1902 = callmethod(call1901,"new", [2], string1899, bool1900);
  lineNumber = 677
  lineNumber = 1
  lineNumber = 674
  var call1903 = callmethod(var_ast,"memberNode", [0]);
  var call1904 = callmethod(call1903,"new", [2], string1898, call1902);
  lineNumber = 677
  lineNumber = 1
  lineNumber = 672
  var call1905 = callmethod(var_ast,"memberNode", [0]);
  var call1906 = callmethod(call1905,"new", [2], string1897, call1904);
  lineNumber = 678
  var string1908 = new GraceString("new");
  lineNumber = 1
  lineNumber = 678
  var call1910 = callmethod(var_arg,"value", [0]);
  lineNumber = 1
  lineNumber = 678
  var call1911 = callmethod(var_ast,"arrayNode", [0]);
  var call1912 = callmethod(call1911,"new", [1], var_subpats);
  var array1909 = new GraceList([
call1910,
call1912,
]);

  lineNumber = 1
  lineNumber = 678
  var call1913 = callmethod(var_ast,"callWithPart", [0]);
  var call1914 = callmethod(call1913,"new", [2], string1908, array1909);
  var array1907 = new GraceList([
call1914,
]);

  lineNumber = 680
  lineNumber = 1
  lineNumber = 671
  var call1915 = callmethod(var_ast,"callNode", [0]);
  var call1916 = callmethod(call1915,"new", [2], call1906, array1907);
  var var_callpat = call1916;
  lineNumber = 680
  var array1917 = new GraceList([
var_callpat,
var_bindings,
]);

  return array1917
  var if1877 = undefined;
}
  lineNumber = 720
  lineNumber = 722
  lineNumber = 1
  lineNumber = 682
  var call1919 = callmethod(var_arg,"kind", [0]);
  var string1920 = new GraceString("identifier");
  var opresult1922 = callmethod(call1919, "==", [1], string1920);
  if (Grace_isTrue(opresult1922)) {
  lineNumber = 690
  lineNumber = 687
  lineNumber = 685
  var string1923 = new GraceString("new");
  lineNumber = 687
  lineNumber = 686
  var string1924 = new GraceString("VariablePattern");
  lineNumber = 687
  var string1925 = new GraceString("prelude");
  var bool1926 = new GraceBoolean(false)
  lineNumber = 688
  lineNumber = 1
  lineNumber = 687
  var call1927 = callmethod(var_ast,"identifierNode", [0]);
  var call1928 = callmethod(call1927,"new", [2], string1925, bool1926);
  lineNumber = 689
  lineNumber = 1
  lineNumber = 686
  var call1929 = callmethod(var_ast,"memberNode", [0]);
  var call1930 = callmethod(call1929,"new", [2], string1924, call1928);
  lineNumber = 689
  lineNumber = 1
  lineNumber = 684
  var call1931 = callmethod(var_ast,"memberNode", [0]);
  var call1932 = callmethod(call1931,"new", [2], string1923, call1930);
  lineNumber = 690
  var string1934 = new GraceString("new");
  lineNumber = 1
  lineNumber = 690
  var call1936 = callmethod(var_arg,"value", [0]);
  lineNumber = 1
  lineNumber = 690
  var call1937 = callmethod(var_ast,"stringNode", [0]);
  var call1938 = callmethod(call1937,"new", [1], call1936);
  var array1935 = new GraceList([
call1938,
]);

  lineNumber = 1
  lineNumber = 690
  var call1939 = callmethod(var_ast,"callWithPart", [0]);
  var call1940 = callmethod(call1939,"new", [2], string1934, array1935);
  var array1933 = new GraceList([
call1940,
]);

  lineNumber = 692
  lineNumber = 1
  lineNumber = 683
  var call1941 = callmethod(var_ast,"callNode", [0]);
  var call1942 = callmethod(call1941,"new", [2], call1932, array1933);
  var var_varpat = call1942;
  lineNumber = 718
  lineNumber = 720
  lineNumber = 1
  lineNumber = 692
  var call1944 = callmethod(var_arg,"dtype", [0]);
  var bool1945 = new GraceBoolean(false)
  var opresult1947 = callmethod(call1944, "!=", [1], bool1945);
  if (Grace_isTrue(opresult1947)) {
  lineNumber = 702
  lineNumber = 704
  lineNumber = 1
  lineNumber = 704
  lineNumber = 1
  lineNumber = 693
  var call1949 = callmethod(var_arg,"dtype", [0]);
  var call1950 = callmethod(call1949,"kind", [0]);
  var string1951 = new GraceString("identifier");
  var opresult1953 = callmethod(call1950, "==", [1], string1951);
  if (Grace_isTrue(opresult1953)) {
  lineNumber = 702
  lineNumber = 701
  lineNumber = 698
  lineNumber = 696
  var string1955 = new GraceString("new");
  lineNumber = 698
  lineNumber = 697
  var string1956 = new GraceString("AndPattern");
  lineNumber = 698
  var string1957 = new GraceString("prelude");
  var bool1958 = new GraceBoolean(false)
  lineNumber = 699
  lineNumber = 1
  lineNumber = 698
  var call1959 = callmethod(var_ast,"identifierNode", [0]);
  var call1960 = callmethod(call1959,"new", [2], string1957, bool1958);
  lineNumber = 700
  lineNumber = 1
  lineNumber = 697
  var call1961 = callmethod(var_ast,"memberNode", [0]);
  var call1962 = callmethod(call1961,"new", [2], string1956, call1960);
  lineNumber = 700
  lineNumber = 1
  lineNumber = 695
  var call1963 = callmethod(var_ast,"memberNode", [0]);
  var call1964 = callmethod(call1963,"new", [2], string1955, call1962);
  lineNumber = 701
  var string1966 = new GraceString("new");
  lineNumber = 1
  lineNumber = 701
  var call1968 = callmethod(var_arg,"dtype", [0]);
  var array1967 = new GraceList([
var_varpat,
call1968,
]);

  lineNumber = 1
  lineNumber = 701
  var call1969 = callmethod(var_ast,"callWithPart", [0]);
  var call1970 = callmethod(call1969,"new", [2], string1966, array1967);
  var array1965 = new GraceList([
call1970,
]);

  lineNumber = 702
  lineNumber = 1
  lineNumber = 694
  var call1971 = callmethod(var_ast,"callNode", [0]);
  var call1972 = callmethod(call1971,"new", [2], call1964, array1965);
  lineNumber = 702
  var array1973 = new GraceList([
var_arg,
]);

  var array1954 = new GraceList([
call1972,
array1973,
]);

  return array1954
  var if1948 = undefined;
}
  lineNumber = 704
  lineNumber = 1
  lineNumber = 704
  var call1974 = callmethod(var_arg,"dtype", [0]);
  lineNumber = 705
  var call1975 = callmethod(this,"rewritematchblockterm2", [1], call1974);
  var var_tmp = call1975;
  var array1976 = new GraceList([
var_arg,
]);

  var var_bindings = array1976;
  lineNumber = 707
  lineNumber = 706
  var idxres1977 = var_tmp.methods["[]"].call(var_tmp, [1], new GraceNum(2));
  lineNumber = 707
  var block1978 = Grace_allocObject();
  block1978.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block1978.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block1978.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block1978.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block1978.receiver = this;
  block1978.className = 'block<typechecker:707>';
  block1978.real = function(
var_b
) {
  var call1979 = callmethod(var_bindings,"push", [1], var_b);
  return call1979;
};
  var call1980 = callmethod(Grace_prelude,"for()do", [1, 1], idxres1977, block1978);
  lineNumber = 716
  lineNumber = 713
  lineNumber = 711
  var string1981 = new GraceString("new");
  lineNumber = 713
  lineNumber = 712
  var string1982 = new GraceString("AndPattern");
  lineNumber = 713
  var string1983 = new GraceString("prelude");
  var bool1984 = new GraceBoolean(false)
  lineNumber = 714
  lineNumber = 1
  lineNumber = 713
  var call1985 = callmethod(var_ast,"identifierNode", [0]);
  var call1986 = callmethod(call1985,"new", [2], string1983, bool1984);
  lineNumber = 715
  lineNumber = 1
  lineNumber = 712
  var call1987 = callmethod(var_ast,"memberNode", [0]);
  var call1988 = callmethod(call1987,"new", [2], string1982, call1986);
  lineNumber = 715
  lineNumber = 1
  lineNumber = 710
  var call1989 = callmethod(var_ast,"memberNode", [0]);
  var call1990 = callmethod(call1989,"new", [2], string1981, call1988);
  lineNumber = 716
  var string1992 = new GraceString("new");
  var idxres1994 = var_tmp.methods["[]"].call(var_tmp, [1], new GraceNum(1));
  var array1993 = new GraceList([
var_varpat,
idxres1994,
]);

  lineNumber = 1
  lineNumber = 716
  var call1995 = callmethod(var_ast,"callWithPart", [0]);
  var call1996 = callmethod(call1995,"new", [2], string1992, array1993);
  var array1991 = new GraceList([
call1996,
]);

  lineNumber = 718
  lineNumber = 1
  lineNumber = 709
  var call1997 = callmethod(var_ast,"callNode", [0]);
  var call1998 = callmethod(call1997,"new", [2], call1990, array1991);
  var var_bindingpat = call1998;
  lineNumber = 718
  var array1999 = new GraceList([
var_bindingpat,
var_bindings,
]);

  return array1999
  var if1943 = undefined;
}
  lineNumber = 720
  var array2001 = new GraceList([
var_arg,
]);

  var array2000 = new GraceList([
var_varpat,
array2001,
]);

  return array2000
  var if1918 = undefined;
}
  return if1918
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["rewritematchblockterm2"] = func1855;
  lineNumber = 778
var func2002 = function(argcv) {
  var curarg = 1;
  var var_blk = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 725
  lineNumber = 1
  lineNumber = 724
  var call2003 = callmethod(var_blk,"params", [0]);
  var idxres2004 = call2003.methods["[]"].call(call2003, [1], new GraceNum(1));
  var var_arg = idxres2004;
  lineNumber = 726
  lineNumber = 725
  var bool2005 = new GraceBoolean(false)
  var var_pattern = bool2005;
  lineNumber = 727
  lineNumber = 1
  lineNumber = 726
  var call2006 = callmethod(var_blk,"params", [0]);
  var var_newparams = call2006;
  lineNumber = 732
  lineNumber = 733
  lineNumber = 1
  lineNumber = 727
  var call2008 = callmethod(var_arg,"kind", [0]);
  var string2009 = new GraceString("num");
  var opresult2011 = callmethod(call2008, "==", [1], string2009);
  lineNumber = 733
  lineNumber = 1
  lineNumber = 727
  var call2012 = callmethod(var_arg,"kind", [0]);
  var string2013 = new GraceString("string");
  var opresult2015 = callmethod(call2012, "==", [1], string2013);
  var opresult2017 = callmethod(opresult2011, "||", [1], opresult2015);
  lineNumber = 733
  lineNumber = 1
  lineNumber = 728
  var call2018 = callmethod(var_arg,"kind", [0]);
  var string2019 = new GraceString("boolean");
  var opresult2021 = callmethod(call2018, "==", [1], string2019);
  var opresult2023 = callmethod(opresult2017, "||", [1], opresult2021);
  if (Grace_isTrue(opresult2023)) {
  lineNumber = 729
  lineNumber = 730
  var call2024 = callmethod(this,"rewritematchblockterm2", [1], var_arg);
  var var_tmp = call2024;
  lineNumber = 731
  lineNumber = 730
  var idxres2025 = var_tmp.methods["[]"].call(var_tmp, [1], new GraceNum(1));
  var_pattern = idxres2025;
  lineNumber = 732
  lineNumber = 731
  var idxres2026 = var_tmp.methods["[]"].call(var_tmp, [1], new GraceNum(2));
  var_newparams = idxres2026;
  var if2007 = idxres2026;
}
  lineNumber = 772
  lineNumber = 775
  lineNumber = 1
  lineNumber = 733
  var call2028 = callmethod(var_arg,"kind", [0]);
  var string2029 = new GraceString("identifier");
  var opresult2031 = callmethod(call2028, "==", [1], string2029);
  if (Grace_isTrue(opresult2031)) {
  lineNumber = 741
  lineNumber = 738
  lineNumber = 736
  var string2032 = new GraceString("new");
  lineNumber = 738
  lineNumber = 737
  var string2033 = new GraceString("VariablePattern");
  lineNumber = 738
  var string2034 = new GraceString("prelude");
  var bool2035 = new GraceBoolean(false)
  lineNumber = 739
  lineNumber = 1
  lineNumber = 738
  var call2036 = callmethod(var_ast,"identifierNode", [0]);
  var call2037 = callmethod(call2036,"new", [2], string2034, bool2035);
  lineNumber = 740
  lineNumber = 1
  lineNumber = 737
  var call2038 = callmethod(var_ast,"memberNode", [0]);
  var call2039 = callmethod(call2038,"new", [2], string2033, call2037);
  lineNumber = 740
  lineNumber = 1
  lineNumber = 735
  var call2040 = callmethod(var_ast,"memberNode", [0]);
  var call2041 = callmethod(call2040,"new", [2], string2032, call2039);
  lineNumber = 741
  var string2043 = new GraceString("new");
  lineNumber = 1
  lineNumber = 741
  var call2045 = callmethod(var_arg,"value", [0]);
  lineNumber = 1
  lineNumber = 741
  var call2046 = callmethod(var_ast,"stringNode", [0]);
  var call2047 = callmethod(call2046,"new", [1], call2045);
  var array2044 = new GraceList([
call2047,
]);

  lineNumber = 1
  lineNumber = 741
  var call2048 = callmethod(var_ast,"callWithPart", [0]);
  var call2049 = callmethod(call2048,"new", [2], string2043, array2044);
  var array2042 = new GraceList([
call2049,
]);

  lineNumber = 743
  lineNumber = 1
  lineNumber = 734
  var call2050 = callmethod(var_ast,"callNode", [0]);
  var call2051 = callmethod(call2050,"new", [2], call2041, array2042);
  var var_varpat = call2051;
  lineNumber = 772
  lineNumber = 774
  lineNumber = 1
  lineNumber = 743
  var call2053 = callmethod(var_arg,"dtype", [0]);
  var bool2054 = new GraceBoolean(false)
  var opresult2056 = callmethod(call2053, "!=", [1], bool2054);
  if (Grace_isTrue(opresult2056)) {
  lineNumber = 764
  lineNumber = 767
  lineNumber = 1
  lineNumber = 767
  lineNumber = 1
  lineNumber = 744
  var call2058 = callmethod(var_arg,"dtype", [0]);
  var call2059 = callmethod(call2058,"kind", [0]);
  var string2060 = new GraceString("identifier");
  var opresult2062 = callmethod(call2059, "==", [1], string2060);
  if (Grace_isTrue(opresult2062)) {
  lineNumber = 751
  lineNumber = 748
  lineNumber = 746
  var string2063 = new GraceString("new");
  lineNumber = 748
  lineNumber = 747
  var string2064 = new GraceString("AndPattern");
  lineNumber = 748
  var string2065 = new GraceString("prelude");
  var bool2066 = new GraceBoolean(false)
  lineNumber = 749
  lineNumber = 1
  lineNumber = 748
  var call2067 = callmethod(var_ast,"identifierNode", [0]);
  var call2068 = callmethod(call2067,"new", [2], string2065, bool2066);
  lineNumber = 750
  lineNumber = 1
  lineNumber = 747
  var call2069 = callmethod(var_ast,"memberNode", [0]);
  var call2070 = callmethod(call2069,"new", [2], string2064, call2068);
  lineNumber = 750
  lineNumber = 1
  lineNumber = 746
  var call2071 = callmethod(var_ast,"memberNode", [0]);
  var call2072 = callmethod(call2071,"new", [2], string2063, call2070);
  lineNumber = 751
  var string2074 = new GraceString("new");
  lineNumber = 1
  lineNumber = 751
  var call2076 = callmethod(var_arg,"dtype", [0]);
  var array2075 = new GraceList([
var_varpat,
call2076,
]);

  lineNumber = 1
  lineNumber = 751
  var call2077 = callmethod(var_ast,"callWithPart", [0]);
  var call2078 = callmethod(call2077,"new", [2], string2074, array2075);
  var array2073 = new GraceList([
call2078,
]);

  lineNumber = 752
  lineNumber = 1
  lineNumber = 745
  var call2079 = callmethod(var_ast,"callNode", [0]);
  var call2080 = callmethod(call2079,"new", [2], call2072, array2073);
  var_pattern = call2080;
  var if2057 = call2080;
  } else {
  lineNumber = 753
  lineNumber = 1
  lineNumber = 753
  var call2081 = callmethod(var_arg,"dtype", [0]);
  lineNumber = 754
  var call2082 = callmethod(this,"rewritematchblockterm2", [1], call2081);
  var var_tmp = call2082;
  lineNumber = 760
  lineNumber = 757
  lineNumber = 755
  var string2083 = new GraceString("new");
  lineNumber = 757
  lineNumber = 756
  var string2084 = new GraceString("AndPattern");
  lineNumber = 757
  var string2085 = new GraceString("prelude");
  var bool2086 = new GraceBoolean(false)
  lineNumber = 758
  lineNumber = 1
  lineNumber = 757
  var call2087 = callmethod(var_ast,"identifierNode", [0]);
  var call2088 = callmethod(call2087,"new", [2], string2085, bool2086);
  lineNumber = 759
  lineNumber = 1
  lineNumber = 756
  var call2089 = callmethod(var_ast,"memberNode", [0]);
  var call2090 = callmethod(call2089,"new", [2], string2084, call2088);
  lineNumber = 759
  lineNumber = 1
  lineNumber = 755
  var call2091 = callmethod(var_ast,"memberNode", [0]);
  var call2092 = callmethod(call2091,"new", [2], string2083, call2090);
  lineNumber = 760
  var string2094 = new GraceString("new");
  var idxres2096 = var_tmp.methods["[]"].call(var_tmp, [1], new GraceNum(1));
  var array2095 = new GraceList([
var_varpat,
idxres2096,
]);

  lineNumber = 1
  lineNumber = 760
  var call2097 = callmethod(var_ast,"callWithPart", [0]);
  var call2098 = callmethod(call2097,"new", [2], string2094, array2095);
  var array2093 = new GraceList([
call2098,
]);

  lineNumber = 762
  lineNumber = 1
  lineNumber = 754
  var call2099 = callmethod(var_ast,"callNode", [0]);
  var call2100 = callmethod(call2099,"new", [2], call2092, array2093);
  var var_bindingpat = call2100;
  lineNumber = 763
  lineNumber = 762
  var_pattern = var_bindingpat;
  lineNumber = 764
  lineNumber = 763
  var idxres2101 = var_tmp.methods["[]"].call(var_tmp, [1], new GraceNum(2));
  lineNumber = 764
  var block2102 = Grace_allocObject();
  block2102.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2102.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2102.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2102.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2102.receiver = this;
  block2102.className = 'block<typechecker:764>';
  block2102.real = function(
var_p
) {
  var call2103 = callmethod(var_newparams,"push", [1], var_p);
  return call2103;
};
  var call2104 = callmethod(Grace_prelude,"for()do", [1, 1], idxres2101, block2102);
  var if2057 = call2104;
}
  lineNumber = 767
  lineNumber = 768
  var call2105 = callmethod(this,"resolveIdentifiers", [1], var_pattern);
  var_pattern = call2105;
  var if2052 = call2105;
  } else {
  lineNumber = 772
  lineNumber = 773
  lineNumber = 1
  lineNumber = 769
  var call2107 = callmethod(var_blk,"matchingPattern", [0]);
  var opresult2109 = callmethod(call2107, "==", [1], var_arg);
  if (Grace_isTrue(opresult2109)) {
  lineNumber = 770
  lineNumber = 771
  var call2110 = callmethod(this,"resolveIdentifiers", [1], var_arg);
  var_pattern = call2110;
  lineNumber = 772
  var array2111 = new GraceList([
]);

  var_newparams = array2111;
  var if2106 = array2111;
}
  var if2052 = if2106;
}
  var if2027 = if2052;
}
  lineNumber = 775
  lineNumber = 1
  lineNumber = 775
  var call2112 = callmethod(var_blk,"body", [0]);
  lineNumber = 776
  lineNumber = 1
  lineNumber = 775
  var call2113 = callmethod(var_ast,"blockNode", [0]);
  var call2114 = callmethod(call2113,"new", [2], var_newparams, call2112);
  var var_newblk = call2114;
  lineNumber = 777
  lineNumber = 1
  lineNumber = 776
  var call2115 = callmethod(var_newblk,"matchingPattern:=", [1], var_pattern);
  lineNumber = 778
  lineNumber = 777
  return var_newblk
  return undefined
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["rewritematchblock2"] = func2002;
  lineNumber = 814
var func2116 = function(argcv) {
  var curarg = 1;
  var var_param = arguments[curarg];
  curarg++;
  var var_body = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 783
  lineNumber = 786
  lineNumber = 1
  lineNumber = 780
  var call2118 = callmethod(var_param,"kind", [0]);
  var string2119 = new GraceString("identifier");
  var opresult2121 = callmethod(call2118, "==", [1], string2119);
  if (Grace_isTrue(opresult2121)) {
  lineNumber = 781
  lineNumber = 782
  var call2122 = callmethod(this,"bindIdentifier", [1], var_param);
  lineNumber = 783
  lineNumber = 782
  lineNumber = 785
  lineNumber = 1
  lineNumber = 782
  var call2124 = callmethod(var_param,"dtype", [0]);
  var bool2125 = new GraceBoolean(false)
  var opresult2127 = callmethod(call2124, "==", [1], bool2125);
  var block2128 = Grace_allocObject();
  block2128.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2128.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2128.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2128.receiver = this;
  block2128.className = 'block<typechecker:782>';
  block2128.real = function(
) {
  lineNumber = 1
  lineNumber = 782
  lineNumber = 1
  lineNumber = 782
  var call2129 = callmethod(var_param,"dtype", [0]);
  var call2130 = callmethod(call2129,"kind", [0]);
  var string2131 = new GraceString("call");
  var opresult2133 = callmethod(call2130, "==", [1], string2131);
  return opresult2133;
};
  var opresult2135 = callmethod(opresult2127, "||", [1], block2128);
  if (Grace_isTrue(opresult2135)) {
  lineNumber = 783
  var array2136 = new GraceList([
var_param,
var_body,
]);

  return array2136
  var if2123 = undefined;
}
  var if2117 = if2123;
}
  lineNumber = 787
  lineNumber = 786
  var string2137 = new GraceString("__matchterm");
  var opresult2139 = callmethod(string2137, "++", [1], var_auto__95__count);
  lineNumber = 787
  var bool2140 = new GraceBoolean(false)
  lineNumber = 788
  lineNumber = 1
  lineNumber = 786
  var call2141 = callmethod(var_ast,"identifierNode", [0]);
  var call2142 = callmethod(call2141,"new", [2], opresult2139, bool2140);
  var var_newname = call2142;
  lineNumber = 789
  lineNumber = 788
  var opresult2144 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2144;
  lineNumber = 789
  lineNumber = 790
  var call2145 = callmethod(this,"bindIdentifier", [1], var_newname);
  lineNumber = 791
  lineNumber = 790
  var var_pat = var_param;
  lineNumber = 792
  var var_st;
  lineNumber = 811
  lineNumber = 814
  lineNumber = 1
  lineNumber = 792
  var call2147 = callmethod(var_pat,"kind", [0]);
  var string2148 = new GraceString("call");
  var opresult2150 = callmethod(call2147, "==", [1], string2148);
  if (Grace_isTrue(opresult2150)) {
  lineNumber = 800
  lineNumber = 798
  lineNumber = 797
  lineNumber = 796
  var string2151 = new GraceString("match");
  lineNumber = 797
  lineNumber = 1
  lineNumber = 797
  var call2152 = callmethod(var_pat,"value", [0]);
  lineNumber = 1
  lineNumber = 795
  var call2153 = callmethod(var_ast,"memberNode", [0]);
  var call2154 = callmethod(call2153,"new", [2], string2151, call2152);
  lineNumber = 798
  var string2156 = new GraceString("match");
  var array2157 = new GraceList([
var_newname,
]);

  lineNumber = 1
  lineNumber = 798
  var call2158 = callmethod(var_ast,"callWithPart", [0]);
  var call2159 = callmethod(call2158,"new", [2], string2156, array2157);
  var array2155 = new GraceList([
call2159,
]);

  lineNumber = 1
  lineNumber = 794
  var call2160 = callmethod(var_ast,"callNode", [0]);
  var call2161 = callmethod(call2160,"new", [2], call2154, array2155);
  lineNumber = 799
  lineNumber = 800
  var string2163 = new GraceString("MatchFailed");
  var bool2164 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 800
  var call2165 = callmethod(var_ast,"identifierNode", [0]);
  var call2166 = callmethod(call2165,"new", [2], string2163, bool2164);
  var array2162 = new GraceList([
call2166,
]);

  lineNumber = 802
  lineNumber = 1
  lineNumber = 793
  var call2167 = callmethod(var_ast,"ifNode", [0]);
  var call2168 = callmethod(call2167,"new", [3], call2161, var_body, array2162);
  var_st = call2168;
  var if2146 = call2168;
  } else {
  lineNumber = 811
  lineNumber = 807
  lineNumber = 1
  lineNumber = 802
  var call2170 = callmethod(var_pat,"kind", [0]);
  var string2171 = new GraceString("identifier");
  var opresult2173 = callmethod(call2170, "==", [1], string2171);
  if (Grace_isTrue(opresult2173)) {
  lineNumber = 804
  lineNumber = 1
  lineNumber = 803
  var call2174 = callmethod(var_pat,"dtype", [0]);
  var_pat = call2174;
  lineNumber = 805
  lineNumber = 1
  lineNumber = 804
  var bool2175 = new GraceBoolean(false)
  var call2176 = callmethod(var_param,"dtype:=", [1], bool2175);
  lineNumber = 806
  lineNumber = 805
  var string2177 = new GraceString("print");
  lineNumber = 1
  lineNumber = 805
  var call2178 = callmethod(var_ast,"identifierNode", [0]);
  var call2179 = callmethod(call2178,"new", [1], string2177);
  lineNumber = 806
  var string2181 = new GraceString("print");
  var string2183 = new GraceString("Recursively binding pattern matches unimplemented");
  lineNumber = 1
  lineNumber = 806
  var call2184 = callmethod(var_ast,"stringNode", [0]);
  var call2185 = callmethod(call2184,"new", [1], string2183);
  var array2182 = new GraceList([
call2185,
]);

  lineNumber = 1
  lineNumber = 806
  var call2186 = callmethod(var_ast,"callWithPart", [0]);
  var call2187 = callmethod(call2186,"new", [2], string2181, array2182);
  var array2180 = new GraceList([
call2187,
]);

  lineNumber = 807
  lineNumber = 1
  lineNumber = 805
  var call2188 = callmethod(var_ast,"callNode", [0]);
  var call2189 = callmethod(call2188,"new", [2], call2179, array2180);
  var_st = call2189;
  var if2169 = call2189;
  } else {
  lineNumber = 811
  lineNumber = 809
  var string2190 = new GraceString("==");
  lineNumber = 1
  lineNumber = 809
  var call2191 = callmethod(var_ast,"opNode", [0]);
  var call2192 = callmethod(call2191,"new", [3], string2190, var_pat, var_newname);
  lineNumber = 810
  lineNumber = 811
  var string2194 = new GraceString("MatchFailed");
  var bool2195 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 811
  var call2196 = callmethod(var_ast,"identifierNode", [0]);
  var call2197 = callmethod(call2196,"new", [2], string2194, bool2195);
  var array2193 = new GraceList([
call2197,
]);

  lineNumber = 813
  lineNumber = 1
  lineNumber = 808
  var call2198 = callmethod(var_ast,"ifNode", [0]);
  var call2199 = callmethod(call2198,"new", [3], call2192, var_body, array2193);
  var_st = call2199;
  var if2169 = call2199;
}
  var if2146 = if2169;
}
  lineNumber = 814
  var array2201 = new GraceList([
var_st,
]);

  var array2200 = new GraceList([
var_newname,
array2201,
]);

  return array2200
  return undefined
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["rewritematchblockterm"] = func2116;
  lineNumber = 959
var func2202 = function(argcv) {
  var curarg = 1;
  var var_o = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 819
  lineNumber = 1
  lineNumber = 818
  var call2203 = callmethod(var_o,"params", [0]);
  var var_params = call2203;
  lineNumber = 821
  lineNumber = 823
  lineNumber = 1
  lineNumber = 819
  var call2205 = callmethod(var_params,"size", [0]);
  var opresult2207 = callmethod(call2205, "/=", [1], new GraceNum(1));
  if (Grace_isTrue(opresult2207)) {
  lineNumber = 820
  lineNumber = 1
  lineNumber = 820
  var call2208 = callmethod(var_o,"body", [0]);
  lineNumber = 821
  var call2209 = callmethod(this,"resolveIdentifiersList", [1], call2208);
  var var_skipListBody = call2209;
  lineNumber = 1
  lineNumber = 821
  var call2210 = callmethod(var_o,"params", [0]);
  lineNumber = 822
  lineNumber = 1
  lineNumber = 821
  var call2211 = callmethod(var_ast,"blockNode", [0]);
  var call2212 = callmethod(call2211,"new", [2], call2210, var_skipListBody);
  return call2212
  var if2204 = undefined;
}
  lineNumber = 824
  lineNumber = 1
  lineNumber = 823
  var call2213 = callmethod(var_o,"body", [0]);
  var var_body = call2213;
  lineNumber = 825
  lineNumber = 824
  var var_inbody = var_body;
  lineNumber = 826
  var var_pat;
  lineNumber = 827
  var var_tmpp;
  lineNumber = 828
  var var_nparams;
  lineNumber = 829
  lineNumber = 828
  var string2214 = new GraceString("__matchvar");
  var opresult2216 = callmethod(string2214, "++", [1], var_auto__95__count);
  lineNumber = 829
  var bool2217 = new GraceBoolean(false)
  lineNumber = 830
  lineNumber = 1
  lineNumber = 828
  var call2218 = callmethod(var_ast,"identifierNode", [0]);
  var call2219 = callmethod(call2218,"new", [2], opresult2216, bool2217);
  var var_newname = call2219;
  lineNumber = 831
  lineNumber = 830
  var opresult2221 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2221;
  lineNumber = 831
  lineNumber = 832
  var call2222 = callmethod(this,"bindIdentifier", [1], var_newname);
  lineNumber = 833
  lineNumber = 1
  lineNumber = 832
  var call2223 = callmethod(var_params,"first", [0]);
  var var_fst = call2223;
  lineNumber = 955
  lineNumber = 957
  lineNumber = 1
  lineNumber = 833
  var call2225 = callmethod(var_fst,"kind", [0]);
  var string2226 = new GraceString("call");
  var opresult2228 = callmethod(call2225, "==", [1], string2226);
  if (Grace_isTrue(opresult2228)) {
  lineNumber = 835
  lineNumber = 834
  var_pat = var_fst;
  lineNumber = 836
  lineNumber = 835
  var_tmpp = var_fst;
  lineNumber = 836
  var array2229 = new GraceList([
var_newname,
]);

  var_params = array2229;
  lineNumber = 838
  var array2230 = new GraceList([
]);

  var_nparams = array2230;
  lineNumber = 844
  lineNumber = 838
  lineNumber = 1
  lineNumber = 838
  var call2231 = callmethod(var_pat,"with", [0]);
  lineNumber = 844
  var block2232 = Grace_allocObject();
  block2232.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2232.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2232.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2232.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2232.receiver = this;
  block2232.className = 'block<typechecker:844>';
  block2232.real = function(
var_part
) {
  lineNumber = 839
  lineNumber = 1
  lineNumber = 839
  lineNumber = 1
  lineNumber = 839
  var call2233 = callmethod(var_part,"args", [0]);
  var call2234 = callmethod(call2233,"indices", [0]);
  lineNumber = 844
  var block2235 = Grace_allocObject();
  block2235.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2235.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2235.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2235.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2235.receiver = this;
  block2235.className = 'block<typechecker:844>';
  block2235.real = function(
var_pwi
) {
  lineNumber = 841
  lineNumber = 1
  lineNumber = 840
  var call2236 = callmethod(var_part,"args", [0]);
  var idxres2237 = call2236.methods["[]"].call(call2236, [1], var_pwi);
  var var_pw = idxres2237;
  lineNumber = 841
  lineNumber = 842
  var call2238 = callmethod(this,"rewritematchblockterm", [2], var_pw, var_inbody);
  var var_rw2 = call2238;
  lineNumber = 843
  lineNumber = 1
  lineNumber = 842
  lineNumber = 843
  lineNumber = 842
  var idxres2239 = var_rw2.methods["[]"].call(var_rw2, [1], new GraceNum(1));
  lineNumber = 843
  lineNumber = 1
  lineNumber = 842
  var call2240 = callmethod(var_part,"args", [0]);
  var call2241 = callmethod(call2240,"[]:=", [2], var_pwi, idxres2239);
  lineNumber = 844
  lineNumber = 843
  var idxres2242 = var_rw2.methods["[]"].call(var_rw2, [1], new GraceNum(2));
  var_inbody = idxres2242;
  return idxres2242;
};
  var call2243 = callmethod(Grace_prelude,"for()do", [1, 1], call2234, block2235);
  return call2243;
};
  var call2244 = callmethod(Grace_prelude,"for()do", [1, 1], call2231, block2232);
  lineNumber = 846
  lineNumber = 847
  var call2245 = callmethod(this,"resolveIdentifiersList", [1], var_inbody);
  var_inbody = call2245;
  lineNumber = 848
  var array2246 = new GraceList([
]);

  var var_args = array2246;
  lineNumber = 850
  lineNumber = 848
  lineNumber = 1
  lineNumber = 848
  var call2247 = callmethod(var_pat,"with", [0]);
  lineNumber = 850
  var block2248 = Grace_allocObject();
  block2248.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2248.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2248.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2248.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2248.receiver = this;
  block2248.className = 'block<typechecker:850>';
  block2248.real = function(
var_part
) {
  lineNumber = 849
  lineNumber = 1
  lineNumber = 849
  var call2249 = callmethod(var_part,"args", [0]);
  lineNumber = 850
  var block2250 = Grace_allocObject();
  block2250.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2250.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2250.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2250.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2250.receiver = this;
  block2250.className = 'block<typechecker:850>';
  block2250.real = function(
var_arg
) {
  var call2251 = callmethod(var_args,"push", [1], var_arg);
  return call2251;
};
  var call2252 = callmethod(Grace_prelude,"for()do", [1, 1], call2249, block2250);
  return call2252;
};
  var call2253 = callmethod(Grace_prelude,"for()do", [1, 1], call2247, block2248);
  lineNumber = 869
  lineNumber = 858
  lineNumber = 857
  lineNumber = 856
  var string2255 = new GraceString("match");
  lineNumber = 857
  lineNumber = 1
  lineNumber = 857
  var call2256 = callmethod(var_pat,"value", [0]);
  lineNumber = 1
  lineNumber = 855
  var call2257 = callmethod(var_ast,"memberNode", [0]);
  var call2258 = callmethod(call2257,"new", [2], string2255, call2256);
  lineNumber = 858
  var string2260 = new GraceString("match");
  var array2261 = new GraceList([
var_newname,
]);

  lineNumber = 1
  lineNumber = 858
  var call2262 = callmethod(var_ast,"callWithPart", [0]);
  var call2263 = callmethod(call2262,"new", [2], string2260, array2261);
  var array2259 = new GraceList([
call2263,
]);

  lineNumber = 1
  lineNumber = 854
  var call2264 = callmethod(var_ast,"callNode", [0]);
  var call2265 = callmethod(call2264,"new", [2], call2258, array2259);
  lineNumber = 866
  lineNumber = 862
  lineNumber = 861
  var string2267 = new GraceString("applyIndirectly");
  lineNumber = 862
  lineNumber = 863
  lineNumber = 1
  lineNumber = 862
  var call2268 = callmethod(var_ast,"blockNode", [0]);
  var call2269 = callmethod(call2268,"new", [2], var_args, var_inbody);
  lineNumber = 863
  lineNumber = 1
  lineNumber = 861
  var call2270 = callmethod(var_ast,"memberNode", [0]);
  var call2271 = callmethod(call2270,"new", [2], string2267, call2269);
  lineNumber = 866
  lineNumber = 864
  var string2273 = new GraceString("applyIndirectly");
  lineNumber = 866
  lineNumber = 865
  var string2275 = new GraceString("try");
  lineNumber = 1
  lineNumber = 865
  var call2276 = callmethod(var_pat,"value", [0]);
  lineNumber = 1
  lineNumber = 865
  var call2277 = callmethod(var_ast,"memberNode", [0]);
  var call2278 = callmethod(call2277,"new", [2], string2275, call2276);
  lineNumber = 866
  var string2280 = new GraceString("try");
  var array2281 = new GraceList([
var_newname,
]);

  lineNumber = 1
  lineNumber = 866
  var call2282 = callmethod(var_ast,"callWithPart", [0]);
  var call2283 = callmethod(call2282,"new", [2], string2280, array2281);
  var array2279 = new GraceList([
call2283,
]);

  lineNumber = 867
  lineNumber = 1
  lineNumber = 864
  var call2284 = callmethod(var_ast,"callNode", [0]);
  var call2285 = callmethod(call2284,"new", [2], call2278, array2279);
  var array2274 = new GraceList([
call2285,
]);

  lineNumber = 867
  lineNumber = 1
  lineNumber = 864
  var call2286 = callmethod(var_ast,"callWithPart", [0]);
  var call2287 = callmethod(call2286,"new", [2], string2273, array2274);
  var array2272 = new GraceList([
call2287,
]);

  lineNumber = 868
  lineNumber = 1
  lineNumber = 860
  var call2288 = callmethod(var_ast,"callNode", [0]);
  var call2289 = callmethod(call2288,"new", [2], call2271, array2272);
  var array2266 = new GraceList([
call2289,
]);

  lineNumber = 869
  var string2291 = new GraceString("MatchFailed");
  var bool2292 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 869
  var call2293 = callmethod(var_ast,"identifierNode", [0]);
  var call2294 = callmethod(call2293,"new", [2], string2291, bool2292);
  var array2290 = new GraceList([
call2294,
]);

  lineNumber = 871
  lineNumber = 1
  lineNumber = 853
  var call2295 = callmethod(var_ast,"ifNode", [0]);
  var call2296 = callmethod(call2295,"new", [3], call2265, array2266, array2290);
  var array2254 = new GraceList([
call2296,
]);

  var_body = array2254;
  var if2224 = array2254;
  } else {
  lineNumber = 955
  lineNumber = 889
  lineNumber = 1
  lineNumber = 872
  var call2298 = callmethod(var_fst,"kind", [0]);
  var string2299 = new GraceString("identifier");
  var opresult2301 = callmethod(call2298, "/=", [1], string2299);
  if (Grace_isTrue(opresult2301)) {
  lineNumber = 874
  lineNumber = 873
  var opresult2303 = callmethod(var_auto__95__count, "+", [1], new GraceNum(1));
  var_auto__95__count = opresult2303;
  lineNumber = 875
  lineNumber = 874
  var_pat = var_fst;
  lineNumber = 875
  var array2304 = new GraceList([
var_newname,
]);

  var_params = array2304;
  lineNumber = 876
  lineNumber = 877
  var call2305 = callmethod(this,"resolveIdentifiersList", [1], var_inbody);
  var_inbody = call2305;
  lineNumber = 886
  lineNumber = 878
  var string2307 = new GraceString("==");
  lineNumber = 1
  lineNumber = 878
  var call2308 = callmethod(var_ast,"opNode", [0]);
  var call2309 = callmethod(call2308,"new", [3], string2307, var_pat, var_newname);
  lineNumber = 884
  lineNumber = 882
  lineNumber = 881
  var string2311 = new GraceString("apply");
  lineNumber = 882
  var array2312 = new GraceList([
]);

  lineNumber = 883
  lineNumber = 1
  lineNumber = 882
  var call2313 = callmethod(var_ast,"blockNode", [0]);
  var call2314 = callmethod(call2313,"new", [2], array2312, var_inbody);
  lineNumber = 883
  lineNumber = 1
  lineNumber = 881
  var call2315 = callmethod(var_ast,"memberNode", [0]);
  var call2316 = callmethod(call2315,"new", [2], string2311, call2314);
  lineNumber = 884
  var string2318 = new GraceString("apply");
  lineNumber = 1
  lineNumber = 884
  var call2319 = callmethod(var_ast,"callWithPart", [0]);
  var call2320 = callmethod(call2319,"new", [1], string2318);
  var array2317 = new GraceList([
call2320,
]);

  lineNumber = 885
  lineNumber = 1
  lineNumber = 880
  var call2321 = callmethod(var_ast,"callNode", [0]);
  var call2322 = callmethod(call2321,"new", [2], call2316, array2317);
  var array2310 = new GraceList([
call2322,
]);

  lineNumber = 886
  var string2324 = new GraceString("MatchFailed");
  var bool2325 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 886
  var call2326 = callmethod(var_ast,"identifierNode", [0]);
  var call2327 = callmethod(call2326,"new", [2], string2324, bool2325);
  var array2323 = new GraceList([
call2327,
]);

  lineNumber = 888
  lineNumber = 1
  lineNumber = 877
  var call2328 = callmethod(var_ast,"ifNode", [0]);
  var call2329 = callmethod(call2328,"new", [3], call2309, array2310, array2323);
  var array2306 = new GraceList([
call2329,
]);

  var_body = array2306;
  var if2297 = array2306;
  } else {
  lineNumber = 955
  lineNumber = 954
  lineNumber = 1
  lineNumber = 889
  var call2331 = callmethod(var_fst,"dtype", [0]);
  var bool2332 = new GraceBoolean(false)
  var opresult2334 = callmethod(call2331, "/=", [1], bool2332);
  if (Grace_isTrue(opresult2334)) {
  lineNumber = 891
  lineNumber = 1
  lineNumber = 890
  var call2335 = callmethod(var_fst,"dtype", [0]);
  var_pat = call2335;
  lineNumber = 892
  lineNumber = 891
  var_tmpp = var_fst;
  lineNumber = 949
  lineNumber = 954
  lineNumber = 1
  lineNumber = 892
  var call2337 = callmethod(var_pat,"kind", [0]);
  var string2338 = new GraceString("call");
  var opresult2340 = callmethod(call2337, "==", [1], string2338);
  if (Grace_isTrue(opresult2340)) {
  lineNumber = 894
  var array2341 = new GraceList([
]);

  var_nparams = array2341;
  var array2342 = new GraceList([
var_newname,
]);

  var_params = array2342;
  lineNumber = 901
  lineNumber = 895
  lineNumber = 1
  lineNumber = 895
  var call2343 = callmethod(var_pat,"with", [0]);
  lineNumber = 901
  var block2344 = Grace_allocObject();
  block2344.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2344.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2344.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2344.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2344.receiver = this;
  block2344.className = 'block<typechecker:901>';
  block2344.real = function(
var_part
) {
  lineNumber = 896
  lineNumber = 1
  lineNumber = 896
  lineNumber = 1
  lineNumber = 896
  var call2345 = callmethod(var_part,"args", [0]);
  var call2346 = callmethod(call2345,"indices", [0]);
  lineNumber = 901
  var block2347 = Grace_allocObject();
  block2347.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2347.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2347.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2347.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2347.receiver = this;
  block2347.className = 'block<typechecker:901>';
  block2347.real = function(
var_pwi
) {
  lineNumber = 898
  lineNumber = 1
  lineNumber = 897
  var call2348 = callmethod(var_part,"args", [0]);
  var idxres2349 = call2348.methods["[]"].call(call2348, [1], var_pwi);
  var var_pw = idxres2349;
  lineNumber = 898
  lineNumber = 899
  var call2350 = callmethod(this,"rewritematchblockterm", [2], var_pw, var_inbody);
  var var_rw2 = call2350;
  lineNumber = 900
  lineNumber = 1
  lineNumber = 899
  lineNumber = 900
  lineNumber = 899
  var idxres2351 = var_rw2.methods["[]"].call(var_rw2, [1], new GraceNum(1));
  lineNumber = 900
  lineNumber = 1
  lineNumber = 899
  var call2352 = callmethod(var_part,"args", [0]);
  var call2353 = callmethod(call2352,"[]:=", [2], var_pwi, idxres2351);
  lineNumber = 901
  lineNumber = 900
  var idxres2354 = var_rw2.methods["[]"].call(var_rw2, [1], new GraceNum(2));
  var_inbody = idxres2354;
  return idxres2354;
};
  var call2355 = callmethod(Grace_prelude,"for()do", [1, 1], call2346, block2347);
  return call2355;
};
  var call2356 = callmethod(Grace_prelude,"for()do", [1, 1], call2343, block2344);
  lineNumber = 903
  lineNumber = 904
  var call2357 = callmethod(this,"resolveIdentifiersList", [1], var_inbody);
  var_inbody = call2357;
  lineNumber = 928
  lineNumber = 909
  lineNumber = 908
  lineNumber = 907
  var string2359 = new GraceString("match");
  lineNumber = 908
  lineNumber = 1
  lineNumber = 908
  var call2360 = callmethod(var_pat,"value", [0]);
  lineNumber = 1
  lineNumber = 906
  var call2361 = callmethod(var_ast,"memberNode", [0]);
  var call2362 = callmethod(call2361,"new", [2], string2359, call2360);
  lineNumber = 909
  var string2364 = new GraceString("match");
  var array2365 = new GraceList([
var_newname,
]);

  lineNumber = 1
  lineNumber = 909
  var call2366 = callmethod(var_ast,"callWithPart", [0]);
  var call2367 = callmethod(call2366,"new", [2], string2364, array2365);
  var array2363 = new GraceList([
call2367,
]);

  lineNumber = 1
  lineNumber = 905
  var call2368 = callmethod(var_ast,"callNode", [0]);
  var call2369 = callmethod(call2368,"new", [2], call2362, array2363);
  lineNumber = 924
  lineNumber = 914
  lineNumber = 912
  var string2371 = new GraceString("applyIndirectly");
  lineNumber = 914
  lineNumber = 913
  lineNumber = 1
  lineNumber = 913
  lineNumber = 1
  lineNumber = 913
  lineNumber = 1
  lineNumber = 913
  var call2372 = callmethod(var_pat,"with", [0]);
  var call2373 = callmethod(call2372,"args", [0]);
  var call2374 = callmethod(call2373,"first", [0]);
  var call2375 = callmethod(call2374,"prepended", [1], var_fst);
  lineNumber = 914
  lineNumber = 915
  lineNumber = 1
  lineNumber = 913
  var call2376 = callmethod(var_ast,"blockNode", [0]);
  var call2377 = callmethod(call2376,"new", [2], call2375, var_inbody);
  lineNumber = 915
  lineNumber = 1
  lineNumber = 912
  var call2378 = callmethod(var_ast,"memberNode", [0]);
  var call2379 = callmethod(call2378,"new", [2], string2371, call2377);
  lineNumber = 924
  lineNumber = 916
  var string2381 = new GraceString("applyIndirectly");
  lineNumber = 924
  lineNumber = 921
  lineNumber = 918
  var string2383 = new GraceString("prepended");
  lineNumber = 921
  lineNumber = 920
  var string2384 = new GraceString("try");
  lineNumber = 1
  lineNumber = 920
  var call2385 = callmethod(var_pat,"value", [0]);
  lineNumber = 1
  lineNumber = 920
  var call2386 = callmethod(var_ast,"memberNode", [0]);
  var call2387 = callmethod(call2386,"new", [2], string2384, call2385);
  lineNumber = 921
  var string2389 = new GraceString("try");
  var array2390 = new GraceList([
var_newname,
]);

  lineNumber = 1
  lineNumber = 921
  var call2391 = callmethod(var_ast,"callWithPart", [0]);
  var call2392 = callmethod(call2391,"new", [2], string2389, array2390);
  var array2388 = new GraceList([
call2392,
]);

  lineNumber = 923
  lineNumber = 1
  lineNumber = 919
  var call2393 = callmethod(var_ast,"callNode", [0]);
  var call2394 = callmethod(call2393,"new", [2], call2387, array2388);
  lineNumber = 923
  lineNumber = 1
  lineNumber = 917
  var call2395 = callmethod(var_ast,"memberNode", [0]);
  var call2396 = callmethod(call2395,"new", [2], string2383, call2394);
  lineNumber = 924
  var string2398 = new GraceString("prepended");
  var array2399 = new GraceList([
var_newname,
]);

  lineNumber = 1
  lineNumber = 924
  var call2400 = callmethod(var_ast,"callWithPart", [0]);
  var call2401 = callmethod(call2400,"new", [2], string2398, array2399);
  var array2397 = new GraceList([
call2401,
]);

  lineNumber = 926
  lineNumber = 1
  lineNumber = 916
  var call2402 = callmethod(var_ast,"callNode", [0]);
  var call2403 = callmethod(call2402,"new", [2], call2396, array2397);
  var array2382 = new GraceList([
call2403,
]);

  lineNumber = 926
  lineNumber = 1
  lineNumber = 916
  var call2404 = callmethod(var_ast,"callWithPart", [0]);
  var call2405 = callmethod(call2404,"new", [2], string2381, array2382);
  var array2380 = new GraceList([
call2405,
]);

  lineNumber = 927
  lineNumber = 1
  lineNumber = 911
  var call2406 = callmethod(var_ast,"callNode", [0]);
  var call2407 = callmethod(call2406,"new", [2], call2379, array2380);
  var array2370 = new GraceList([
call2407,
]);

  lineNumber = 928
  var string2409 = new GraceString("MatchFailed");
  var bool2410 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 928
  var call2411 = callmethod(var_ast,"identifierNode", [0]);
  var call2412 = callmethod(call2411,"new", [2], string2409, bool2410);
  var array2408 = new GraceList([
call2412,
]);

  lineNumber = 930
  lineNumber = 1
  lineNumber = 904
  var call2413 = callmethod(var_ast,"ifNode", [0]);
  var call2414 = callmethod(call2413,"new", [3], call2369, array2370, array2408);
  var array2358 = new GraceList([
call2414,
]);

  var_body = array2358;
  var if2336 = array2358;
  } else {
  lineNumber = 932
  lineNumber = 933
  var call2415 = callmethod(this,"resolveIdentifiersList", [1], var_inbody);
  var_inbody = call2415;
  lineNumber = 1
  lineNumber = 933
  var call2416 = callmethod(var_pat,"value", [0]);
  lineNumber = 934
  var call2417 = callmethod(this,"findName", [1], call2416);
  var var_binding = call2417;
  lineNumber = 949
  lineNumber = 953
  lineNumber = 1
  lineNumber = 934
  var call2419 = callmethod(var_binding,"kind", [0]);
  var string2420 = new GraceString("type");
  var opresult2422 = callmethod(call2419, "!=", [1], string2420);
  if (Grace_isTrue(opresult2422)) {
  lineNumber = 935
  var array2423 = new GraceList([
var_newname,
]);

  var_params = array2423;
  lineNumber = 949
  lineNumber = 941
  lineNumber = 940
  lineNumber = 939
  var string2425 = new GraceString("match");
  lineNumber = 940
  lineNumber = 1
  lineNumber = 938
  var call2426 = callmethod(var_ast,"memberNode", [0]);
  var call2427 = callmethod(call2426,"new", [2], string2425, var_pat);
  lineNumber = 941
  var string2429 = new GraceString("match");
  var array2430 = new GraceList([
var_newname,
]);

  lineNumber = 1
  lineNumber = 941
  var call2431 = callmethod(var_ast,"callWithPart", [0]);
  var call2432 = callmethod(call2431,"new", [2], string2429, array2430);
  var array2428 = new GraceList([
call2432,
]);

  lineNumber = 1
  lineNumber = 937
  var call2433 = callmethod(var_ast,"callNode", [0]);
  var call2434 = callmethod(call2433,"new", [2], call2427, array2428);
  lineNumber = 947
  lineNumber = 945
  lineNumber = 944
  var string2436 = new GraceString("apply");
  lineNumber = 945
  lineNumber = 1
  lineNumber = 945
  var call2437 = callmethod(var_o,"params", [0]);
  lineNumber = 946
  lineNumber = 1
  lineNumber = 945
  var call2438 = callmethod(var_ast,"blockNode", [0]);
  var call2439 = callmethod(call2438,"new", [2], call2437, var_inbody);
  lineNumber = 946
  lineNumber = 1
  lineNumber = 944
  var call2440 = callmethod(var_ast,"memberNode", [0]);
  var call2441 = callmethod(call2440,"new", [2], string2436, call2439);
  lineNumber = 947
  var string2443 = new GraceString("apply");
  var array2444 = new GraceList([
var_newname,
]);

  lineNumber = 1
  lineNumber = 947
  var call2445 = callmethod(var_ast,"callWithPart", [0]);
  var call2446 = callmethod(call2445,"new", [2], string2443, array2444);
  var array2442 = new GraceList([
call2446,
]);

  lineNumber = 948
  lineNumber = 1
  lineNumber = 943
  var call2447 = callmethod(var_ast,"callNode", [0]);
  var call2448 = callmethod(call2447,"new", [2], call2441, array2442);
  var array2435 = new GraceList([
call2448,
]);

  lineNumber = 949
  var string2450 = new GraceString("MatchFailed");
  var bool2451 = new GraceBoolean(false)
  lineNumber = 1
  lineNumber = 949
  var call2452 = callmethod(var_ast,"identifierNode", [0]);
  var call2453 = callmethod(call2452,"new", [2], string2450, bool2451);
  var array2449 = new GraceList([
call2453,
]);

  lineNumber = 951
  lineNumber = 1
  lineNumber = 936
  var call2454 = callmethod(var_ast,"ifNode", [0]);
  var call2455 = callmethod(call2454,"new", [3], call2434, array2435, array2449);
  var array2424 = new GraceList([
call2455,
]);

  var_body = array2424;
  var if2418 = array2424;
}
  var if2336 = if2418;
}
  var if2330 = if2336;
  } else {
  lineNumber = 955
  lineNumber = 956
  var call2456 = callmethod(this,"resolveIdentifiersList", [1], var_body);
  var_body = call2456;
  var if2330 = call2456;
}
  var if2297 = if2330;
}
  var if2224 = if2297;
}
  lineNumber = 957
  lineNumber = 958
  lineNumber = 1
  lineNumber = 957
  var call2457 = callmethod(var_ast,"blockNode", [0]);
  var call2458 = callmethod(call2457,"new", [2], var_params, var_body);
  var_o = call2458;
  lineNumber = 959
  lineNumber = 958
  return var_o
  return undefined
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["rewritematchblock"] = func2202;
  lineNumber = 1376
var func2459 = function(argcv) {
  var curarg = 1;
  var var_node = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 963
  var var_l;
  lineNumber = 964
  var var_tmp;
  lineNumber = 965
  var var_tmp2;
  lineNumber = 966
  var var_tmp3;
  lineNumber = 967
  var var_tmp4;
  lineNumber = 969
  lineNumber = 970
  lineNumber = 967
  var bool2461 = new GraceBoolean(false)
  var opresult2463 = callmethod(var_node, "==", [1], bool2461);
  if (Grace_isTrue(opresult2463)) {
  lineNumber = 969
  lineNumber = 968
  return var_node
  var if2460 = undefined;
}
  lineNumber = 973
  lineNumber = 974
  lineNumber = 1
  lineNumber = 970
  var call2465 = callmethod(var_node,"kind", [0]);
  var string2466 = new GraceString("identifier");
  var opresult2468 = callmethod(call2465, "==", [1], string2466);
  if (Grace_isTrue(opresult2468)) {
  lineNumber = 971
  lineNumber = 972
  var call2469 = callmethod(this,"resolveIdentifier", [1], var_node);
  var_tmp = call2469;
  lineNumber = 973
  lineNumber = 972
  return var_tmp
  var if2464 = undefined;
}
  lineNumber = 977
  lineNumber = 979
  lineNumber = 1
  lineNumber = 974
  var call2471 = callmethod(var_node,"kind", [0]);
  var string2472 = new GraceString("generic");
  var opresult2474 = callmethod(call2471, "==", [1], string2472);
  if (Grace_isTrue(opresult2474)) {
  lineNumber = 975
  lineNumber = 1
  lineNumber = 975
  var call2475 = callmethod(var_node,"value", [0]);
  lineNumber = 976
  var call2476 = callmethod(this,"resolveIdentifier", [1], call2475);
  var_tmp = call2476;
  lineNumber = 1
  lineNumber = 976
  var call2477 = callmethod(var_node,"params", [0]);
  lineNumber = 977
  var call2478 = callmethod(this,"resolveIdentifiersList", [1], call2477);
  var_tmp2 = call2478;
  lineNumber = 978
  lineNumber = 1
  lineNumber = 977
  var call2479 = callmethod(var_ast,"genericNode", [0]);
  var call2480 = callmethod(call2479,"new", [2], var_tmp, var_tmp2);
  return call2480
  var if2470 = undefined;
}
  lineNumber = 981
  lineNumber = 983
  lineNumber = 1
  lineNumber = 979
  var call2482 = callmethod(var_node,"kind", [0]);
  var string2483 = new GraceString("op");
  var opresult2485 = callmethod(call2482, "==", [1], string2483);
  if (Grace_isTrue(opresult2485)) {
  lineNumber = 981
  lineNumber = 980
  lineNumber = 1
  lineNumber = 980
  var call2486 = callmethod(var_node,"value", [0]);
  lineNumber = 1
  lineNumber = 980
  var call2487 = callmethod(var_node,"left", [0]);
  var call2488 = callmethod(this,"resolveIdentifiers", [1], call2487);
  lineNumber = 981
  lineNumber = 1
  lineNumber = 981
  var call2489 = callmethod(var_node,"right", [0]);
  var call2490 = callmethod(this,"resolveIdentifiers", [1], call2489);
  lineNumber = 982
  lineNumber = 1
  lineNumber = 980
  var call2491 = callmethod(var_ast,"opNode", [0]);
  var call2492 = callmethod(call2491,"new", [3], call2486, call2488, call2490);
  return call2492
  var if2481 = undefined;
}
  lineNumber = 998
  lineNumber = 1000
  lineNumber = 1
  lineNumber = 983
  var call2494 = callmethod(var_node,"kind", [0]);
  var string2495 = new GraceString("call");
  var opresult2497 = callmethod(call2494, "==", [1], string2495);
  if (Grace_isTrue(opresult2497)) {
  lineNumber = 984
  lineNumber = 1
  lineNumber = 984
  var call2498 = callmethod(var_node,"value", [0]);
  lineNumber = 985
  var call2499 = callmethod(this,"resolveIdentifiers", [1], call2498);
  var var_p = call2499;
  lineNumber = 991
  lineNumber = 993
  lineNumber = 1
  lineNumber = 985
  var call2501 = callmethod(var_p,"kind", [0]);
  var string2502 = new GraceString("call");
  var opresult2504 = callmethod(call2501, "==", [1], string2502);
  if (Grace_isTrue(opresult2504)) {
  lineNumber = 987
  lineNumber = 1
  lineNumber = 986
  var call2505 = callmethod(var_node,"with", [0]);
  var_tmp = call2505;
  lineNumber = 989
  lineNumber = 987
  lineNumber = 1
  lineNumber = 987
  lineNumber = 1
  lineNumber = 987
  var call2506 = callmethod(var_node,"with", [0]);
  var call2507 = callmethod(call2506,"indices", [0]);
  lineNumber = 989
  var block2508 = Grace_allocObject();
  block2508.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2508.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2508.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2508.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2508.receiver = this;
  block2508.className = 'block<typechecker:989>';
  block2508.real = function(
var_partnr
) {
  lineNumber = 1
  lineNumber = 988
  var call2509 = callmethod(var_node,"with", [0]);
  var idxres2510 = call2509.methods["[]"].call(call2509, [1], var_partnr);
  var var_part = idxres2510;
  lineNumber = 989
  lineNumber = 1
  lineNumber = 989
  lineNumber = 1
  lineNumber = 989
  var call2511 = callmethod(var_part,"args", [0]);
  lineNumber = 990
  var call2512 = callmethod(this,"resolveIdentifiersList", [1], call2511);
  lineNumber = 989
  var idxres2513 = var_tmp.methods["[]"].call(var_tmp, [1], var_partnr);
  var call2514 = callmethod(idxres2513,"args:=", [1], call2512);
  return call2514;
};
  var call2515 = callmethod(Grace_prelude,"for()do", [1, 1], call2507, block2508);
  lineNumber = 991
  lineNumber = 1
  lineNumber = 991
  var call2516 = callmethod(var_p,"value", [0]);
  lineNumber = 992
  lineNumber = 1
  lineNumber = 991
  var call2517 = callmethod(var_ast,"callNode", [0]);
  var call2518 = callmethod(call2517,"new", [2], call2516, var_tmp);
  return call2518
  var if2500 = undefined;
}
  lineNumber = 994
  lineNumber = 1
  lineNumber = 993
  var call2519 = callmethod(var_node,"with", [0]);
  var_tmp = call2519;
  lineNumber = 996
  lineNumber = 994
  lineNumber = 1
  lineNumber = 994
  lineNumber = 1
  lineNumber = 994
  var call2520 = callmethod(var_node,"with", [0]);
  var call2521 = callmethod(call2520,"indices", [0]);
  lineNumber = 996
  var block2522 = Grace_allocObject();
  block2522.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2522.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2522.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2522.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2522.receiver = this;
  block2522.className = 'block<typechecker:996>';
  block2522.real = function(
var_partnr
) {
  lineNumber = 1
  lineNumber = 995
  var call2523 = callmethod(var_node,"with", [0]);
  var idxres2524 = call2523.methods["[]"].call(call2523, [1], var_partnr);
  var var_part = idxres2524;
  lineNumber = 996
  lineNumber = 1
  lineNumber = 996
  lineNumber = 1
  lineNumber = 996
  var call2525 = callmethod(var_part,"args", [0]);
  lineNumber = 997
  var call2526 = callmethod(this,"resolveIdentifiersList", [1], call2525);
  lineNumber = 996
  var idxres2527 = var_tmp.methods["[]"].call(var_tmp, [1], var_partnr);
  var call2528 = callmethod(idxres2527,"args:=", [1], call2526);
  return call2528;
};
  var call2529 = callmethod(Grace_prelude,"for()do", [1, 1], call2521, block2522);
  lineNumber = 998
  lineNumber = 999
  lineNumber = 1
  lineNumber = 998
  var call2530 = callmethod(var_ast,"callNode", [0]);
  var call2531 = callmethod(call2530,"new", [2], var_p, var_tmp);
  return call2531
  var if2493 = undefined;
}
  lineNumber = 1002
  lineNumber = 1004
  lineNumber = 1
  lineNumber = 1000
  var call2533 = callmethod(var_node,"kind", [0]);
  var string2534 = new GraceString("member");
  var opresult2536 = callmethod(call2533, "==", [1], string2534);
  if (Grace_isTrue(opresult2536)) {
  lineNumber = 1001
  lineNumber = 1
  lineNumber = 1001
  var call2537 = callmethod(var_node,"in", [0]);
  lineNumber = 1002
  var call2538 = callmethod(this,"resolveIdentifiers", [1], call2537);
  var_tmp = call2538;
  lineNumber = 1
  lineNumber = 1002
  var call2539 = callmethod(var_node,"value", [0]);
  lineNumber = 1003
  lineNumber = 1
  lineNumber = 1002
  var call2540 = callmethod(var_ast,"memberNode", [0]);
  var call2541 = callmethod(call2540,"new", [2], call2539, var_tmp);
  return call2541
  var if2532 = undefined;
}
  lineNumber = 1007
  lineNumber = 1010
  lineNumber = 1
  lineNumber = 1004
  var call2543 = callmethod(var_node,"kind", [0]);
  var string2544 = new GraceString("array");
  var opresult2546 = callmethod(call2543, "==", [1], string2544);
  if (Grace_isTrue(opresult2546)) {
  lineNumber = 1005
  lineNumber = 1
  lineNumber = 1005
  var call2547 = callmethod(var_node,"value", [0]);
  lineNumber = 1006
  var call2548 = callmethod(this,"resolveIdentifiersList", [1], call2547);
  var_tmp = call2548;
  lineNumber = 1007
  lineNumber = 1009
  lineNumber = 1
  lineNumber = 1006
  var call2550 = callmethod(var_node,"value", [0]);
  var opresult2552 = callmethod(call2550, "/=", [1], var_tmp);
  if (Grace_isTrue(opresult2552)) {
  lineNumber = 1007
  lineNumber = 1008
  lineNumber = 1
  lineNumber = 1007
  var call2553 = callmethod(var_ast,"arrayNode", [0]);
  var call2554 = callmethod(call2553,"new", [1], var_tmp);
  return call2554
  var if2549 = undefined;
}
  var if2542 = if2549;
}
  lineNumber = 1019
  lineNumber = 1020
  lineNumber = 1
  lineNumber = 1010
  var call2556 = callmethod(var_node,"kind", [0]);
  var string2557 = new GraceString("matchcase");
  var opresult2559 = callmethod(call2556, "==", [1], string2557);
  if (Grace_isTrue(opresult2559)) {
  lineNumber = 1011
  lineNumber = 1
  lineNumber = 1011
  var call2560 = callmethod(var_node,"value", [0]);
  lineNumber = 1012
  var call2561 = callmethod(this,"resolveIdentifiers", [1], call2560);
  var_tmp = call2561;
  lineNumber = 1
  lineNumber = 1012
  var call2562 = callmethod(var_node,"cases", [0]);
  lineNumber = 1013
  var call2563 = callmethod(this,"resolveIdentifiersList", [1], call2562);
  var_tmp2 = call2563;
  lineNumber = 1
  lineNumber = 1013
  var call2564 = callmethod(var_node,"elsecase", [0]);
  lineNumber = 1014
  var call2565 = callmethod(this,"resolveIdentifiers", [1], call2564);
  var_tmp3 = call2565;
  lineNumber = 1016
  lineNumber = 1018
  lineNumber = 1014
  lineNumber = 1018
  lineNumber = 1
  lineNumber = 1014
  var call2567 = callmethod(var_node,"value", [0]);
  var opresult2569 = callmethod(var_tmp, "!=", [1], call2567);
  lineNumber = 1018
  lineNumber = 1014
  lineNumber = 1018
  lineNumber = 1
  lineNumber = 1014
  var call2570 = callmethod(var_node,"cases", [0]);
  var opresult2572 = callmethod(var_tmp2, "!=", [1], call2570);
  var opresult2574 = callmethod(opresult2569, "|", [1], opresult2572);
  lineNumber = 1018
  lineNumber = 1015
  lineNumber = 1018
  lineNumber = 1
  lineNumber = 1015
  var call2575 = callmethod(var_node,"elsecase", [0]);
  var opresult2577 = callmethod(var_tmp3, "!=", [1], call2575);
  var opresult2579 = callmethod(opresult2574, "|", [1], opresult2577);
  if (Grace_isTrue(opresult2579)) {
  lineNumber = 1016
  lineNumber = 1017
  lineNumber = 1
  lineNumber = 1016
  var call2580 = callmethod(var_ast,"matchCaseNode", [0]);
  var call2581 = callmethod(call2580,"new", [3], var_tmp, var_tmp2, var_tmp3);
  return call2581
  var if2566 = undefined;
}
  lineNumber = 1019
  lineNumber = 1018
  return var_node
  var if2555 = undefined;
}
  lineNumber = 1066
  lineNumber = 1067
  lineNumber = 1
  lineNumber = 1020
  var call2583 = callmethod(var_node,"kind", [0]);
  var string2584 = new GraceString("method");
  var opresult2586 = callmethod(call2583, "==", [1], string2584);
  if (Grace_isTrue(opresult2586)) {
  lineNumber = 1021
  var call2587 = callmethod(this,"pushScope", [0]);
  lineNumber = 1034
  lineNumber = 1022
  lineNumber = 1
  lineNumber = 1022
  var call2588 = callmethod(var_node,"signature", [0]);
  lineNumber = 1034
  var block2589 = Grace_allocObject();
  block2589.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2589.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2589.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2589.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2589.receiver = this;
  block2589.className = 'block<typechecker:1034>';
  block2589.real = function(
var_part
) {
  lineNumber = 1031
  lineNumber = 1023
  lineNumber = 1
  lineNumber = 1023
  var call2590 = callmethod(var_part,"params", [0]);
  lineNumber = 1031
  var block2591 = Grace_allocObject();
  block2591.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2591.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2591.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2591.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2591.receiver = this;
  block2591.className = 'block<typechecker:1031>';
  block2591.real = function(
var_e
) {
  lineNumber = 1028
  lineNumber = 1031
  lineNumber = 1025
  var bool2593 = new GraceBoolean(false)
  lineNumber = 1031
  lineNumber = 1
  lineNumber = 1025
  var call2594 = callmethod(var_e,"dtype", [0]);
  var opresult2596 = callmethod(bool2593, "!=", [1], call2594);
  if (Grace_isTrue(opresult2596)) {
  lineNumber = 1026
  lineNumber = 1
  lineNumber = 1026
  lineNumber = 1
  lineNumber = 1026
  var call2597 = callmethod(var_e,"dtype", [0]);
  lineNumber = 1027
  var call2598 = callmethod(this,"resolveIdentifiers", [1], call2597);
  lineNumber = 1026
  var call2599 = callmethod(var_e,"dtype:=", [1], call2598);
  lineNumber = 1028
  lineNumber = 1030
  lineNumber = 1
  lineNumber = 1030
  lineNumber = 1
  lineNumber = 1027
  var call2601 = callmethod(var_e,"dtype", [0]);
  var call2602 = callmethod(call2601,"kind", [0]);
  var string2603 = new GraceString("generic");
  var opresult2605 = callmethod(call2602, "==", [1], string2603);
  if (Grace_isTrue(opresult2605)) {
  lineNumber = 1028
  lineNumber = 1
  lineNumber = 1028
  lineNumber = 1
  lineNumber = 1028
  var call2606 = callmethod(var_e,"dtype", [0]);
  lineNumber = 1029
  var call2607 = callmethod(this,"findType", [1], call2606);
  lineNumber = 1028
  var call2608 = callmethod(var_e,"dtype:=", [1], call2607);
  var if2600 = call2608;
}
  var if2592 = if2600;
}
  lineNumber = 1031
  lineNumber = 1032
  var call2609 = callmethod(this,"bindIdentifier", [1], var_e);
  return call2609;
};
  var call2610 = callmethod(Grace_prelude,"for()do", [1, 1], call2590, block2591);
  lineNumber = 1034
  lineNumber = 1036
  lineNumber = 1
  lineNumber = 1033
  var call2612 = callmethod(var_part,"vararg", [0]);
  var bool2613 = new GraceBoolean(false)
  var opresult2615 = callmethod(call2612, "!=", [1], bool2613);
  if (Grace_isTrue(opresult2615)) {
  lineNumber = 1034
  lineNumber = 1
  lineNumber = 1034
  var call2616 = callmethod(var_part,"vararg", [0]);
  lineNumber = 1035
  var call2617 = callmethod(this,"bindIdentifier", [1], call2616);
  var if2611 = call2617;
}
  return if2611;
};
  var call2618 = callmethod(Grace_prelude,"for()do", [1, 1], call2588, block2589);
  lineNumber = 1038
  lineNumber = 1
  lineNumber = 1037
  var call2619 = callmethod(var_node,"signature", [0]);
  var_tmp2 = call2619;
  lineNumber = 1040
  lineNumber = 1038
  lineNumber = 1
  lineNumber = 1038
  lineNumber = 1
  lineNumber = 1038
  var call2620 = callmethod(var_node,"signature", [0]);
  var call2621 = callmethod(call2620,"indices", [0]);
  lineNumber = 1040
  var block2622 = Grace_allocObject();
  block2622.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2622.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2622.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2622.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2622.receiver = this;
  block2622.className = 'block<typechecker:1040>';
  block2622.real = function(
var_partnr
) {
  lineNumber = 1
  lineNumber = 1039
  var call2623 = callmethod(var_node,"signature", [0]);
  var idxres2624 = call2623.methods["[]"].call(call2623, [1], var_partnr);
  var var_part = idxres2624;
  lineNumber = 1040
  lineNumber = 1
  lineNumber = 1040
  lineNumber = 1
  lineNumber = 1040
  var call2625 = callmethod(var_part,"params", [0]);
  lineNumber = 1041
  var call2626 = callmethod(this,"resolveIdentifiersList", [1], call2625);
  lineNumber = 1040
  var idxres2627 = var_tmp2.methods["[]"].call(var_tmp2, [1], var_partnr);
  var call2628 = callmethod(idxres2627,"params:=", [1], call2626);
  return call2628;
};
  var call2629 = callmethod(Grace_prelude,"for()do", [1, 1], call2621, block2622);
  lineNumber = 1042
  lineNumber = 1
  lineNumber = 1042
  var call2630 = callmethod(var_node,"dtype", [0]);
  lineNumber = 1043
  var call2631 = callmethod(this,"resolveIdentifiers", [1], call2630);
  var_tmp4 = call2631;
  lineNumber = 1044
  lineNumber = 1043
  var var_oldReturnType = var_currentReturnType;
  lineNumber = 1044
  lineNumber = 1045
  var call2632 = callmethod(this,"findType", [1], var_tmp4);
  var_currentReturnType = call2632;
  lineNumber = 1046
  lineNumber = 1048
  lineNumber = 1045
  var bool2634 = new GraceBoolean(false)
  var opresult2636 = callmethod(var_currentReturnType, "==", [1], bool2634);
  if (Grace_isTrue(opresult2636)) {
  lineNumber = 1046
  var string2637 = new GraceString("return type of method not defined as a type.");
  var call2638 = callmethod(var_util,"type_error", [1], string2637);
  var if2633 = call2638;
}
  lineNumber = 1048
  lineNumber = 1
  lineNumber = 1048
  var call2639 = callmethod(var_node,"body", [0]);
  lineNumber = 1049
  var call2640 = callmethod(this,"resolveIdentifiersList", [1], call2639);
  var_l = call2640;
  lineNumber = 1057
  lineNumber = 1060
  lineNumber = 1
  lineNumber = 1049
  var call2642 = callmethod(var_l,"size", [0]);
  var opresult2644 = callmethod(call2642, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult2644)) {
  lineNumber = 1051
  lineNumber = 1
  lineNumber = 1050
  var call2645 = callmethod(var_l,"last", [0]);
  var var_lastStatement = call2645;
  lineNumber = 1051
  lineNumber = 1052
  var call2646 = callmethod(this,"expressionType", [1], var_lastStatement);
  var var_realType = call2646;
  lineNumber = 1057
  lineNumber = 1059
  lineNumber = 1
  lineNumber = 1052
  var call2648 = callmethod(var_lastStatement,"kind", [0]);
  var string2649 = new GraceString("return");
  var opresult2651 = callmethod(call2648, "==", [1], string2649);
  if (Grace_isTrue(opresult2651)) {
  var if2647 = undefined;
  } else {
  lineNumber = 1057
  lineNumber = 1054
  lineNumber = 1
  lineNumber = 1054
  lineNumber = 1059
  var call2653 = callmethod(this,"conformsType()to", [1, 1], var_realType, var_currentReturnType);
  var call2654 = callmethod(call2653,"not", [0]);
  if (Grace_isTrue(call2654)) {
  lineNumber = 1057
  lineNumber = 1055
  var string2655 = new GraceString("returning type ");
  lineNumber = 1057
  lineNumber = 1056
  var string2656 = new GraceString("");
  lineNumber = 1057
  lineNumber = 1
  lineNumber = 1056
  var call2657 = callmethod(var_realType,"value", [0]);
  var opresult2659 = callmethod(string2656, "++", [1], call2657);
  var string2660 = new GraceString(" from method of return type ");
  var opresult2662 = callmethod(opresult2659, "++", [1], string2660);
  var opresult2664 = callmethod(string2655, "++", [1], opresult2662);
  lineNumber = 1057
  lineNumber = 1
  lineNumber = 1057
  var call2665 = callmethod(var_currentReturnType,"value", [0]);
  var opresult2667 = callmethod(opresult2664, "++", [1], call2665);
  lineNumber = 1055
  var call2668 = callmethod(var_util,"type_error", [1], opresult2667);
  var if2652 = call2668;
}
  var if2647 = if2652;
}
  var if2641 = if2647;
}
  lineNumber = 1061
  lineNumber = 1060
  var_currentReturnType = var_oldReturnType;
  lineNumber = 1061
  var call2669 = callmethod(this,"popScope", [0]);
  lineNumber = 1063
  lineNumber = 1062
  lineNumber = 1
  lineNumber = 1062
  var call2670 = callmethod(var_node,"value", [0]);
  lineNumber = 1063
  lineNumber = 1064
  lineNumber = 1
  lineNumber = 1062
  var call2671 = callmethod(var_ast,"methodNode", [0]);
  var call2672 = callmethod(call2671,"new", [4], call2670, var_tmp2, var_l, var_tmp4);
  var_tmp = call2672;
  lineNumber = 1065
  lineNumber = 1
  lineNumber = 1065
  lineNumber = 1
  lineNumber = 1064
  var call2673 = callmethod(var_node,"varargs", [0]);
  var call2674 = callmethod(var_tmp,"varargs:=", [1], call2673);
  lineNumber = 1066
  lineNumber = 1065
  return var_tmp
  var if2582 = undefined;
}
  lineNumber = 1082
  lineNumber = 1083
  lineNumber = 1
  lineNumber = 1067
  var call2676 = callmethod(var_node,"kind", [0]);
  var string2677 = new GraceString("block");
  var opresult2679 = callmethod(call2676, "==", [1], string2677);
  if (Grace_isTrue(opresult2679)) {
  lineNumber = 1069
  lineNumber = 1071
  lineNumber = 1
  lineNumber = 1071
  lineNumber = 1
  lineNumber = 1068
  var call2681 = callmethod(var_node,"params", [0]);
  var call2682 = callmethod(call2681,"size", [0]);
  var opresult2684 = callmethod(call2682, "==", [1], new GraceNum(1));
  if (Grace_isTrue(opresult2684)) {
  lineNumber = 1069
  lineNumber = 1070
  var call2685 = callmethod(this,"rewritematchblock2", [1], var_node);
  var_node = call2685;
  var if2680 = call2685;
}
  lineNumber = 1071
  var call2686 = callmethod(this,"pushScope", [0]);
  lineNumber = 1074
  lineNumber = 1072
  lineNumber = 1
  lineNumber = 1072
  var call2687 = callmethod(var_node,"params", [0]);
  lineNumber = 1074
  var block2688 = Grace_allocObject();
  block2688.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2688.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2688.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2688.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2688.receiver = this;
  block2688.className = 'block<typechecker:1074>';
  block2688.real = function(
var_e
) {
  lineNumber = 1076
  lineNumber = 1
  lineNumber = 1073
  var call2690 = callmethod(var_e,"kind", [0]);
  var string2691 = new GraceString("identifier");
  var opresult2693 = callmethod(call2690, "==", [1], string2691);
  if (Grace_isTrue(opresult2693)) {
  lineNumber = 1074
  lineNumber = 1075
  var call2694 = callmethod(this,"bindIdentifier", [1], var_e);
  var if2689 = call2694;
}
  return if2689;
};
  var call2695 = callmethod(Grace_prelude,"for()do", [1, 1], call2687, block2688);
  lineNumber = 1077
  lineNumber = 1
  lineNumber = 1077
  var call2696 = callmethod(var_node,"body", [0]);
  lineNumber = 1078
  var call2697 = callmethod(this,"resolveIdentifiersList", [1], call2696);
  var_l = call2697;
  lineNumber = 1
  lineNumber = 1078
  var call2698 = callmethod(var_node,"params", [0]);
  lineNumber = 1079
  lineNumber = 1
  lineNumber = 1078
  var call2699 = callmethod(var_ast,"blockNode", [0]);
  var call2700 = callmethod(call2699,"new", [2], call2698, var_l);
  var_tmp = call2700;
  lineNumber = 1080
  lineNumber = 1
  lineNumber = 1080
  lineNumber = 1
  lineNumber = 1079
  var call2701 = callmethod(var_node,"matchingPattern", [0]);
  var call2702 = callmethod(var_tmp,"matchingPattern:=", [1], call2701);
  lineNumber = 1080
  var call2703 = callmethod(this,"popScope", [0]);
  lineNumber = 1082
  lineNumber = 1081
  return var_tmp
  var if2675 = undefined;
}
  lineNumber = 1098
  lineNumber = 1099
  lineNumber = 1
  lineNumber = 1083
  var call2705 = callmethod(var_node,"kind", [0]);
  var string2706 = new GraceString("object");
  var opresult2708 = callmethod(call2705, "==", [1], string2706);
  if (Grace_isTrue(opresult2708)) {
  lineNumber = 1084
  var string2709 = new GraceString("<Object_");
  lineNumber = 1
  lineNumber = 1084
  var call2710 = callmethod(var_node,"line", [0]);
  var opresult2712 = callmethod(string2709, "++", [1], call2710);
  var string2713 = new GraceString("_self>");
  var opresult2715 = callmethod(opresult2712, "++", [1], string2713);
  var array2716 = new GraceList([
var_outerMethod,
]);

  lineNumber = 1085
  lineNumber = 1
  lineNumber = 1084
  var call2717 = callmethod(var_ast,"typeNode", [0]);
  var call2718 = callmethod(call2717,"new", [2], opresult2715, array2716);
  var var_selftype = call2718;
  lineNumber = 1090
  var block2719 = Grace_allocObject();
  block2719.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2719.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2719.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2719.receiver = this;
  block2719.className = 'block<typechecker:1090>';
  block2719.real = function(
) {
  lineNumber = 1086
  var string2720 = new GraceString("___is_object");
  var string2721 = new GraceString("yes");
  var call2722 = callmethod(var_Binding,"new", [1], string2721);
  lineNumber = 1087
  lineNumber = 1
  lineNumber = 1086
  var call2723 = callmethod(var_scopes,"last", [0]);
  var call2724 = callmethod(call2723,"put", [2], string2720, call2722);
  lineNumber = 1087
  var string2725 = new GraceString("outer");
  var string2726 = new GraceString("method");
  var call2727 = callmethod(var_Binding,"new", [1], string2726);
  lineNumber = 1088
  lineNumber = 1
  lineNumber = 1087
  var call2728 = callmethod(var_scopes,"last", [0]);
  var call2729 = callmethod(call2728,"put", [2], string2725, call2727);
  lineNumber = 1088
  var string2730 = new GraceString("def");
  var call2731 = callmethod(var_Binding,"new", [1], string2730);
  var var_stb = call2731;
  lineNumber = 1090
  lineNumber = 1
  lineNumber = 1089
  var call2732 = callmethod(var_stb,"dtype:=", [1], var_selftype);
  lineNumber = 1090
  var string2733 = new GraceString("self");
  lineNumber = 1091
  lineNumber = 1
  lineNumber = 1090
  var call2734 = callmethod(var_scopes,"last", [0]);
  var call2735 = callmethod(call2734,"put", [2], string2733, var_stb);
  return call2735;
};
  var_tmp = block2719;
  lineNumber = 1092
  var call2736 = callmethod(var_selftypes,"push", [1], var_selftype);
  lineNumber = 1093
  lineNumber = 1
  lineNumber = 1093
  var call2737 = callmethod(var_node,"value", [0]);
  lineNumber = 1094
  var call2738 = callmethod(this,"resolveIdentifiersList()withBlock", [1, 1], call2737, var_tmp);
  var_l = call2738;
  lineNumber = 1095
  lineNumber = 1094
  lineNumber = 1095
  lineNumber = 1
  lineNumber = 1095
  var call2739 = callmethod(var_node,"superclass", [0]);
  var call2740 = callmethod(this,"resolveIdentifiers", [1], call2739);
  lineNumber = 1096
  lineNumber = 1
  lineNumber = 1094
  var call2741 = callmethod(var_ast,"objectNode", [0]);
  var call2742 = callmethod(call2741,"new", [2], var_l, call2740);
  var_tmp2 = call2742;
  lineNumber = 1096
  lineNumber = 1
  lineNumber = 1096
  var call2743 = callmethod(var_selftypes,"pop", [0]);
  lineNumber = 1098
  lineNumber = 1097
  return var_tmp2
  var if2704 = undefined;
}
  lineNumber = 1102
  lineNumber = 1105
  lineNumber = 1
  lineNumber = 1099
  var call2745 = callmethod(var_node,"kind", [0]);
  var string2746 = new GraceString("inherits");
  var opresult2748 = callmethod(call2745, "==", [1], string2746);
  if (Grace_isTrue(opresult2748)) {
  lineNumber = 1100
  lineNumber = 1
  lineNumber = 1100
  var call2749 = callmethod(var_node,"value", [0]);
  var call2750 = callmethod(this,"resolveIdentifiers", [1], call2749);
  lineNumber = 1101
  var call2751 = callmethod(this,"expressionType", [1], call2750);
  var var_csupertype = call2751;
  lineNumber = 1102
  lineNumber = 1101
  lineNumber = 1
  lineNumber = 1101
  var call2752 = callmethod(var_csupertype,"methods", [0]);
  lineNumber = 1102
  var block2753 = Grace_allocObject();
  block2753.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2753.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2753.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2753.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2753.receiver = this;
  block2753.className = 'block<typechecker:1102>';
  block2753.real = function(
var_m
) {
  lineNumber = 1
  lineNumber = 1102
  var call2754 = callmethod(var_m,"value", [0]);
  var string2755 = new GraceString("method");
  var call2756 = callmethod(var_Binding,"new", [1], string2755);
  lineNumber = 1103
  lineNumber = 1
  lineNumber = 1102
  var call2757 = callmethod(var_scopes,"last", [0]);
  var call2758 = callmethod(call2757,"put", [2], call2754, call2756);
  return call2758;
};
  var call2759 = callmethod(Grace_prelude,"for()do", [1, 1], call2752, block2753);
  var if2744 = call2759;
}
  lineNumber = 1152
  lineNumber = 1154
  lineNumber = 1
  lineNumber = 1105
  var call2761 = callmethod(var_node,"kind", [0]);
  var string2762 = new GraceString("class");
  var opresult2764 = callmethod(call2761, "==", [1], string2762);
  if (Grace_isTrue(opresult2764)) {
  lineNumber = 1106
  var call2765 = callmethod(this,"pushScope", [0]);
  lineNumber = 1108
  lineNumber = 1
  lineNumber = 1108
  lineNumber = 1
  lineNumber = 1107
  var call2766 = callmethod(var_node,"name", [0]);
  var call2767 = callmethod(call2766,"value", [0]);
  var var_nm = call2767;
  lineNumber = 1110
  lineNumber = 1111
  lineNumber = 1
  lineNumber = 1111
  lineNumber = 1
  lineNumber = 1108
  var call2769 = callmethod(var_node,"name", [0]);
  var call2770 = callmethod(call2769,"kind", [0]);
  var string2771 = new GraceString("generic");
  var opresult2773 = callmethod(call2770, "==", [1], string2771);
  if (Grace_isTrue(opresult2773)) {
  lineNumber = 1110
  lineNumber = 1
  lineNumber = 1110
  lineNumber = 1
  lineNumber = 1110
  lineNumber = 1
  lineNumber = 1109
  var call2774 = callmethod(var_node,"name", [0]);
  var call2775 = callmethod(call2774,"value", [0]);
  var call2776 = callmethod(call2775,"value", [0]);
  var_nm = call2776;
  var if2768 = call2776;
}
  lineNumber = 1111
  var string2777 = new GraceString("<");
  var opresult2779 = callmethod(string2777, "++", [1], var_nm);
  var string2780 = new GraceString("_");
  var opresult2782 = callmethod(opresult2779, "++", [1], string2780);
  lineNumber = 1
  lineNumber = 1111
  var call2783 = callmethod(var_node,"line", [0]);
  var opresult2785 = callmethod(opresult2782, "++", [1], call2783);
  var string2786 = new GraceString("_self>");
  var opresult2788 = callmethod(opresult2785, "++", [1], string2786);
  var array2789 = new GraceList([
var_outerMethod,
]);

  lineNumber = 1112
  lineNumber = 1
  lineNumber = 1111
  var call2790 = callmethod(var_ast,"typeNode", [0]);
  var call2791 = callmethod(call2790,"new", [2], opresult2788, array2789);
  var var_selftype = call2791;
  lineNumber = 1118
  var block2792 = Grace_allocObject();
  block2792.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2792.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2792.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2792.receiver = this;
  block2792.className = 'block<typechecker:1118>';
  block2792.real = function(
) {
  lineNumber = 1113
  var string2793 = new GraceString("___is_object");
  var string2794 = new GraceString("yes");
  var call2795 = callmethod(var_Binding,"new", [1], string2794);
  lineNumber = 1114
  lineNumber = 1
  lineNumber = 1113
  var call2796 = callmethod(var_scopes,"last", [0]);
  var call2797 = callmethod(call2796,"put", [2], string2793, call2795);
  lineNumber = 1114
  var string2798 = new GraceString("___is_class");
  var string2799 = new GraceString("yes");
  var call2800 = callmethod(var_Binding,"new", [1], string2799);
  lineNumber = 1115
  lineNumber = 1
  lineNumber = 1114
  var call2801 = callmethod(var_scopes,"last", [0]);
  var call2802 = callmethod(call2801,"put", [2], string2798, call2800);
  lineNumber = 1115
  var string2803 = new GraceString("outer");
  var string2804 = new GraceString("method");
  var call2805 = callmethod(var_Binding,"new", [1], string2804);
  lineNumber = 1116
  lineNumber = 1
  lineNumber = 1115
  var call2806 = callmethod(var_scopes,"last", [0]);
  var call2807 = callmethod(call2806,"put", [2], string2803, call2805);
  lineNumber = 1116
  var string2808 = new GraceString("def");
  var call2809 = callmethod(var_Binding,"new", [1], string2808);
  var var_stb = call2809;
  lineNumber = 1118
  lineNumber = 1
  lineNumber = 1117
  var call2810 = callmethod(var_stb,"dtype:=", [1], var_selftype);
  lineNumber = 1118
  var string2811 = new GraceString("self");
  lineNumber = 1119
  lineNumber = 1
  lineNumber = 1118
  var call2812 = callmethod(var_scopes,"last", [0]);
  var call2813 = callmethod(call2812,"put", [2], string2811, var_stb);
  return call2813;
};
  var_tmp = block2792;
  lineNumber = 1120
  var call2814 = callmethod(var_selftypes,"push", [1], var_selftype);
  lineNumber = 1129
  lineNumber = 1132
  lineNumber = 1
  lineNumber = 1132
  lineNumber = 1
  lineNumber = 1121
  var call2816 = callmethod(var_node,"name", [0]);
  var call2817 = callmethod(call2816,"kind", [0]);
  var string2818 = new GraceString("generic");
  var opresult2820 = callmethod(call2817, "==", [1], string2818);
  if (Grace_isTrue(opresult2820)) {
  lineNumber = 1129
  lineNumber = 1122
  lineNumber = 1
  lineNumber = 1122
  lineNumber = 1
  lineNumber = 1122
  var call2821 = callmethod(var_node,"name", [0]);
  var call2822 = callmethod(call2821,"params", [0]);
  lineNumber = 1129
  var block2823 = Grace_allocObject();
  block2823.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2823.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2823.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2823.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2823.receiver = this;
  block2823.className = 'block<typechecker:1129>';
  block2823.real = function(
var_gp
) {
  lineNumber = 1124
  lineNumber = 1
  lineNumber = 1123
  var call2824 = callmethod(var_gp,"value", [0]);
  var var_nomnm = call2824;
  lineNumber = 1124
  var array2825 = new GraceList([
]);

  lineNumber = 1125
  lineNumber = 1
  lineNumber = 1124
  var call2826 = callmethod(var_ast,"typeNode", [0]);
  var call2827 = callmethod(call2826,"new", [2], var_nomnm, array2825);
  var var_nom = call2827;
  lineNumber = 1126
  lineNumber = 1
  lineNumber = 1125
  var bool2828 = new GraceBoolean(true)
  var call2829 = callmethod(var_nom,"nominal:=", [1], bool2828);
  lineNumber = 1126
  var call2830 = callmethod(var_subtype,"addType", [1], var_nom);
  lineNumber = 1127
  var string2831 = new GraceString("type");
  var call2832 = callmethod(var_Binding,"new", [1], string2831);
  var var_tpb = call2832;
  lineNumber = 1129
  lineNumber = 1
  lineNumber = 1128
  var call2833 = callmethod(var_tpb,"value:=", [1], var_nom);
  lineNumber = 1129
  lineNumber = 1
  lineNumber = 1129
  var call2834 = callmethod(var_gp,"value", [0]);
  lineNumber = 1130
  var call2835 = callmethod(this,"bindName", [2], call2834, var_tpb);
  return call2835;
};
  var call2836 = callmethod(Grace_prelude,"for()do", [1, 1], call2822, block2823);
  var if2815 = call2836;
}
  lineNumber = 1140
  lineNumber = 1132
  lineNumber = 1
  lineNumber = 1132
  var call2837 = callmethod(var_node,"signature", [0]);
  lineNumber = 1140
  var block2838 = Grace_allocObject();
  block2838.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2838.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2838.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2838.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2838.receiver = this;
  block2838.className = 'block<typechecker:1140>';
  block2838.real = function(
var_part
) {
  lineNumber = 1136
  lineNumber = 1133
  lineNumber = 1
  lineNumber = 1133
  var call2839 = callmethod(var_part,"params", [0]);
  lineNumber = 1136
  var block2840 = Grace_allocObject();
  block2840.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2840.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2840.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2840.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2840.receiver = this;
  block2840.className = 'block<typechecker:1136>';
  block2840.real = function(
var_e
) {
  lineNumber = 1134
  lineNumber = 1135
  var call2841 = callmethod(this,"bindIdentifier", [1], var_e);
  lineNumber = 1136
  lineNumber = 1138
  lineNumber = 1135
  var bool2843 = new GraceBoolean(false)
  lineNumber = 1138
  lineNumber = 1
  lineNumber = 1135
  var call2844 = callmethod(var_e,"dtype", [0]);
  var opresult2846 = callmethod(bool2843, "!=", [1], call2844);
  if (Grace_isTrue(opresult2846)) {
  lineNumber = 1136
  lineNumber = 1
  lineNumber = 1136
  var call2847 = callmethod(var_e,"dtype", [0]);
  lineNumber = 1137
  var call2848 = callmethod(this,"resolveIdentifier", [1], call2847);
  var if2842 = call2848;
}
  return if2842;
};
  var call2849 = callmethod(Grace_prelude,"for()do", [1, 1], call2839, block2840);
  lineNumber = 1140
  lineNumber = 1142
  lineNumber = 1
  lineNumber = 1139
  var call2851 = callmethod(var_part,"vararg", [0]);
  var bool2852 = new GraceBoolean(false)
  var opresult2854 = callmethod(call2851, "!=", [1], bool2852);
  if (Grace_isTrue(opresult2854)) {
  lineNumber = 1140
  lineNumber = 1
  lineNumber = 1140
  var call2855 = callmethod(var_part,"vararg", [0]);
  lineNumber = 1141
  var call2856 = callmethod(this,"bindIdentifier", [1], call2855);
  var if2850 = call2856;
}
  return if2850;
};
  var call2857 = callmethod(Grace_prelude,"for()do", [1, 1], call2837, block2838);
  lineNumber = 1143
  lineNumber = 1
  lineNumber = 1143
  var call2858 = callmethod(var_node,"value", [0]);
  lineNumber = 1144
  var call2859 = callmethod(this,"resolveIdentifiersList()withBlock", [1, 1], call2858, var_tmp);
  var_tmp2 = call2859;
  lineNumber = 1145
  lineNumber = 1
  lineNumber = 1144
  var call2860 = callmethod(var_node,"signature", [0]);
  var_tmp3 = call2860;
  lineNumber = 1147
  lineNumber = 1145
  lineNumber = 1
  lineNumber = 1145
  lineNumber = 1
  lineNumber = 1145
  var call2861 = callmethod(var_node,"signature", [0]);
  var call2862 = callmethod(call2861,"indices", [0]);
  lineNumber = 1147
  var block2863 = Grace_allocObject();
  block2863.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2863.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2863.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2863.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2863.receiver = this;
  block2863.className = 'block<typechecker:1147>';
  block2863.real = function(
var_partnr
) {
  lineNumber = 1
  lineNumber = 1146
  var call2864 = callmethod(var_node,"signature", [0]);
  var idxres2865 = call2864.methods["[]"].call(call2864, [1], var_partnr);
  var var_part = idxres2865;
  lineNumber = 1147
  lineNumber = 1
  lineNumber = 1147
  lineNumber = 1
  lineNumber = 1147
  var call2866 = callmethod(var_part,"params", [0]);
  lineNumber = 1148
  var call2867 = callmethod(this,"resolveIdentifiersList", [1], call2866);
  lineNumber = 1147
  var idxres2868 = var_tmp3.methods["[]"].call(var_tmp3, [1], var_partnr);
  var call2869 = callmethod(idxres2868,"params:=", [1], call2867);
  return call2869;
};
  var call2870 = callmethod(Grace_prelude,"for()do", [1, 1], call2862, block2863);
  lineNumber = 1150
  lineNumber = 1149
  lineNumber = 1
  lineNumber = 1149
  var call2871 = callmethod(var_node,"name", [0]);
  lineNumber = 1150
  lineNumber = 1
  lineNumber = 1150
  var call2872 = callmethod(var_node,"superclass", [0]);
  var call2873 = callmethod(this,"resolveIdentifiers", [1], call2872);
  lineNumber = 1
  lineNumber = 1150
  var call2874 = callmethod(var_node,"constructor", [0]);
  lineNumber = 1151
  lineNumber = 1
  lineNumber = 1149
  var call2875 = callmethod(var_ast,"classNode", [0]);
  var call2876 = callmethod(call2875,"new", [5], call2871, var_tmp3, var_tmp2, call2873, call2874);
  var_node = call2876;
  lineNumber = 1151
  var call2877 = callmethod(this,"popScope", [0]);
  lineNumber = 1152
  lineNumber = 1
  lineNumber = 1152
  var call2878 = callmethod(var_selftypes,"pop", [0]);
  var if2760 = call2878;
}
  lineNumber = 1177
  lineNumber = 1180
  lineNumber = 1
  lineNumber = 1154
  var call2880 = callmethod(var_node,"kind", [0]);
  var string2881 = new GraceString("bind");
  var opresult2883 = callmethod(call2880, "==", [1], string2881);
  if (Grace_isTrue(opresult2883)) {
  lineNumber = 1155
  lineNumber = 1
  lineNumber = 1155
  var call2884 = callmethod(var_node,"dest", [0]);
  lineNumber = 1156
  var call2885 = callmethod(this,"resolveIdentifiers", [1], call2884);
  var_tmp = call2885;
  lineNumber = 1
  lineNumber = 1156
  var call2886 = callmethod(var_node,"value", [0]);
  lineNumber = 1157
  var call2887 = callmethod(this,"resolveIdentifiers", [1], call2886);
  var_tmp2 = call2887;
  lineNumber = 1175
  lineNumber = 1176
  lineNumber = 1
  lineNumber = 1157
  var call2889 = callmethod(var_tmp,"kind", [0]);
  var string2890 = new GraceString("identifier");
  var opresult2892 = callmethod(call2889, "==", [1], string2890);
  if (Grace_isTrue(opresult2892)) {
  lineNumber = 1158
  lineNumber = 1
  lineNumber = 1158
  var call2893 = callmethod(var_tmp,"value", [0]);
  lineNumber = 1159
  var call2894 = callmethod(this,"findName", [1], call2893);
  var_tmp3 = call2894;
  lineNumber = 1
  lineNumber = 1159
  var call2895 = callmethod(var_tmp,"dtype", [0]);
  lineNumber = 1160
  var call2896 = callmethod(this,"findType", [1], call2895);
  var_tmp4 = call2896;
  lineNumber = 1165
  lineNumber = 1167
  lineNumber = 1
  lineNumber = 1160
  var call2898 = callmethod(var_tmp3,"kind", [0]);
  var string2899 = new GraceString("def");
  var opresult2901 = callmethod(call2898, "==", [1], string2899);
  if (Grace_isTrue(opresult2901)) {
  lineNumber = 1161
  var string2902 = new GraceString("reassignment to constant ");
  lineNumber = 1
  lineNumber = 1161
  var call2903 = callmethod(var_tmp,"value", [0]);
  var opresult2905 = callmethod(string2902, "++", [1], call2903);
  var string2906 = new GraceString("");
  var opresult2908 = callmethod(opresult2905, "++", [1], string2906);
  var call2909 = callmethod(var_util,"syntax_error", [1], opresult2908);
  var if2897 = call2909;
  } else {
  lineNumber = 1165
  lineNumber = 1164
  lineNumber = 1
  lineNumber = 1162
  var call2911 = callmethod(var_tmp3,"kind", [0]);
  var string2912 = new GraceString("method");
  var opresult2914 = callmethod(call2911, "==", [1], string2912);
  if (Grace_isTrue(opresult2914)) {
  lineNumber = 1163
  var string2915 = new GraceString("assignment to method ");
  lineNumber = 1
  lineNumber = 1163
  lineNumber = 1
  lineNumber = 1163
  var call2916 = callmethod(var_node,"dest", [0]);
  var call2917 = callmethod(call2916,"value", [0]);
  var opresult2919 = callmethod(string2915, "++", [1], call2917);
  var string2920 = new GraceString("");
  var opresult2922 = callmethod(opresult2919, "++", [1], string2920);
  var call2923 = callmethod(var_util,"syntax_error", [1], opresult2922);
  var if2910 = call2923;
  } else {
  lineNumber = 1165
  lineNumber = 1167
  lineNumber = 1
  lineNumber = 1164
  var call2925 = callmethod(var_tmp3,"kind", [0]);
  var string2926 = new GraceString("undef");
  var opresult2928 = callmethod(call2925, "==", [1], string2926);
  if (Grace_isTrue(opresult2928)) {
  lineNumber = 1165
  var string2929 = new GraceString("assignment to undeclared ");
  lineNumber = 1
  lineNumber = 1165
  var call2930 = callmethod(var_tmp,"value", [0]);
  var opresult2932 = callmethod(string2929, "++", [1], call2930);
  var string2933 = new GraceString("");
  var opresult2935 = callmethod(opresult2932, "++", [1], string2933);
  var call2936 = callmethod(var_util,"syntax_error", [1], opresult2935);
  var if2924 = call2936;
}
  var if2910 = if2924;
}
  var if2897 = if2910;
}
  lineNumber = 1171
  lineNumber = 1167
  lineNumber = 1
  lineNumber = 1167
  var call2938 = callmethod(this,"expressionType", [1], var_tmp2);
  lineNumber = 1
  lineNumber = 1167
  var call2939 = callmethod(var_tmp,"dtype", [0]);
  lineNumber = 1173
  var call2940 = callmethod(this,"conformsType()to", [1, 1], call2938, call2939);
  var call2941 = callmethod(call2940,"not", [0]);
  if (Grace_isTrue(call2941)) {
  lineNumber = 1171
  lineNumber = 1169
  lineNumber = 1168
  var string2942 = new GraceString("assigning value of nonconforming type ");
  lineNumber = 1169
  var call2943 = callmethod(this,"expressionType", [1], var_tmp2);
  var call2944 = callmethod(var_subtype,"nicename", [1], call2943);
  var opresult2946 = callmethod(string2942, "++", [1], call2944);
  lineNumber = 1170
  var string2947 = new GraceString(" to var of type ");
  var opresult2949 = callmethod(opresult2946, "++", [1], string2947);
  lineNumber = 1171
  lineNumber = 1
  lineNumber = 1171
  var call2950 = callmethod(var_tmp,"dtype", [0]);
  var call2951 = callmethod(this,"findType", [1], call2950);
  var call2952 = callmethod(var_subtype,"nicename", [1], call2951);
  var opresult2954 = callmethod(opresult2949, "++", [1], call2952);
  lineNumber = 1168
  var call2955 = callmethod(var_util,"type_error", [1], opresult2954);
  var if2937 = call2955;
}
  var if2888 = if2937;
  } else {
  lineNumber = 1175
  lineNumber = 1176
  lineNumber = 1
  lineNumber = 1173
  var call2957 = callmethod(var_tmp,"kind", [0]);
  var string2958 = new GraceString("call");
  var opresult2960 = callmethod(call2957, "==", [1], string2958);
  lineNumber = 1176
  lineNumber = 1
  lineNumber = 1173
  var call2961 = callmethod(var_node,"kind", [0]);
  var string2962 = new GraceString("call");
  var opresult2964 = callmethod(call2961, "/=", [1], string2962);
  var opresult2966 = callmethod(opresult2960, "&", [1], opresult2964);
  if (Grace_isTrue(opresult2966)) {
  lineNumber = 1175
  lineNumber = 1
  lineNumber = 1174
  var call2967 = callmethod(var_tmp,"value", [0]);
  var_tmp = call2967;
  var if2956 = call2967;
}
  var if2888 = if2956;
}
  lineNumber = 1177
  lineNumber = 1179
  lineNumber = 1176
  lineNumber = 1179
  lineNumber = 1
  lineNumber = 1176
  var call2969 = callmethod(var_node,"dest", [0]);
  var opresult2971 = callmethod(var_tmp, "/=", [1], call2969);
  lineNumber = 1179
  lineNumber = 1176
  lineNumber = 1179
  lineNumber = 1
  lineNumber = 1176
  var call2972 = callmethod(var_node,"value", [0]);
  var opresult2974 = callmethod(var_tmp2, "/=", [1], call2972);
  var opresult2976 = callmethod(opresult2971, "|", [1], opresult2974);
  if (Grace_isTrue(opresult2976)) {
  lineNumber = 1177
  lineNumber = 1178
  lineNumber = 1
  lineNumber = 1177
  var call2977 = callmethod(var_ast,"bindNode", [0]);
  var call2978 = callmethod(call2977,"new", [2], var_tmp, var_tmp2);
  return call2978
  var if2968 = undefined;
}
  var if2879 = if2968;
}
  lineNumber = 1282
  lineNumber = 1283
  lineNumber = 1
  lineNumber = 1180
  var call2980 = callmethod(var_node,"kind", [0]);
  var string2981 = new GraceString("type");
  var opresult2983 = callmethod(call2980, "==", [1], string2981);
  if (Grace_isTrue(opresult2983)) {
  lineNumber = 1280
  lineNumber = 1281
  lineNumber = 1
  lineNumber = 1281
  lineNumber = 1
  lineNumber = 1181
  var call2985 = callmethod(var_node,"generics", [0]);
  var call2986 = callmethod(call2985,"size", [0]);
  var opresult2988 = callmethod(call2986, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult2988)) {
  lineNumber = 1182
  var call2989 = callmethod(this,"pushScope", [0]);
  lineNumber = 1188
  lineNumber = 1183
  lineNumber = 1
  lineNumber = 1183
  var call2990 = callmethod(var_node,"generics", [0]);
  lineNumber = 1188
  var block2991 = Grace_allocObject();
  block2991.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block2991.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block2991.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block2991.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block2991.receiver = this;
  block2991.className = 'block<typechecker:1188>';
  block2991.real = function(
var_g
) {
  lineNumber = 1184
  lineNumber = 1
  lineNumber = 1184
  var call2992 = callmethod(var_g,"value", [0]);
  var array2993 = new GraceList([
]);

  lineNumber = 1185
  lineNumber = 1
  lineNumber = 1184
  var call2994 = callmethod(var_ast,"typeNode", [0]);
  var call2995 = callmethod(call2994,"new", [2], call2992, array2993);
  var var_nom = call2995;
  lineNumber = 1186
  lineNumber = 1
  lineNumber = 1185
  var bool2996 = new GraceBoolean(true)
  var call2997 = callmethod(var_nom,"nominal:=", [1], bool2996);
  lineNumber = 1186
  var string2998 = new GraceString("type");
  var call2999 = callmethod(var_Binding,"new", [1], string2998);
  var var_tpb = call2999;
  lineNumber = 1188
  lineNumber = 1
  lineNumber = 1187
  var call3000 = callmethod(var_tpb,"value:=", [1], var_nom);
  lineNumber = 1188
  lineNumber = 1
  lineNumber = 1188
  var call3001 = callmethod(var_g,"value", [0]);
  lineNumber = 1189
  var call3002 = callmethod(this,"bindName", [2], call3001, var_tpb);
  return call3002;
};
  var call3003 = callmethod(Grace_prelude,"for()do", [1, 1], call2990, block2991);
  lineNumber = 1191
  var array3004 = new GraceList([
]);

  var_tmp = array3004;
  lineNumber = 1206
  lineNumber = 1191
  lineNumber = 1
  lineNumber = 1191
  var call3005 = callmethod(var_node,"methods", [0]);
  lineNumber = 1206
  var block3006 = Grace_allocObject();
  block3006.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3006.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3006.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3006.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3006.receiver = this;
  block3006.className = 'block<typechecker:1206>';
  block3006.real = function(
var_mt
) {
  lineNumber = 1192
  var call3007 = callmethod(this,"pushScope", [0]);
  lineNumber = 1194
  lineNumber = 1
  lineNumber = 1193
  var call3008 = callmethod(var_mt,"signature", [0]);
  var_tmp2 = call3008;
  lineNumber = 1203
  lineNumber = 1194
  lineNumber = 1
  lineNumber = 1194
  lineNumber = 1
  lineNumber = 1194
  var call3009 = callmethod(var_mt,"signature", [0]);
  var call3010 = callmethod(call3009,"indices", [0]);
  lineNumber = 1203
  var block3011 = Grace_allocObject();
  block3011.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3011.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3011.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3011.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3011.receiver = this;
  block3011.className = 'block<typechecker:1203>';
  block3011.real = function(
var_partnr
) {
  lineNumber = 1196
  lineNumber = 1
  lineNumber = 1195
  var call3012 = callmethod(var_mt,"signature", [0]);
  var idxres3013 = call3012.methods["[]"].call(call3012, [1], var_partnr);
  var var_part = idxres3013;
  lineNumber = 1197
  var array3014 = new GraceList([
]);

  var var_tmpparams = array3014;
  lineNumber = 1200
  lineNumber = 1197
  lineNumber = 1
  lineNumber = 1197
  var call3015 = callmethod(var_part,"params", [0]);
  lineNumber = 1200
  var block3016 = Grace_allocObject();
  block3016.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3016.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3016.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3016.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3016.receiver = this;
  block3016.className = 'block<typechecker:1200>';
  block3016.real = function(
var_e
) {
  lineNumber = 1198
  lineNumber = 1
  lineNumber = 1198
  lineNumber = 1
  lineNumber = 1198
  var call3017 = callmethod(var_e,"dtype", [0]);
  lineNumber = 1199
  var call3018 = callmethod(this,"resolveIdentifiers", [1], call3017);
  lineNumber = 1198
  var call3019 = callmethod(var_e,"dtype:=", [1], call3018);
  lineNumber = 1199
  lineNumber = 1200
  var call3020 = callmethod(this,"bindIdentifier", [1], var_e);
  var call3021 = callmethod(var_tmpparams,"push", [1], var_e);
  return call3021;
};
  var call3022 = callmethod(Grace_prelude,"for()do", [1, 1], call3015, block3016);
  lineNumber = 1203
  lineNumber = 1
  lineNumber = 1202
  var idxres3023 = var_tmp2.methods["[]"].call(var_tmp2, [1], var_partnr);
  var call3024 = callmethod(idxres3023,"params:=", [1], var_tmpparams);
  return call3024;
};
  var call3025 = callmethod(Grace_prelude,"for()do", [1, 1], call3010, block3011);
  lineNumber = 1204
  lineNumber = 1
  lineNumber = 1204
  var call3026 = callmethod(var_mt,"rtype", [0]);
  lineNumber = 1205
  var call3027 = callmethod(this,"resolveIdentifiers", [1], call3026);
  var_tmp3 = call3027;
  lineNumber = 1
  lineNumber = 1205
  var call3028 = callmethod(var_mt,"value", [0]);
  lineNumber = 1
  lineNumber = 1205
  var call3029 = callmethod(var_ast,"methodTypeNode", [0]);
  var call3030 = callmethod(call3029,"new", [3], call3028, var_tmp2, var_tmp3);
  var call3031 = callmethod(var_tmp,"push", [1], call3030);
  lineNumber = 1206
  var call3032 = callmethod(this,"popScope", [0]);
  return call3032;
};
  var call3033 = callmethod(Grace_prelude,"for()do", [1, 1], call3005, block3006);
  lineNumber = 1208
  var call3034 = callmethod(this,"popScope", [0]);
  lineNumber = 1209
  lineNumber = 1
  lineNumber = 1209
  var call3035 = callmethod(var_node,"value", [0]);
  lineNumber = 1210
  lineNumber = 1
  lineNumber = 1209
  var call3036 = callmethod(var_ast,"typeNode", [0]);
  var call3037 = callmethod(call3036,"new", [2], call3035, var_tmp);
  var_tmp = call3037;
  lineNumber = 1211
  lineNumber = 1
  lineNumber = 1211
  lineNumber = 1
  lineNumber = 1210
  var call3038 = callmethod(var_node,"generics", [0]);
  var call3039 = callmethod(var_tmp,"generics:=", [1], call3038);
  lineNumber = 1212
  lineNumber = 1
  lineNumber = 1212
  lineNumber = 1
  lineNumber = 1211
  var call3040 = callmethod(var_node,"nominal", [0]);
  var call3041 = callmethod(var_tmp,"nominal:=", [1], call3040);
  lineNumber = 1213
  lineNumber = 1212
  return var_tmp
  var if2984 = undefined;
  } else {
  lineNumber = 1280
  lineNumber = 1243
  lineNumber = 1
  lineNumber = 1243
  lineNumber = 1
  lineNumber = 1213
  var call3043 = callmethod(var_node,"unionTypes", [0]);
  var call3044 = callmethod(call3043,"size", [0]);
  var opresult3046 = callmethod(call3044, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult3046)) {
  lineNumber = 1214
  lineNumber = 1
  lineNumber = 1214
  var call3047 = callmethod(var_node,"unionTypes", [0]);
  lineNumber = 1215
  var call3048 = callmethod(this,"resolveIdentifiersList", [1], call3047);
  var_tmp = call3048;
  lineNumber = 1
  lineNumber = 1215
  var call3049 = callmethod(var_node,"value", [0]);
  lineNumber = 1
  lineNumber = 1215
  var call3050 = callmethod(var_node,"methods", [0]);
  lineNumber = 1216
  lineNumber = 1
  lineNumber = 1215
  var call3051 = callmethod(var_ast,"typeNode", [0]);
  var call3052 = callmethod(call3051,"new", [2], call3049, call3050);
  var_tmp2 = call3052;
  lineNumber = 1217
  lineNumber = 1216
  lineNumber = 1217
  var block3053 = Grace_allocObject();
  block3053.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3053.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3053.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3053.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3053.receiver = this;
  block3053.className = 'block<typechecker:1217>';
  block3053.real = function(
var_ut
) {
  var call3054 = callmethod(this,"findType", [1], var_ut);
  lineNumber = 1218
  lineNumber = 1
  lineNumber = 1217
  var call3055 = callmethod(var_tmp2,"unionTypes", [0]);
  var call3056 = callmethod(call3055,"push", [1], call3054);
  return call3056;
};
  var call3057 = callmethod(Grace_prelude,"for()do", [1, 1], var_tmp, block3053);
  lineNumber = 1220
  lineNumber = 1219
  var bool3058 = new GraceBoolean(false)
  var_tmp4 = bool3058;
  lineNumber = 1233
  lineNumber = 1220
  lineNumber = 1
  lineNumber = 1220
  var call3059 = callmethod(var_tmp2,"unionTypes", [0]);
  lineNumber = 1233
  var block3060 = Grace_allocObject();
  block3060.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3060.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3060.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3060.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3060.receiver = this;
  block3060.className = 'block<typechecker:1233>';
  block3060.real = function(
var_utt
) {
  lineNumber = 1234
  lineNumber = 1221
  var bool3062 = new GraceBoolean(false)
  var opresult3064 = callmethod(var_tmp4, "==", [1], bool3062);
  if (Grace_isTrue(opresult3064)) {
  lineNumber = 1223
  lineNumber = 1
  lineNumber = 1222
  var call3065 = callmethod(var_utt,"methods", [0]);
  var_tmp4 = call3065;
  var if3061 = call3065;
  } else {
  lineNumber = 1225
  var array3066 = new GraceList([
]);

  var_tmp3 = array3066;
  lineNumber = 1228
  lineNumber = 1225
  lineNumber = 1
  lineNumber = 1225
  var call3067 = callmethod(var_utt,"methods", [0]);
  lineNumber = 1228
  var block3068 = Grace_allocObject();
  block3068.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3068.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3068.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3068.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3068.receiver = this;
  block3068.className = 'block<typechecker:1228>';
  block3068.real = function(
var_utm
) {
  lineNumber = 1226
  lineNumber = 1228
  var block3069 = Grace_allocObject();
  block3069.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3069.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3069.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3069.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3069.receiver = this;
  block3069.className = 'block<typechecker:1228>';
  block3069.real = function(
var_existingmeth
) {
  lineNumber = 1230
  lineNumber = 1
  lineNumber = 1227
  var call3071 = callmethod(var_existingmeth,"value", [0]);
  lineNumber = 1230
  lineNumber = 1
  lineNumber = 1227
  var call3072 = callmethod(var_utm,"value", [0]);
  var opresult3074 = callmethod(call3071, "==", [1], call3072);
  if (Grace_isTrue(opresult3074)) {
  lineNumber = 1228
  var call3075 = callmethod(var_tmp3,"push", [1], var_existingmeth);
  var if3070 = call3075;
}
  return if3070;
};
  var call3076 = callmethod(Grace_prelude,"for()do", [1, 1], var_tmp4, block3069);
  return call3076;
};
  var call3077 = callmethod(Grace_prelude,"for()do", [1, 1], call3067, block3068);
  lineNumber = 1233
  lineNumber = 1232
  var_tmp4 = var_tmp3;
  var if3061 = var_tmp3;
}
  return if3061;
};
  var call3078 = callmethod(Grace_prelude,"for()do", [1, 1], call3059, block3060);
  lineNumber = 1241
  lineNumber = 1242
  lineNumber = 1235
  var bool3080 = new GraceBoolean(false)
  var opresult3082 = callmethod(var_tmp4, "/=", [1], bool3080);
  if (Grace_isTrue(opresult3082)) {
  lineNumber = 1236
  lineNumber = 1
  lineNumber = 1236
  var call3083 = callmethod(var_node,"value", [0]);
  lineNumber = 1237
  lineNumber = 1
  lineNumber = 1236
  var call3084 = callmethod(var_ast,"typeNode", [0]);
  var call3085 = callmethod(call3084,"new", [2], call3083, var_tmp4);
  var_tmp3 = call3085;
  lineNumber = 1238
  lineNumber = 1237
  lineNumber = 1
  lineNumber = 1237
  var call3086 = callmethod(var_tmp2,"unionTypes", [0]);
  lineNumber = 1238
  var block3087 = Grace_allocObject();
  block3087.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3087.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3087.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3087.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3087.receiver = this;
  block3087.className = 'block<typechecker:1238>';
  block3087.real = function(
var_ut
) {
  lineNumber = 1239
  lineNumber = 1
  lineNumber = 1238
  var call3088 = callmethod(var_tmp3,"unionTypes", [0]);
  var call3089 = callmethod(call3088,"push", [1], var_ut);
  return call3089;
};
  var call3090 = callmethod(Grace_prelude,"for()do", [1, 1], call3086, block3087);
  lineNumber = 1241
  lineNumber = 1240
  var_tmp2 = var_tmp3;
  var if3079 = var_tmp3;
}
  lineNumber = 1242
  var call3091 = callmethod(var_subtype,"resetType", [1], var_tmp2);
  var if3042 = call3091;
  } else {
  lineNumber = 1280
  lineNumber = 1278
  lineNumber = 1
  lineNumber = 1278
  lineNumber = 1
  lineNumber = 1243
  var call3093 = callmethod(var_node,"intersectionTypes", [0]);
  var call3094 = callmethod(call3093,"size", [0]);
  var opresult3096 = callmethod(call3094, ">", [1], new GraceNum(0));
  if (Grace_isTrue(opresult3096)) {
  lineNumber = 1244
  lineNumber = 1
  lineNumber = 1244
  var call3097 = callmethod(var_node,"intersectionTypes", [0]);
  lineNumber = 1245
  var call3098 = callmethod(this,"resolveIdentifiersList", [1], call3097);
  var_tmp = call3098;
  lineNumber = 1
  lineNumber = 1245
  var call3099 = callmethod(var_node,"value", [0]);
  lineNumber = 1
  lineNumber = 1245
  var call3100 = callmethod(var_node,"methods", [0]);
  lineNumber = 1246
  lineNumber = 1
  lineNumber = 1245
  var call3101 = callmethod(var_ast,"typeNode", [0]);
  var call3102 = callmethod(call3101,"new", [2], call3099, call3100);
  var_tmp2 = call3102;
  lineNumber = 1247
  lineNumber = 1246
  lineNumber = 1247
  var block3103 = Grace_allocObject();
  block3103.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3103.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3103.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3103.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3103.receiver = this;
  block3103.className = 'block<typechecker:1247>';
  block3103.real = function(
var_it
) {
  var call3104 = callmethod(this,"findType", [1], var_it);
  lineNumber = 1248
  lineNumber = 1
  lineNumber = 1247
  var call3105 = callmethod(var_tmp2,"intersectionTypes", [0]);
  var call3106 = callmethod(call3105,"push", [1], call3104);
  return call3106;
};
  var call3107 = callmethod(Grace_prelude,"for()do", [1, 1], var_tmp, block3103);
  lineNumber = 1250
  lineNumber = 1249
  var bool3108 = new GraceBoolean(false)
  var_tmp4 = bool3108;
  lineNumber = 1265
  lineNumber = 1250
  lineNumber = 1
  lineNumber = 1250
  var call3109 = callmethod(var_tmp2,"intersectionTypes", [0]);
  lineNumber = 1265
  var block3110 = Grace_allocObject();
  block3110.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3110.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3110.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3110.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3110.receiver = this;
  block3110.className = 'block<typechecker:1265>';
  block3110.real = function(
var_utt
) {
  lineNumber = 1269
  lineNumber = 1251
  var bool3112 = new GraceBoolean(false)
  var opresult3114 = callmethod(var_tmp4, "==", [1], bool3112);
  if (Grace_isTrue(opresult3114)) {
  lineNumber = 1253
  var array3115 = new GraceList([
]);

  var_tmp4 = array3115;
  lineNumber = 1254
  lineNumber = 1253
  lineNumber = 1
  lineNumber = 1253
  var call3116 = callmethod(var_utt,"methods", [0]);
  lineNumber = 1254
  var block3117 = Grace_allocObject();
  block3117.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3117.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3117.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3117.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3117.receiver = this;
  block3117.className = 'block<typechecker:1254>';
  block3117.real = function(
var_tm
) {
  var call3118 = callmethod(var_tmp4,"push", [1], var_tm);
  return call3118;
};
  var call3119 = callmethod(Grace_prelude,"for()do", [1, 1], call3116, block3117);
  var if3111 = call3119;
  } else {
  lineNumber = 1265
  lineNumber = 1257
  lineNumber = 1
  lineNumber = 1257
  var call3120 = callmethod(var_utt,"methods", [0]);
  lineNumber = 1265
  var block3121 = Grace_allocObject();
  block3121.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3121.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3121.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3121.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3121.receiver = this;
  block3121.className = 'block<typechecker:1265>';
  block3121.real = function(
var_utm
) {
  lineNumber = 1259
  lineNumber = 1258
  var bool3122 = new GraceBoolean(false)
  var var_imfound = bool3122;
  lineNumber = 1262
  lineNumber = 1259
  lineNumber = 1262
  var block3123 = Grace_allocObject();
  block3123.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3123.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3123.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3123.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3123.receiver = this;
  block3123.className = 'block<typechecker:1262>';
  block3123.real = function(
var_existingmeth
) {
  lineNumber = 1263
  lineNumber = 1
  lineNumber = 1260
  var call3125 = callmethod(var_existingmeth,"value", [0]);
  lineNumber = 1263
  lineNumber = 1
  lineNumber = 1260
  var call3126 = callmethod(var_utm,"value", [0]);
  var opresult3128 = callmethod(call3125, "==", [1], call3126);
  if (Grace_isTrue(opresult3128)) {
  lineNumber = 1262
  lineNumber = 1261
  var bool3129 = new GraceBoolean(true)
  var_imfound = bool3129;
  var if3124 = bool3129;
}
  return if3124;
};
  var call3130 = callmethod(Grace_prelude,"for()do", [1, 1], var_tmp4, block3123);
  lineNumber = 1265
  lineNumber = 1267
  lineNumber = 1264
  var call3132 = callmethod(var_imfound,"prefix!", [0]);
  if (Grace_isTrue(call3132)) {
  lineNumber = 1265
  var call3133 = callmethod(var_tmp4,"push", [1], var_utm);
  var if3131 = call3133;
}
  return if3131;
};
  var call3134 = callmethod(Grace_prelude,"for()do", [1, 1], call3120, block3121);
  var if3111 = call3134;
}
  return if3111;
};
  var call3135 = callmethod(Grace_prelude,"for()do", [1, 1], call3109, block3110);
  lineNumber = 1276
  lineNumber = 1277
  lineNumber = 1270
  var bool3137 = new GraceBoolean(false)
  var opresult3139 = callmethod(var_tmp4, "/=", [1], bool3137);
  if (Grace_isTrue(opresult3139)) {
  lineNumber = 1271
  lineNumber = 1
  lineNumber = 1271
  var call3140 = callmethod(var_node,"value", [0]);
  lineNumber = 1272
  lineNumber = 1
  lineNumber = 1271
  var call3141 = callmethod(var_ast,"typeNode", [0]);
  var call3142 = callmethod(call3141,"new", [2], call3140, var_tmp4);
  var_tmp3 = call3142;
  lineNumber = 1273
  lineNumber = 1272
  lineNumber = 1
  lineNumber = 1272
  var call3143 = callmethod(var_tmp2,"intersectionTypes", [0]);
  lineNumber = 1273
  var block3144 = Grace_allocObject();
  block3144.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3144.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3144.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3144.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3144.receiver = this;
  block3144.className = 'block<typechecker:1273>';
  block3144.real = function(
var_ut
) {
  lineNumber = 1274
  lineNumber = 1
  lineNumber = 1273
  var call3145 = callmethod(var_tmp3,"intersectionTypes", [0]);
  var call3146 = callmethod(call3145,"push", [1], var_ut);
  return call3146;
};
  var call3147 = callmethod(Grace_prelude,"for()do", [1, 1], call3143, block3144);
  lineNumber = 1276
  lineNumber = 1275
  var_tmp2 = var_tmp3;
  var if3136 = var_tmp3;
}
  lineNumber = 1277
  var call3148 = callmethod(var_subtype,"resetType", [1], var_tmp2);
  var if3092 = call3148;
  } else {
  lineNumber = 1280
  lineNumber = 1279
  var_tmp2 = var_node;
  var if3092 = var_node;
}
  var if3042 = if3092;
}
  var if2984 = if3042;
}
  lineNumber = 1282
  lineNumber = 1281
  return var_tmp2
  var if2979 = undefined;
}
  lineNumber = 1299
  lineNumber = 1302
  lineNumber = 1
  lineNumber = 1283
  var call3150 = callmethod(var_node,"kind", [0]);
  var string3151 = new GraceString("vardec");
  var opresult3153 = callmethod(call3150, "==", [1], string3151);
  if (Grace_isTrue(opresult3153)) {
  lineNumber = 1285
  lineNumber = 1
  lineNumber = 1284
  var call3154 = callmethod(var_node,"value", [0]);
  var_tmp = call3154;
  lineNumber = 1285
  lineNumber = 1286
  var call3155 = callmethod(this,"resolveIdentifiers", [1], var_tmp);
  var_tmp2 = call3155;
  lineNumber = 1
  lineNumber = 1286
  var call3156 = callmethod(var_node,"dtype", [0]);
  lineNumber = 1287
  var call3157 = callmethod(this,"resolveIdentifiers", [1], call3156);
  var_tmp4 = call3157;
  lineNumber = 1294
  lineNumber = 1297
  lineNumber = 1287
  var bool3159 = new GraceBoolean(false)
  var opresult3161 = callmethod(var_tmp2, "/=", [1], bool3159);
  if (Grace_isTrue(opresult3161)) {
  lineNumber = 1288
  lineNumber = 1289
  var call3162 = callmethod(this,"findType", [1], var_tmp4);
  var_tmp3 = call3162;
  lineNumber = 1290
  lineNumber = 1289
  var_tmp4 = var_tmp3;
  lineNumber = 1294
  lineNumber = 1290
  lineNumber = 1
  lineNumber = 1290
  var call3164 = callmethod(this,"expressionType", [1], var_tmp2);
  lineNumber = 1296
  var call3165 = callmethod(this,"conformsType()to", [1, 1], call3164, var_tmp3);
  var call3166 = callmethod(call3165,"not", [0]);
  if (Grace_isTrue(call3166)) {
  lineNumber = 1294
  lineNumber = 1292
  lineNumber = 1291
  var string3167 = new GraceString("initialising var of type ");
  lineNumber = 1292
  var call3168 = callmethod(var_subtype,"nicename", [1], var_tmp3);
  var opresult3170 = callmethod(string3167, "++", [1], call3168);
  lineNumber = 1293
  var string3171 = new GraceString(" with expression of type ");
  var opresult3173 = callmethod(opresult3170, "++", [1], string3171);
  lineNumber = 1294
  var call3174 = callmethod(this,"expressionType", [1], var_tmp2);
  var call3175 = callmethod(var_subtype,"nicename", [1], call3174);
  var opresult3177 = callmethod(opresult3173, "++", [1], call3175);
  lineNumber = 1291
  var call3178 = callmethod(var_util,"type_error", [1], opresult3177);
  var if3163 = call3178;
}
  var if3158 = if3163;
}
  lineNumber = 1299
  lineNumber = 1301
  lineNumber = 1297
  var opresult3181 = callmethod(var_tmp2, "/=", [1], var_tmp);
  lineNumber = 1301
  lineNumber = 1297
  lineNumber = 1301
  lineNumber = 1
  lineNumber = 1297
  var call3182 = callmethod(var_node,"dtype", [0]);
  var opresult3184 = callmethod(var_tmp4, "/=", [1], call3182);
  var opresult3186 = callmethod(opresult3181, "|", [1], opresult3184);
  if (Grace_isTrue(opresult3186)) {
  lineNumber = 1298
  lineNumber = 1
  lineNumber = 1298
  lineNumber = 1
  lineNumber = 1298
  lineNumber = 1
  lineNumber = 1298
  var call3187 = callmethod(var_node,"name", [0]);
  var call3188 = callmethod(call3187,"value", [0]);
  lineNumber = 1299
  var call3189 = callmethod(this,"findName", [1], call3188);
  var call3190 = callmethod(call3189,"dtype:=", [1], var_tmp4);
  lineNumber = 1
  lineNumber = 1299
  var call3191 = callmethod(var_node,"name", [0]);
  lineNumber = 1300
  lineNumber = 1
  lineNumber = 1299
  var call3192 = callmethod(var_ast,"varDecNode", [0]);
  var call3193 = callmethod(call3192,"new", [3], call3191, var_tmp2, var_tmp4);
  return call3193
  var if3179 = undefined;
}
  var if3149 = if3179;
}
  lineNumber = 1319
  lineNumber = 1322
  lineNumber = 1
  lineNumber = 1302
  var call3195 = callmethod(var_node,"kind", [0]);
  var string3196 = new GraceString("defdec");
  var opresult3198 = callmethod(call3195, "==", [1], string3196);
  if (Grace_isTrue(opresult3198)) {
  lineNumber = 1304
  lineNumber = 1
  lineNumber = 1303
  var call3199 = callmethod(var_node,"value", [0]);
  var_tmp = call3199;
  lineNumber = 1304
  lineNumber = 1305
  var call3200 = callmethod(this,"resolveIdentifiers", [1], var_tmp);
  var_tmp2 = call3200;
  lineNumber = 1
  lineNumber = 1305
  var call3201 = callmethod(var_node,"dtype", [0]);
  lineNumber = 1306
  var call3202 = callmethod(this,"resolveIdentifiers", [1], call3201);
  var_tmp4 = call3202;
  lineNumber = 1307
  var call3203 = callmethod(this,"findType", [1], var_tmp4);
  var_tmp3 = call3203;
  lineNumber = 1308
  var call3204 = callmethod(this,"expressionType", [1], var_tmp2);
  var var_tmp5 = call3204;
  lineNumber = 1312
  lineNumber = 1308
  lineNumber = 1
  lineNumber = 1308
  lineNumber = 1314
  var call3206 = callmethod(this,"conformsType()to", [1, 1], var_tmp5, var_tmp3);
  var call3207 = callmethod(call3206,"not", [0]);
  if (Grace_isTrue(call3207)) {
  lineNumber = 1312
  lineNumber = 1310
  lineNumber = 1309
  var string3208 = new GraceString("initialising def of type ");
  lineNumber = 1310
  var call3209 = callmethod(var_subtype,"nicename", [1], var_tmp3);
  var opresult3211 = callmethod(string3208, "++", [1], call3209);
  lineNumber = 1311
  var string3212 = new GraceString(" with expression of type ");
  var opresult3214 = callmethod(opresult3211, "++", [1], string3212);
  lineNumber = 1312
  var call3215 = callmethod(var_subtype,"nicename", [1], var_tmp5);
  var opresult3217 = callmethod(opresult3214, "++", [1], call3215);
  lineNumber = 1309
  var call3218 = callmethod(var_util,"type_error", [1], opresult3217);
  var if3205 = call3218;
}
  lineNumber = 1315
  lineNumber = 1317
  lineNumber = 1
  lineNumber = 1314
  var call3220 = callmethod(var_node,"dtype", [0]);
  var bool3221 = new GraceBoolean(false)
  var opresult3223 = callmethod(call3220, "==", [1], bool3221);
  lineNumber = 1317
  lineNumber = 1
  lineNumber = 1314
  var call3224 = callmethod(var_tmp4,"value", [0]);
  var string3225 = new GraceString("Dynamic");
  var opresult3227 = callmethod(call3224, "==", [1], string3225);
  var opresult3229 = callmethod(opresult3223, "|", [1], opresult3227);
  if (Grace_isTrue(opresult3229)) {
  lineNumber = 1315
  lineNumber = 1316
  var call3230 = callmethod(this,"expressionType", [1], var_tmp2);
  var_tmp4 = call3230;
  var if3219 = call3230;
}
  lineNumber = 1319
  lineNumber = 1321
  lineNumber = 1317
  var opresult3233 = callmethod(var_tmp2, "/=", [1], var_tmp);
  lineNumber = 1321
  lineNumber = 1317
  lineNumber = 1321
  lineNumber = 1
  lineNumber = 1317
  var call3234 = callmethod(var_node,"dtype", [0]);
  var opresult3236 = callmethod(var_tmp4, "/=", [1], call3234);
  var opresult3238 = callmethod(opresult3233, "|", [1], opresult3236);
  if (Grace_isTrue(opresult3238)) {
  lineNumber = 1318
  lineNumber = 1
  lineNumber = 1318
  lineNumber = 1
  lineNumber = 1318
  lineNumber = 1
  lineNumber = 1318
  var call3239 = callmethod(var_node,"name", [0]);
  var call3240 = callmethod(call3239,"value", [0]);
  lineNumber = 1319
  var call3241 = callmethod(this,"findName", [1], call3240);
  var call3242 = callmethod(call3241,"dtype:=", [1], var_tmp4);
  lineNumber = 1
  lineNumber = 1319
  var call3243 = callmethod(var_node,"name", [0]);
  lineNumber = 1320
  lineNumber = 1
  lineNumber = 1319
  var call3244 = callmethod(var_ast,"defDecNode", [0]);
  var call3245 = callmethod(call3244,"new", [3], call3243, var_tmp2, var_tmp4);
  return call3245
  var if3231 = undefined;
}
  var if3194 = if3231;
}
  lineNumber = 1335
  lineNumber = 1338
  lineNumber = 1
  lineNumber = 1322
  var call3247 = callmethod(var_node,"kind", [0]);
  var string3248 = new GraceString("return");
  var opresult3250 = callmethod(call3247, "==", [1], string3248);
  if (Grace_isTrue(opresult3250)) {
  lineNumber = 1324
  lineNumber = 1326
  lineNumber = 1323
  var bool3252 = new GraceBoolean(false)
  var opresult3254 = callmethod(var_currentReturnType, "==", [1], bool3252);
  if (Grace_isTrue(opresult3254)) {
  lineNumber = 1324
  var string3255 = new GraceString("return statement with no surrounding method");
  var call3256 = callmethod(var_util,"syntax_error", [1], string3255);
  var if3251 = call3256;
}
  lineNumber = 1327
  lineNumber = 1
  lineNumber = 1326
  var call3257 = callmethod(var_node,"value", [0]);
  var_tmp = call3257;
  lineNumber = 1327
  lineNumber = 1328
  var call3258 = callmethod(this,"resolveIdentifiers", [1], var_tmp);
  var_tmp2 = call3258;
  lineNumber = 1329
  var call3259 = callmethod(this,"expressionType", [1], var_tmp2);
  var_tmp3 = call3259;
  lineNumber = 1332
  lineNumber = 1329
  lineNumber = 1
  lineNumber = 1329
  lineNumber = 1334
  var call3261 = callmethod(this,"conformsType()to", [1, 1], var_tmp3, var_currentReturnType);
  var call3262 = callmethod(call3261,"not", [0]);
  if (Grace_isTrue(call3262)) {
  lineNumber = 1332
  lineNumber = 1330
  var string3263 = new GraceString("returning type ");
  lineNumber = 1332
  lineNumber = 1331
  var string3264 = new GraceString("");
  lineNumber = 1332
  lineNumber = 1
  lineNumber = 1331
  var call3265 = callmethod(var_tmp3,"value", [0]);
  var opresult3267 = callmethod(string3264, "++", [1], call3265);
  var string3268 = new GraceString(" from method of return type ");
  var opresult3270 = callmethod(opresult3267, "++", [1], string3268);
  var opresult3272 = callmethod(string3263, "++", [1], opresult3270);
  lineNumber = 1332
  lineNumber = 1
  lineNumber = 1332
  var call3273 = callmethod(var_currentReturnType,"value", [0]);
  var opresult3275 = callmethod(opresult3272, "++", [1], call3273);
  lineNumber = 1330
  var call3276 = callmethod(var_util,"type_error", [1], opresult3275);
  var if3260 = call3276;
}
  lineNumber = 1335
  lineNumber = 1337
  lineNumber = 1334
  var opresult3279 = callmethod(var_tmp2, "/=", [1], var_tmp);
  if (Grace_isTrue(opresult3279)) {
  lineNumber = 1335
  lineNumber = 1336
  lineNumber = 1
  lineNumber = 1335
  var call3280 = callmethod(var_ast,"returnNode", [0]);
  var call3281 = callmethod(call3280,"new", [1], var_tmp2);
  return call3281
  var if3277 = undefined;
}
  var if3246 = if3277;
}
  lineNumber = 1343
  lineNumber = 1346
  lineNumber = 1
  lineNumber = 1338
  var call3283 = callmethod(var_node,"kind", [0]);
  var string3284 = new GraceString("index");
  var opresult3286 = callmethod(call3283, "==", [1], string3284);
  if (Grace_isTrue(opresult3286)) {
  lineNumber = 1340
  lineNumber = 1
  lineNumber = 1339
  var call3287 = callmethod(var_node,"value", [0]);
  var_tmp = call3287;
  lineNumber = 1340
  lineNumber = 1341
  var call3288 = callmethod(this,"resolveIdentifiers", [1], var_tmp);
  var_tmp2 = call3288;
  lineNumber = 1
  lineNumber = 1341
  var call3289 = callmethod(var_node,"index", [0]);
  lineNumber = 1342
  var call3290 = callmethod(this,"resolveIdentifiers", [1], call3289);
  var_tmp3 = call3290;
  lineNumber = 1343
  lineNumber = 1345
  lineNumber = 1342
  var opresult3293 = callmethod(var_tmp2, "/=", [1], var_tmp);
  lineNumber = 1345
  lineNumber = 1342
  lineNumber = 1345
  lineNumber = 1
  lineNumber = 1342
  var call3294 = callmethod(var_node,"index", [0]);
  var opresult3296 = callmethod(var_tmp3, "/=", [1], call3294);
  var opresult3298 = callmethod(opresult3293, "|", [1], opresult3296);
  if (Grace_isTrue(opresult3298)) {
  lineNumber = 1343
  lineNumber = 1344
  lineNumber = 1
  lineNumber = 1343
  var call3299 = callmethod(var_ast,"indexNode", [0]);
  var call3300 = callmethod(call3299,"new", [2], var_tmp2, var_tmp3);
  return call3300
  var if3291 = undefined;
}
  var if3282 = if3291;
}
  lineNumber = 1350
  lineNumber = 1353
  lineNumber = 1
  lineNumber = 1346
  var call3302 = callmethod(var_node,"kind", [0]);
  var string3303 = new GraceString("op");
  var opresult3305 = callmethod(call3302, "==", [1], string3303);
  if (Grace_isTrue(opresult3305)) {
  lineNumber = 1347
  lineNumber = 1
  lineNumber = 1347
  var call3306 = callmethod(var_node,"left", [0]);
  lineNumber = 1348
  var call3307 = callmethod(this,"resolveIdentifiers", [1], call3306);
  var_tmp = call3307;
  lineNumber = 1
  lineNumber = 1348
  var call3308 = callmethod(var_node,"right", [0]);
  lineNumber = 1349
  var call3309 = callmethod(this,"resolveIdentifiers", [1], call3308);
  var_tmp2 = call3309;
  lineNumber = 1350
  lineNumber = 1352
  lineNumber = 1349
  lineNumber = 1352
  lineNumber = 1
  lineNumber = 1349
  var call3311 = callmethod(var_node,"left", [0]);
  var opresult3313 = callmethod(var_tmp, "/=", [1], call3311);
  lineNumber = 1352
  lineNumber = 1349
  lineNumber = 1352
  lineNumber = 1
  lineNumber = 1349
  var call3314 = callmethod(var_node,"right", [0]);
  var opresult3316 = callmethod(var_tmp2, "/=", [1], call3314);
  var opresult3318 = callmethod(opresult3313, "|", [1], opresult3316);
  if (Grace_isTrue(opresult3318)) {
  lineNumber = 1350
  lineNumber = 1
  lineNumber = 1350
  var call3319 = callmethod(var_node,"value", [0]);
  lineNumber = 1351
  lineNumber = 1
  lineNumber = 1350
  var call3320 = callmethod(var_ast,"opNode", [0]);
  var call3321 = callmethod(call3320,"new", [3], call3319, var_tmp, var_tmp2);
  return call3321
  var if3310 = undefined;
}
  var if3301 = if3310;
}
  lineNumber = 1359
  lineNumber = 1362
  lineNumber = 1
  lineNumber = 1353
  var call3323 = callmethod(var_node,"kind", [0]);
  var string3324 = new GraceString("if");
  var opresult3326 = callmethod(call3323, "==", [1], string3324);
  if (Grace_isTrue(opresult3326)) {
  lineNumber = 1354
  lineNumber = 1
  lineNumber = 1354
  var call3327 = callmethod(var_node,"value", [0]);
  lineNumber = 1355
  var call3328 = callmethod(this,"resolveIdentifiers", [1], call3327);
  var_tmp = call3328;
  lineNumber = 1
  lineNumber = 1355
  var call3329 = callmethod(var_node,"thenblock", [0]);
  lineNumber = 1356
  var call3330 = callmethod(this,"resolveIdentifiersList", [1], call3329);
  var_tmp2 = call3330;
  lineNumber = 1
  lineNumber = 1356
  var call3331 = callmethod(var_node,"elseblock", [0]);
  lineNumber = 1357
  var call3332 = callmethod(this,"resolveIdentifiersList", [1], call3331);
  var_tmp3 = call3332;
  lineNumber = 1359
  lineNumber = 1361
  lineNumber = 1357
  lineNumber = 1361
  lineNumber = 1
  lineNumber = 1357
  var call3334 = callmethod(var_node,"value", [0]);
  var opresult3336 = callmethod(var_tmp, "/=", [1], call3334);
  lineNumber = 1361
  lineNumber = 1357
  lineNumber = 1361
  lineNumber = 1
  lineNumber = 1357
  var call3337 = callmethod(var_node,"thenblock", [0]);
  var opresult3339 = callmethod(var_tmp2, "/=", [1], call3337);
  var opresult3341 = callmethod(opresult3336, "|", [1], opresult3339);
  lineNumber = 1361
  lineNumber = 1358
  lineNumber = 1361
  lineNumber = 1
  lineNumber = 1358
  var call3342 = callmethod(var_node,"elseblock", [0]);
  var opresult3344 = callmethod(var_tmp3, "/=", [1], call3342);
  var opresult3346 = callmethod(opresult3341, "|", [1], opresult3344);
  if (Grace_isTrue(opresult3346)) {
  lineNumber = 1359
  lineNumber = 1360
  lineNumber = 1
  lineNumber = 1359
  var call3347 = callmethod(var_ast,"ifNode", [0]);
  var call3348 = callmethod(call3347,"new", [3], var_tmp, var_tmp2, var_tmp3);
  return call3348
  var if3333 = undefined;
}
  var if3322 = if3333;
}
  lineNumber = 1366
  lineNumber = 1369
  lineNumber = 1
  lineNumber = 1362
  var call3350 = callmethod(var_node,"kind", [0]);
  var string3351 = new GraceString("while");
  var opresult3353 = callmethod(call3350, "==", [1], string3351);
  if (Grace_isTrue(opresult3353)) {
  lineNumber = 1363
  lineNumber = 1
  lineNumber = 1363
  var call3354 = callmethod(var_node,"value", [0]);
  lineNumber = 1364
  var call3355 = callmethod(this,"resolveIdentifiers", [1], call3354);
  var_tmp = call3355;
  lineNumber = 1
  lineNumber = 1364
  var call3356 = callmethod(var_node,"body", [0]);
  lineNumber = 1365
  var call3357 = callmethod(this,"resolveIdentifiersList", [1], call3356);
  var_tmp2 = call3357;
  lineNumber = 1366
  lineNumber = 1368
  lineNumber = 1365
  lineNumber = 1368
  lineNumber = 1
  lineNumber = 1365
  var call3359 = callmethod(var_node,"value", [0]);
  var opresult3361 = callmethod(var_tmp, "/=", [1], call3359);
  lineNumber = 1368
  lineNumber = 1365
  lineNumber = 1368
  lineNumber = 1
  lineNumber = 1365
  var call3362 = callmethod(var_node,"body", [0]);
  var opresult3364 = callmethod(var_tmp2, "/=", [1], call3362);
  var opresult3366 = callmethod(opresult3361, "|", [1], opresult3364);
  if (Grace_isTrue(opresult3366)) {
  lineNumber = 1366
  lineNumber = 1367
  lineNumber = 1
  lineNumber = 1366
  var call3367 = callmethod(var_ast,"whileNode", [0]);
  var call3368 = callmethod(call3367,"new", [2], var_tmp, var_tmp2);
  return call3368
  var if3358 = undefined;
}
  var if3349 = if3358;
}
  lineNumber = 1373
  lineNumber = 1376
  lineNumber = 1
  lineNumber = 1369
  var call3370 = callmethod(var_node,"kind", [0]);
  var string3371 = new GraceString("for");
  var opresult3373 = callmethod(call3370, "==", [1], string3371);
  if (Grace_isTrue(opresult3373)) {
  lineNumber = 1370
  lineNumber = 1
  lineNumber = 1370
  var call3374 = callmethod(var_node,"value", [0]);
  lineNumber = 1371
  var call3375 = callmethod(this,"resolveIdentifiers", [1], call3374);
  var_tmp = call3375;
  lineNumber = 1
  lineNumber = 1371
  var call3376 = callmethod(var_node,"body", [0]);
  lineNumber = 1372
  var call3377 = callmethod(this,"resolveIdentifiers", [1], call3376);
  var_tmp2 = call3377;
  lineNumber = 1373
  lineNumber = 1375
  lineNumber = 1372
  lineNumber = 1375
  lineNumber = 1
  lineNumber = 1372
  var call3379 = callmethod(var_node,"value", [0]);
  var opresult3381 = callmethod(var_tmp, "/=", [1], call3379);
  lineNumber = 1375
  lineNumber = 1372
  lineNumber = 1375
  lineNumber = 1
  lineNumber = 1372
  var call3382 = callmethod(var_node,"body", [0]);
  var opresult3384 = callmethod(var_tmp2, "/=", [1], call3382);
  var opresult3386 = callmethod(opresult3381, "|", [1], opresult3384);
  if (Grace_isTrue(opresult3386)) {
  lineNumber = 1373
  lineNumber = 1374
  lineNumber = 1
  lineNumber = 1373
  var call3387 = callmethod(var_ast,"forNode", [0]);
  var call3388 = callmethod(call3387,"new", [2], var_tmp, var_tmp2);
  return call3388
  var if3378 = undefined;
}
  var if3369 = if3378;
}
  lineNumber = 1376
  return var_node
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["resolveIdentifiers"] = func2459;
  lineNumber = 1491
var func3389 = function(argcv) {
  var curarg = 1;
  var var_lst = arguments[curarg];
  curarg++;
  var var_bk = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1381
  var array3390 = new GraceList([
]);

  var var_nl = array3390;
  lineNumber = 1382
  lineNumber = 1381
  var bool3391 = new GraceBoolean(false)
  var var_isobj = bool3391;
  lineNumber = 1383
  var var_tpb;
  lineNumber = 1384
  lineNumber = 1383
  var bool3392 = new GraceBoolean(false)
  var var_tmp = bool3392;
  lineNumber = 1384
  var call3393 = callmethod(this,"pushScope", [0]);
  lineNumber = 1385
  lineNumber = 1
  lineNumber = 1385
  var call3394 = callmethod(var_bk,"apply", [0]);
  lineNumber = 1388
  lineNumber = 1386
  var string3396 = new GraceString("___is_object");
  lineNumber = 1389
  lineNumber = 1
  lineNumber = 1386
  var call3397 = callmethod(var_scopes,"last", [0]);
  var call3398 = callmethod(call3397,"contains", [1], string3396);
  if (Grace_isTrue(call3398)) {
  lineNumber = 1388
  lineNumber = 1387
  var bool3399 = new GraceBoolean(true)
  var_isobj = bool3399;
  var if3395 = bool3399;
}
  lineNumber = 1393
  lineNumber = 1389
  lineNumber = 1393
  var block3400 = Grace_allocObject();
  block3400.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3400.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3400.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3400.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3400.receiver = this;
  block3400.className = 'block<typechecker:1393>';
  block3400.real = function(
var_e
) {
  lineNumber = 1395
  lineNumber = 1
  lineNumber = 1390
  var call3402 = callmethod(var_e,"kind", [0]);
  var string3403 = new GraceString("type");
  var opresult3405 = callmethod(call3402, "==", [1], string3403);
  if (Grace_isTrue(opresult3405)) {
  lineNumber = 1391
  var string3406 = new GraceString("type");
  var call3407 = callmethod(var_Binding,"new", [1], string3406);
  var_tpb = call3407;
  lineNumber = 1393
  lineNumber = 1
  lineNumber = 1392
  var call3408 = callmethod(var_tpb,"value:=", [1], var_e);
  lineNumber = 1393
  lineNumber = 1
  lineNumber = 1393
  var call3409 = callmethod(var_e,"value", [0]);
  lineNumber = 1394
  var call3410 = callmethod(this,"bindName", [2], call3409, var_tpb);
  var if3401 = call3410;
}
  return if3401;
};
  var call3411 = callmethod(Grace_prelude,"for()do", [1, 1], var_lst, block3400);
  lineNumber = 1400
  lineNumber = 1396
  lineNumber = 1400
  var block3412 = Grace_allocObject();
  block3412.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3412.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3412.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3412.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3412.receiver = this;
  block3412.className = 'block<typechecker:1400>';
  block3412.real = function(
var_e
) {
  lineNumber = 1402
  lineNumber = 1
  lineNumber = 1397
  var call3414 = callmethod(var_e,"kind", [0]);
  var string3415 = new GraceString("type");
  var opresult3417 = callmethod(call3414, "==", [1], string3415);
  if (Grace_isTrue(opresult3417)) {
  lineNumber = 1398
  lineNumber = 1
  lineNumber = 1398
  var call3418 = callmethod(var_e,"value", [0]);
  lineNumber = 1399
  var call3419 = callmethod(this,"findName", [1], call3418);
  var_tpb = call3419;
  lineNumber = 1
  lineNumber = 1399
  lineNumber = 1400
  var call3420 = callmethod(this,"resolveIdentifiers", [1], var_e);
  lineNumber = 1399
  var call3421 = callmethod(var_tpb,"value:=", [1], call3420);
  lineNumber = 1400
  lineNumber = 1
  lineNumber = 1400
  var call3422 = callmethod(var_tpb,"value", [0]);
  var call3423 = callmethod(var_subtype,"addType", [1], call3422);
  var if3413 = call3423;
}
  return if3413;
};
  var call3424 = callmethod(Grace_prelude,"for()do", [1, 1], var_lst, block3412);
  lineNumber = 1481
  lineNumber = 1403
  lineNumber = 1481
  var block3425 = Grace_allocObject();
  block3425.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3425.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3425.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3425.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3425.receiver = this;
  block3425.className = 'block<typechecker:1481>';
  block3425.real = function(
var_e
) {
  lineNumber = 1483
  lineNumber = 1404
  lineNumber = 1483
  lineNumber = 1
  lineNumber = 1404
  var call3427 = callmethod(var_e,"kind", [0]);
  var string3428 = new GraceString("vardec");
  var opresult3430 = callmethod(call3427, "==", [1], string3428);
  lineNumber = 1483
  lineNumber = 1
  lineNumber = 1404
  var call3431 = callmethod(var_e,"kind", [0]);
  var string3432 = new GraceString("defdec");
  var opresult3434 = callmethod(call3431, "==", [1], string3432);
  var opresult3436 = callmethod(opresult3430, "|", [1], opresult3434);
  var opresult3438 = callmethod(var_isobj, "&", [1], opresult3436);
  if (Grace_isTrue(opresult3438)) {
  lineNumber = 1405
  lineNumber = 1
  lineNumber = 1405
  lineNumber = 1
  lineNumber = 1405
  var call3439 = callmethod(var_e,"name", [0]);
  var call3440 = callmethod(call3439,"value", [0]);
  var string3441 = new GraceString("method");
  var call3442 = callmethod(var_Binding,"new", [1], string3441);
  lineNumber = 1406
  var call3443 = callmethod(this,"bindName", [2], call3440, call3442);
  lineNumber = 1407
  lineNumber = 1
  lineNumber = 1407
  lineNumber = 1
  lineNumber = 1407
  var call3444 = callmethod(var_e,"name", [0]);
  var call3445 = callmethod(call3444,"value", [0]);
  lineNumber = 1
  lineNumber = 1407
  lineNumber = 1
  lineNumber = 1407
  var call3447 = callmethod(var_e,"name", [0]);
  var call3448 = callmethod(call3447,"value", [0]);
  lineNumber = 1
  lineNumber = 1407
  var call3449 = callmethod(var_ast,"signaturePart", [0]);
  var call3450 = callmethod(call3449,"new", [1], call3448);
  var array3446 = new GraceList([
call3450,
]);

  lineNumber = 1
  lineNumber = 1407
  var call3451 = callmethod(var_e,"dtype", [0]);
  var call3452 = callmethod(this,"findType", [1], call3451);
  lineNumber = 1
  lineNumber = 1407
  var call3453 = callmethod(var_ast,"methodTypeNode", [0]);
  var call3454 = callmethod(call3453,"new", [3], call3445, array3446, call3452);
  lineNumber = 1408
  lineNumber = 1
  lineNumber = 1408
  lineNumber = 1
  lineNumber = 1406
  var call3455 = callmethod(var_selftypes,"last", [0]);
  var call3456 = callmethod(call3455,"methods", [0]);
  var call3457 = callmethod(call3456,"push", [1], call3454);
  var if3426 = call3457;
  } else {
  lineNumber = 1481
  lineNumber = 1416
  lineNumber = 1
  lineNumber = 1408
  var call3459 = callmethod(var_e,"kind", [0]);
  var string3460 = new GraceString("vardec");
  var opresult3462 = callmethod(call3459, "==", [1], string3460);
  if (Grace_isTrue(opresult3462)) {
  lineNumber = 1409
  lineNumber = 1
  lineNumber = 1409
  var call3463 = callmethod(var_e,"dtype", [0]);
  lineNumber = 1410
  var call3464 = callmethod(this,"findType", [1], call3463);
  var_tpb = call3464;
  lineNumber = 1411
  lineNumber = 1410
  lineNumber = 1413
  lineNumber = 1410
  var bool3466 = new GraceBoolean(false)
  var opresult3468 = callmethod(var_tpb, "==", [1], bool3466);
  var block3469 = Grace_allocObject();
  block3469.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3469.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3469.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3469.receiver = this;
  block3469.className = 'block<typechecker:1410>';
  block3469.real = function(
) {
  lineNumber = 1
  lineNumber = 1410
  var call3470 = callmethod(var_tpb,"kind", [0]);
  var string3471 = new GraceString("type");
  var opresult3473 = callmethod(call3470, "/=", [1], string3471);
  return opresult3473;
};
  var opresult3475 = callmethod(opresult3468, "||", [1], block3469);
  if (Grace_isTrue(opresult3475)) {
  lineNumber = 1411
  var string3476 = new GraceString("declared type of ");
  lineNumber = 1
  lineNumber = 1411
  lineNumber = 1
  lineNumber = 1411
  var call3477 = callmethod(var_e,"name", [0]);
  var call3478 = callmethod(call3477,"value", [0]);
  var opresult3480 = callmethod(string3476, "++", [1], call3478);
  var string3481 = new GraceString(", '");
  var opresult3483 = callmethod(opresult3480, "++", [1], string3481);
  lineNumber = 1
  lineNumber = 1411
  lineNumber = 1
  lineNumber = 1411
  var call3484 = callmethod(var_e,"dtype", [0]);
  var call3485 = callmethod(call3484,"value", [0]);
  var opresult3487 = callmethod(opresult3483, "++", [1], call3485);
  var string3488 = new GraceString("', not a type");
  var opresult3490 = callmethod(opresult3487, "++", [1], string3488);
  var call3491 = callmethod(var_util,"type_error", [1], opresult3490);
  var if3465 = call3491;
}
  lineNumber = 1413
  var string3492 = new GraceString("var");
  var call3493 = callmethod(var_Binding,"new", [1], string3492);
  var_tmp = call3493;
  lineNumber = 1415
  lineNumber = 1
  lineNumber = 1414
  var call3494 = callmethod(var_tmp,"dtype:=", [1], var_tpb);
  lineNumber = 1415
  lineNumber = 1
  lineNumber = 1415
  lineNumber = 1
  lineNumber = 1415
  var call3495 = callmethod(var_e,"name", [0]);
  var call3496 = callmethod(call3495,"value", [0]);
  lineNumber = 1416
  var call3497 = callmethod(this,"bindName", [2], call3496, var_tmp);
  var if3458 = call3497;
  } else {
  lineNumber = 1481
  lineNumber = 1424
  lineNumber = 1
  lineNumber = 1416
  var call3499 = callmethod(var_e,"kind", [0]);
  var string3500 = new GraceString("defdec");
  var opresult3502 = callmethod(call3499, "==", [1], string3500);
  if (Grace_isTrue(opresult3502)) {
  lineNumber = 1417
  lineNumber = 1
  lineNumber = 1417
  var call3503 = callmethod(var_e,"dtype", [0]);
  lineNumber = 1418
  var call3504 = callmethod(this,"findType", [1], call3503);
  var_tpb = call3504;
  lineNumber = 1419
  lineNumber = 1418
  lineNumber = 1421
  lineNumber = 1418
  var bool3506 = new GraceBoolean(false)
  var opresult3508 = callmethod(var_tpb, "==", [1], bool3506);
  var block3509 = Grace_allocObject();
  block3509.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3509.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3509.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3509.receiver = this;
  block3509.className = 'block<typechecker:1418>';
  block3509.real = function(
) {
  lineNumber = 1
  lineNumber = 1418
  var call3510 = callmethod(var_tpb,"kind", [0]);
  var string3511 = new GraceString("type");
  var opresult3513 = callmethod(call3510, "/=", [1], string3511);
  return opresult3513;
};
  var opresult3515 = callmethod(opresult3508, "||", [1], block3509);
  if (Grace_isTrue(opresult3515)) {
  lineNumber = 1419
  var string3516 = new GraceString("declared type of ");
  lineNumber = 1
  lineNumber = 1419
  lineNumber = 1
  lineNumber = 1419
  var call3517 = callmethod(var_e,"name", [0]);
  var call3518 = callmethod(call3517,"value", [0]);
  var opresult3520 = callmethod(string3516, "++", [1], call3518);
  var string3521 = new GraceString(", '");
  var opresult3523 = callmethod(opresult3520, "++", [1], string3521);
  lineNumber = 1
  lineNumber = 1419
  lineNumber = 1
  lineNumber = 1419
  var call3524 = callmethod(var_e,"dtype", [0]);
  var call3525 = callmethod(call3524,"value", [0]);
  var opresult3527 = callmethod(opresult3523, "++", [1], call3525);
  var string3528 = new GraceString("', not a type");
  var opresult3530 = callmethod(opresult3527, "++", [1], string3528);
  var call3531 = callmethod(var_util,"type_error", [1], opresult3530);
  var if3505 = call3531;
}
  lineNumber = 1421
  var string3532 = new GraceString("def");
  var call3533 = callmethod(var_Binding,"new", [1], string3532);
  var_tmp = call3533;
  lineNumber = 1423
  lineNumber = 1
  lineNumber = 1422
  var call3534 = callmethod(var_tmp,"dtype:=", [1], var_tpb);
  lineNumber = 1423
  lineNumber = 1
  lineNumber = 1423
  lineNumber = 1
  lineNumber = 1423
  var call3535 = callmethod(var_e,"name", [0]);
  var call3536 = callmethod(call3535,"value", [0]);
  lineNumber = 1424
  var call3537 = callmethod(this,"bindName", [2], call3536, var_tmp);
  var if3498 = call3537;
  } else {
  lineNumber = 1481
  lineNumber = 1430
  lineNumber = 1
  lineNumber = 1424
  var call3539 = callmethod(var_e,"kind", [0]);
  var string3540 = new GraceString("method");
  var opresult3542 = callmethod(call3539, "==", [1], string3540);
  if (Grace_isTrue(opresult3542)) {
  lineNumber = 1425
  var string3543 = new GraceString("method");
  var call3544 = callmethod(var_Binding,"new", [1], string3543);
  var var_mt = call3544;
  lineNumber = 1426
  lineNumber = 1
  lineNumber = 1426
  lineNumber = 1
  lineNumber = 1426
  var call3545 = callmethod(var_e,"dtype", [0]);
  lineNumber = 1427
  var call3546 = callmethod(this,"findType", [1], call3545);
  lineNumber = 1426
  var call3547 = callmethod(var_mt,"dtype:=", [1], call3546);
  lineNumber = 1427
  lineNumber = 1
  lineNumber = 1427
  lineNumber = 1
  lineNumber = 1427
  var call3548 = callmethod(var_e,"value", [0]);
  var call3549 = callmethod(call3548,"value", [0]);
  lineNumber = 1428
  var call3550 = callmethod(this,"bindName", [2], call3549, var_mt);
  lineNumber = 1429
  lineNumber = 1
  lineNumber = 1429
  lineNumber = 1
  lineNumber = 1429
  var call3551 = callmethod(var_e,"value", [0]);
  var call3552 = callmethod(call3551,"value", [0]);
  lineNumber = 1
  lineNumber = 1429
  var call3553 = callmethod(var_e,"signature", [0]);
  lineNumber = 1
  lineNumber = 1429
  var call3554 = callmethod(var_mt,"dtype", [0]);
  lineNumber = 1
  lineNumber = 1429
  var call3555 = callmethod(var_ast,"methodTypeNode", [0]);
  var call3556 = callmethod(call3555,"new", [3], call3552, call3553, call3554);
  lineNumber = 1430
  lineNumber = 1
  lineNumber = 1430
  lineNumber = 1
  lineNumber = 1428
  var call3557 = callmethod(var_selftypes,"last", [0]);
  var call3558 = callmethod(call3557,"methods", [0]);
  var call3559 = callmethod(call3558,"push", [1], call3556);
  var if3538 = call3559;
  } else {
  lineNumber = 1481
  lineNumber = 1436
  lineNumber = 1
  lineNumber = 1430
  var call3561 = callmethod(var_e,"kind", [0]);
  var string3562 = new GraceString("inherits");
  var opresult3564 = callmethod(call3561, "==", [1], string3562);
  if (Grace_isTrue(opresult3564)) {
  lineNumber = 1431
  lineNumber = 1
  lineNumber = 1431
  var call3565 = callmethod(var_e,"value", [0]);
  var call3566 = callmethod(this,"resolveIdentifiers", [1], call3565);
  lineNumber = 1432
  var call3567 = callmethod(this,"expressionType", [1], call3566);
  var var_stype = call3567;
  lineNumber = 1433
  lineNumber = 1
  lineNumber = 1433
  lineNumber = 1
  lineNumber = 1432
  var call3568 = callmethod(var_selftypes,"last", [0]);
  var call3569 = callmethod(call3568,"methods", [0]);
  var var_st = call3569;
  lineNumber = 1434
  lineNumber = 1433
  lineNumber = 1
  lineNumber = 1433
  var call3570 = callmethod(var_stype,"methods", [0]);
  lineNumber = 1434
  var block3571 = Grace_allocObject();
  block3571.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3571.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3571.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3571.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3571.receiver = this;
  block3571.className = 'block<typechecker:1434>';
  block3571.real = function(
var_m
) {
  var call3572 = callmethod(var_st,"push", [1], var_m);
  return call3572;
};
  var call3573 = callmethod(Grace_prelude,"for()do", [1, 1], call3570, block3571);
  var if3560 = call3573;
  } else {
  lineNumber = 1481
  lineNumber = 1478
  lineNumber = 1
  lineNumber = 1436
  var call3575 = callmethod(var_e,"kind", [0]);
  var string3576 = new GraceString("class");
  var opresult3578 = callmethod(call3575, "==", [1], string3576);
  if (Grace_isTrue(opresult3578)) {
  lineNumber = 1437
  var string3579 = new GraceString("def");
  var call3580 = callmethod(var_Binding,"new", [1], string3579);
  var_tmp = call3580;
  lineNumber = 1439
  var var_className;
  lineNumber = 1440
  var array3581 = new GraceList([
]);

  var var_classGenerics = array3581;
  var call3582 = callmethod(this,"pushScope", [0]);
  lineNumber = 1453
  lineNumber = 1456
  lineNumber = 1
  lineNumber = 1456
  lineNumber = 1
  lineNumber = 1441
  var call3584 = callmethod(var_e,"name", [0]);
  var call3585 = callmethod(call3584,"kind", [0]);
  var string3586 = new GraceString("identifier");
  var opresult3588 = callmethod(call3585, "==", [1], string3586);
  if (Grace_isTrue(opresult3588)) {
  lineNumber = 1443
  lineNumber = 1
  lineNumber = 1443
  lineNumber = 1
  lineNumber = 1442
  var call3589 = callmethod(var_e,"name", [0]);
  var call3590 = callmethod(call3589,"value", [0]);
  var_className = call3590;
  var if3583 = call3590;
  } else {
  lineNumber = 1445
  lineNumber = 1
  lineNumber = 1445
  lineNumber = 1
  lineNumber = 1445
  lineNumber = 1
  lineNumber = 1444
  var call3591 = callmethod(var_e,"name", [0]);
  var call3592 = callmethod(call3591,"value", [0]);
  var call3593 = callmethod(call3592,"value", [0]);
  var_className = call3593;
  lineNumber = 1446
  lineNumber = 1
  lineNumber = 1446
  lineNumber = 1
  lineNumber = 1445
  var call3594 = callmethod(var_e,"name", [0]);
  var call3595 = callmethod(call3594,"params", [0]);
  var_classGenerics = call3595;
  lineNumber = 1453
  lineNumber = 1446
  lineNumber = 1453
  var block3596 = Grace_allocObject();
  block3596.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3596.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3596.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3596.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3596.receiver = this;
  block3596.className = 'block<typechecker:1453>';
  block3596.real = function(
var_gp
) {
  lineNumber = 1448
  lineNumber = 1
  lineNumber = 1447
  var call3597 = callmethod(var_gp,"value", [0]);
  var var_nomnm = call3597;
  lineNumber = 1448
  var array3598 = new GraceList([
]);

  lineNumber = 1449
  lineNumber = 1
  lineNumber = 1448
  var call3599 = callmethod(var_ast,"typeNode", [0]);
  var call3600 = callmethod(call3599,"new", [2], var_nomnm, array3598);
  var var_nom = call3600;
  lineNumber = 1450
  lineNumber = 1
  lineNumber = 1449
  var bool3601 = new GraceBoolean(true)
  var call3602 = callmethod(var_nom,"nominal:=", [1], bool3601);
  lineNumber = 1450
  var call3603 = callmethod(var_subtype,"addType", [1], var_nom);
  lineNumber = 1451
  var string3604 = new GraceString("type");
  var call3605 = callmethod(var_Binding,"new", [1], string3604);
  var var_gtpb = call3605;
  lineNumber = 1453
  lineNumber = 1
  lineNumber = 1452
  var call3606 = callmethod(var_gtpb,"value:=", [1], var_nom);
  lineNumber = 1453
  lineNumber = 1
  lineNumber = 1453
  var call3607 = callmethod(var_gp,"value", [0]);
  lineNumber = 1454
  var call3608 = callmethod(this,"bindName", [2], call3607, var_gtpb);
  return call3608;
};
  var call3609 = callmethod(Grace_prelude,"for()do", [1, 1], var_classGenerics, block3596);
  var if3583 = call3609;
}
  lineNumber = 1461
  lineNumber = 1456
  lineNumber = 1
  lineNumber = 1456
  var call3610 = callmethod(var_e,"signature", [0]);
  lineNumber = 1461
  var block3611 = Grace_allocObject();
  block3611.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3611.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3611.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3611.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3611.receiver = this;
  block3611.className = 'block<typechecker:1461>';
  block3611.real = function(
var_part
) {
  lineNumber = 1458
  lineNumber = 1457
  lineNumber = 1
  lineNumber = 1457
  var call3612 = callmethod(var_part,"params", [0]);
  lineNumber = 1458
  var block3613 = Grace_allocObject();
  block3613.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3613.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3613.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3613.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3613.receiver = this;
  block3613.className = 'block<typechecker:1458>';
  block3613.real = function(
var_p
) {
  lineNumber = 1459
  var call3614 = callmethod(this,"bindIdentifier", [1], var_p);
  return call3614;
};
  var call3615 = callmethod(Grace_prelude,"for()do", [1, 1], call3612, block3613);
  lineNumber = 1461
  lineNumber = 1463
  lineNumber = 1
  lineNumber = 1460
  var call3617 = callmethod(var_part,"vararg", [0]);
  var bool3618 = new GraceBoolean(false)
  var opresult3620 = callmethod(call3617, "!=", [1], bool3618);
  if (Grace_isTrue(opresult3620)) {
  lineNumber = 1461
  lineNumber = 1
  lineNumber = 1461
  var call3621 = callmethod(var_part,"vararg", [0]);
  lineNumber = 1462
  var call3622 = callmethod(this,"bindIdentifier", [1], call3621);
  var if3616 = call3622;
}
  return if3616;
};
  var call3623 = callmethod(Grace_prelude,"for()do", [1, 1], call3610, block3611);
  lineNumber = 1465
  lineNumber = 1464
  lineNumber = 1
  lineNumber = 1464
  var call3624 = callmethod(var_e,"value", [0]);
  lineNumber = 1465
  lineNumber = 1
  lineNumber = 1465
  var call3625 = callmethod(var_e,"superclass", [0]);
  lineNumber = 1
  lineNumber = 1464
  var call3626 = callmethod(var_ast,"objectNode", [0]);
  var call3627 = callmethod(call3626,"new", [2], call3624, call3625);
  lineNumber = 1466
  var call3628 = callmethod(this,"expressionType", [1], call3627);
  var var_classInstanceType__39__ = call3628;
  var call3629 = callmethod(this,"popScope", [0]);
  lineNumber = 1468
  lineNumber = 1467
  var string3630 = new GraceString("InstanceOf<");
  var opresult3632 = callmethod(string3630, "++", [1], var_className);
  var string3633 = new GraceString(">");
  var opresult3635 = callmethod(opresult3632, "++", [1], string3633);
  lineNumber = 1468
  lineNumber = 1
  lineNumber = 1468
  var call3636 = callmethod(var_classInstanceType__39__,"methods", [0]);
  lineNumber = 1469
  lineNumber = 1
  lineNumber = 1467
  var call3637 = callmethod(var_ast,"typeNode", [0]);
  var call3638 = callmethod(call3637,"new", [2], opresult3635, call3636);
  var var_classInstanceType = call3638;
  lineNumber = 1471
  lineNumber = 1469
  var string3639 = new GraceString("ClassOf<");
  var opresult3641 = callmethod(string3639, "++", [1], var_className);
  var string3642 = new GraceString(">");
  var opresult3644 = callmethod(opresult3641, "++", [1], string3642);
  lineNumber = 1471
  lineNumber = 1470
  lineNumber = 1
  lineNumber = 1470
  lineNumber = 1
  lineNumber = 1470
  var call3646 = callmethod(var_e,"constructor", [0]);
  var call3647 = callmethod(call3646,"value", [0]);
  lineNumber = 1
  lineNumber = 1470
  var call3648 = callmethod(var_e,"signature", [0]);
  lineNumber = 1471
  lineNumber = 1472
  lineNumber = 1
  lineNumber = 1470
  var call3649 = callmethod(var_ast,"methodTypeNode", [0]);
  var call3650 = callmethod(call3649,"new", [3], call3647, call3648, var_classInstanceType);
  var array3645 = new GraceList([
call3650,
]);

  lineNumber = 1473
  lineNumber = 1
  lineNumber = 1469
  var call3651 = callmethod(var_ast,"typeNode", [0]);
  var call3652 = callmethod(call3651,"new", [2], opresult3644, array3645);
  var var_classItselfType = call3652;
  lineNumber = 1474
  lineNumber = 1
  lineNumber = 1473
  var call3653 = callmethod(var_classItselfType,"generics:=", [1], var_classGenerics);
  lineNumber = 1474
  var call3654 = callmethod(var_subtype,"addType", [1], var_classInstanceType);
  lineNumber = 1475
  var call3655 = callmethod(var_subtype,"addType", [1], var_classItselfType);
  lineNumber = 1477
  lineNumber = 1
  lineNumber = 1476
  var call3656 = callmethod(var_tmp,"dtype:=", [1], var_classItselfType);
  lineNumber = 1477
  lineNumber = 1478
  var call3657 = callmethod(this,"bindName", [2], var_className, var_tmp);
  var if3574 = call3657;
  } else {
  lineNumber = 1481
  lineNumber = 1483
  lineNumber = 1
  lineNumber = 1478
  var call3659 = callmethod(var_e,"kind", [0]);
  var string3660 = new GraceString("import");
  var opresult3662 = callmethod(call3659, "==", [1], string3660);
  if (Grace_isTrue(opresult3662)) {
  lineNumber = 1479
  var string3663 = new GraceString("def");
  var call3664 = callmethod(var_Binding,"new", [1], string3663);
  var_tmp = call3664;
  lineNumber = 1481
  lineNumber = 1
  lineNumber = 1480
  var call3665 = callmethod(var_tmp,"dtype:=", [1], var_DynamicType);
  lineNumber = 1481
  lineNumber = 1
  lineNumber = 1481
  lineNumber = 1
  lineNumber = 1481
  var call3666 = callmethod(var_e,"value", [0]);
  var call3667 = callmethod(call3666,"value", [0]);
  lineNumber = 1482
  var call3668 = callmethod(this,"bindName", [2], call3667, var_tmp);
  var if3658 = call3668;
}
  var if3574 = if3658;
}
  var if3560 = if3574;
}
  var if3538 = if3560;
}
  var if3498 = if3538;
}
  var if3458 = if3498;
}
  var if3426 = if3458;
}
  return if3426;
};
  var call3669 = callmethod(Grace_prelude,"for()do", [1, 1], var_lst, block3425);
  lineNumber = 1488
  lineNumber = 1484
  lineNumber = 1488
  var block3670 = Grace_allocObject();
  block3670.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3670.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3670.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3670.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3670.receiver = this;
  block3670.className = 'block<typechecker:1488>';
  block3670.real = function(
var_e
) {
  lineNumber = 1485
  lineNumber = 1
  lineNumber = 1485
  var call3671 = callmethod(var_e,"line", [0]);
  var call3672 = callmethod(var_util,"setline", [1], call3671);
  lineNumber = 1486
  lineNumber = 1487
  var call3673 = callmethod(this,"resolveIdentifiers", [1], var_e);
  var_tmp = call3673;
  lineNumber = 1488
  var call3674 = callmethod(this,"expressionType", [1], var_tmp);
  var call3675 = callmethod(var_nl,"push", [1], var_tmp);
  return call3675;
};
  var call3676 = callmethod(Grace_prelude,"for()do", [1, 1], var_lst, block3670);
  lineNumber = 1490
  var call3677 = callmethod(this,"popScope", [0]);
  lineNumber = 1491
  return var_nl
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["resolveIdentifiersList()withBlock"] = func3389;
  lineNumber = 1495
var func3678 = function(argcv) {
  var curarg = 1;
  var var_lst = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1494
  lineNumber = 1495
  var block3679 = Grace_allocObject();
  block3679.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3679.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3679.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3679.receiver = this;
  block3679.className = 'block<typechecker:1495>';
  block3679.real = function(
) {
  return undefined;
};
  var call3680 = callmethod(this,"resolveIdentifiersList()withBlock", [1, 1], var_lst, block3679);
  return call3680
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["resolveIdentifiersList"] = func3678;
  lineNumber = 1497
  var string3681 = new GraceString("while()do");
  var string3682 = new GraceString("method");
  var call3683 = callmethod(var_Binding,"new", [1], string3682);
  var call3684 = callmethod(var_preludeObj,"put", [2], string3681, call3683);
  lineNumber = 1498
  var string3685 = new GraceString("for()do");
  var string3686 = new GraceString("method");
  var call3687 = callmethod(var_Binding,"new", [1], string3686);
  var call3688 = callmethod(var_preludeObj,"put", [2], string3685, call3687);
  lineNumber = 1499
  var string3689 = new GraceString("octets");
  var string3690 = new GraceString("method");
  var call3691 = callmethod(var_Binding,"new", [1], string3690);
  var call3692 = callmethod(var_preludeObj,"put", [2], string3689, call3691);
  lineNumber = 1572
var func3693 = function(argcv) {
  var curarg = 1;
  var var_values = arguments[curarg];
  curarg++;
  var returnTarget = invocationCount;
  invocationCount++;
  try {
  lineNumber = 1501
  var string3694 = new GraceString("typechecking.");
  var call3695 = callmethod(var_util,"log_verbose", [1], string3694);
  lineNumber = 1509
  lineNumber = 1505
  var block3696 = Grace_allocObject();
  block3696.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3696.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3696.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3696.receiver = this;
  block3696.className = 'block<typechecker:1505>';
  block3696.real = function(
) {
  lineNumber = 1503
  var string3698 = new GraceString("NativePrelude");
  lineNumber = 1508
  lineNumber = 1
  lineNumber = 1503
  var call3699 = callmethod(var_util,"extensions", [0]);
  var call3700 = callmethod(call3699,"contains", [1], string3698);
  var call3701 = callmethod(call3700,"prefix!", [0]);
  if (Grace_isTrue(call3701)) {
  lineNumber = 1505
  lineNumber = 1504
  lineNumber = 1
  var call3702 = callmethod(Grace_prelude,"_methods", [0]);
  lineNumber = 1505
  var block3703 = Grace_allocObject();
  block3703.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3703.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3703.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3703.methods["match"] = function(argcv, o) {
    var args = Array.prototype.slice.call(arguments, 1);
    var r = this.real.apply(this.receiver, args);
    return new GraceSuccessfulMatch(r, []);
  }
  block3703.receiver = this;
  block3703.className = 'block<typechecker:1505>';
  block3703.real = function(
var_mn
) {
  var string3704 = new GraceString("method");
  var call3705 = callmethod(var_Binding,"new", [1], string3704);
  var call3706 = callmethod(var_preludeObj,"put", [2], var_mn, call3705);
  return call3706;
};
  var call3707 = callmethod(Grace_prelude,"for()do", [1, 1], call3702, block3703);
  var if3697 = call3707;
}
  return if3697;
};
  lineNumber = 1509
  var block3708 = Grace_allocObject();
  block3708.methods["apply"] = function() {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.real.apply(this.receiver, args);
  }
  block3708.methods["applyIndirectly"] = function(argcv, a) {
    return this.real.apply(this.receiver, a._value);
  }
  block3708.methods["outer"] = function() {
    return callmethod(this.receiver, 'outer', [0]);
  }
  block3708.receiver = this;
  block3708.className = 'block<typechecker:1509>';
  block3708.real = function(
) {
  return undefined;
};
  lineNumber = 1502
  var call3709 = callmethod(var_util,"runOnNew()else", [1, 1], block3696, block3708);
  lineNumber = 1510
  var var_btmp;
  var string3710 = new GraceString("print");
  var string3711 = new GraceString("method");
  var call3712 = callmethod(var_Binding,"new", [1], string3711);
  lineNumber = 1511
  var call3713 = callmethod(this,"bindName", [2], string3710, call3712);
  var string3714 = new GraceString("length");
  var string3715 = new GraceString("method");
  var call3716 = callmethod(var_Binding,"new", [1], string3715);
  lineNumber = 1512
  var call3717 = callmethod(this,"bindName", [2], string3714, call3716);
  var string3718 = new GraceString("escapestring");
  var string3719 = new GraceString("method");
  var call3720 = callmethod(var_Binding,"new", [1], string3719);
  lineNumber = 1513
  var call3721 = callmethod(this,"bindName", [2], string3718, call3720);
  lineNumber = 1514
  lineNumber = 1
  lineNumber = 1513
  var call3722 = callmethod(var_selftypes,"last", [0]);
  var var_modtype = call3722;
  lineNumber = 1515
  lineNumber = 1514
  var string3723 = new GraceString("print");
  lineNumber = 1515
  var string3725 = new GraceString("print");
  var array3726 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 1515
  var call3727 = callmethod(var_ast,"signaturePart", [0]);
  var call3728 = callmethod(call3727,"new", [2], string3725, array3726);
  var array3724 = new GraceList([
call3728,
]);

  lineNumber = 1
  lineNumber = 1514
  var call3729 = callmethod(var_ast,"methodTypeNode", [0]);
  var call3730 = callmethod(call3729,"new", [3], string3723, array3724, var_NoneType);
  lineNumber = 1516
  lineNumber = 1
  lineNumber = 1514
  var call3731 = callmethod(var_modtype,"methods", [0]);
  var call3732 = callmethod(call3731,"push", [1], call3730);
  lineNumber = 1517
  lineNumber = 1516
  var string3733 = new GraceString("length");
  lineNumber = 1517
  var string3735 = new GraceString("length");
  var array3736 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 1517
  var call3737 = callmethod(var_ast,"signaturePart", [0]);
  var call3738 = callmethod(call3737,"new", [2], string3735, array3736);
  var array3734 = new GraceList([
call3738,
]);

  lineNumber = 1
  lineNumber = 1516
  var call3739 = callmethod(var_ast,"methodTypeNode", [0]);
  var call3740 = callmethod(call3739,"new", [3], string3733, array3734, var_NumberType);
  lineNumber = 1518
  lineNumber = 1
  lineNumber = 1516
  var call3741 = callmethod(var_modtype,"methods", [0]);
  var call3742 = callmethod(call3741,"push", [1], call3740);
  lineNumber = 1519
  lineNumber = 1518
  var string3743 = new GraceString("escapestring");
  lineNumber = 1519
  var string3745 = new GraceString("escapestring");
  var array3746 = new GraceList([
var_StringOther,
]);

  lineNumber = 1
  lineNumber = 1519
  var call3747 = callmethod(var_ast,"signaturePart", [0]);
  var call3748 = callmethod(call3747,"new", [2], string3745, array3746);
  var array3744 = new GraceList([
call3748,
]);

  lineNumber = 1
  lineNumber = 1518
  var call3749 = callmethod(var_ast,"methodTypeNode", [0]);
  var call3750 = callmethod(call3749,"new", [3], string3743, array3744, var_StringType);
  lineNumber = 1520
  lineNumber = 1
  lineNumber = 1518
  var call3751 = callmethod(var_modtype,"methods", [0]);
  var call3752 = callmethod(call3751,"push", [1], call3750);
  lineNumber = 1521
  lineNumber = 1520
  var string3753 = new GraceString("raise");
  lineNumber = 1521
  var string3755 = new GraceString("raise");
  var array3756 = new GraceList([
var_TopOther,
]);

  lineNumber = 1
  lineNumber = 1521
  var call3757 = callmethod(var_ast,"signaturePart", [0]);
  var call3758 = callmethod(call3757,"new", [2], string3755, array3756);
  var array3754 = new GraceList([
call3758,
]);

  lineNumber = 1
  lineNumber = 1520
  var call3759 = callmethod(var_ast,"methodTypeNode", [0]);
  var call3760 = callmethod(call3759,"new", [3], string3753, array3754, var_NoneType);
  lineNumber = 1522
  lineNumber = 1
  lineNumber = 1520
  var call3761 = callmethod(var_modtype,"methods", [0]);
  var call3762 = callmethod(call3761,"push", [1], call3760);
  lineNumber = 1522
  var string3763 = new GraceString("HashMap");
  var string3764 = new GraceString("def");
  var call3765 = callmethod(var_Binding,"new", [1], string3764);
  lineNumber = 1523
  var call3766 = callmethod(this,"bindName", [2], string3763, call3765);
  var string3767 = new GraceString("MatchFailed");
  var string3768 = new GraceString("def");
  var call3769 = callmethod(var_Binding,"new", [1], string3768);
  lineNumber = 1524
  var call3770 = callmethod(this,"bindName", [2], string3767, call3769);
  var string3771 = new GraceString("void");
  var string3772 = new GraceString("def");
  var call3773 = callmethod(var_Binding,"new", [1], string3772);
  lineNumber = 1525
  var call3774 = callmethod(this,"bindName", [2], string3771, call3773);
  var string3775 = new GraceString("def");
  var call3776 = callmethod(var_Binding,"new", [1], string3775);
  var_btmp = call3776;
  lineNumber = 1527
  lineNumber = 1
  lineNumber = 1526
  var call3777 = callmethod(var_btmp,"dtype:=", [1], var_NothingType);
  lineNumber = 1527
  var string3778 = new GraceString("nothing");
  lineNumber = 1528
  var call3779 = callmethod(this,"bindName", [2], string3778, var_btmp);
  var string3780 = new GraceString("true");
  var string3781 = new GraceString("def");
  var call3782 = callmethod(var_Binding,"new", [1], string3781);
  lineNumber = 1529
  var call3783 = callmethod(this,"bindName", [2], string3780, call3782);
  var string3784 = new GraceString("false");
  var string3785 = new GraceString("def");
  var call3786 = callmethod(var_Binding,"new", [1], string3785);
  lineNumber = 1530
  var call3787 = callmethod(this,"bindName", [2], string3784, call3786);
  var string3788 = new GraceString("...");
  var string3789 = new GraceString("def");
  var call3790 = callmethod(var_Binding,"new", [1], string3789);
  lineNumber = 1531
  var call3791 = callmethod(this,"bindName", [2], string3788, call3790);
  var string3792 = new GraceString("self");
  var string3793 = new GraceString("def");
  var call3794 = callmethod(var_Binding,"new", [1], string3793);
  lineNumber = 1532
  var call3795 = callmethod(this,"bindName", [2], string3792, call3794);
  var string3796 = new GraceString("super");
  var string3797 = new GraceString("def");
  var call3798 = callmethod(var_Binding,"new", [1], string3797);
  lineNumber = 1533
  var call3799 = callmethod(this,"bindName", [2], string3796, call3798);
  var string3800 = new GraceString("raise");
  var string3801 = new GraceString("method");
  var call3802 = callmethod(var_Binding,"new", [1], string3801);
  lineNumber = 1534
  var call3803 = callmethod(this,"bindName", [2], string3800, call3802);
  var string3804 = new GraceString("outer");
  var string3805 = new GraceString("method");
  var call3806 = callmethod(var_Binding,"new", [1], string3805);
  lineNumber = 1535
  var call3807 = callmethod(this,"bindName", [2], string3804, call3806);
  var string3808 = new GraceString("prelude");
  var string3809 = new GraceString("def");
  var call3810 = callmethod(var_Binding,"new", [1], string3809);
  lineNumber = 1536
  var call3811 = callmethod(this,"bindName", [2], string3808, call3810);
  var string3812 = new GraceString("_prelude");
  var string3813 = new GraceString("def");
  var call3814 = callmethod(var_Binding,"new", [1], string3813);
  lineNumber = 1537
  var call3815 = callmethod(this,"bindName", [2], string3812, call3814);
  var string3816 = new GraceString("type");
  var call3817 = callmethod(var_Binding,"new", [1], string3816);
  var_btmp = call3817;
  lineNumber = 1539
  lineNumber = 1
  lineNumber = 1538
  var call3818 = callmethod(var_btmp,"value:=", [1], var_DynamicType);
  lineNumber = 1539
  var string3819 = new GraceString("Dynamic");
  lineNumber = 1540
  var call3820 = callmethod(this,"bindName", [2], string3819, var_btmp);
  var string3821 = new GraceString("type");
  var call3822 = callmethod(var_Binding,"new", [1], string3821);
  var_btmp = call3822;
  lineNumber = 1542
  lineNumber = 1
  lineNumber = 1541
  var call3823 = callmethod(var_btmp,"value:=", [1], var_NumberType);
  lineNumber = 1542
  var string3824 = new GraceString("Number");
  lineNumber = 1543
  var call3825 = callmethod(this,"bindName", [2], string3824, var_btmp);
  var string3826 = new GraceString("type");
  var call3827 = callmethod(var_Binding,"new", [1], string3826);
  var_btmp = call3827;
  lineNumber = 1545
  lineNumber = 1
  lineNumber = 1544
  var call3828 = callmethod(var_btmp,"value:=", [1], var_StringType);
  lineNumber = 1545
  var string3829 = new GraceString("String");
  lineNumber = 1546
  var call3830 = callmethod(this,"bindName", [2], string3829, var_btmp);
  var string3831 = new GraceString("type");
  var call3832 = callmethod(var_Binding,"new", [1], string3831);
  var_btmp = call3832;
  lineNumber = 1548
  lineNumber = 1
  lineNumber = 1547
  var call3833 = callmethod(var_btmp,"value:=", [1], var_BooleanType);
  lineNumber = 1548
  var string3834 = new GraceString("Boolean");
  lineNumber = 1549
  var call3835 = callmethod(this,"bindName", [2], string3834, var_btmp);
  var string3836 = new GraceString("type");
  var call3837 = callmethod(var_Binding,"new", [1], string3836);
  var_btmp = call3837;
  lineNumber = 1551
  lineNumber = 1
  lineNumber = 1550
  var call3838 = callmethod(var_btmp,"value:=", [1], var_ListType);
  lineNumber = 1551
  var string3839 = new GraceString("List");
  lineNumber = 1552
  var call3840 = callmethod(this,"bindName", [2], string3839, var_btmp);
  var string3841 = new GraceString("type");
  var call3842 = callmethod(var_Binding,"new", [1], string3841);
  var_btmp = call3842;
  lineNumber = 1554
  lineNumber = 1
  lineNumber = 1553
  var call3843 = callmethod(var_btmp,"value:=", [1], var_VoidType);
  lineNumber = 1554
  var string3844 = new GraceString("Void");
  lineNumber = 1555
  var call3845 = callmethod(this,"bindName", [2], string3844, var_btmp);
  var string3846 = new GraceString("type");
  var call3847 = callmethod(var_Binding,"new", [1], string3846);
  var_btmp = call3847;
  lineNumber = 1557
  lineNumber = 1
  lineNumber = 1556
  var call3848 = callmethod(var_btmp,"value:=", [1], var_NothingType);
  lineNumber = 1557
  var string3849 = new GraceString("Nothing");
  lineNumber = 1558
  var call3850 = callmethod(this,"bindName", [2], string3849, var_btmp);
  var string3851 = new GraceString("type");
  var call3852 = callmethod(var_Binding,"new", [1], string3851);
  var_btmp = call3852;
  lineNumber = 1559
  var string3853 = new GraceString("None");
  lineNumber = 1560
  var call3854 = callmethod(this,"bindName", [2], string3853, var_btmp);
  var string3855 = new GraceString("type");
  var call3856 = callmethod(var_Binding,"new", [1], string3855);
  var_btmp = call3856;
  lineNumber = 1562
  lineNumber = 1
  lineNumber = 1561
  var call3857 = callmethod(var_btmp,"value:=", [1], var_BlockType);
  lineNumber = 1562
  var string3858 = new GraceString("Block");
  lineNumber = 1563
  var call3859 = callmethod(this,"bindName", [2], string3858, var_btmp);
  var call3860 = callmethod(var_subtype,"addType", [1], var_DynamicType);
  lineNumber = 1564
  var call3861 = callmethod(var_subtype,"addType", [1], var_NumberType);
  lineNumber = 1565
  var call3862 = callmethod(var_subtype,"addType", [1], var_StringType);
  lineNumber = 1566
  var call3863 = callmethod(var_subtype,"addType", [1], var_BooleanType);
  lineNumber = 1567
  var call3864 = callmethod(var_subtype,"addType", [1], var_ListType);
  lineNumber = 1568
  var call3865 = callmethod(var_subtype,"addType", [1], var_VoidType);
  lineNumber = 1569
  var call3866 = callmethod(var_subtype,"addType", [1], var_NoneType);
  lineNumber = 1570
  var call3867 = callmethod(var_subtype,"addType", [1], var_NothingType);
  lineNumber = 1571
  var call3868 = callmethod(var_subtype,"addType", [1], var_BlockType);
  lineNumber = 1572
  lineNumber = 1573
  var call3869 = callmethod(this,"resolveIdentifiersList", [1], var_values);
  return call3869
  } catch(e) {
    if ((e.exctype == 'return') && (e.target == returnTarget)) {
      return e.returnvalue;
    } else {
      throw e;
    }
  }
}
  this.methods["typecheck"] = func3693;
  return this;
}
